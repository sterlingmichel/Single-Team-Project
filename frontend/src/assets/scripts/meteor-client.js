//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////

let DDP_DEFAULT_CONNECTION_URL;
let NODE_ENV;
let SNENV;


switch (location.hostname) {
  case 'provider.mysantenou.com':
  case 'www.mysantenou.com':
  case 'mysantenou.com':
  case 'c-mysantenou.com':
  case 'kinetics.mysantenou.com':
  case 'auto.mysantenou.com':
  case 'workspace.mysantenou.com':
  case 'telehealth.mysantenou.com':
    DDP_DEFAULT_CONNECTION_URL = 'https://snapi.mysantenou.com';
    NODE_ENV = 'production';
    SNENV = 'prod';
    break;
  case 'demo.mysantenou.com':
  case 'demo-www.mysantenou.com':
  case 'demo-c.mysantenou.com':
  case 'demo-kinetics.mysantenou.com':
  case 'demo-auto.mysantenou.com':
  case 'demo-workspace.mysantenou.com':
  case 'demo-telehealth.mysantenou.com':
    DDP_DEFAULT_CONNECTION_URL = 'https://snapi-demo.mysantenou.com';
    NODE_ENV = 'production';
    SNENV = 'demo';
    break;
  case 'md-dev.mysantenou.com':
  case 'dev-www.mysantenou.com':
  case 'dev-c.mysantenou.com':
  case 'dev-kinetics.mysantenou.com':
  case 'dev-auto.mysantenou.com':
  case 'dev-workspace.mysantenou.com':
  case 'dev-telehealth.mysantenou.com':
    DDP_DEFAULT_CONNECTION_URL = 'https://snapi-dev.mysantenou.com';
    NODE_ENV = 'development';
    SNENV = 'dev';
    break;
  case 'localhost':
  default:
    DDP_DEFAULT_CONNECTION_URL = 'http://localhost:9000';
    // DDP_DEFAULT_CONNECTION_URL = 'https://snapi-dev.mysantenou.com';
    NODE_ENV = 'development';
    SNENV = 'local';
    break;
}


(function () {

  /* Package-scope variables */
  var exports, _;

  (function () {

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                       //
    // packages/underscore/pre.js                                                                            //
    //                                                                                                       //
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Define an object named exports. This will cause underscore.js to put `_` as a                         // 1
    // field on it, instead of in the global namespace.  See also post.js.                                   // 2
    exports = {};                                                                                            // 3
    // 4
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////

  }).call(this);

  (function () {

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                       //
    // packages/underscore/underscore.js                                                                     //
    //                                                                                                       //
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    //     Underscore.js 1.5.2                                                                               // 1
    //     http://underscorejs.org                                                                           // 2
    //     (c) 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors                // 3
    //     Underscore may be freely distributed under the MIT license.                                       // 4
    // 5
    (function () {                                                                                            // 6
      // 7
      // Baseline setup                                                                                      // 8
      // --------------                                                                                      // 9
      // 10
      // Establish the root object, `window` in the browser, or `exports` on the server.                     // 11
      var root = this;                                                                                       // 12
      // 13
      // Save the previous value of the `_` variable.                                                        // 14
      var previousUnderscore = root._;                                                                       // 15
      // 16
      // Establish the object that gets returned to break out of a loop iteration.                           // 17
      var breaker = {};                                                                                      // 18
      // 19
      // Save bytes in the minified (but not gzipped) version:                                               // 20
      var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;         // 21
      // 22
      // Create quick reference variables for speed access to core prototypes.                               // 23
      var                                                                                                    // 24
        push = ArrayProto.push,                                                                  // 25
        slice = ArrayProto.slice,                                                                 // 26
        concat = ArrayProto.concat,                                                                // 27
        toString = ObjProto.toString,                                                                // 28
        hasOwnProperty = ObjProto.hasOwnProperty;                                                          // 29
      // 30
      // All **ECMAScript 5** native function implementations that we hope to use                            // 31
      // are declared here.                                                                                  // 32
      var                                                                                                    // 33
        nativeForEach = ArrayProto.forEach,                                                             // 34
        nativeMap = ArrayProto.map,                                                                 // 35
        nativeReduce = ArrayProto.reduce,                                                              // 36
        nativeReduceRight = ArrayProto.reduceRight,                                                         // 37
        nativeFilter = ArrayProto.filter,                                                              // 38
        nativeEvery = ArrayProto.every,                                                               // 39
        nativeSome = ArrayProto.some,                                                                // 40
        nativeIndexOf = ArrayProto.indexOf,                                                             // 41
        nativeLastIndexOf = ArrayProto.lastIndexOf,                                                         // 42
        nativeIsArray = Array.isArray,                                                                  // 43
        nativeKeys = Object.keys,                                                                    // 44
        nativeBind = FuncProto.bind;                                                                 // 45
      // 46
      // Create a safe reference to the Underscore object for use below.                                     // 47
      var _ = function (obj) {                                                                                // 48
        if (obj instanceof _) return obj;                                                                    // 49
        if (!(this instanceof _)) return new _(obj);                                                         // 50
        this._wrapped = obj;                                                                                 // 51
      };                                                                                                     // 52
      // 53
      // Export the Underscore object for **Node.js**, with                                                  // 54
      // backwards-compatibility for the old `require()` API. If we're in                                    // 55
      // the browser, add `_` as a global object via a string identifier,                                    // 56
      // for Closure Compiler "advanced" mode.                                                               // 57
      if (typeof exports !== 'undefined') {                                                                  // 58
        if (typeof module !== 'undefined' && module.exports) {                                               // 59
          exports = module.exports = _;                                                                      // 60
        }                                                                                                    // 61
        exports._ = _;                                                                                       // 62
      } else {                                                                                               // 63
        root._ = _;                                                                                          // 64
      }                                                                                                      // 65
      // 66
      // Current version.                                                                                    // 67
      _.VERSION = '1.5.2';                                                                                   // 68
      // 69
      // Collection Functions                                                                                // 70
      // --------------------                                                                                // 71
      // 72
      // METEOR CHANGE: Define _isArguments instead of depending on                                          // 73
      // _.isArguments which is defined using each. In looksLikeArray                                        // 74
      // (which each depends on), we then use _isArguments instead of                                        // 75
      // _.isArguments.                                                                                      // 76
      var _isArguments = function (obj) {                                                                    // 77
        return toString.call(obj) === '[object Arguments]';                                                  // 78
      };                                                                                                     // 79
      // Define a fallback version of the method in browsers (ahem, IE), where                               // 80
      // there isn't any inspectable "Arguments" type.                                                       // 81
      if (!_isArguments(arguments)) {                                                                        // 82
        _isArguments = function (obj) {                                                                      // 83
          return !!(obj && hasOwnProperty.call(obj, 'callee') && typeof obj.callee === 'function');          // 84
        };                                                                                                   // 85
      }                                                                                                      // 86
      // 87
      // METEOR CHANGE: _.each({length: 5}) should be treated like an object, not an                         // 88
      // array. This looksLikeArray function is introduced by Meteor, and replaces                           // 89
      // all instances of `obj.length === +obj.length`.                                                      // 90
      // https://github.com/meteor/meteor/issues/594                                                         // 91
      // https://github.com/jashkenas/underscore/issues/770                                                  // 92
      var looksLikeArray = function (obj) {                                                                  // 93
        return (obj.length === +obj.length                                                                   // 94
          // _.isArguments not yet necessarily defined here                                            // 95
          && (_isArguments(obj) || obj.constructor !== Object));                                       // 96
      };                                                                                                     // 97
      // 98
      // The cornerstone, an `each` implementation, aka `forEach`.                                           // 99
      // Handles objects with the built-in `forEach`, arrays, and raw objects.                               // 100
      // Delegates to **ECMAScript 5**'s native `forEach` if available.                                      // 101
      var each = _.each = _.forEach = function (obj, iterator, context) {                                     // 102
        if (obj == null) return;                                                                             // 103
        if (nativeForEach && obj.forEach === nativeForEach) {                                                // 104
          obj.forEach(iterator, context);                                                                    // 105
        } else if (looksLikeArray(obj)) {                                                                    // 106
          for (var i = 0, length = obj.length; i < length; i++) {                                            // 107
            if (iterator.call(context, obj[i], i, obj) === breaker) return;                                  // 108
          }                                                                                                  // 109
        } else {                                                                                             // 110
          var keys = _.keys(obj);                                                                            // 111
          for (var i = 0, length = keys.length; i < length; i++) {                                           // 112
            if (iterator.call(context, obj[keys[i]], keys[i], obj) === breaker) return;                      // 113
          }                                                                                                  // 114
        }                                                                                                    // 115
      };                                                                                                     // 116
      // 117
      // Return the results of applying the iterator to each element.                                        // 118
      // Delegates to **ECMAScript 5**'s native `map` if available.                                          // 119
      _.map = _.collect = function (obj, iterator, context) {                                                 // 120
        var results = [];                                                                                    // 121
        if (obj == null) return results;                                                                     // 122
        if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);                           // 123
        each(obj, function (value, index, list) {                                                             // 124
          results.push(iterator.call(context, value, index, list));                                          // 125
        });                                                                                                  // 126
        return results;                                                                                      // 127
      };                                                                                                     // 128
      // 129
      var reduceError = 'Reduce of empty array with no initial value';                                       // 130
      // 131
      // **Reduce** builds up a single result from a list of values, aka `inject`,                           // 132
      // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.                           // 133
      _.reduce = _.foldl = _.inject = function (obj, iterator, memo, context) {                               // 134
        var initial = arguments.length > 2;                                                                  // 135
        if (obj == null) obj = [];                                                                           // 136
        if (nativeReduce && obj.reduce === nativeReduce) {                                                   // 137
          if (context) iterator = _.bind(iterator, context);                                                 // 138
          return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);                                // 139
        }                                                                                                    // 140
        each(obj, function (value, index, list) {                                                             // 141
          if (!initial) {                                                                                    // 142
            memo = value;                                                                                    // 143
            initial = true;                                                                                  // 144
          } else {                                                                                           // 145
            memo = iterator.call(context, memo, value, index, list);                                         // 146
          }                                                                                                  // 147
        });                                                                                                  // 148
        if (!initial) throw new TypeError(reduceError);                                                      // 149
        return memo;                                                                                         // 150
      };                                                                                                     // 151
      // 152
      // The right-associative version of reduce, also known as `foldr`.                                     // 153
      // Delegates to **ECMAScript 5**'s native `reduceRight` if available.                                  // 154
      _.reduceRight = _.foldr = function (obj, iterator, memo, context) {                                     // 155
        var initial = arguments.length > 2;                                                                  // 156
        if (obj == null) obj = [];                                                                           // 157
        if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {                                    // 158
          if (context) iterator = _.bind(iterator, context);                                                 // 159
          return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);                      // 160
        }                                                                                                    // 161
        var length = obj.length;                                                                             // 162
        if (!looksLikeArray(obj)) {                                                                          // 163
          var keys = _.keys(obj);                                                                            // 164
          length = keys.length;                                                                              // 165
        }                                                                                                    // 166
        each(obj, function (value, index, list) {                                                             // 167
          index = keys ? keys[--length] : --length;                                                          // 168
          if (!initial) {                                                                                    // 169
            memo = obj[index];                                                                               // 170
            initial = true;                                                                                  // 171
          } else {                                                                                           // 172
            memo = iterator.call(context, memo, obj[index], index, list);                                    // 173
          }                                                                                                  // 174
        });                                                                                                  // 175
        if (!initial) throw new TypeError(reduceError);                                                      // 176
        return memo;                                                                                         // 177
      };                                                                                                     // 178
      // 179
      // Return the first value which passes a truth test. Aliased as `detect`.                              // 180
      _.find = _.detect = function (obj, iterator, context) {                                                 // 181
        var result;                                                                                          // 182
        any(obj, function (value, index, list) {                                                              // 183
          if (iterator.call(context, value, index, list)) {                                                  // 184
            result = value;                                                                                  // 185
            return true;                                                                                     // 186
          }                                                                                                  // 187
        });                                                                                                  // 188
        return result;                                                                                       // 189
      };                                                                                                     // 190
      // 191
      // Return all the elements that pass a truth test.                                                     // 192
      // Delegates to **ECMAScript 5**'s native `filter` if available.                                       // 193
      // Aliased as `select`.                                                                                // 194
      _.filter = _.select = function (obj, iterator, context) {                                               // 195
        var results = [];                                                                                    // 196
        if (obj == null) return results;                                                                     // 197
        if (nativeFilter && obj.filter === nativeFilter) return obj.filter(iterator, context);               // 198
        each(obj, function (value, index, list) {                                                             // 199
          if (iterator.call(context, value, index, list)) results.push(value);                               // 200
        });                                                                                                  // 201
        return results;                                                                                      // 202
      };                                                                                                     // 203
      // 204
      // Return all the elements for which a truth test fails.                                               // 205
      _.reject = function (obj, iterator, context) {                                                          // 206
        return _.filter(obj, function (value, index, list) {                                                  // 207
          return !iterator.call(context, value, index, list);                                                // 208
        }, context);                                                                                         // 209
      };                                                                                                     // 210
      // 211
      // Determine whether all of the elements match a truth test.                                           // 212
      // Delegates to **ECMAScript 5**'s native `every` if available.                                        // 213
      // Aliased as `all`.                                                                                   // 214
      _.every = _.all = function (obj, iterator, context) {                                                   // 215
        iterator || (iterator = _.identity);                                                                 // 216
        var result = true;                                                                                   // 217
        if (obj == null) return result;                                                                      // 218
        if (nativeEvery && obj.every === nativeEvery) return obj.every(iterator, context);                   // 219
        each(obj, function (value, index, list) {                                                             // 220
          if (!(result = result && iterator.call(context, value, index, list))) return breaker;              // 221
        });                                                                                                  // 222
        return !!result;                                                                                     // 223
      };                                                                                                     // 224
      // 225
      // Determine if at least one element in the object matches a truth test.                               // 226
      // Delegates to **ECMAScript 5**'s native `some` if available.                                         // 227
      // Aliased as `any`.                                                                                   // 228
      var any = _.some = _.any = function (obj, iterator, context) {                                          // 229
        iterator || (iterator = _.identity);                                                                 // 230
        var result = false;                                                                                  // 231
        if (obj == null) return result;                                                                      // 232
        if (nativeSome && obj.some === nativeSome) return obj.some(iterator, context);                       // 233
        each(obj, function (value, index, list) {                                                             // 234
          if (result || (result = iterator.call(context, value, index, list))) return breaker;               // 235
        });                                                                                                  // 236
        return !!result;                                                                                     // 237
      };                                                                                                     // 238
      // 239
      // Determine if the array or object contains a given value (using `===`).                              // 240
      // Aliased as `include`.                                                                               // 241
      _.contains = _.include = function (obj, target) {                                                       // 242
        if (obj == null) return false;                                                                       // 243
        if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;                // 244
        return any(obj, function (value) {                                                                    // 245
          return value === target;                                                                           // 246
        });                                                                                                  // 247
      };                                                                                                     // 248
      // 249
      // Invoke a method (with arguments) on every item in a collection.                                     // 250
      _.invoke = function (obj, method) {                                                                     // 251
        var args = slice.call(arguments, 2);                                                                 // 252
        var isFunc = _.isFunction(method);                                                                   // 253
        return _.map(obj, function (value) {                                                                  // 254
          return (isFunc ? method : value[method]).apply(value, args);                                       // 255
        });                                                                                                  // 256
      };                                                                                                     // 257
      // 258
      // Convenience version of a common use case of `map`: fetching a property.                             // 259
      _.pluck = function (obj, key) {                                                                         // 260
        return _.map(obj, function (value) { return value[key]; });                                            // 261
      };                                                                                                     // 262
      // 263
      // Convenience version of a common use case of `filter`: selecting only objects                        // 264
      // containing specific `key:value` pairs.                                                              // 265
      _.where = function (obj, attrs, first) {                                                                // 266
        if (_.isEmpty(attrs)) return first ? void 0 : [];                                                    // 267
        return _[first ? 'find' : 'filter'](obj, function (value) {                                           // 268
          for (var key in attrs) {                                                                           // 269
            if (attrs[key] !== value[key]) return false;                                                     // 270
          }                                                                                                  // 271
          return true;                                                                                       // 272
        });                                                                                                  // 273
      };                                                                                                     // 274
      // 275
      // Convenience version of a common use case of `find`: getting the first object                        // 276
      // containing specific `key:value` pairs.                                                              // 277
      _.findWhere = function (obj, attrs) {                                                                   // 278
        return _.where(obj, attrs, true);                                                                    // 279
      };                                                                                                     // 280
      // 281
      // Return the maximum element or (element-based computation).                                          // 282
      // Can't optimize arrays of integers longer than 65,535 elements.                                      // 283
      // See [WebKit Bug 80797](https://bugs.webkit.org/show_bug.cgi?id=80797)                               // 284
      _.max = function (obj, iterator, context) {                                                             // 285
        if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {                       // 286
          return Math.max.apply(Math, obj);                                                                  // 287
        }                                                                                                    // 288
        if (!iterator && _.isEmpty(obj)) return -Infinity;                                                   // 289
        var result = { computed: -Infinity, value: -Infinity };                                               // 290
        each(obj, function (value, index, list) {                                                             // 291
          var computed = iterator ? iterator.call(context, value, index, list) : value;                      // 292
          computed > result.computed && (result = { value: value, computed: computed });                     // 293
        });                                                                                                  // 294
        return result.value;                                                                                 // 295
      };                                                                                                     // 296
      // 297
      // Return the minimum element (or element-based computation).                                          // 298
      _.min = function (obj, iterator, context) {                                                             // 299
        if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {                       // 300
          return Math.min.apply(Math, obj);                                                                  // 301
        }                                                                                                    // 302
        if (!iterator && _.isEmpty(obj)) return Infinity;                                                    // 303
        var result = { computed: Infinity, value: Infinity };                                                 // 304
        each(obj, function (value, index, list) {                                                             // 305
          var computed = iterator ? iterator.call(context, value, index, list) : value;                      // 306
          computed < result.computed && (result = { value: value, computed: computed });                     // 307
        });                                                                                                  // 308
        return result.value;                                                                                 // 309
      };                                                                                                     // 310
      // 311
      // Shuffle an array, using the modern version of the                                                   // 312
      // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).                          // 313
      _.shuffle = function (obj) {                                                                            // 314
        var rand;                                                                                            // 315
        var index = 0;                                                                                       // 316
        var shuffled = [];                                                                                   // 317
        each(obj, function (value) {                                                                          // 318
          rand = _.random(index++);                                                                          // 319
          shuffled[index - 1] = shuffled[rand];                                                              // 320
          shuffled[rand] = value;                                                                            // 321
        });                                                                                                  // 322
        return shuffled;                                                                                     // 323
      };                                                                                                     // 324
      // 325
      // Sample **n** random values from an array.                                                           // 326
      // If **n** is not specified, returns a single random element from the array.                          // 327
      // The internal `guard` argument allows it to work with `map`.                                         // 328
      _.sample = function (obj, n, guard) {                                                                   // 329
        if (arguments.length < 2 || guard) {                                                                 // 330
          return obj[_.random(obj.length - 1)];                                                              // 331
        }                                                                                                    // 332
        return _.shuffle(obj).slice(0, Math.max(0, n));                                                      // 333
      };                                                                                                     // 334
      // 335
      // An internal function to generate lookup iterators.                                                  // 336
      var lookupIterator = function (value) {                                                                 // 337
        return _.isFunction(value) ? value : function (obj) { return obj[value]; };                            // 338
      };                                                                                                     // 339
      // 340
      // Sort the object's values by a criterion produced by an iterator.                                    // 341
      _.sortBy = function (obj, value, context) {                                                             // 342
        var iterator = lookupIterator(value);                                                                // 343
        return _.pluck(_.map(obj, function (value, index, list) {                                             // 344
          return {                                                                                           // 345
            value: value,                                                                                    // 346
            index: index,                                                                                    // 347
            criteria: iterator.call(context, value, index, list)                                             // 348
          };                                                                                                 // 349
        }).sort(function (left, right) {                                                                      // 350
          var a = left.criteria;                                                                             // 351
          var b = right.criteria;                                                                            // 352
          if (a !== b) {                                                                                     // 353
            if (a > b || a === void 0) return 1;                                                             // 354
            if (a < b || b === void 0) return -1;                                                            // 355
          }                                                                                                  // 356
          return left.index - right.index;                                                                   // 357
        }), 'value');                                                                                        // 358
      };                                                                                                     // 359
      // 360
      // An internal function used for aggregate "group by" operations.                                      // 361
      var group = function (behavior) {                                                                       // 362
        return function (obj, value, context) {                                                               // 363
          var result = {};                                                                                   // 364
          var iterator = value == null ? _.identity : lookupIterator(value);                                 // 365
          each(obj, function (value, index) {                                                                 // 366
            var key = iterator.call(context, value, index, obj);                                             // 367
            behavior(result, key, value);                                                                    // 368
          });                                                                                                // 369
          return result;                                                                                     // 370
        };                                                                                                   // 371
      };                                                                                                     // 372
      // 373
      // Groups the object's values by a criterion. Pass either a string attribute                           // 374
      // to group by, or a function that returns the criterion.                                              // 375
      _.groupBy = group(function (result, key, value) {                                                       // 376
        (_.has(result, key) ? result[key] : (result[key] = [])).push(value);                                 // 377
      });                                                                                                    // 378
      // 379
      // Indexes the object's values by a criterion, similar to `groupBy`, but for                           // 380
      // when you know that your index values will be unique.                                                // 381
      _.indexBy = group(function (result, key, value) {                                                       // 382
        result[key] = value;                                                                                 // 383
      });                                                                                                    // 384
      // 385
      // Counts instances of an object that group by a certain criterion. Pass                               // 386
      // either a string attribute to count by, or a function that returns the                               // 387
      // criterion.                                                                                          // 388
      _.countBy = group(function (result, key) {                                                              // 389
        _.has(result, key) ? result[key]++ : result[key] = 1;                                                // 390
      });                                                                                                    // 391
      // 392
      // Use a comparator function to figure out the smallest index at which                                 // 393
      // an object should be inserted so as to maintain order. Uses binary search.                           // 394
      _.sortedIndex = function (array, obj, iterator, context) {                                              // 395
        iterator = iterator == null ? _.identity : lookupIterator(iterator);                                 // 396
        var value = iterator.call(context, obj);                                                             // 397
        var low = 0, high = array.length;                                                                    // 398
        while (low < high) {                                                                                 // 399
          var mid = (low + high) >>> 1;                                                                      // 400
          iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid;                           // 401
        }                                                                                                    // 402
        return low;                                                                                          // 403
      };                                                                                                     // 404
      // 405
      // Safely create a real, live array from anything iterable.                                            // 406
      _.toArray = function (obj) {                                                                            // 407
        if (!obj) return [];                                                                                 // 408
        if (_.isArray(obj)) return slice.call(obj);                                                          // 409
        if (looksLikeArray(obj)) return _.map(obj, _.identity);                                              // 410
        return _.values(obj);                                                                                // 411
      };                                                                                                     // 412
      // 413
      // Return the number of elements in an object.                                                         // 414
      _.size = function (obj) {                                                                               // 415
        if (obj == null) return 0;                                                                           // 416
        return (looksLikeArray(obj)) ? obj.length : _.keys(obj).length;                                      // 417
      };                                                                                                     // 418
      // 419
      // Array Functions                                                                                     // 420
      // ---------------                                                                                     // 421
      // 422
      // Get the first element of an array. Passing **n** will return the first N                            // 423
      // values in the array. Aliased as `head` and `take`. The **guard** check                              // 424
      // allows it to work with `_.map`.                                                                     // 425
      _.first = _.head = _.take = function (array, n, guard) {                                                // 426
        if (array == null) return void 0;                                                                    // 427
        return (n == null) || guard ? array[0] : slice.call(array, 0, n);                                    // 428
      };                                                                                                     // 429
      // 430
      // Returns everything but the last entry of the array. Especially useful on                            // 431
      // the arguments object. Passing **n** will return all the values in                                   // 432
      // the array, excluding the last N. The **guard** check allows it to work with                         // 433
      // `_.map`.                                                                                            // 434
      _.initial = function (array, n, guard) {                                                                // 435
        return slice.call(array, 0, array.length - ((n == null) || guard ? 1 : n));                          // 436
      };                                                                                                     // 437
      // 438
      // Get the last element of an array. Passing **n** will return the last N                              // 439
      // values in the array. The **guard** check allows it to work with `_.map`.                            // 440
      _.last = function (array, n, guard) {                                                                   // 441
        if (array == null) return void 0;                                                                    // 442
        if ((n == null) || guard) {                                                                          // 443
          return array[array.length - 1];                                                                    // 444
        } else {                                                                                             // 445
          return slice.call(array, Math.max(array.length - n, 0));                                           // 446
        }                                                                                                    // 447
      };                                                                                                     // 448
      // 449
      // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.                  // 450
      // Especially useful on the arguments object. Passing an **n** will return                             // 451
      // the rest N values in the array. The **guard**                                                       // 452
      // check allows it to work with `_.map`.                                                               // 453
      _.rest = _.tail = _.drop = function (array, n, guard) {                                                 // 454
        return slice.call(array, (n == null) || guard ? 1 : n);                                              // 455
      };                                                                                                     // 456
      // 457
      // Trim out all falsy values from an array.                                                            // 458
      _.compact = function (array) {                                                                          // 459
        return _.filter(array, _.identity);                                                                  // 460
      };                                                                                                     // 461
      // 462
      // Internal implementation of a recursive `flatten` function.                                          // 463
      var flatten = function (input, shallow, output) {                                                       // 464
        if (shallow && _.every(input, _.isArray)) {                                                          // 465
          return concat.apply(output, input);                                                                // 466
        }                                                                                                    // 467
        each(input, function (value) {                                                                        // 468
          if (_.isArray(value) || _.isArguments(value)) {                                                    // 469
            shallow ? push.apply(output, value) : flatten(value, shallow, output);                           // 470
          } else {                                                                                           // 471
            output.push(value);                                                                              // 472
          }                                                                                                  // 473
        });                                                                                                  // 474
        return output;                                                                                       // 475
      };                                                                                                     // 476
      // 477
      // Flatten out an array, either recursively (by default), or just one level.                           // 478
      _.flatten = function (array, shallow) {                                                                 // 479
        return flatten(array, shallow, []);                                                                  // 480
      };                                                                                                     // 481
      // 482
      // Return a version of the array that does not contain the specified value(s).                         // 483
      _.without = function (array) {                                                                          // 484
        return _.difference(array, slice.call(arguments, 1));                                                // 485
      };                                                                                                     // 486
      // 487
      // Produce a duplicate-free version of the array. If the array has already                             // 488
      // been sorted, you have the option of using a faster algorithm.                                       // 489
      // Aliased as `unique`.                                                                                // 490
      _.uniq = _.unique = function (array, isSorted, iterator, context) {                                     // 491
        if (_.isFunction(isSorted)) {                                                                        // 492
          context = iterator;                                                                                // 493
          iterator = isSorted;                                                                               // 494
          isSorted = false;                                                                                  // 495
        }                                                                                                    // 496
        var initial = iterator ? _.map(array, iterator, context) : array;                                    // 497
        var results = [];                                                                                    // 498
        var seen = [];                                                                                       // 499
        each(initial, function (value, index) {                                                               // 500
          if (isSorted ? (!index || seen[seen.length - 1] !== value) : !_.contains(seen, value)) {           // 501
            seen.push(value);                                                                                // 502
            results.push(array[index]);                                                                      // 503
          }                                                                                                  // 504
        });                                                                                                  // 505
        return results;                                                                                      // 506
      };                                                                                                     // 507
      // 508
      // Produce an array that contains the union: each distinct element from all of                         // 509
      // the passed-in arrays.                                                                               // 510
      _.union = function () {                                                                                 // 511
        return _.uniq(_.flatten(arguments, true));                                                           // 512
      };                                                                                                     // 513
      // 514
      // Produce an array that contains every item shared between all the                                    // 515
      // passed-in arrays.                                                                                   // 516
      _.intersection = function (array) {                                                                     // 517
        var rest = slice.call(arguments, 1);                                                                 // 518
        return _.filter(_.uniq(array), function (item) {                                                      // 519
          return _.every(rest, function (other) {                                                             // 520
            return _.indexOf(other, item) >= 0;                                                              // 521
          });                                                                                                // 522
        });                                                                                                  // 523
      };                                                                                                     // 524
      // 525
      // Take the difference between one array and a number of other arrays.                                 // 526
      // Only the elements present in just the first array will remain.                                      // 527
      _.difference = function (array) {                                                                       // 528
        var rest = concat.apply(ArrayProto, slice.call(arguments, 1));                                       // 529
        return _.filter(array, function (value) { return !_.contains(rest, value); });                         // 530
      };                                                                                                     // 531
      // 532
      // Zip together multiple lists into a single array -- elements that share                              // 533
      // an index go together.                                                                               // 534
      _.zip = function () {                                                                                   // 535
        var length = _.max(_.pluck(arguments, "length").concat(0));                                          // 536
        var results = new Array(length);                                                                     // 537
        for (var i = 0; i < length; i++) {                                                                   // 538
          results[i] = _.pluck(arguments, '' + i);                                                           // 539
        }                                                                                                    // 540
        return results;                                                                                      // 541
      };                                                                                                     // 542
      // 543
      // Converts lists into objects. Pass either a single array of `[key, value]`                           // 544
      // pairs, or two parallel arrays of the same length -- one of keys, and one of                         // 545
      // the corresponding values.                                                                           // 546
      _.object = function (list, values) {                                                                    // 547
        if (list == null) return {};                                                                         // 548
        var result = {};                                                                                     // 549
        for (var i = 0, length = list.length; i < length; i++) {                                             // 550
          if (values) {                                                                                      // 551
            result[list[i]] = values[i];                                                                     // 552
          } else {                                                                                           // 553
            result[list[i][0]] = list[i][1];                                                                 // 554
          }                                                                                                  // 555
        }                                                                                                    // 556
        return result;                                                                                       // 557
      };                                                                                                     // 558
      // 559
      // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),                       // 560
      // we need this function. Return the position of the first occurrence of an                            // 561
      // item in an array, or -1 if the item is not included in the array.                                   // 562
      // Delegates to **ECMAScript 5**'s native `indexOf` if available.                                      // 563
      // If the array is large and already in sort order, pass `true`                                        // 564
      // for **isSorted** to use binary search.                                                              // 565
      _.indexOf = function (array, item, isSorted) {                                                          // 566
        if (array == null) return -1;                                                                        // 567
        var i = 0, length = array.length;                                                                    // 568
        if (isSorted) {                                                                                      // 569
          if (typeof isSorted == 'number') {                                                                 // 570
            i = (isSorted < 0 ? Math.max(0, length + isSorted) : isSorted);                                  // 571
          } else {                                                                                           // 572
            i = _.sortedIndex(array, item);                                                                  // 573
            return array[i] === item ? i : -1;                                                               // 574
          }                                                                                                  // 575
        }                                                                                                    // 576
        if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item, isSorted);          // 577
        for (; i < length; i++) if (array[i] === item) return i;                                             // 578
        return -1;                                                                                           // 579
      };                                                                                                     // 580
      // 581
      // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.                                  // 582
      _.lastIndexOf = function (array, item, from) {                                                          // 583
        if (array == null) return -1;                                                                        // 584
        var hasIndex = from != null;                                                                         // 585
        if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) {                                  // 586
          return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item);                         // 587
        }                                                                                                    // 588
        var i = (hasIndex ? from : array.length);                                                            // 589
        while (i--) if (array[i] === item) return i;                                                         // 590
        return -1;                                                                                           // 591
      };                                                                                                     // 592
      // 593
      // Generate an integer Array containing an arithmetic progression. A port of                           // 594
      // the native Python `range()` function. See                                                           // 595
      // [the Python documentation](http://docs.python.org/library/functions.html#range).                    // 596
      _.range = function (start, stop, step) {                                                                // 597
        if (arguments.length <= 1) {                                                                         // 598
          stop = start || 0;                                                                                 // 599
          start = 0;                                                                                         // 600
        }                                                                                                    // 601
        step = arguments[2] || 1;                                                                            // 602
        // 603
        var length = Math.max(Math.ceil((stop - start) / step), 0);                                          // 604
        var idx = 0;                                                                                         // 605
        var range = new Array(length);                                                                       // 606
        // 607
        while (idx < length) {                                                                                // 608
          range[idx++] = start;                                                                              // 609
          start += step;                                                                                     // 610
        }                                                                                                    // 611
        // 612
        return range;                                                                                        // 613
      };                                                                                                     // 614
      // 615
      // Function (ahem) Functions                                                                           // 616
      // ------------------                                                                                  // 617
      // 618
      // Reusable constructor function for prototype setting.                                                // 619
      var ctor = function () { };                                                                               // 620
      // 621
      // Create a function bound to a given object (assigning `this`, and arguments,                         // 622
      // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if                              // 623
      // available.                                                                                          // 624
      _.bind = function (func, context) {                                                                     // 625
        var args, bound;                                                                                     // 626
        if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
        if (!_.isFunction(func)) throw new TypeError;                                                        // 628
        args = slice.call(arguments, 2);                                                                     // 629
        return bound = function () {                                                                          // 630
          if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));      // 631
          ctor.prototype = func.prototype;                                                                   // 632
          var self = new ctor;                                                                               // 633
          ctor.prototype = null;                                                                             // 634
          var result = func.apply(self, args.concat(slice.call(arguments)));                                 // 635
          if (Object(result) === result) return result;                                                      // 636
          return self;                                                                                       // 637
        };                                                                                                   // 638
      };                                                                                                     // 639
      // 640
      // Partially apply a function by creating a version that has had some of its                           // 641
      // arguments pre-filled, without changing its dynamic `this` context.                                  // 642
      _.partial = function (func) {                                                                           // 643
        var args = slice.call(arguments, 1);                                                                 // 644
        return function () {                                                                                  // 645
          return func.apply(this, args.concat(slice.call(arguments)));                                       // 646
        };                                                                                                   // 647
      };                                                                                                     // 648
      // 649
      // Bind all of an object's methods to that object. Useful for ensuring that                            // 650
      // all callbacks defined on an object belong to it.                                                    // 651
      _.bindAll = function (obj) {                                                                            // 652
        var funcs = slice.call(arguments, 1);                                                                // 653
        if (funcs.length === 0) throw new Error("bindAll must be passed function names");                    // 654
        each(funcs, function (f) { obj[f] = _.bind(obj[f], obj); });                                          // 655
        return obj;                                                                                          // 656
      };                                                                                                     // 657
      // 658
      // Memoize an expensive function by storing its results.                                               // 659
      _.memoize = function (func, hasher) {                                                                   // 660
        var memo = {};                                                                                       // 661
        hasher || (hasher = _.identity);                                                                     // 662
        return function () {                                                                                  // 663
          var key = hasher.apply(this, arguments);                                                           // 664
          return _.has(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));                   // 665
        };                                                                                                   // 666
      };                                                                                                     // 667
      // 668
      // Delays a function for the given number of milliseconds, and then calls                              // 669
      // it with the arguments supplied.                                                                     // 670
      _.delay = function (func, wait) {                                                                       // 671
        var args = slice.call(arguments, 2);                                                                 // 672
        return setTimeout(function () { return func.apply(null, args); }, wait);                               // 673
      };                                                                                                     // 674
      // 675
      // Defers a function, scheduling it to run after the current call stack has                            // 676
      // cleared.                                                                                            // 677
      _.defer = function (func) {                                                                             // 678
        return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));                                 // 679
      };                                                                                                     // 680
      // 681
      // Returns a function, that, when invoked, will only be triggered at most once                         // 682
      // during a given window of time. Normally, the throttled function will run                            // 683
      // as much as it can, without ever going more than once per `wait` duration;                           // 684
      // but if you'd like to disable the execution on the leading edge, pass                                // 685
      // `{leading: false}`. To disable execution on the trailing edge, ditto.                               // 686
      _.throttle = function (func, wait, options) {                                                           // 687
        var context, args, result;                                                                           // 688
        var timeout = null;                                                                                  // 689
        var previous = 0;                                                                                    // 690
        options || (options = {});                                                                           // 691
        var later = function () {                                                                             // 692
          previous = options.leading === false ? 0 : new Date;                                               // 693
          timeout = null;                                                                                    // 694
          result = func.apply(context, args);                                                                // 695
        };                                                                                                   // 696
        return function () {                                                                                  // 697
          var now = new Date;                                                                                // 698
          if (!previous && options.leading === false) previous = now;                                        // 699
          var remaining = wait - (now - previous);                                                           // 700
          context = this;                                                                                    // 701
          args = arguments;                                                                                  // 702
          if (remaining <= 0) {                                                                              // 703
            clearTimeout(timeout);                                                                           // 704
            timeout = null;                                                                                  // 705
            previous = now;                                                                                  // 706
            result = func.apply(context, args);                                                              // 707
          } else if (!timeout && options.trailing !== false) {                                               // 708
            timeout = setTimeout(later, remaining);                                                          // 709
          }                                                                                                  // 710
          return result;                                                                                     // 711
        };                                                                                                   // 712
      };                                                                                                     // 713
      // 714
      // Returns a function, that, as long as it continues to be invoked, will not                           // 715
      // be triggered. The function will be called after it stops being called for                           // 716
      // N milliseconds. If `immediate` is passed, trigger the function on the                               // 717
      // leading edge, instead of the trailing.                                                              // 718
      _.debounce = function (func, wait, immediate) {                                                         // 719
        var timeout, args, context, timestamp, result;                                                       // 720
        return function () {                                                                                  // 721
          context = this;                                                                                    // 722
          args = arguments;                                                                                  // 723
          timestamp = new Date();                                                                            // 724
          var later = function () {                                                                           // 725
            var last = (new Date()) - timestamp;                                                             // 726
            if (last < wait) {                                                                               // 727
              timeout = setTimeout(later, wait - last);                                                      // 728
            } else {                                                                                         // 729
              timeout = null;                                                                                // 730
              if (!immediate) result = func.apply(context, args);                                            // 731
            }                                                                                                // 732
          };                                                                                                 // 733
          var callNow = immediate && !timeout;                                                               // 734
          if (!timeout) {                                                                                    // 735
            timeout = setTimeout(later, wait);                                                               // 736
          }                                                                                                  // 737
          if (callNow) result = func.apply(context, args);                                                   // 738
          return result;                                                                                     // 739
        };                                                                                                   // 740
      };                                                                                                     // 741
      // 742
      // Returns a function that will be executed at most one time, no matter how                            // 743
      // often you call it. Useful for lazy initialization.                                                  // 744
      _.once = function (func) {                                                                              // 745
        var ran = false, memo;                                                                               // 746
        return function () {                                                                                  // 747
          if (ran) return memo;                                                                              // 748
          ran = true;                                                                                        // 749
          memo = func.apply(this, arguments);                                                                // 750
          func = null;                                                                                       // 751
          return memo;                                                                                       // 752
        };                                                                                                   // 753
      };                                                                                                     // 754
      // 755
      // Returns the first function passed as an argument to the second,                                     // 756
      // allowing you to adjust arguments, run code before and after, and                                    // 757
      // conditionally execute the original function.                                                        // 758
      _.wrap = function (func, wrapper) {                                                                     // 759
        return function () {                                                                                  // 760
          var args = [func];                                                                                 // 761
          push.apply(args, arguments);                                                                       // 762
          return wrapper.apply(this, args);                                                                  // 763
        };                                                                                                   // 764
      };                                                                                                     // 765
      // 766
      // Returns a function that is the composition of a list of functions, each                             // 767
      // consuming the return value of the function that follows.                                            // 768
      _.compose = function () {                                                                               // 769
        var funcs = arguments;                                                                               // 770
        return function () {                                                                                  // 771
          var args = arguments;                                                                              // 772
          for (var i = funcs.length - 1; i >= 0; i--) {                                                      // 773
            args = [funcs[i].apply(this, args)];                                                             // 774
          }                                                                                                  // 775
          return args[0];                                                                                    // 776
        };                                                                                                   // 777
      };                                                                                                     // 778
      // 779
      // Returns a function that will only be executed after being called N times.                           // 780
      _.after = function (times, func) {                                                                      // 781
        return function () {                                                                                  // 782
          if (--times < 1) {                                                                                 // 783
            return func.apply(this, arguments);                                                              // 784
          }                                                                                                  // 785
        };                                                                                                   // 786
      };                                                                                                     // 787
      // 788
      // Object Functions                                                                                    // 789
      // ----------------                                                                                    // 790
      // 791
      // Retrieve the names of an object's properties.                                                       // 792
      // Delegates to **ECMAScript 5**'s native `Object.keys`                                                // 793
      _.keys = nativeKeys || function (obj) {                                                                 // 794
        if (obj !== Object(obj)) throw new TypeError('Invalid object');                                      // 795
        var keys = [];                                                                                       // 796
        for (var key in obj) if (_.has(obj, key)) keys.push(key);                                            // 797
        return keys;                                                                                         // 798
      };                                                                                                     // 799
      // 800
      // Retrieve the values of an object's properties.                                                      // 801
      _.values = function (obj) {                                                                             // 802
        var keys = _.keys(obj);                                                                              // 803
        var length = keys.length;                                                                            // 804
        var values = new Array(length);                                                                      // 805
        for (var i = 0; i < length; i++) {                                                                   // 806
          values[i] = obj[keys[i]];                                                                          // 807
        }                                                                                                    // 808
        return values;                                                                                       // 809
      };                                                                                                     // 810
      // 811
      // Convert an object into a list of `[key, value]` pairs.                                              // 812
      _.pairs = function (obj) {                                                                              // 813
        var keys = _.keys(obj);                                                                              // 814
        var length = keys.length;                                                                            // 815
        var pairs = new Array(length);                                                                       // 816
        for (var i = 0; i < length; i++) {                                                                   // 817
          pairs[i] = [keys[i], obj[keys[i]]];                                                                // 818
        }                                                                                                    // 819
        return pairs;                                                                                        // 820
      };                                                                                                     // 821
      // 822
      // Invert the keys and values of an object. The values must be serializable.                           // 823
      _.invert = function (obj) {                                                                             // 824
        var result = {};                                                                                     // 825
        var keys = _.keys(obj);                                                                              // 826
        for (var i = 0, length = keys.length; i < length; i++) {                                             // 827
          result[obj[keys[i]]] = keys[i];                                                                    // 828
        }                                                                                                    // 829
        return result;                                                                                       // 830
      };                                                                                                     // 831
      // 832
      // Return a sorted list of the function names available on the object.                                 // 833
      // Aliased as `methods`                                                                                // 834
      _.functions = _.methods = function (obj) {                                                              // 835
        var names = [];                                                                                      // 836
        for (var key in obj) {                                                                               // 837
          if (_.isFunction(obj[key])) names.push(key);                                                       // 838
        }                                                                                                    // 839
        return names.sort();                                                                                 // 840
      };                                                                                                     // 841
      // 842
      // Extend a given object with all the properties in passed-in object(s).                               // 843
      _.extend = function (obj) {                                                                             // 844
        each(slice.call(arguments, 1), function (source) {                                                    // 845
          if (source) {                                                                                      // 846
            for (var prop in source) {                                                                       // 847
              obj[prop] = source[prop];                                                                      // 848
            }                                                                                                // 849
          }                                                                                                  // 850
        });                                                                                                  // 851
        return obj;                                                                                          // 852
      };                                                                                                     // 853
      // 854
      // Return a copy of the object only containing the whitelisted properties.                             // 855
      _.pick = function (obj) {                                                                               // 856
        var copy = {};                                                                                       // 857
        var keys = concat.apply(ArrayProto, slice.call(arguments, 1));                                       // 858
        each(keys, function (key) {                                                                           // 859
          if (key in obj) copy[key] = obj[key];                                                              // 860
        });                                                                                                  // 861
        return copy;                                                                                         // 862
      };                                                                                                     // 863
      // 864
      // Return a copy of the object without the blacklisted properties.                                    // 865
      _.omit = function (obj) {                                                                               // 866
        var copy = {};                                                                                       // 867
        var keys = concat.apply(ArrayProto, slice.call(arguments, 1));                                       // 868
        for (var key in obj) {                                                                               // 869
          if (!_.contains(keys, key)) copy[key] = obj[key];                                                  // 870
        }                                                                                                    // 871
        return copy;                                                                                         // 872
      };                                                                                                     // 873
      // 874
      // Fill in a given object with default properties.                                                     // 875
      _.defaults = function (obj) {                                                                           // 876
        each(slice.call(arguments, 1), function (source) {                                                    // 877
          if (source) {                                                                                      // 878
            for (var prop in source) {                                                                       // 879
              if (obj[prop] === void 0) obj[prop] = source[prop];                                            // 880
            }                                                                                                // 881
          }                                                                                                  // 882
        });                                                                                                  // 883
        return obj;                                                                                          // 884
      };                                                                                                     // 885
      // 886
      // Create a (shallow-cloned) duplicate of an object.                                                   // 887
      _.clone = function (obj) {                                                                              // 888
        if (!_.isObject(obj)) return obj;                                                                    // 889
        return _.isArray(obj) ? obj.slice() : _.extend({}, obj);                                             // 890
      };                                                                                                     // 891
      // 892
      // Invokes interceptor with the obj, and then returns obj.                                             // 893
      // The primary purpose of this method is to "tap into" a method chain, in                              // 894
      // order to perform operations on intermediate results within the chain.                               // 895
      _.tap = function (obj, interceptor) {                                                                   // 896
        interceptor(obj);                                                                                    // 897
        return obj;                                                                                          // 898
      };                                                                                                     // 899
      // 900
      // Internal recursive comparison function for `isEqual`.                                               // 901
      var eq = function (a, b, aStack, bStack) {                                                              // 902
        // Identical objects are equal. `0 === -0`, but they aren't identical.                               // 903
        // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).           // 904
        if (a === b) return a !== 0 || 1 / a == 1 / b;                                                       // 905
        // A strict comparison is necessary because `null == undefined`.                                     // 906
        if (a == null || b == null) return a === b;                                                          // 907
        // Unwrap any wrapped objects.                                                                       // 908
        if (a instanceof _) a = a._wrapped;                                                                  // 909
        if (b instanceof _) b = b._wrapped;                                                                  // 910
        // Compare `[[Class]]` names.                                                                        // 911
        var className = toString.call(a);                                                                    // 912
        if (className != toString.call(b)) return false;                                                     // 913
        switch (className) {                                                                                 // 914
          // Strings, numbers, dates, and booleans are compared by value.                                    // 915
          case '[object String]':                                                                            // 916
            // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is             // 917
            // equivalent to `new String("5")`.                                                              // 918
            return a == String(b);                                                                           // 919
          case '[object Number]':                                                                            // 920
            // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for               // 921
            // other numeric values.                                                                         // 922
            return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);                                  // 923
          case '[object Date]':                                                                              // 924
          case '[object Boolean]':                                                                           // 925
            // Coerce dates and booleans to numeric primitive values. Dates are compared by their            // 926
            // millisecond representations. Note that invalid dates with millisecond representations         // 927
            // of `NaN` are not equivalent.                                                                  // 928
            return +a == +b;                                                                                 // 929
          // RegExps are compared by their source patterns and flags.                                        // 930
          case '[object RegExp]':                                                                            // 931
            return a.source == b.source &&                                                                   // 932
              a.global == b.global &&                                                                   // 933
              a.multiline == b.multiline &&                                                             // 934
              a.ignoreCase == b.ignoreCase;                                                             // 935
        }                                                                                                    // 936
        if (typeof a != 'object' || typeof b != 'object') return false;                                      // 937
        // Assume equality for cyclic structures. The algorithm for detecting cyclic                         // 938
        // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.                       // 939
        var length = aStack.length;                                                                          // 940
        while (length--) {                                                                                   // 941
          // Linear search. Performance is inversely proportional to the number of                           // 942
          // unique nested structures.                                                                       // 943
          if (aStack[length] == a) return bStack[length] == b;                                               // 944
        }                                                                                                    // 945
        // Objects with different constructors are not equivalent, but `Object`s                             // 946
        // from different frames are.                                                                        // 947
        var aCtor = a.constructor, bCtor = b.constructor;                                                    // 948
        if (aCtor !== bCtor && !(_.isFunction(aCtor) && (aCtor instanceof aCtor) &&                          // 949
          _.isFunction(bCtor) && (bCtor instanceof bCtor))) {                         // 950
          return false;                                                                                      // 951
        }                                                                                                    // 952
        // Add the first object to the stack of traversed objects.                                           // 953
        aStack.push(a);                                                                                      // 954
        bStack.push(b);                                                                                      // 955
        var size = 0, result = true;                                                                         // 956
        // Recursively compare objects and arrays.                                                           // 957
        if (className == '[object Array]') {                                                                 // 958
          // Compare array lengths to determine if a deep comparison is necessary.                           // 959
          size = a.length;                                                                                   // 960
          result = size == b.length;                                                                         // 961
          if (result) {                                                                                      // 962
            // Deep compare the contents, ignoring non-numeric properties.                                   // 963
            while (size--) {                                                                                 // 964
              if (!(result = eq(a[size], b[size], aStack, bStack))) break;                                   // 965
            }                                                                                                // 966
          }                                                                                                  // 967
        } else {                                                                                             // 968
          // Deep compare objects.                                                                           // 969
          for (var key in a) {                                                                               // 970
            if (_.has(a, key)) {                                                                             // 971
              // Count the expected number of properties.                                                    // 972
              size++;                                                                                        // 973
              // Deep compare each member.                                                                   // 974
              if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;                    // 975
            }                                                                                                // 976
          }                                                                                                  // 977
          // Ensure that both objects contain the same number of properties.                                 // 978
          if (result) {                                                                                      // 979
            for (key in b) {                                                                                 // 980
              if (_.has(b, key) && !(size--)) break;                                                         // 981
            }                                                                                                // 982
            result = !size;                                                                                  // 983
          }                                                                                                  // 984
        }                                                                                                    // 985
        // Remove the first object from the stack of traversed objects.                                      // 986
        aStack.pop();                                                                                        // 987
        bStack.pop();                                                                                        // 988
        return result;                                                                                       // 989
      };                                                                                                     // 990
      // 991
      // Perform a deep comparison to check if two objects are equal.                                        // 992
      _.isEqual = function (a, b) {                                                                           // 993
        return eq(a, b, [], []);                                                                             // 994
      };                                                                                                     // 995
      // 996
      // Is a given array, string, or object empty?                                                          // 997
      // An "empty" object has no enumerable own-properties.                                                 // 998
      _.isEmpty = function (obj) {                                                                            // 999
        if (obj == null) return true;                                                                        // 1000
        if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;                                      // 1001
        for (var key in obj) if (_.has(obj, key)) return false;                                              // 1002
        return true;                                                                                         // 1003
      };                                                                                                     // 1004
      // 1005
      // Is a given value a DOM element?                                                                     // 1006
      _.isElement = function (obj) {                                                                          // 1007
        return !!(obj && obj.nodeType === 1);                                                                // 1008
      };                                                                                                     // 1009
      // 1010
      // Is a given value an array?                                                                          // 1011
      // Delegates to ECMA5's native Array.isArray                                                           // 1012
      _.isArray = nativeIsArray || function (obj) {                                                           // 1013
        return toString.call(obj) == '[object Array]';                                                       // 1014
      };                                                                                                     // 1015
      // 1016
      // Is a given variable an object?                                                                      // 1017
      _.isObject = function (obj) {                                                                           // 1018
        return obj === Object(obj);                                                                          // 1019
      };                                                                                                     // 1020
      // 1021
      // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.             // 1022
      each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function (name) {                 // 1023
        _['is' + name] = function (obj) {                                                                     // 1024
          return toString.call(obj) == '[object ' + name + ']';                                              // 1025
        };                                                                                                   // 1026
      });                                                                                                    // 1027
      // 1028
      // Define a fallback version of the method in browsers (ahem, IE), where                               // 1029
      // there isn't any inspectable "Arguments" type.                                                       // 1030
      if (!_.isArguments(arguments)) {                                                                       // 1031
        _.isArguments = function (obj) {                                                                      // 1032
          return !!(obj && _.has(obj, 'callee'));                                                            // 1033
        };                                                                                                   // 1034
      }                                                                                                      // 1035
      // 1036
      // Optimize `isFunction` if appropriate.                                                               // 1037
      if (typeof (/./) !== 'function') {                                                                     // 1038
        _.isFunction = function (obj) {                                                                       // 1039
          return typeof obj === 'function';                                                                  // 1040
        };                                                                                                   // 1041
      }                                                                                                      // 1042
      // 1043
      // Is a given object a finite number?                                                                  // 1044
      _.isFinite = function (obj) {                                                                           // 1045
        return isFinite(obj) && !isNaN(parseFloat(obj));                                                     // 1046
      };                                                                                                     // 1047
      // 1048
      // Is the given value `NaN`? (NaN is the only number which does not equal itself).                     // 1049
      _.isNaN = function (obj) {                                                                              // 1050
        return _.isNumber(obj) && obj != +obj;                                                               // 1051
      };                                                                                                     // 1052
      // 1053
      // Is a given value a boolean?                                                                         // 1054
      _.isBoolean = function (obj) {                                                                          // 1055
        return obj === true || obj === false || toString.call(obj) == '[object Boolean]';                    // 1056
      };                                                                                                     // 1057
      // 1058
      // Is a given value equal to null?                                                                     // 1059
      _.isNull = function (obj) {                                                                             // 1060
        return obj === null;                                                                                 // 1061
      };                                                                                                     // 1062
      // 1063
      // Is a given variable undefined?                                                                      // 1064
      _.isUndefined = function (obj) {                                                                        // 1065
        return obj === void 0;                                                                               // 1066
      };                                                                                                     // 1067
      // 1068
      // Shortcut function for checking if an object has a given property directly                           // 1069
      // on itself (in other words, not on a prototype).                                                     // 1070
      _.has = function (obj, key) {                                                                           // 1071
        return hasOwnProperty.call(obj, key);                                                                // 1072
      };                                                                                                     // 1073
      // 1074
      // Utility Functions                                                                                   // 1075
      // -----------------                                                                                   // 1076
      // 1077
      // Run Underscore.js in *noConflict* mode, returning the `_` variable to its                           // 1078
      // previous owner. Returns a reference to the Underscore object.                                       // 1079
      _.noConflict = function () {                                                                            // 1080
        root._ = previousUnderscore;                                                                         // 1081
        return this;                                                                                         // 1082
      };                                                                                                     // 1083
      // 1084
      // Keep the identity function around for default iterators.                                            // 1085
      _.identity = function (value) {                                                                         // 1086
        return value;                                                                                        // 1087
      };                                                                                                     // 1088
      // 1089
      // Run a function **n** times.                                                                         // 1090
      _.times = function (n, iterator, context) {                                                             // 1091
        var accum = Array(Math.max(0, n));                                                                   // 1092
        for (var i = 0; i < n; i++) accum[i] = iterator.call(context, i);                                    // 1093
        return accum;                                                                                        // 1094
      };                                                                                                     // 1095
      // 1096
      // Return a random integer between min and max (inclusive).                                            // 1097
      _.random = function (min, max) {                                                                        // 1098
        if (max == null) {                                                                                   // 1099
          max = min;                                                                                         // 1100
          min = 0;                                                                                           // 1101
        }                                                                                                    // 1102
        return min + Math.floor(Math.random() * (max - min + 1));                                            // 1103
      };                                                                                                     // 1104
      // 1105
      // List of HTML entities for escaping.                                                                 // 1106
      var entityMap = {                                                                                      // 1107
        escape: {                                                                                            // 1108
          '&': '&amp;',                                                                                      // 1109
          '<': '&lt;',                                                                                       // 1110
          '>': '&gt;',                                                                                       // 1111
          '"': '&quot;',                                                                                     // 1112
          "'": '&#x27;'                                                                                      // 1113
        }                                                                                                    // 1114
      };                                                                                                     // 1115
      entityMap.unescape = _.invert(entityMap.escape);                                                       // 1116
      // 1117
      // Regexes containing the keys and values listed immediately above.                                    // 1118
      var entityRegexes = {                                                                                  // 1119
        escape: new RegExp('[' + _.keys(entityMap.escape).join('') + ']', 'g'),                            // 1120
        unescape: new RegExp('(' + _.keys(entityMap.unescape).join('|') + ')', 'g')                          // 1121
      };                                                                                                     // 1122
      // 1123
      // Functions for escaping and unescaping strings to/from HTML interpolation.                           // 1124
      _.each(['escape', 'unescape'], function (method) {                                                      // 1125
        _[method] = function (string) {                                                                       // 1126
          if (string == null) return '';                                                                     // 1127
          return ('' + string).replace(entityRegexes[method], function (match) {                              // 1128
            return entityMap[method][match];                                                                 // 1129
          });                                                                                                // 1130
        };                                                                                                   // 1131
      });                                                                                                    // 1132
      // 1133
      // If the value of the named `property` is a function then invoke it with the                          // 1134
      // `object` as context; otherwise, return it.                                                          // 1135
      _.result = function (object, property) {                                                                // 1136
        if (object == null) return void 0;                                                                   // 1137
        var value = object[property];                                                                        // 1138
        return _.isFunction(value) ? value.call(object) : value;                                             // 1139
      };                                                                                                     // 1140
      // 1141
      // Add your own custom functions to the Underscore object.                                             // 1142
      _.mixin = function (obj) {                                                                              // 1143
        each(_.functions(obj), function (name) {                                                              // 1144
          var func = _[name] = obj[name];                                                                    // 1145
          _.prototype[name] = function () {                                                                   // 1146
            var args = [this._wrapped];                                                                      // 1147
            push.apply(args, arguments);                                                                     // 1148
            return result.call(this, func.apply(_, args));                                                   // 1149
          };                                                                                                 // 1150
        });                                                                                                  // 1151
      };                                                                                                     // 1152
      // 1153
      // Generate a unique integer id (unique within the entire client session).                             // 1154
      // Useful for temporary DOM ids.                                                                       // 1155
      var idCounter = 0;                                                                                     // 1156
      _.uniqueId = function (prefix) {                                                                        // 1157
        var id = ++idCounter + '';                                                                           // 1158
        return prefix ? prefix + id : id;                                                                    // 1159
      };                                                                                                     // 1160
      // 1161
      // By default, Underscore uses ERB-style template delimiters, change the                               // 1162
      // following template settings to use alternative delimiters.                                          // 1163
      _.templateSettings = {                                                                                 // 1164
        evaluate: /<%([\s\S]+?)%>/g,                                                                     // 1165
        interpolate: /<%=([\s\S]+?)%>/g,                                                                    // 1166
        escape: /<%-([\s\S]+?)%>/g                                                                     // 1167
      };                                                                                                     // 1168
      // 1169
      // When customizing `templateSettings`, if you don't want to define an                                 // 1170
      // interpolation, evaluation or escaping regex, we need one that is                                    // 1171
      // guaranteed not to match.                                                                            // 1172
      var noMatch = /(.)^/;                                                                                  // 1173
      // 1174
      // Certain characters need to be escaped so that they can be put into a                                // 1175
      // string literal.                                                                                     // 1176
      var escapes = {                                                                                        // 1177
        "'": "'",                                                                                       // 1178
        '\\': '\\',                                                                                      // 1179
        '\r': 'r',                                                                                       // 1180
        '\n': 'n',                                                                                       // 1181
        '\t': 't',                                                                                       // 1182
        '\u2028': 'u2028',                                                                                   // 1183
        '\u2029': 'u2029'                                                                                    // 1184
      };                                                                                                     // 1185
      // 1186
      var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;                                                          // 1187
      // 1188
      // JavaScript micro-templating, similar to John Resig's implementation.                                // 1189
      // Underscore templating handles arbitrary delimiters, preserves whitespace,                           // 1190
      // and correctly escapes quotes within interpolated code.                                              // 1191
      _.template = function (text, data, settings) {                                                          // 1192
        var render;                                                                                          // 1193
        settings = _.defaults({}, settings, _.templateSettings);                                             // 1194
        // 1195
        // Combine delimiters into one regular expression via alternation.                                   // 1196
        var matcher = new RegExp([                                                                           // 1197
          (settings.escape || noMatch).source,                                                               // 1198
          (settings.interpolate || noMatch).source,                                                          // 1199
          (settings.evaluate || noMatch).source                                                              // 1200
        ].join('|') + '|$', 'g');                                                                            // 1201
        // 1202
        // Compile the template source, escaping string literals appropriately.                              // 1203
        var index = 0;                                                                                       // 1204
        var source = "__p+='";                                                                               // 1205
        text.replace(matcher, function (match, escape, interpolate, evaluate, offset) {                       // 1206
          source += text.slice(index, offset)                                                                // 1207
            .replace(escaper, function (match) { return '\\' + escapes[match]; });                            // 1208
          // 1209
          if (escape) {                                                                                      // 1210
            source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";                             // 1211
          }                                                                                                  // 1212
          if (interpolate) {                                                                                 // 1213
            source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";                                  // 1214
          }                                                                                                  // 1215
          if (evaluate) {                                                                                    // 1216
            source += "';\n" + evaluate + "\n__p+='";                                                        // 1217
          }                                                                                                  // 1218
          index = offset + match.length;                                                                     // 1219
          return match;                                                                                      // 1220
        });                                                                                                  // 1221
        source += "';\n";                                                                                    // 1222
        // 1223
        // If a variable is not specified, place data values in local scope.                                 // 1224
        if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';                                // 1225
        // 1226
        source = "var __t,__p='',__j=Array.prototype.join," +                                                // 1227
          "print=function(){__p+=__j.call(arguments,'');};\n" +                                              // 1228
          source + "return __p;\n";                                                                          // 1229
        // 1230
        try {                                                                                                // 1231
          render = new Function(settings.variable || 'obj', '_', source);                                    // 1232
        } catch (e) {                                                                                        // 1233
          e.source = source;                                                                                 // 1234
          throw e;                                                                                           // 1235
        }                                                                                                    // 1236
        // 1237
        if (data) return render(data, _);                                                                    // 1238
        var template = function (data) {                                                                      // 1239
          return render.call(this, data, _);                                                                 // 1240
        };                                                                                                   // 1241
        // 1242
        // Provide the compiled function source as a convenience for precompilation.                         // 1243
        template.source = 'function(' + (settings.variable || 'obj') + '){\n' + source + '}';                // 1244
        // 1245
        return template;                                                                                     // 1246
      };                                                                                                     // 1247
      // 1248
      // Add a "chain" function, which will delegate to the wrapper.                                         // 1249
      _.chain = function (obj) {                                                                              // 1250
        return _(obj).chain();                                                                               // 1251
      };                                                                                                     // 1252
      // 1253
      // OOP                                                                                                 // 1254
      // ---------------                                                                                     // 1255
      // If Underscore is called as a function, it returns a wrapped object that                             // 1256
      // can be used OO-style. This wrapper holds altered versions of all the                                // 1257
      // underscore functions. Wrapped objects may be chained.                                               // 1258
      // 1259
      // Helper function to continue chaining intermediate results.                                          // 1260
      var result = function (obj) {                                                                           // 1261
        return this._chain ? _(obj).chain() : obj;                                                           // 1262
      };                                                                                                     // 1263
      // 1264
      // Add all of the Underscore functions to the wrapper object.                                          // 1265
      _.mixin(_);                                                                                            // 1266
      // 1267
      // Add all mutator Array functions to the wrapper.                                                     // 1268
      each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function (name) {                // 1269
        var method = ArrayProto[name];                                                                       // 1270
        _.prototype[name] = function () {                                                                     // 1271
          var obj = this._wrapped;                                                                           // 1272
          method.apply(obj, arguments);                                                                      // 1273
          if ((name == 'shift' || name == 'splice') && obj.length === 0) delete obj[0];                      // 1274
          return result.call(this, obj);                                                                     // 1275
        };                                                                                                   // 1276
      });                                                                                                    // 1277
      // 1278
      // Add all accessor Array functions to the wrapper.                                                    // 1279
      each(['concat', 'join', 'slice'], function (name) {                                                     // 1280
        var method = ArrayProto[name];                                                                       // 1281
        _.prototype[name] = function () {                                                                     // 1282
          return result.call(this, method.apply(this._wrapped, arguments));                                  // 1283
        };                                                                                                   // 1284
      });                                                                                                    // 1285
      // 1286
      _.extend(_.prototype, {                                                                                // 1287
        // 1288
        // Start chaining a wrapped Underscore object.                                                       // 1289
        chain: function () {                                                                                  // 1290
          this._chain = true;                                                                                // 1291
          return this;                                                                                       // 1292
        },                                                                                                   // 1293
        // 1294
        // Extracts the result from a wrapped and chained object.                                            // 1295
        value: function () {                                                                                  // 1296
          return this._wrapped;                                                                              // 1297
        }                                                                                                    // 1298
        // 1299
      });                                                                                                    // 1300
      // 1301
    }).call(this);                                                                                           // 1302
    // 1303
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////

  }).call(this);






  (function () {

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                       //
    // packages/underscore/post.js                                                                           //
    //                                                                                                       //
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // This exports object was created in pre.js.  Now copy the `_` object from it                           // 1
    // into the package-scope variable `_`, which will get exported.                                         // 2
    _ = exports._;                                                                                           // 3
    // 4
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////

  }).call(this);


  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols)
      (s in pkg) || (pkg[s] = symbols[s]);
  })(Package.underscore = {}, {
    _: _
  });

})();
(function () { // inforce the context to be the window

  // debug info
  console.log("Connecting to ", DDP_DEFAULT_CONNECTION_URL);

  __meteor_runtime_config__ = {
    "meteorEnv": {},
    "DDP_DEFAULT_CONNECTION_URL": DDP_DEFAULT_CONNECTION_URL,
    "ROOT_URL": DDP_DEFAULT_CONNECTION_URL,
    "NODE_ENV": NODE_ENV,
    "SNENV": SNENV
  };


  (function () {
    var _ = Package['underscore']._;
    var config = this.__meteor_runtime_config__ || {};

    __meteor_runtime_config__ = _.defaults({}, config, {
      meteorEnv: {},
      DDP_DEFAULT_CONNECTION_URL: 'http://localhost:3000'
    });
  }).call(this);

})();
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var _ = Package.underscore._;

  /* Package-scope variables */
  var global, meteorEnv, Meteor;

  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                        //
    // packages/meteor/global.js                                                                              //
    //                                                                                                        //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    global = this;                                                                                            // 1
    // 2
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }).call(this);






  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                        //
    // packages/meteor/client_environment.js                                                                  //
    //                                                                                                        //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    meteorEnv = __meteor_runtime_config__.meteorEnv;                                                          // 1
    // 2
    /**                                                                                                       // 3
     * @summary The Meteor namespace                                                                          // 4
     * @namespace Meteor                                                                                      // 5
     */                                                                                                       // 6
    Meteor = {                                                                                                // 7
      /**                                                                                                     // 8
       * @summary Boolean variable.  True if running in production environment.                               // 9
       * @locus Anywhere                                                                                      // 10
       * @static                                                                                              // 11
       * @type {Boolean}                                                                                      // 12
       */                                                                                                     // 13
      isProduction: meteorEnv.NODE_ENV === "production",                                                      // 14
      // 15
      /**                                                                                                     // 16
       * @summary Boolean variable.  True if running in development environment.                              // 17
       * @locus Anywhere                                                                                      // 18
       * @static                                                                                              // 19
       * @type {Boolean}                                                                                      // 20
       */                                                                                                     // 21
      isDevelopment: meteorEnv.NODE_ENV !== "production",                                                     // 22
      // 23
      /**                                                                                                     // 24
       * @summary Boolean variable.  True if running in client environment.                                   // 25
       * @locus Anywhere                                                                                      // 26
       * @static                                                                                              // 27
       * @type {Boolean}                                                                                      // 28
       */                                                                                                     // 29
      isClient: true,                                                                                         // 30
      // 31
      /**                                                                                                     // 32
       * @summary Boolean variable.  True if running in server environment.                                   // 33
       * @locus Anywhere                                                                                      // 34
       * @static                                                                                              // 35
       * @type {Boolean}                                                                                      // 36
       */                                                                                                     // 37
      isServer: false,                                                                                        // 38
      isCordova: false                                                                                        // 39
    };                                                                                                        // 40
    // 41
    if (typeof __meteor_runtime_config__ === 'object' &&                                                      // 42
      __meteor_runtime_config__.PUBLIC_SETTINGS) {                                                          // 43
      /**                                                                                                     // 44
       * @summary `Meteor.settings` contains deployment-specific configuration options. You can initialize settings by passing the `--settings` option (which takes the name of a file containing JSON data) to `meteor run` or `meteor deploy`. When running your server directly (e.g. from a bundle), you instead specify settings by putting the JSON directly into the `METEOR_SETTINGS` environment variable. If the settings object contains a key named `public`, then `Meteor.settings.public` will be available on the client as well as the server.  All other properties of `Meteor.settings` are only defined on the server.  You can rely on `Meteor.settings` and `Meteor.settings.public` being defined objects (not undefined) on both client and server even if there are no settings specified.  Changes to `Meteor.settings.public` at runtime will be picked up by new client connections.
       * @locus Anywhere                                                                                      // 46
       * @type {Object}                                                                                       // 47
       */                                                                                                     // 48
      Meteor.settings = { 'public': __meteor_runtime_config__.PUBLIC_SETTINGS };                              // 49
    }                                                                                                         // 50
    // 51
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }).call(this);






  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                        //
    // packages/meteor/helpers.js                                                                             //
    //                                                                                                        //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    if (Meteor.isServer)                                                                                      // 1
      var Future = Npm.require('fibers/future');                                                              // 2
    // 3
    if (typeof __meteor_runtime_config__ === 'object' &&                                                      // 4
      __meteor_runtime_config__.meteorRelease) {                                                            // 5
      /**                                                                                                     // 6
       * @summary `Meteor.release` is a string containing the name of the [release](#meteorupdate) with which the project was built (for example, `"1.2.3"`). It is `undefined` if the project was built using a git checkout of Meteor.
       * @locus Anywhere                                                                                      // 8
       * @type {String}                                                                                       // 9
       */                                                                                                     // 10
      Meteor.release = __meteor_runtime_config__.meteorRelease;                                               // 11
    }                                                                                                         // 12
    // 13
    // XXX find a better home for these? Ideally they would be _.get,                                         // 14
    // _.ensure, _.delete..                                                                                   // 15
    // 16
    _.extend(Meteor, {                                                                                        // 17
      // _get(a,b,c,d) returns a[b][c][d], or else undefined if a[b] or                                       // 18
      // a[b][c] doesn't exist.                                                                               // 19
      //                                                                                                      // 20
      _get: function (obj /*, arguments */) {                                                                 // 21
        for (var i = 1; i < arguments.length; i++) {                                                          // 22
          if (!(arguments[i] in obj))                                                                         // 23
            return undefined;                                                                                 // 24
          obj = obj[arguments[i]];                                                                            // 25
        }                                                                                                     // 26
        return obj;                                                                                           // 27
      },                                                                                                      // 28
      // 29
      // _ensure(a,b,c,d) ensures that a[b][c][d] exists. If it does not,                                     // 30
      // it is created and set to {}. Either way, it is returned.                                             // 31
      //                                                                                                      // 32
      _ensure: function (obj /*, arguments */) {                                                              // 33
        for (var i = 1; i < arguments.length; i++) {                                                          // 34
          var key = arguments[i];                                                                             // 35
          if (!(key in obj))                                                                                  // 36
            obj[key] = {};                                                                                    // 37
          obj = obj[key];                                                                                     // 38
        }                                                                                                     // 39
        // 40
        return obj;                                                                                           // 41
      },                                                                                                      // 42
      // 43
      // _delete(a, b, c, d) deletes a[b][c][d], then a[b][c] unless it                                       // 44
      // isn't empty, then a[b] unless it isn't empty.                                                        // 45
      //                                                                                                      // 46
      _delete: function (obj /*, arguments */) {                                                              // 47
        var stack = [obj];                                                                                    // 48
        var leaf = true;                                                                                      // 49
        for (var i = 1; i < arguments.length - 1; i++) {                                                      // 50
          var key = arguments[i];                                                                             // 51
          if (!(key in obj)) {                                                                                // 52
            leaf = false;                                                                                     // 53
            break;                                                                                            // 54
          }                                                                                                   // 55
          obj = obj[key];                                                                                     // 56
          if (typeof obj !== "object")                                                                        // 57
            break;                                                                                            // 58
          stack.push(obj);                                                                                    // 59
        }                                                                                                     // 60
        // 61
        for (var i = stack.length - 1; i >= 0; i--) {                                                         // 62
          var key = arguments[i + 1];                                                                           // 63
          // 64
          if (leaf)                                                                                           // 65
            leaf = false;                                                                                     // 66
          else                                                                                                // 67
            for (var other in stack[i][key])                                                                  // 68
              return; // not empty -- we're done                                                              // 69
          // 70
          delete stack[i][key];                                                                               // 71
        }                                                                                                     // 72
      },                                                                                                      // 73
      // 74
      // wrapAsync can wrap any function that takes some number of arguments that                             // 75
      // can't be undefined, followed by some optional arguments, where the callback                          // 76
      // is the last optional argument.                                                                       // 77
      // e.g. fs.readFile(pathname, [callback]),                                                              // 78
      // fs.open(pathname, flags, [mode], [callback])                                                         // 79
      // For maximum effectiveness and least confusion, wrapAsync should be used on                           // 80
      // functions where the callback is the only argument of type Function.                                  // 81
      // 82
      /**                                                                                                     // 83
       * @memberOf Meteor                                                                                     // 84
       * @summary Wrap a function that takes a callback function as its final parameter. The signature of the callback of the wrapped function should be `function(error, result){}`. On the server, the wrapped function can be used either synchronously (without passing a callback) or asynchronously (when a callback is passed). On the client, a callback is always required; errors will be logged if there is no callback. If a callback is provided, the environment captured when the original function was called will be restored in the callback.
       * @locus Anywhere                                                                                      // 86
       * @param {Function} func A function that takes a callback as its final parameter                       // 87
       * @param {Object} [context] Optional `this` object against which the original function will be invoked
       */                                                                                                     // 89
      wrapAsync: function (fn, context) {                                                                     // 90
        return function (/* arguments */) {                                                                   // 91
          var self = context || this;                                                                         // 92
          var newArgs = _.toArray(arguments);                                                                 // 93
          var callback;                                                                                       // 94
          // 95
          for (var i = newArgs.length - 1; i >= 0; --i) {                                                     // 96
            var arg = newArgs[i];                                                                             // 97
            var type = typeof arg;                                                                            // 98
            if (type !== "undefined") {                                                                       // 99
              if (type === "function") {                                                                      // 100
                callback = arg;                                                                               // 101
              }                                                                                               // 102
              break;                                                                                          // 103
            }                                                                                                 // 104
          }                                                                                                   // 105
          // 106
          if (!callback) {                                                                                   // 107
            if (Meteor.isClient) {                                                                            // 108
              callback = logErr;                                                                              // 109
            } else {                                                                                          // 110
              var fut = new Future();                                                                         // 111
              callback = fut.resolver();                                                                      // 112
            }                                                                                                 // 113
            ++i; // Insert the callback just after arg.                                                       // 114
          }                                                                                                   // 115
          // 116
          newArgs[i] = Meteor.bindEnvironment(callback);                                                      // 117
          var result = fn.apply(self, newArgs);                                                               // 118
          return fut ? fut.wait() : result;                                                                   // 119
        };                                                                                                    // 120
      },                                                                                                      // 121
      // 122
      // Sets child's prototype to a new object whose prototype is parent's                                   // 123
      // prototype. Used as:                                                                                  // 124
      //   Meteor._inherits(ClassB, ClassA).                                                                  // 125
      //   _.extend(ClassB.prototype, { ... })                                                                // 126
      // Inspired by CoffeeScript's `extend` and Google Closure's `goog.inherits`.                            // 127
      _inherits: function (Child, Parent) {                                                                   // 128
        // copy Parent static properties                                                                      // 129
        for (var key in Parent) {                                                                             // 130
          // make sure we only copy hasOwnProperty properties vs. prototype                                   // 131
          // properties                                                                                       // 132
          if (_.has(Parent, key))                                                                             // 133
            Child[key] = Parent[key];                                                                         // 134
        }                                                                                                     // 135
        // 136
        // a middle member of prototype chain: takes the prototype from the Parent                            // 137
        var Middle = function () {                                                                            // 138
          this.constructor = Child;                                                                           // 139
        };                                                                                                    // 140
        Middle.prototype = Parent.prototype;                                                                  // 141
        Child.prototype = new Middle();                                                                       // 142
        Child.__super__ = Parent.prototype;                                                                   // 143
        return Child;                                                                                         // 144
      }                                                                                                       // 145
    });                                                                                                       // 146
    // 147
    var warnedAboutWrapAsync = false;                                                                         // 148
    // 149
    /**                                                                                                       // 150
     * @deprecated in 0.9.3                                                                                   // 151
     */                                                                                                       // 152
    Meteor._wrapAsync = function (fn, context) {                                                               // 153
      if (!warnedAboutWrapAsync) {                                                                           // 154
        Meteor._debug("Meteor._wrapAsync has been renamed to Meteor.wrapAsync");                              // 155
        warnedAboutWrapAsync = true;                                                                          // 156
      }                                                                                                       // 157
      return Meteor.wrapAsync.apply(Meteor, arguments);                                                       // 158
    };                                                                                                        // 159
    // 160
    function logErr(err) {                                                                                    // 161
      if (err) {                                                                                              // 162
        return Meteor._debug(                                                                                 // 163
          "Exception in callback of async function",                                                          // 164
          err.stack ? err.stack : err                                                                         // 165
        );                                                                                                    // 166
      }                                                                                                       // 167
    }                                                                                                         // 168
    // 169
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }).call(this);






  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                        //
    // packages/meteor/setimmediate.js                                                                        //
    //                                                                                                        //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Chooses one of three setImmediate implementations:                                                     // 1
    //                                                                                                        // 2
    // * Native setImmediate (IE 10, Node 0.9+)                                                               // 3
    //                                                                                                        // 4
    // * postMessage (many browsers)                                                                          // 5
    //                                                                                                        // 6
    // * setTimeout  (fallback)                                                                               // 7
    //                                                                                                        // 8
    // The postMessage implementation is based on                                                             // 9
    // https://github.com/NobleJS/setImmediate/tree/1.0.1                                                     // 10
    //                                                                                                        // 11
    // Don't use `nextTick` for Node since it runs its callbacks before                                       // 12
    // I/O, which is stricter than we're looking for.                                                         // 13
    //                                                                                                        // 14
    // Not installed as a polyfill, as our public API is `Meteor.defer`.                                      // 15
    // Since we're not trying to be a polyfill, we have some                                                  // 16
    // simplifications:                                                                                       // 17
    //                                                                                                        // 18
    // If one invocation of a setImmediate callback pauses itself by a                                        // 19
    // call to alert/prompt/showModelDialog, the NobleJS polyfill                                             // 20
    // implementation ensured that no setImmedate callback would run until                                    // 21
    // the first invocation completed.  While correct per the spec, what it                                   // 22
    // would mean for us in practice is that any reactive updates relying                                     // 23
    // on Meteor.defer would be hung in the main window until the modal                                       // 24
    // dialog was dismissed.  Thus we only ensure that a setImmediate                                         // 25
    // function is called in a later event loop.                                                              // 26
    //                                                                                                        // 27
    // We don't need to support using a string to be eval'ed for the                                          // 28
    // callback, arguments to the function, or clearImmediate.                                                // 29
    // 30
    "use strict";                                                                                             // 31
    // 32
    var global = this;                                                                                        // 33
    // 34
    // 35
    // IE 10, Node >= 9.1                                                                                     // 36
    // 37
    function useSetImmediate() {                                                                              // 38
      if (!global.setImmediate)                                                                              // 39
        return null;                                                                                          // 40
      else {                                                                                                  // 41
        var setImmediate = function (fn) {                                                                    // 42
          global.setImmediate(fn);                                                                            // 43
        };                                                                                                    // 44
        setImmediate.implementation = 'setImmediate';                                                         // 45
        return setImmediate;                                                                                  // 46
      }                                                                                                       // 47
    }                                                                                                         // 48
    // 49
    // 50
    // Android 2.3.6, Chrome 26, Firefox 20, IE 8-9, iOS 5.1.1 Safari                                         // 51
    // 52
    function usePostMessage() {                                                                               // 53
      // The test against `importScripts` prevents this implementation                                        // 54
      // from being installed inside a web worker, where                                                      // 55
      // `global.postMessage` means something completely different and                                        // 56
      // can't be used for this purpose.                                                                      // 57
      // 58
      if (!global.postMessage || global.importScripts) {                                                      // 59
        return null;                                                                                          // 60
      }                                                                                                       // 61
      // 62
      // Avoid synchronous post message implementations.                                                      // 63
      // 64
      var postMessageIsAsynchronous = true;                                                                   // 65
      var oldOnMessage = global.onmessage;                                                                    // 66
      global.onmessage = function () {                                                                        // 67
        postMessageIsAsynchronous = false;                                                                  // 68
      };                                                                                                      // 69
      global.postMessage("", "*");                                                                            // 70
      global.onmessage = oldOnMessage;                                                                        // 71
      // 72
      if (!postMessageIsAsynchronous)                                                                        // 73
        return null;                                                                                          // 74
      // 75
      var funcIndex = 0;                                                                                      // 76
      var funcs = {};                                                                                         // 77
      // 78
      // Installs an event handler on `global` for the `message` event: see                                   // 79
      // * https://developer.mozilla.org/en/DOM/window.postMessage                                            // 80
      // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages       // 81
      // 82
      // XXX use Random.id() here?                                                                            // 83
      var MESSAGE_PREFIX = "Meteor._setImmediate." + Math.random() + '.';                                     // 84
      // 85
      function isStringAndStartsWith(string, putativeStart) {                                                 // 86
        return (typeof string === "string" &&                                                                 // 87
          string.substring(0, putativeStart.length) === putativeStart);                                 // 88
      }                                                                                                       // 89
      // 90
      function onGlobalMessage(event) {                                                                       // 91
        // This will catch all incoming messages (even from other                                             // 92
        // windows!), so we need to try reasonably hard to avoid letting                                      // 93
        // anyone else trick us into firing off. We test the origin is                                        // 94
        // still this window, and that a (randomly generated)                                                 // 95
        // unpredictable identifying prefix is present.                                                       // 96
        if (event.source === global &&                                                                        // 97
          isStringAndStartsWith(event.data, MESSAGE_PREFIX)) {                                              // 98
          var index = event.data.substring(MESSAGE_PREFIX.length);                                            // 99
          try {                                                                                               // 100
            if (funcs[index])                                                                                 // 101
              funcs[index]();                                                                                 // 102
          }                                                                                                   // 103
          finally {                                                                                           // 104
            delete funcs[index];                                                                              // 105
          }                                                                                                   // 106
        }                                                                                                     // 107
      }                                                                                                       // 108
      // 109
      if (global.addEventListener) {                                                                          // 110
        global.addEventListener("message", onGlobalMessage, false);                                           // 111
      } else {                                                                                                // 112
        global.attachEvent("onmessage", onGlobalMessage);                                                     // 113
      }                                                                                                       // 114
      // 115
      var setImmediate = function (fn) {                                                                      // 116
        // Make `global` post a message to itself with the handle and                                         // 117
        // identifying prefix, thus asynchronously invoking our                                               // 118
        // onGlobalMessage listener above.                                                                    // 119
        ++funcIndex;                                                                                          // 120
        funcs[funcIndex] = fn;                                                                                // 121
        global.postMessage(MESSAGE_PREFIX + funcIndex, "*");                                                  // 122
      };                                                                                                      // 123
      setImmediate.implementation = 'postMessage';                                                            // 124
      return setImmediate;                                                                                    // 125
    }                                                                                                         // 126
    // 127
    // 128
    function useTimeout() {                                                                                   // 129
      var setImmediate = function (fn) {                                                                      // 130
        global.setTimeout(fn, 0);                                                                             // 131
      };                                                                                                      // 132
      setImmediate.implementation = 'setTimeout';                                                             // 133
      return setImmediate;                                                                                    // 134
    }                                                                                                         // 135
    // 136
    // 137
    Meteor._setImmediate =                                                                                    // 138
      useSetImmediate() ||                                                                                    // 139
      usePostMessage() ||                                                                                     // 140
      useTimeout();                                                                                           // 141
    // 142
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }).call(this);






  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                        //
    // packages/meteor/timers.js                                                                              //
    //                                                                                                        //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    var withoutInvocation = function (f) {                                                                    // 1
      if (Package.ddp) {                                                                                      // 2
        var _CurrentInvocation = Package.ddp.DDP._CurrentInvocation;                                          // 3
        if (_CurrentInvocation.get() && _CurrentInvocation.get().isSimulation)                                // 4
          throw new Error("Can't set timers inside simulations");                                             // 5
        return function () { _CurrentInvocation.withValue(null, f); };                                        // 6
      }                                                                                                       // 7
      else                                                                                                    // 8
        return f;                                                                                             // 9
    };                                                                                                        // 10
    // 11
    var bindAndCatch = function (context, f) {                                                                // 12
      return Meteor.bindEnvironment(withoutInvocation(f), context);                                           // 13
    };                                                                                                        // 14
    // 15
    _.extend(Meteor, {                                                                                        // 16
      // Meteor.setTimeout and Meteor.setInterval callbacks scheduled                                         // 17
      // inside a server method are not part of the method invocation and                                     // 18
      // should clear out the CurrentInvocation environment variable.                                         // 19
      // 20
      /**                                                                                                     // 21
       * @memberOf Meteor                                                                                     // 22
       * @summary Call a function in the future after waiting for a specified delay.                          // 23
       * @locus Anywhere                                                                                      // 24
       * @param {Function} func The function to run                                                           // 25
       * @param {Number} delay Number of milliseconds to wait before calling function                         // 26
       */                                                                                                     // 27
      setTimeout: function (f, duration) {                                                                    // 28
        return setTimeout(bindAndCatch("setTimeout callback", f), duration);                                  // 29
      },                                                                                                      // 30
      // 31
      /**                                                                                                     // 32
       * @memberOf Meteor                                                                                     // 33
       * @summary Call a function repeatedly, with a time delay between calls.                                // 34
       * @locus Anywhere                                                                                      // 35
       * @param {Function} func The function to run                                                           // 36
       * @param {Number} delay Number of milliseconds to wait between each function call.                     // 37
       */                                                                                                     // 38
      setInterval: function (f, duration) {                                                                   // 39
        return setInterval(bindAndCatch("setInterval callback", f), duration);                                // 40
      },                                                                                                      // 41
      // 42
      /**                                                                                                     // 43
       * @memberOf Meteor                                                                                     // 44
       * @summary Cancel a repeating function call scheduled by `Meteor.setInterval`.                         // 45
       * @locus Anywhere                                                                                      // 46
       * @param {Number} id The handle returned by `Meteor.setInterval`                                       // 47
       */                                                                                                     // 48
      clearInterval: function (x) {                                                                            // 49
        return clearInterval(x);                                                                              // 50
      },                                                                                                      // 51
      // 52
      /**                                                                                                     // 53
       * @memberOf Meteor                                                                                     // 54
       * @summary Cancel a function call scheduled by `Meteor.setTimeout`.                                    // 55
       * @locus Anywhere                                                                                      // 56
       * @param {Number} id The handle returned by `Meteor.setTimeout`                                        // 57
       */                                                                                                     // 58
      clearTimeout: function (x) {                                                                             // 59
        return clearTimeout(x);                                                                               // 60
      },                                                                                                      // 61
      // 62
      // XXX consider making this guarantee ordering of defer'd callbacks, like                               // 63
      // Tracker.afterFlush or Node's nextTick (in practice). Then tests can do:                              // 64
      //    callSomethingThatDefersSomeWork();                                                                // 65
      //    Meteor.defer(expect(somethingThatValidatesThatTheWorkHappened));                                  // 66
      // 67
      /**                                                                                                     // 68
       * @memberOf Meteor                                                                                     // 69
       * @summary Defer execution of a function to run asynchronously in the background (similar to `Meteor.setTimeout(func, 0)`.
       * @locus Anywhere                                                                                      // 71
       * @param {Function} func The function to run                                                           // 72
       */                                                                                                     // 73
      defer: function (f) {                                                                                   // 74
        Meteor._setImmediate(bindAndCatch("defer callback", f));                                              // 75
      }                                                                                                       // 76
    });                                                                                                       // 77
    // 78
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }).call(this);






  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                        //
    // packages/meteor/errors.js                                                                              //
    //                                                                                                        //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Makes an error subclass which properly contains a stack trace in most                                  // 1
    // environments. constructor can set fields on `this` (and should probably set                            // 2
    // `message`, which is what gets displayed at the top of a stack trace).                                  // 3
    //                                                                                                        // 4
    Meteor.makeErrorType = function (name, constructor) {                                                     // 5
      var errorClass = function (/*arguments*/) {                                                             // 6
        // Ensure we get a proper stack trace in most Javascript environments                                 // 7
        if (Error.captureStackTrace) {                                                                        // 8
          // V8 environments (Chrome and Node.js)                                                             // 9
          Error.captureStackTrace(this, errorClass);                                                          // 10
        } else {                                                                                              // 11
          // Borrow the .stack property of a native Error object.                                             // 12
          this.stack = new Error().stack;                                                                     // 13
        }                                                                                                     // 14
        // Safari magically works.                                                                            // 15
        // 16
        constructor.apply(this, arguments);                                                                   // 17
        // 18
        this.errorType = name;                                                                                // 19
      };                                                                                                      // 20
      // 21
      Meteor._inherits(errorClass, Error);                                                                    // 22
      // 23
      return errorClass;                                                                                      // 24
    };                                                                                                        // 25
    // 26
    // This should probably be in the livedata package, but we don't want                                     // 27
    // to require you to use the livedata package to get it. Eventually we                                    // 28
    // should probably rename it to DDP.Error and put it back in the                                          // 29
    // 'livedata' package (which we should rename to 'ddp' also.)                                             // 30
    //                                                                                                        // 31
    // Note: The DDP server assumes that Meteor.Error EJSON-serializes as an object                           // 32
    // containing 'error' and optionally 'reason' and 'details'.                                              // 33
    // The DDP client manually puts these into Meteor.Error objects. (We don't use                            // 34
    // EJSON.addType here because the type is determined by location in the                                   // 35
    // protocol, not text on the wire.)                                                                       // 36
    // 37
    /**                                                                                                       // 38
     * @summary This class represents a symbolic error thrown by a method.                                    // 39
     * @locus Anywhere                                                                                        // 40
     * @class                                                                                                 // 41
     * @param {String} error A string code uniquely identifying this kind of error.                           // 42
     * This string should be used by callers of the method to determine the                                   // 43
     * appropriate action to take, instead of attempting to parse the reason                                  // 44
     * or details fields. For example:                                                                        // 45
     *                                                                                                        // 46
     * ```                                                                                                    // 47
     * // on the server, pick a code unique to this error                                                     // 48
     * // the reason field should be a useful debug message                                                   // 49
     * throw new Meteor.Error("logged-out",                                                                   // 50
     *   "The user must be logged in to post a comment.");                                                    // 51
     *                                                                                                        // 52
     * // on the client                                                                                       // 53
     * Meteor.call("methodName", function (error) {                                                           // 54
     *   // identify the error                                                                                // 55
     *   if (error && error.error === "logged-out") {                                                         // 56
     *     // show a nice error message                                                                       // 57
     *     Session.set("errorMessage", "Please log in to post a comment.");                                   // 58
     *   }                                                                                                    // 59
     * });                                                                                                    // 60
     * ```                                                                                                    // 61
     *                                                                                                        // 62
     * For legacy reasons, some built-in Meteor functions such as `check` throw                               // 63
     * errors with a number in this field.                                                                    // 64
     *                                                                                                        // 65
     * @param {String} [reason] Optional.  A short human-readable summary of the                              // 66
     * error, like 'Not Found'.                                                                               // 67
     * @param {String} [details] Optional.  Additional information about the error,                           // 68
     * like a textual stack trace.                                                                            // 69
     */                                                                                                       // 70
    Meteor.Error = Meteor.makeErrorType(                                                                      // 71
      "Meteor.Error",                                                                                         // 72
      function (error, reason, details) {                                                                     // 73
        var self = this;                                                                                      // 74
        // 75
        // String code uniquely identifying this kind of error.                                               // 76
        self.error = error;                                                                                   // 77
        // 78
        // Optional: A short human-readable summary of the error. Not                                         // 79
        // intended to be shown to end users, just developers. ("Not Found",                                  // 80
        // "Internal Server Error")                                                                           // 81
        self.reason = reason;                                                                                 // 82
        // 83
        // Optional: Additional information about the error, say for                                          // 84
        // debugging. It might be a (textual) stack trace if the server is                                    // 85
        // willing to provide one. The corresponding thing in HTTP would be                                   // 86
        // the body of a 404 or 500 response. (The difference is that we                                      // 87
        // never expect this to be shown to end users, only developers, so                                    // 88
        // it doesn't need to be pretty.)                                                                     // 89
        self.details = details;                                                                               // 90
        // 91
        // This is what gets displayed at the top of a stack trace. Current                                   // 92
        // format is "[404]" (if no reason is set) or "File not found [404]"                                  // 93
        if (self.reason)                                                                                      // 94
          self.message = self.reason + ' [' + self.error + ']';                                               // 95
        else                                                                                                  // 96
          self.message = '[' + self.error + ']';                                                              // 97
      });                                                                                                     // 98
    // 99
    // Meteor.Error is basically data and is sent over DDP, so you should be able to                          // 100
    // properly EJSON-clone it. This is especially important because if a                                     // 101
    // Meteor.Error is thrown through a Future, the error, reason, and details                                // 102
    // properties become non-enumerable so a standard Object clone won't preserve                             // 103
    // them and they will be lost from DDP.                                                                   // 104
    Meteor.Error.prototype.clone = function () {                                                              // 105
      var self = this;                                                                                        // 106
      return new Meteor.Error(self.error, self.reason, self.details);                                         // 107
    };                                                                                                        // 108
    // 109
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }).call(this);






  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                        //
    // packages/meteor/fiber_stubs_client.js                                                                  //
    //                                                                                                        //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // This file is a partial analogue to fiber_helpers.js, which allows the client                           // 1
    // to use a queue too, and also to call noYieldsAllowed.                                                  // 2
    // 3
    // The client has no ability to yield, so noYieldsAllowed is a noop.                                      // 4
    //                                                                                                        // 5
    Meteor._noYieldsAllowed = function (f) {                                                                  // 6
      return f();                                                                                             // 7
    };                                                                                                        // 8
    // 9
    // An even simpler queue of tasks than the fiber-enabled one.  This one just                              // 10
    // runs all the tasks when you call runTask or flush, synchronously.                                      // 11
    //                                                                                                        // 12
    Meteor._SynchronousQueue = function () {                                                                  // 13
      var self = this;                                                                                        // 14
      self._tasks = [];                                                                                       // 15
      self._running = false;                                                                                  // 16
      self._runTimeout = null;                                                                                // 17
    };                                                                                                        // 18
    // 19
    _.extend(Meteor._SynchronousQueue.prototype, {                                                            // 20
      runTask: function (task) {                                                                              // 21
        var self = this;                                                                                      // 22
        if (!self.safeToRunTask())                                                                            // 23
          throw new Error("Could not synchronously run a task from a running task");                          // 24
        self._tasks.push(task);                                                                               // 25
        var tasks = self._tasks;                                                                              // 26
        self._tasks = [];                                                                                     // 27
        self._running = true;                                                                                 // 28
        // 29
        if (self._runTimeout) {                                                                               // 30
          // Since we're going to drain the queue, we can forget about the timeout                            // 31
          // which tries to run it.  (But if one of our tasks queues something else,                          // 32
          // the timeout will be correctly re-created.)                                                       // 33
          clearTimeout(self._runTimeout);                                                                     // 34
          self._runTimeout = null;                                                                            // 35
        }                                                                                                     // 36
        // 37
        try {                                                                                                 // 38
          while (!_.isEmpty(tasks)) {                                                                         // 39
            var t = tasks.shift();                                                                            // 40
            try {                                                                                             // 41
              t();                                                                                            // 42
            } catch (e) {                                                                                     // 43
              if (_.isEmpty(tasks)) {                                                                         // 44
                // this was the last task, that is, the one we're calling runTask                             // 45
                // for.                                                                                       // 46
                throw e;                                                                                      // 47
              } else {                                                                                        // 48
                Meteor._debug("Exception in queued task: " + (e.stack || e));                                 // 49
              }                                                                                               // 50
            }                                                                                                 // 51
          }                                                                                                   // 52
        } finally {                                                                                           // 53
          self._running = false;                                                                              // 54
        }                                                                                                     // 55
      },                                                                                                      // 56
      // 57
      queueTask: function (task) {                                                                            // 58
        var self = this;                                                                                      // 59
        self._tasks.push(task);                                                                               // 60
        // Intentionally not using Meteor.setTimeout, because it doesn't like runing                          // 61
        // in stubs for now.                                                                                  // 62
        if (!self._runTimeout) {                                                                              // 63
          self._runTimeout = setTimeout(_.bind(self.flush, self), 0);                                         // 64
        }                                                                                                     // 65
      },                                                                                                      // 66
      // 67
      flush: function () {                                                                                    // 68
        var self = this;                                                                                      // 69
        self.runTask(function () { });                                                                         // 70
      },                                                                                                      // 71
      // 72
      drain: function () {                                                                                    // 73
        var self = this;                                                                                      // 74
        if (!self.safeToRunTask())                                                                            // 75
          return;                                                                                             // 76
        while (!_.isEmpty(self._tasks)) {                                                                     // 77
          self.flush();                                                                                       // 78
        }                                                                                                     // 79
      },                                                                                                      // 80
      // 81
      safeToRunTask: function () {                                                                            // 82
        var self = this;                                                                                      // 83
        return !self._running;                                                                                // 84
      }                                                                                                       // 85
    });                                                                                                       // 86
    // 87
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }).call(this);






  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                        //
    // packages/meteor/startup_client.js                                                                      //
    //                                                                                                        //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    var callbackQueue = [];                                                                                   // 1
    var isLoadingCompleted = false;                                                                           // 2
    var isReady = false;                                                                                      // 3
    // 4
    // Keeps track of how many events to wait for in addition to loading completing,                          // 5
    // before we're considered ready.                                                                         // 6
    var readyHoldsCount = 0;                                                                                  // 7
    // 8
    var holdReady = function () {                                                                            // 9
      readyHoldsCount++;                                                                                      // 10
    }                                                                                                         // 11
    // 12
    var releaseReadyHold = function () {                                                                      // 13
      readyHoldsCount--;                                                                                      // 14
      maybeReady();                                                                                           // 15
    }                                                                                                         // 16
    // 17
    var maybeReady = function () {                                                                            // 18
      if (isReady || !isLoadingCompleted || readyHoldsCount > 0)                                              // 19
        return;                                                                                               // 20
      // 21
      isReady = true;                                                                                         // 22
      // 23
      // Run startup callbacks                                                                                // 24
      while (callbackQueue.length)                                                                            // 25
        (callbackQueue.shift())();                                                                            // 26
      // 27
      if (Meteor.isCordova) {                                                                                 // 28
        // Notify the WebAppLocalServer plugin that startup was completed successfully,                       // 29
        // so we can roll back faulty versions if this doesn't happen                                         // 30
        WebAppLocalServer.startupDidComplete();                                                               // 31
      }                                                                                                       // 32
    };                                                                                                        // 33
    // 34
    var loadingCompleted = function () {                                                                      // 35
      if (!isLoadingCompleted) {                                                                              // 36
        isLoadingCompleted = true;                                                                            // 37
        maybeReady();                                                                                         // 38
      }                                                                                                       // 39
    }                                                                                                         // 40
    // 41
    if (Meteor.isCordova) {                                                                                   // 42
      holdReady();                                                                                            // 43
      document.addEventListener('deviceready', releaseReadyHold, false);                                      // 44
    }                                                                                                         // 45
    // 46
    if (document.readyState === 'complete' || document.readyState === 'loaded') {                             // 47
      // Loading has completed,                                                                               // 48
      // but allow other scripts the opportunity to hold ready                                                // 49
      window.setTimeout(loadingCompleted);                                                                    // 50
    } else { // Attach event listeners to wait for loading to complete                                        // 51
      if (document.addEventListener) {                                                                        // 52
        document.addEventListener('DOMContentLoaded', loadingCompleted, false);                               // 53
        window.addEventListener('load', loadingCompleted, false);                                             // 54
      } else { // Use IE event model for < IE9                                                                // 55
        document.attachEvent('onreadystatechange', function () {                                              // 56
          if (document.readyState === "complete") {                                                           // 57
            loadingCompleted();                                                                               // 58
          }                                                                                                   // 59
        });                                                                                                   // 60
        window.attachEvent('load', loadingCompleted);                                                         // 61
      }                                                                                                       // 62
    }                                                                                                         // 63
    // 64
    /**                                                                                                       // 65
     * @summary Run code when a client or a server starts.                                                    // 66
     * @locus Anywhere                                                                                        // 67
     * @param {Function} func A function to run on startup.                                                   // 68
     */                                                                                                       // 69
    Meteor.startup = function (callback) {                                                                    // 70
      // Fix for < IE9, see http://javascript.nwbox.com/IEContentLoaded/                                      // 71
      var doScroll = !document.addEventListener &&                                                            // 72
        document.documentElement.doScroll;                                                                    // 73
      // 74
      if (!doScroll || window !== top) {                                                                      // 75
        if (isReady)                                                                                          // 76
          callback();                                                                                         // 77
        else                                                                                                  // 78
          callbackQueue.push(callback);                                                                       // 79
      } else {                                                                                                // 80
        try { doScroll('left'); }                                                                             // 81
        catch (error) {                                                                                       // 82
          setTimeout(function () { Meteor.startup(callback); }, 50);                                          // 83
          return;                                                                                             // 84
        };                                                                                                    // 85
        callback();                                                                                           // 86
      }                                                                                                       // 87
    };                                                                                                        // 88
    // 89
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }).call(this);






  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                        //
    // packages/meteor/debug.js                                                                               //
    //                                                                                                        //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    var suppress = 0;                                                                                         // 1
    // 2
    // replacement for console.log. This is a temporary API. We should                                        // 3
    // provide a real logging API soon (possibly just a polyfill for                                          // 4
    // console?)                                                                                              // 5
    //                                                                                                        // 6
    // NOTE: this is used on the server to print the warning about                                            // 7
    // having autopublish enabled when you probably meant to turn it                                          // 8
    // off. it's not really the proper use of something called                                                // 9
    // _debug. the intent is for this message to go to the terminal and                                       // 10
    // be very visible. if you change _debug to go someplace else, etc,                                       // 11
    // please fix the autopublish code to do something reasonable.                                            // 12
    //                                                                                                        // 13
    Meteor._debug = function (/* arguments */) {                                                              // 14
      if (suppress) {                                                                                         // 15
        suppress--;                                                                                           // 16
        return;                                                                                               // 17
      }                                                                                                       // 18
      if (typeof console !== 'undefined' &&                                                                   // 19
        typeof console.log !== 'undefined') {                                                               // 20
        if (arguments.length == 0) { // IE Companion breaks otherwise                                         // 21
          // IE10 PP4 requires at least one argument                                                          // 22
          console.log('');                                                                                    // 23
        } else {                                                                                              // 24
          // IE doesn't have console.log.apply, it's not a real Object.                                       // 25
          // http://stackoverflow.com/questions/5538972/console-log-apply-not-working-in-ie9                  // 26
          // http://patik.com/blog/complete-cross-browser-console-log/                                        // 27
          if (typeof console.log.apply === "function") {                                                      // 28
            // Most browsers                                                                                  // 29
            // 30
            // Chrome and Safari only hyperlink URLs to source files in first argument of                     // 31
            // console.log, so try to call it with one argument if possible.                                  // 32
            // Approach taken here: If all arguments are strings, join them on space.                         // 33
            // See https://github.com/meteor/meteor/pull/732#issuecomment-13975991                            // 34
            var allArgumentsOfTypeString = true;                                                              // 35
            for (var i = 0; i < arguments.length; i++)                                                        // 36
              if (typeof arguments[i] !== "string")                                                           // 37
                allArgumentsOfTypeString = false;                                                             // 38
            // 39
            if (allArgumentsOfTypeString)                                                                     // 40
              console.log.apply(console, [Array.prototype.join.call(arguments, " ")]);                        // 41
            else                                                                                              // 42
              console.log.apply(console, arguments);                                                          // 43
            // 44
          } else if (typeof Function.prototype.bind === "function") {                                         // 45
            // IE9                                                                                            // 46
            var log = Function.prototype.bind.call(console.log, console);                                     // 47
            log.apply(console, arguments);                                                                    // 48
          } else {                                                                                            // 49
            // IE8                                                                                            // 50
            Function.prototype.call.call(console.log, console, Array.prototype.slice.call(arguments));        // 51
          }                                                                                                   // 52
        }                                                                                                     // 53
      }                                                                                                       // 54
    };                                                                                                        // 55
    // 56
    // Suppress the next 'count' Meteor._debug messsages. Use this to                                         // 57
    // stop tests from spamming the console.                                                                  // 58
    //                                                                                                        // 59
    Meteor._suppress_log = function (count) {                                                                 // 60
      suppress += count;                                                                                      // 61
    };                                                                                                        // 62
    // 63
    Meteor._suppressed_log_expected = function () {                                                           // 64
      return suppress !== 0;                                                                                  // 65
    };                                                                                                        // 66
    // 67
    // 68
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }).call(this);






  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                        //
    // packages/meteor/string_utils.js                                                                        //
    //                                                                                                        //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Like Perl's quotemeta: quotes all regexp metacharacters.                                               // 1
    // Code taken from                                                                                        // 2
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions                      // 3
    Meteor._escapeRegExp = function (string) {                                                                // 4
      return String(string).replace(/[.*+?^${}()|[\]\\]/g, "\\$&");                                         // 5
    };                                                                                                        // 6
    // 7
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }).call(this);






  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                        //
    // packages/meteor/test_environment.js                                                                    //
    //                                                                                                        //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    var TEST_METADATA_STR;                                                                                    // 1
    if (Meteor.isClient) {                                                                                    // 2
      TEST_METADATA_STR = meteorEnv.TEST_METADATA;                                                            // 3
    } else {                                                                                                  // 4
      TEST_METADATA_STR = process.env.TEST_METADATA;                                                          // 5
    }                                                                                                         // 6
    // 7
    var TEST_METADATA = JSON.parse(TEST_METADATA_STR || "{}");                                                // 8
    var testDriverPackageName = TEST_METADATA.driverPackage;                                                  // 9
    // 10
    // Note that if we are in test-packages mode neither of these will be set,                                // 11
    // but we will have a test driver package                                                                 // 12
    Meteor.isTest = !!TEST_METADATA.isTest;                                                                   // 13
    Meteor.isAppTest = !!TEST_METADATA.isAppTest;                                                             // 14
    Meteor.isPackageTest = !!testDriverPackageName && !Meteor.isTest && !Meteor.isAppTest;                    // 15
    // 16
    if (typeof testDriverPackageName === "string") {                                                          // 17
      Meteor.startup(function () {                                                                             // 18
        var testDriverPackage = Package[testDriverPackageName];                                               // 19
        if (!testDriverPackage) {                                                                            // 20
          throw new Error("Can't find test driver package: " + testDriverPackageName);                        // 21
        }                                                                                                     // 22
        // 23
        // On the client, the test driver *must* define `runTests`                                            // 24
        if (Meteor.isClient) {                                                                                // 25
          if (typeof testDriverPackage.runTests !== "function") {                                             // 26
            throw new Error("Test driver package " + testDriverPackageName                                    // 27
              + " missing `runTests` export");                                                                // 28
          }                                                                                                   // 29
          testDriverPackage.runTests();                                                                       // 30
        } else {                                                                                              // 31
          // The server can optionally define `start`                                                         // 32
          if (typeof testDriverPackage.start === "function") {                                                // 33
            testDriverPackage.start();                                                                        // 34
          }                                                                                                   // 35
        }                                                                                                     // 36
      });                                                                                                     // 37
    }                                                                                                         // 38
    // 39
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }).call(this);






  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                        //
    // packages/meteor/dynamics_browser.js                                                                    //
    //                                                                                                        //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Simple implementation of dynamic scoping, for use in browsers                                          // 1
    // 2
    var nextSlot = 0;                                                                                         // 3
    var currentValues = [];                                                                                   // 4
    // 5
    Meteor.EnvironmentVariable = function () {                                                                // 6
      this.slot = nextSlot++;                                                                                 // 7
    };                                                                                                        // 8
    // 9
    _.extend(Meteor.EnvironmentVariable.prototype, {                                                          // 10
      get: function () {                                                                                      // 11
        return currentValues[this.slot];                                                                      // 12
      },                                                                                                      // 13
      // 14
      getOrNullIfOutsideFiber: function () {                                                                  // 15
        return this.get();                                                                                    // 16
      },                                                                                                      // 17
      // 18
      withValue: function (value, func) {                                                                     // 19
        var saved = currentValues[this.slot];                                                                 // 20
        try {                                                                                                 // 21
          currentValues[this.slot] = value;                                                                   // 22
          var ret = func();                                                                                   // 23
        } finally {                                                                                           // 24
          currentValues[this.slot] = saved;                                                                   // 25
        }                                                                                                     // 26
        return ret;                                                                                           // 27
      }                                                                                                       // 28
    });                                                                                                       // 29
    // 30
    Meteor.bindEnvironment = function (func, onException, _this) {                                            // 31
      // needed in order to be able to create closures inside func and                                        // 32
      // have the closed variables not change back to their original                                          // 33
      // values                                                                                               // 34
      var boundValues = _.clone(currentValues);                                                               // 35
      // 36
      if (!onException || typeof (onException) === 'string') {                                                 // 37
        var description = onException || "callback of async function";                                        // 38
        onException = function (error) {                                                                      // 39
          Meteor._debug(                                                                                      // 40
            "Exception in " + description + ":",                                                              // 41
            error && error.stack || error                                                                     // 42
          );                                                                                                  // 43
        };                                                                                                    // 44
      }                                                                                                       // 45
      // 46
      return function (/* arguments */) {                                                                     // 47
        var savedValues = currentValues;                                                                      // 48
        try {                                                                                                 // 49
          currentValues = boundValues;                                                                        // 50
          var ret = func.apply(_this, _.toArray(arguments));                                                  // 51
        } catch (e) {                                                                                         // 52
          // note: callback-hook currently relies on the fact that if onException                             // 53
          // throws in the browser, the wrapped call throws.                                                  // 54
          onException(e);                                                                                     // 55
        } finally {                                                                                           // 56
          currentValues = savedValues;                                                                        // 57
        }                                                                                                     // 58
        return ret;                                                                                           // 59
      };                                                                                                      // 60
    };                                                                                                        // 61
    // 62
    Meteor._nodeCodeMustBeInFiber = function () {                                                             // 63
      // no-op on browser                                                                                     // 64
    };                                                                                                        // 65
    // 66
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }).call(this);






  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                        //
    // packages/meteor/url_common.js                                                                          //
    //                                                                                                        //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    /**                                                                                                       // 1
     * @summary Generate an absolute URL pointing to the application. The server reads from the `ROOT_URL` environment variable to determine where it is running. This is taken care of automatically for apps deployed to Galaxy, but must be provided when using `meteor build`.
     * @locus Anywhere                                                                                        // 3
     * @param {String} [path] A path to append to the root URL. Do not include a leading "`/`".               // 4
     * @param {Object} [options]                                                                              // 5
     * @param {Boolean} options.secure Create an HTTPS URL.                                                   // 6
     * @param {Boolean} options.replaceLocalhost Replace localhost with 127.0.0.1. Useful for services that don't recognize localhost as a domain name.
     * @param {String} options.rootUrl Override the default ROOT_URL from the server environment. For example: "`http://foo.example.com`"
     */                                                                                                       // 9
    Meteor.absoluteUrl = function (path, options) {                                                           // 10
      // path is optional                                                                                     // 11
      if (!options && typeof path === 'object') {                                                             // 12
        options = path;                                                                                       // 13
        path = undefined;                                                                                     // 14
      }                                                                                                       // 15
      // merge options with defaults                                                                          // 16
      options = _.extend({}, Meteor.absoluteUrl.defaultOptions, options || {});                               // 17
      // 18
      var url = options.rootUrl;                                                                              // 19
      if (!url)                                                                                               // 20
        throw new Error("Must pass options.rootUrl or set ROOT_URL in the server environment");               // 21
      // 22
      if (!/^http[s]?:\/\//i.test(url)) // url starts with 'http://' or 'https://'                            // 23
        url = 'http://' + url; // we will later fix to https if options.secure is set                         // 24
      // 25
      if (!/\/$/.test(url)) // url ends with '/'                                                              // 26
        url += '/';                                                                                           // 27
      // 28
      if (path)                                                                                               // 29
        url += path;                                                                                          // 30
      // 31
      // turn http to https if secure option is set, and we're not talking                                    // 32
      // to localhost.                                                                                        // 33
      if (options.secure &&                                                                                   // 34
        /^http:/.test(url) && // url starts with 'http:'                                                    // 35
        !/http:\/\/localhost[:\/]/.test(url) && // doesn't match localhost                                  // 36
        !/http:\/\/127\.0\.0\.1[:\/]/.test(url)) // or 127.0.0.1                                            // 37
        url = url.replace(/^http:/, 'https:');                                                                // 38
      // 39
      if (options.replaceLocalhost)                                                                           // 40
        url = url.replace(/^http:\/\/localhost([:\/].*)/, 'http://127.0.0.1$1');                              // 41
      // 42
      return url;                                                                                             // 43
    };                                                                                                        // 44
    // 45
    // allow later packages to override default options                                                       // 46
    Meteor.absoluteUrl.defaultOptions = {};                                                                  // 47
    if (typeof __meteor_runtime_config__ === "object" &&                                                      // 48
      __meteor_runtime_config__.ROOT_URL)                                                                   // 49
      Meteor.absoluteUrl.defaultOptions.rootUrl = __meteor_runtime_config__.ROOT_URL;                         // 50
    // 51
    // 52
    Meteor._relativeToSiteRootUrl = function (link) {                                                         // 53
      if (typeof __meteor_runtime_config__ === "object" &&                                                    // 54
        link.substr(0, 1) === "/")                                                                          // 55
        link = (__meteor_runtime_config__.ROOT_URL_PATH_PREFIX || "") + link;                                 // 56
      return link;                                                                                            // 57
    };                                                                                                        // 58
    // 59
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }).call(this);


  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols)
      (s in pkg) || (pkg[s] = symbols[s]);
  })(Package.meteor = {}, {
    Meteor: Meteor,
    global: global,
    meteorEnv: meteorEnv
  });

})();
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;

  /* Package-scope variables */
  var makeInstaller, meteorInstall;

  /////////////////////////////////////////////////////////////////////////////
  //                                                                         //
  // packages/modules-runtime/.npm/package/node_modules/install/install.js   //
  // This file is in bare mode and is not in its own closure.                //
  //                                                                         //
  /////////////////////////////////////////////////////////////////////////////
  //
  makeInstaller = function (options) {                                       // 1
    options = options || {};                                                 // 2
    // 3
    // These file extensions will be appended to required module identifiers
    // if they do not exactly match an installed module.                     // 5
    var defaultExtensions = options.extensions || [".js", ".json"];          // 6
    // 7
    // If defined, the options.onInstall function will be called any time    // 8
    // new modules are installed.                                            // 9
    var onInstall = options.onInstall;                                       // 10
    // 11
    // If defined, the options.override function will be called before       // 12
    // looking up any top-level package identifiers in node_modules          // 13
    // directories. It can either return a string to provide an alternate    // 14
    // package identifier, or a non-string value to prevent the lookup from  // 15
    // proceeding.                                                           // 16
    var override = options.override;                                         // 17
    // 18
    // If defined, the options.fallback function will be called when no      // 19
    // installed module is found for a required module identifier. Often     // 20
    // options.fallback will be implemented in terms of the native Node      // 21
    // require function, which has the ability to load binary modules.       // 22
    var fallback = options.fallback;                                         // 23
    // 24
    // Nothing special about MISSING.hasOwnProperty, except that it's fewer  // 25
    // characters than Object.prototype.hasOwnProperty after minification.   // 26
    var hasOwn = {}.hasOwnProperty;                                          // 27
    // 28
    // The file object representing the root directory of the installed      // 29
    // module tree.                                                          // 30
    var root = new File("/", new File("/.."));                               // 31
    var rootRequire = makeRequire(root);                                     // 32
    // 33
    // Merges the given tree of directories and module factory functions     // 34
    // into the tree of installed modules and returns a require function     // 35
    // that behaves as if called from a module in the root directory.        // 36
    function install(tree, options) {                                        // 37
      if (isObject(tree)) {                                                  // 38
        fileMergeContents(root, tree, options);                              // 39
        if (isFunction(onInstall)) {                                         // 40
          onInstall(rootRequire);                                            // 41
        }                                                                    // 42
      }                                                                      // 43
      return rootRequire;                                                    // 44
    }                                                                        // 45
    // 46
    // This constructor will be used to instantiate the module objects       // 47
    // passed to module factory functions (i.e. the third argument after     // 48
    // require and exports), and is exposed as install.Module in case the    // 49
    // caller of makeInstaller wishes to modify Module.prototype.            // 50
    function Module(id) {                                                    // 51
      this.id = id;                                                          // 52
      this.children = [];                                                    // 53
    }                                                                        // 54
    // 55
    Module.prototype.resolve = function (id) {                               // 56
      return this.require.resolve(id);                                       // 57
    };                                                                       // 58
    // 59
    install.Module = Module;                                                 // 60
    // 61
    function getOwn(obj, key) {                                              // 62
      return hasOwn.call(obj, key) && obj[key];                              // 63
    }                                                                        // 64
    // 65
    function isObject(value) {                                               // 66
      return value && typeof value === "object";                             // 67
    }                                                                        // 68
    // 69
    function isFunction(value) {                                             // 70
      return typeof value === "function";                                    // 71
    }                                                                        // 72
    // 73
    function isString(value) {                                               // 74
      return typeof value === "string";                                      // 75
    }                                                                        // 76
    // 77
    function makeRequire(file) {                                             // 78
      function require(id) {                                                 // 79
        var result = fileResolve(file, id);                                  // 80
        if (result) {                                                        // 81
          return fileEvaluate(result, file.m);                               // 82
        }                                                                    // 83
        // 84
        var error = new Error("Cannot find module '" + id + "'");            // 85
        // 86
        if (isFunction(fallback)) {                                          // 87
          return fallback(                                                   // 88
            id, // The missing module identifier.                            // 89
            file.m.id, // The path of the requiring file.                    // 90
            error // The error we would have thrown.                         // 91
          );                                                                 // 92
        }                                                                    // 93
        // 94
        throw error;                                                         // 95
      }                                                                      // 96
      // 97
      require.resolve = function (id) {                                      // 98
        var f = fileResolve(file, id);                                       // 99
        if (f) return f.m.id;                                                // 100
        var error = new Error("Cannot find module '" + id + "'");            // 101
        if (fallback && isFunction(fallback.resolve)) {                      // 102
          return fallback.resolve(id, file.m.id, error);                     // 103
        }                                                                    // 104
        throw error;                                                         // 105
      };                                                                     // 106
      // 107
      return require;                                                        // 108
    }                                                                        // 109
    // 110
    // File objects represent either directories or modules that have been   // 111
    // installed. When a `File` respresents a directory, its `.c` (contents)
    // property is an object containing the names of the files (or           // 113
    // directories) that it contains. When a `File` represents a module, its
    // `.c` property is a function that can be invoked with the appropriate  // 115
    // `(require, exports, module)` arguments to evaluate the module. If the
    // `.c` property is a string, that string will be resolved as a module   // 117
    // identifier, and the exports of the resulting module will provide the  // 118
    // exports of the original file. The `.p` (parent) property of a File is
    // either a directory `File` or `null`. Note that a child may claim      // 120
    // another `File` as its parent even if the parent does not have an      // 121
    // entry for that child in its `.c` object.  This is important for       // 122
    // implementing anonymous files, and preventing child modules from using
    // `../relative/identifier` syntax to examine unrelated modules.         // 124
    function File(name, parent) {                                            // 125
      var file = this;                                                       // 126
      // 127
      // Link to the parent file.                                            // 128
      file.p = parent = parent || null;                                      // 129
      // 130
      // The module object for this File, which will eventually boast an     // 131
      // .exports property when/if the file is evaluated.                    // 132
      file.m = new Module(name);                                             // 133
    }                                                                        // 134
    // 135
    function fileEvaluate(file, parentModule) {                              // 136
      var contents = file && file.c;                                         // 137
      var module = file.m;                                                   // 138
      // 139
      if (!hasOwn.call(module, "exports")) {                                // 140
        if (parentModule) {                                                  // 141
          module.parent = parentModule;                                      // 142
          var children = parentModule.children;                              // 143
          if (Array.isArray(children)) {                                     // 144
            children.push(module);                                           // 145
          }                                                                  // 146
        }                                                                    // 147
        // 148
        // If a Module.prototype.useNode method is defined, give it a chance
        // to define module.exports based on module.id using Node.           // 150
        if (!isFunction(module.useNode) ||                                  // 151
          !module.useNode()) {                                            // 152
          contents(                                                          // 153
            module.require = module.require || makeRequire(file),            // 154
            module.exports = {},                                             // 155
            module,                                                          // 156
            file.m.id,                                                       // 157
            file.p.m.id                                                      // 158
          );                                                                 // 159
        }                                                                    // 160
        // 161
        module.loaded = true;                                                // 162
      }                                                                      // 163
      // 164
      if (isFunction(module.runModuleSetters)) {                             // 165
        module.runModuleSetters();                                           // 166
      }                                                                      // 167
      // 168
      return module.exports;                                                 // 169
    }                                                                        // 170
    // 171
    function fileIsDirectory(file) {                                         // 172
      return file && isObject(file.c);                                       // 173
    }                                                                        // 174
    // 175
    function fileMergeContents(file, contents, options) {                    // 176
      // If contents is an array of strings and functions, return the last   // 177
      // function with a `.d` property containing all the strings.           // 178
      if (Array.isArray(contents)) {                                         // 179
        var deps = [];                                                       // 180
        // 181
        contents.forEach(function (item) {                                   // 182
          if (isString(item)) {                                              // 183
            deps.push(item);                                                 // 184
          } else if (isFunction(item)) {                                     // 185
            contents = item;                                                 // 186
          }                                                                  // 187
        });                                                                  // 188
        // 189
        if (isFunction(contents)) {                                          // 190
          contents.d = deps;                                                 // 191
        } else {                                                             // 192
          // If the array did not contain a function, merge nothing.         // 193
          contents = null;                                                   // 194
        }                                                                    // 195
        // 196
      } else if (isFunction(contents)) {                                     // 197
        // If contents is already a function, make sure it has `.d`.         // 198
        contents.d = contents.d || [];                                       // 199
        // 200
      } else if (!isString(contents) &&                                     // 201
        !isObject(contents)) {                                     // 202
        // If contents is neither an array nor a function nor a string nor   // 203
        // an object, just give up and merge nothing.                        // 204
        contents = null;                                                     // 205
      }                                                                      // 206
      // 207
      if (contents) {                                                        // 208
        file.c = file.c || (isObject(contents) ? {} : contents);             // 209
        if (isObject(contents) && fileIsDirectory(file)) {                   // 210
          Object.keys(contents).forEach(function (key) {                     // 211
            if (key === "..") {                                              // 212
              child = file.p;                                                // 213
              // 214
            } else {                                                         // 215
              var child = getOwn(file.c, key);                               // 216
              if (!child) {                                                 // 217
                child = file.c[key] = new File(                              // 218
                  file.m.id.replace(/\/*$/, "/") + key,                      // 219
                  file                                                       // 220
                );                                                           // 221
                // 222
                child.o = options;                                           // 223
              }                                                              // 224
            }                                                                // 225
            // 226
            fileMergeContents(child, contents[key], options);                // 227
          });                                                                // 228
        }                                                                    // 229
      }                                                                      // 230
    }                                                                        // 231
    // 232
    function fileGetExtensions(file) {                                       // 233
      return file.o && file.o.extensions || defaultExtensions;               // 234
    }                                                                        // 235
    // 236
    function fileAppendIdPart(file, part, extensions) {                      // 237
      // Always append relative to a directory.                              // 238
      while (file && !fileIsDirectory(file)) {                              // 239
        file = file.p;                                                       // 240
      }                                                                      // 241
      // 242
      if (!file || !part || part === ".") {                                // 243
        return file;                                                         // 244
      }                                                                      // 245
      // 246
      if (part === "..") {                                                   // 247
        return file.p;                                                       // 248
      }                                                                      // 249
      // 250
      var exactChild = getOwn(file.c, part);                                 // 251
      // 252
      // Only consider multiple file extensions if this part is the last     // 253
      // part of a module identifier and not equal to `.` or `..`, and there
      // was no exact match or the exact match was a directory.              // 255
      if (extensions && (!exactChild || fileIsDirectory(exactChild))) {     // 256
        for (var e = 0; e < extensions.length; ++e) {                        // 257
          var child = getOwn(file.c, part + extensions[e]);                  // 258
          if (child) {                                                       // 259
            return child;                                                    // 260
          }                                                                  // 261
        }                                                                    // 262
      }                                                                      // 263
      // 264
      return exactChild;                                                     // 265
    }                                                                        // 266
    // 267
    function fileAppendId(file, id, extensions) {                            // 268
      var parts = id.split("/");                                             // 269
      // 270
      // Use `Array.prototype.every` to terminate iteration early if         // 271
      // `fileAppendIdPart` returns a falsy value.                           // 272
      parts.every(function (part, i) {                                       // 273
        return file = i < parts.length - 1                                   // 274
          ? fileAppendIdPart(file, part)                                     // 275
          : fileAppendIdPart(file, part, extensions);                        // 276
      });                                                                    // 277
      // 278
      return file;                                                           // 279
    }                                                                        // 280
    // 281
    function fileResolve(file, id, seenDirFiles) {                           // 282
      var extensions = fileGetExtensions(file);                              // 283
      // 284
      file =                                                                 // 285
        // Absolute module identifiers (i.e. those that begin with a `/`     // 286
        // character) are interpreted relative to the root directory, which  // 287
        // is a slight deviation from Node, which has access to the entire   // 288
        // file system.                                                      // 289
        id.charAt(0) === "/" ? fileAppendId(root, id, extensions) :          // 290
          // Relative module identifiers are interpreted relative to the       // 291
          // current file, naturally.                                          // 292
          id.charAt(0) === "." ? fileAppendId(file, id, extensions) :          // 293
            // Top-level module identifiers are interpreted as referring to      // 294
            // packages in `node_modules` directories.                           // 295
            nodeModulesLookup(file, id, extensions);                             // 296
      // 297
      // If the identifier resolves to a directory, we use the same logic as
      // Node to find an `index.js` or `package.json` file to evaluate.      // 299
      while (fileIsDirectory(file)) {                                        // 300
        seenDirFiles = seenDirFiles || [];                                   // 301
        // 302
        // If the "main" field of a `package.json` file resolves to a        // 303
        // directory we've already considered, then we should not attempt to
        // read the same `package.json` file again. Using an array as a set  // 305
        // is acceptable here because the number of directories to consider  // 306
        // is rarely greater than 1 or 2. Also, using indexOf allows us to   // 307
        // store File objects instead of strings.                            // 308
        if (seenDirFiles.indexOf(file) < 0) {                                // 309
          seenDirFiles.push(file);                                           // 310
          // 311
          var pkgJsonFile = fileAppendIdPart(file, "package.json");          // 312
          var main = pkgJsonFile && fileEvaluate(pkgJsonFile).main;          // 313
          if (isString(main)) {                                              // 314
            // The "main" field of package.json does not have to begin with  // 315
            // ./ to be considered relative, so first we try simply          // 316
            // appending it to the directory path before falling back to a   // 317
            // full fileResolve, which might return a package from a         // 318
            // node_modules directory.                                       // 319
            file = fileAppendId(file, main, extensions) ||                   // 320
              fileResolve(file, main, seenDirFiles);                         // 321
            // 322
            if (file) {                                                      // 323
              // The fileAppendId call above may have returned a directory,  // 324
              // so continue the loop to make sure we resolve it to a        // 325
              // non-directory file.                                         // 326
              continue;                                                      // 327
            }                                                                // 328
          }                                                                  // 329
        }                                                                    // 330
        // 331
        // If we didn't find a `package.json` file, or it didn't have a      // 332
        // resolvable `.main` property, the only possibility left to         // 333
        // consider is that this directory contains an `index.js` module.    // 334
        // This assignment almost always terminates the while loop, because  // 335
        // there's very little chance `fileIsDirectory(file)` will be true   // 336
        // for the result of `fileAppendIdPart(file, "index.js")`. However,  // 337
        // in principle it is remotely possible that a file called           // 338
        // `index.js` could be a directory instead of a file.                // 339
        file = fileAppendIdPart(file, "index.js");                           // 340
      }                                                                      // 341
      // 342
      if (file && isString(file.c)) {                                        // 343
        file = fileResolve(file, file.c, seenDirFiles);                      // 344
      }                                                                      // 345
      // 346
      return file;                                                           // 347
    };                                                                       // 348
    // 349
    function nodeModulesLookup(file, id, extensions) {                       // 350
      if (isFunction(override)) {                                            // 351
        id = override(id, file.m.id);                                        // 352
      }                                                                      // 353
      // 354
      if (isString(id)) {                                                    // 355
        for (var resolved; file && !resolved; file = file.p) {              // 356
          resolved = fileIsDirectory(file) &&                                // 357
            fileAppendId(file, "node_modules/" + id, extensions);            // 358
        }                                                                    // 359
        // 360
        return resolved;                                                     // 361
      }                                                                      // 362
    }                                                                        // 363
    // 364
    return install;                                                          // 365
  };                                                                         // 366
  // 367
  if (typeof exports === "object") {                                         // 368
    exports.makeInstaller = makeInstaller;                                   // 369
  }                                                                          // 370
  // 371
  /////////////////////////////////////////////////////////////////////////////







  (function () {

    /////////////////////////////////////////////////////////////////////////////
    //                                                                         //
    // packages/modules-runtime/modules-runtime.js                             //
    //                                                                         //
    /////////////////////////////////////////////////////////////////////////////
    //
    var options = {};                                                          // 1
    var hasOwn = options.hasOwnProperty;                                       // 2
    // 3
    // RegExp matching strings that don't start with a `.` or a `/`.           // 4
    var topLevelIdPattern = /^[^./]/;                                          // 5
    // 6
    // This function will be called whenever a module identifier that hasn't   // 7
    // been installed is required. For backwards compatibility, and so that we
    // can require binary dependencies on the server, we implement the         // 9
    // fallback in terms of Npm.require.                                       // 10
    options.fallback = function (id, parentId, error) {                        // 11
      // For simplicity, we honor only top-level module identifiers here.      // 12
      // We could try to honor relative and absolute module identifiers by     // 13
      // somehow combining `id` with `dir`, but we'd have to be really careful
      // that the resulting modules were located in a known directory (not     // 15
      // some arbitrary location on the file system), and we only really need  // 16
      // the fallback for dependencies installed in node_modules directories.  // 17
      if (topLevelIdPattern.test(id)) {                                        // 18
        if (typeof Npm === "object" &&                                         // 19
          typeof Npm.require === "function") {                               // 20
          return Npm.require(id);                                              // 21
        }                                                                      // 22
      }                                                                        // 23
      // 24
      throw error;                                                             // 25
    };                                                                         // 26
    // 27
    options.fallback.resolve = function (id, parentId, error) {                // 28
      if (Meteor.isServer &&                                                   // 29
        topLevelIdPattern.test(id)) {                                        // 30
        // Allow any top-level identifier to resolve to itself on the server,  // 31
        // so that options.fallback can have a chance to handle it.            // 32
        return id;                                                             // 33
      }                                                                        // 34
      // 35
      throw error;                                                             // 36
    };                                                                         // 37
    // 38
    meteorInstall = makeInstaller(options);                                    // 39
    var Mp = meteorInstall.Module.prototype;                                   // 40
    // 41
    if (Meteor.isServer) {                                                     // 42
      Mp.useNode = function () {                                               // 43
        if (typeof npmRequire !== "function") {                                // 44
          // Can't use Node if npmRequire is not defined.                      // 45
          return false;                                                        // 46
        }                                                                      // 47
        // 48
        var parts = this.id.split("/");                                        // 49
        var start = 0;                                                         // 50
        if (parts[start] === "") ++start;                                      // 51
        if (parts[start] === "node_modules" &&                                 // 52
          parts[start + 1] === "meteor") {                                   // 53
          start += 2;                                                          // 54
        }                                                                      // 55
        // 56
        if (parts.indexOf("node_modules", start) < 0) {                        // 57
          // Don't try to use Node for modules that aren't in node_modules     // 58
          // directories.                                                      // 59
          return false;                                                        // 60
        }                                                                      // 61
        // 62
        try {                                                                  // 63
          npmRequire.resolve(this.id);                                         // 64
        } catch (e) {                                                          // 65
          return false;                                                        // 66
        }                                                                      // 67
        // 68
        this.exports = npmRequire(this.id);                                    // 69
        // 70
        return true;                                                           // 71
      };                                                                       // 72
    }                                                                          // 73
    // 74
    /////////////////////////////////////////////////////////////////////////////

  }).call(this);


  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols)
      (s in pkg) || (pkg[s] = symbols[s]);
  })(Package['modules-runtime'] = {}, {
    meteorInstall: meteorInstall
  });

})();
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var _ = Package.underscore._;
  var meteorInstall = Package['modules-runtime'].meteorInstall;

  /* Package-scope variables */
  var Buffer, process;

  var require = meteorInstall({
    "node_modules": {
      "meteor": {
        "modules": {
          "client.js": ["./install-packages.js", "./stubs.js", "./buffer.js", "./process.js", "reify/lib/runtime", "./css", function (require, exports, module) {

            ///////////////////////////////////////////////////////////////////////////////
            //                                                                           //
            // packages/modules/client.js                                                //
            //                                                                           //
            ///////////////////////////////////////////////////////////////////////////////
            //
            require("./install-packages.js");                                            // 1
            require("./stubs.js");                                                       // 2
            require("./buffer.js");                                                      // 3
            require("./process.js");                                                     // 4
            require("reify/lib/runtime").enable(module.constructor);                     // 5
            // 6
            exports.addStyles = require("./css").addStyles;                              // 7
            // 8
            ///////////////////////////////////////////////////////////////////////////////

          }], "buffer.js": ["buffer", function (require) {

            ///////////////////////////////////////////////////////////////////////////////
            //                                                                           //
            // packages/modules/buffer.js                                                //
            //                                                                           //
            ///////////////////////////////////////////////////////////////////////////////
            //
            try {                                                                        // 1
              Buffer = global.Buffer || require("buffer").Buffer;                        // 2
            } catch (noBuffer) { }                                                        // 3
            // 4
            ///////////////////////////////////////////////////////////////////////////////

          }], "css.js": function (require, exports) {

            ///////////////////////////////////////////////////////////////////////////////
            //                                                                           //
            // packages/modules/css.js                                                   //
            //                                                                           //
            ///////////////////////////////////////////////////////////////////////////////
            //
            var doc = document;                                                          // 1
            var head = doc.getElementsByTagName("head").item(0);                         // 2
            // 3
            exports.addStyles = function (css) {                                         // 4
              var style = doc.createElement("style");                                    // 5
              // 6
              style.setAttribute("type", "text/css");                                    // 7
              // 8
              // https://msdn.microsoft.com/en-us/library/ms535871(v=vs.85).aspx         // 9
              var internetExplorerSheetObject =                                          // 10
                style.sheet || // Edge/IE11.                                             // 11
                style.styleSheet; // Older IEs.                                          // 12
              // 13
              if (internetExplorerSheetObject) {                                         // 14
                internetExplorerSheetObject.cssText = css;                               // 15
              } else {                                                                   // 16
                style.appendChild(doc.createTextNode(css));                              // 17
              }                                                                          // 18
              // 19
              return head.appendChild(style);                                            // 20
            };                                                                           // 21
            // 22
            ///////////////////////////////////////////////////////////////////////////////

          }, "install-packages.js": function (require, exports, module) {

            ///////////////////////////////////////////////////////////////////////////////
            //                                                                           //
            // packages/modules/install-packages.js                                      //
            //                                                                           //
            ///////////////////////////////////////////////////////////////////////////////
            //
            function install(name, mainModule) {                                         // 1
              var meteorDir = {};                                                        // 2
              // 3
              // Given a package name <name>, install a stub module in the               // 4
              // /node_modules/meteor directory called <name>.js, so that                // 5
              // require.resolve("meteor/<name>") will always return                     // 6
              // /node_modules/meteor/<name>.js instead of something like                // 7
              // /node_modules/meteor/<name>/index.js, in the rare but possible event    // 8
              // that the package contains a file called index.js (#6590).               // 9
              // 10
              if (mainModule) {                                                          // 11
                meteorDir[name + ".js"] = [mainModule, function (require, e, module) {   // 12
                  module.exports = require(mainModule);                                  // 13
                }];                                                                      // 14
              } else {                                                                   // 15
                // back compat with old Meteor packages                                  // 16
                meteorDir[name + ".js"] = function (r, e, module) {                      // 17
                  module.exports = Package[name];                                        // 18
                };                                                                       // 19
              }                                                                          // 20
              // 21
              meteorInstall({                                                            // 22
                node_modules: {                                                          // 23
                  meteor: meteorDir                                                      // 24
                }                                                                        // 25
              });                                                                        // 26
            }                                                                            // 27
            // 28
            // This file will be modified during computeJsOutputFilesMap to include      // 29
            // install(<name>) calls for every Meteor package.                           // 30
            // 31
            install("underscore");                                                       // 32
            install("meteor");                                                           // 33
            install("modules-runtime");                                                  // 34
            install("modules", "meteor/modules/client.js");                              // 35
            install("base64");                                                           // 36
            install("ejson");                                                            // 37
            install("check", "meteor/check/match.js");                                   // 38
            install("promise", "meteor/promise/client.js");                              // 39
            install("ecmascript-runtime", "meteor/ecmascript-runtime/runtime.js");       // 40
            install("babel-compiler");                                                   // 41
            install("ecmascript");                                                       // 42
            install("babel-runtime");                                                    // 43
            install("random");                                                           // 44
            install("tracker");                                                          // 45
            install("retry");                                                            // 46
            install("id-map");                                                           // 47
            install("ddp-common");                                                       // 48
            install("diff-sequence");                                                    // 49
            install("mongo-id");                                                         // 50
            install("ddp-client");                                                       // 51
            install("ddp");                                                              // 52
            install("ordered-dict");                                                     // 53
            install("geojson-utils", "meteor/geojson-utils/main.js");                    // 54
            install("minimongo");                                                        // 55
            install("ddp-server");                                                       // 56
            install("allow-deny");                                                       // 57
            install("mongo");                                                            // 58
            // 59
            ///////////////////////////////////////////////////////////////////////////////

          }, "process.js": ["process", function (require, exports, module) {

            ///////////////////////////////////////////////////////////////////////////////
            //                                                                           //
            // packages/modules/process.js                                               //
            //                                                                           //
            ///////////////////////////////////////////////////////////////////////////////
            //
            try {                                                                        // 1
              // The application can run `npm install process` to provide its own        // 2
              // process stub; otherwise this module will provide a partial stub.        // 3
              process = global.process || require("process");                            // 4
            } catch (noProcess) {                                                        // 5
              process = {};                                                              // 6
            }                                                                            // 7
            // 8
            if (Meteor.isServer) {                                                       // 9
              // Make require("process") work on the server in all versions of Node.     // 10
              meteorInstall({                                                            // 11
                node_modules: {                                                          // 12
                  "process.js": function (r, e, module) {                                // 13
                    module.exports = process;                                            // 14
                  }                                                                      // 15
                }                                                                        // 16
              });                                                                        // 17
            } else {                                                                     // 18
              process.platform = "browser";                                              // 19
              process.nextTick = process.nextTick || Meteor._setImmediate;               // 20
            }                                                                            // 21
            // 22
            if (typeof process.env !== "object") {                                       // 23
              process.env = {};                                                          // 24
            }                                                                            // 25
            // 26
            _.extend(process.env, meteorEnv);                                            // 27
            // 28
            ///////////////////////////////////////////////////////////////////////////////

          }], "stubs.js": ["meteor-node-stubs", function (require) {

            ///////////////////////////////////////////////////////////////////////////////
            //                                                                           //
            // packages/modules/stubs.js                                                 //
            //                                                                           //
            ///////////////////////////////////////////////////////////////////////////////
            //
            try {                                                                        // 1
              // When meteor-node-stubs is installed in the application's root           // 2
              // node_modules directory, requiring it here installs aliases for stubs    // 3
              // for all Node built-in modules, such as fs, util, and http.              // 4
              require("meteor-node-stubs");                                              // 5
            } catch (noStubs) { }                                                         // 6
            // 7
            ///////////////////////////////////////////////////////////////////////////////

          }], "node_modules": {
            "reify": {
              "lib": {
                "runtime.js": ["./entry.js", "./utils.js", function (require, exports, module) {

                  ///////////////////////////////////////////////////////////////////////////////
                  //                                                                           //
                  // node_modules/meteor/modules/node_modules/reify/lib/runtime.js             //
                  //                                                                           //
                  ///////////////////////////////////////////////////////////////////////////////
                  //
                  var Entry = require("./entry.js").Entry;                                     // 1
                  var utils = require("./utils.js");                                           // 2
                  // 3
                  exports.enable = function (Module) {                                         // 4
                    var Mp = Module.prototype;                                                 // 5
                    // 6
                    if (typeof Mp.import === "function" &&                                     // 7
                      typeof Mp.export === "function") {                                     // 8
                      // If the Mp.{import,export} methods have already been                   // 9
                      // defined, abandon reification immediately.                             // 10
                      return Module;                                                           // 11
                    }                                                                          // 12
                    // 13
                    // Platform-specific code should implement this method however             // 14
                    // appropriate. Module.prototype.resolve(id) should return an absolute     // 15
                    // version of the given module identifier, like require.resolve.           // 16
                    Mp.resolve = Mp.resolve || function resolve(id) {                          // 17
                      throw new Error("Module.prototype.resolve not implemented");             // 18
                    };                                                                         // 19
                    // 20
                    // Platform-specific code should find a way to call this method whenever   // 21
                    // the module system is about to return module.exports from require. This  // 22
                    // might happen more than once per module, in case of dependency cycles,   // 23
                    // so we want Module.prototype.runModuleSetters to run each time.          // 24
                    Mp.runModuleSetters = function runModuleSetters(valueToPassThrough) {      // 25
                      var entry = Entry.get(this.id);                                          // 26
                      if (entry) {                                                             // 27
                        entry.runModuleSetters(this);                                          // 28
                      }                                                                        // 29
                      // 30
                      // Assignments to exported local variables get wrapped with calls to     // 31
                      // module.runModuleSetters, so module.runModuleSetters returns the       // 32
                      // valueToPassThrough parameter to allow the value of the original       // 33
                      // expression to pass through. For example,                              // 34
                      //                                                                       // 35
                      //   export var a = 1;                                                   // 36
                      //   console.log(a += 3);                                                // 37
                      //                                                                       // 38
                      // becomes                                                               // 39
                      //                                                                       // 40
                      //   module.export("a", () => a);                                        // 41
                      //   var a = 1;                                                          // 42
                      //   console.log(module.runModuleSetters(a += 3));                       // 43
                      //                                                                       // 44
                      // This ensures module.runModuleSetters runs immediately after the       // 45
                      // assignment, and does not interfere with the larger computation.       // 46
                      return valueToPassThrough;                                               // 47
                    };                                                                         // 48
                    // 49
                    function setESModule(module) {                                             // 50
                      var exports = module.exports;                                            // 51
                      if (exports && typeof exports === "object") {                            // 52
                        exports.__esModule = true;                                             // 53
                      }                                                                        // 54
                    }                                                                          // 55
                    // 56
                    Mp.import = function (id, setters) {                                       // 57
                      var module = this;                                                       // 58
                      setESModule(module);                                                     // 59
                      // 60
                      var absoluteId = module.resolve(id);                                     // 61
                      // 62
                      if (setters && typeof setters === "object") {                            // 63
                        var entry = Entry.getOrCreate(absoluteId);                             // 64
                        entry.addSetters(module, setters);                                     // 65
                      }                                                                        // 66
                      // 67
                      var countBefore = entry && entry.runCount;                               // 68
                      var exports = typeof module.require === "function"                       // 69
                        ? module.require(absoluteId)                                           // 70
                        : require(absoluteId);                                                 // 71
                      // 72
                      if (entry && entry.runCount === countBefore) {                           // 73
                        // If require(absoluteId) didn't run any setters for this entry,       // 74
                        // perhaps because it's not the first time this module has been        // 75
                        // required, run the setters now using an object that passes as the    // 76
                        // real module object.                                                 // 77
                        entry.runModuleSetters({                                               // 78
                          id: absoluteId,                                                      // 79
                          exports: exports,                                                    // 80
                          getExportByName: Mp.getExportByName                                  // 81
                        });                                                                    // 82
                      }                                                                        // 83
                    };                                                                         // 84
                    // 85
                    // Register getter functions for local variables in the scope of an        // 86
                    // export statement. The keys of the getters object are exported names,    // 87
                    // and the values are functions that return local values.                  // 88
                    Mp.export = function (getters) {                                           // 89
                      var module = this;                                                       // 90
                      setESModule(module);                                                     // 91
                      // 92
                      if (utils.isPlainObject(getters)) {                                      // 93
                        Entry.getOrCreate(module.id).addGetters(getters);                      // 94
                      }                                                                        // 95
                      // 96
                      if (module.loaded) {                                                     // 97
                        // If the module has already been evaluated, then we need to trigger   // 98
                        // another round of entry.runModuleSetters calls, which begins by      // 99
                        // calling entry.runModuleGetters(module).                             // 100
                        module.runModuleSetters();                                             // 101
                      }                                                                        // 102
                    };                                                                         // 103
                    // 104
                    // This method can be overridden by client code to implement custom export
                    // naming logic. The current implementation works well with Babel's        // 106
                    // __esModule convention.                                                  // 107
                    Mp.getExportByName = function (name) {                                     // 108
                      var exports = this.exports;                                              // 109
                      // 110
                      if (name === "*") {                                                      // 111
                        return exports;                                                        // 112
                      }                                                                        // 113
                      // 114
                      if (name === "default" &&                                                // 115
                        !(exports &&                                                        // 116
                          typeof exports === "object" &&                                    // 117
                          exports.__esModule &&                                             // 118
                          "default" in exports)) {                                          // 119
                        return exports;                                                        // 120
                      }                                                                        // 121
                      // 122
                      return exports && exports[name];                                         // 123
                    };                                                                         // 124
                    // 125
                    return Module;                                                             // 126
                  };                                                                           // 127
                  // 128
                  ///////////////////////////////////////////////////////////////////////////////

                }], "entry.js": ["./utils.js", function (require, exports, module) {

                  ///////////////////////////////////////////////////////////////////////////////
                  //                                                                           //
                  // node_modules/meteor/modules/node_modules/reify/lib/entry.js               //
                  //                                                                           //
                  ///////////////////////////////////////////////////////////////////////////////
                  //
                  var hasOwn = Object.prototype.hasOwnProperty;                                // 1
                  var entryMap = Object.create(null);                                          // 2
                  var utils = require("./utils.js");                                           // 3
                  // 4
                  function Entry(id) {                                                         // 5
                    // Same as module.id for this module.                                      // 6
                    this.id = id;                                                              // 7
                    // The number of times this.runModuleSetters has been called.              // 8
                    this.runCount = 0;                                                         // 9
                    // Setters for assigning to local variables in parent modules.             // 10
                    this.setters = Object.create(null);                                        // 11
                    // Getters for local variables exported from this module.                  // 12
                    this.getters = Object.create(null);                                        // 13
                  }                                                                            // 14
                  // 15
                  var Ep = Entry.prototype;                                                    // 16
                  // 17
                  Entry.get = function (id) {                                                  // 18
                    return entryMap[id] || null;                                               // 19
                  };                                                                           // 20
                  // 21
                  Entry.getOrCreate = function (id) {                                          // 22
                    return entryMap[id] = entryMap[id] || new Entry(id);                       // 23
                  };                                                                           // 24
                  // 25
                  Ep.addSetters = function (parent, setters) {                                 // 26
                    var entry = this;                                                          // 27
                    // 28
                    Object.keys(setters).forEach(function (name) {                             // 29
                      var setter = setters[name];                                              // 30
                      if (typeof setter === "function" &&                                      // 31
                        // Ignore any requests for the exports.__esModule property."         // 32
                        name !== "__esModule") {                                             // 33
                        setter.parent = parent;                                                // 34
                        (entry.setters[name] =                                                 // 35
                          entry.setters[name] || []                                             // 36
                        ).push(setter);                                                        // 37
                      }                                                                        // 38
                    });                                                                        // 39
                  };                                                                           // 40
                  // 41
                  Ep.addGetters = function (getters) {                                         // 42
                    var entry = this;                                                          // 43
                    Object.keys(getters).forEach(function (name) {                             // 44
                      var getter = getters[name];                                              // 45
                      if (typeof getter === "function" &&                                      // 46
                        // Ignore any requests for the exports.__esModule property."         // 47
                        name !== "__esModule") {                                             // 48
                        // Should this throw if hasOwn.call(this.getters, name)?               // 49
                        entry.getters[name] = getter;                                          // 50
                      }                                                                        // 51
                    });                                                                        // 52
                  };                                                                           // 53
                  // 54
                  function runModuleSetters(module) {                                          // 55
                    var entry = entryMap[module.id];                                           // 56
                    if (entry) {                                                               // 57
                      entry.runModuleSetters(module);                                          // 58
                    }                                                                          // 59
                  }                                                                            // 60
                  // 61
                  function runModuleGetters(module) {                                          // 62
                    var entry = entryMap[module.id];                                           // 63
                    return entry ? entry.runModuleGetters(module) : 0;                         // 64
                  }                                                                            // 65
                  // 66
                  Ep.runModuleGetters = function (module) {                                    // 67
                    var entry = this;                                                          // 68
                    var changeCount = 0;                                                       // 69
                    // 70
                    Object.keys(entry.getters).forEach(function (name) {                       // 71
                      if (entry.runGetter(module, name)) {                                     // 72
                        ++changeCount;                                                         // 73
                      }                                                                        // 74
                    });                                                                        // 75
                    // 76
                    return changeCount;                                                        // 77
                  };                                                                           // 78
                  // 79
                  // Returns true iff the getter updated module.exports with a new value.      // 80
                  Ep.runGetter = function (module, name) {                                     // 81
                    if (!hasOwn.call(this.getters, name)) {                                   // 82
                      return false;                                                            // 83
                    }                                                                          // 84
                    // 85
                    var getter = this.getters[name];                                           // 86
                    try {                                                                      // 87
                      var value = getter.call(module);                                         // 88
                    } catch (e) { }                                                             // 89
                    var exports = module.exports;                                              // 90
                    // 91
                    if (!hasOwn.call(exports, name) ||                                        // 92
                      exports[name] !== value) {                                             // 93
                      // We update module.exports[name] with the current value so that         // 94
                      // CommonJS require calls remain consistent with module.import.          // 95
                      exports[name] = value;                                                   // 96
                      return true;                                                             // 97
                    }                                                                          // 98
                    // 99
                    return false;                                                              // 100
                  };                                                                           // 101
                  // 102
                  // Called whenever module.exports might have changed, to trigger any         // 103
                  // setters associated with the newly exported values.                        // 104
                  Ep.runModuleSetters = function (module) {                                    // 105
                    var entry = this;                                                          // 106
                    var names = Object.keys(entry.setters);                                    // 107
                    // 108
                    // Make sure module.exports is up to date before we call                   // 109
                    // module.getExportByName(name).                                           // 110
                    entry.runModuleGetters(module);                                            // 111
                    // 112
                    // Invoke the given callback once for every (setter, value, name) triple   // 113
                    // that needs to be called. Note that forEachSetter does not call any      // 114
                    // setters itself, only the given callback.                                // 115
                    function forEachSetter(callback, context) {                                // 116
                      names.forEach(function (name) {                                          // 117
                        entry.setters[name].forEach(function (setter) {                        // 118
                          var value = module.getExportByName(name);                            // 119
                          if (name === "*") {                                                  // 120
                            Object.keys(value).forEach(function (name) {                       // 121
                              call(setter, value[name], name);                                 // 122
                            });                                                                // 123
                          } else {                                                             // 124
                            call(setter, value, name);                                         // 125
                          }                                                                    // 126
                        });                                                                    // 127
                      });                                                                      // 128
                      // 129
                      function call(setter, value, name) {                                     // 130
                        if (name === "__esModule") {                                           // 131
                          // Ignore setters asking for module.exports.__esModule.              // 132
                          return;                                                              // 133
                        }                                                                      // 134
                        // 135
                        setter.last = setter.last || Object.create(null);                      // 136
                        // 137
                        if (!hasOwn.call(setter.last, name) ||                                // 138
                          setter.last[name] !== value) {                                     // 139
                          // Only invoke the callback if we have not called this setter        // 140
                          // (with a value of this name) before, or the current value is       // 141
                          // different from the last value we passed to this setter.           // 142
                          return callback.apply(context, arguments);                           // 143
                        }                                                                      // 144
                      }                                                                        // 145
                    }                                                                          // 146
                    // 147
                    // Every three elements of this list form a (setter, value, name) triple   // 148
                    // that needs to be invoked.                                               // 149
                    var settersToCall = [];                                                    // 150
                    // 151
                    // Lazily-initialized objects mapping parent module identifiers to         // 152
                    // relevant parent module objects and snapshots of their exports.          // 153
                    var relevantParents;                                                       // 154
                    var parentSnapshots;                                                       // 155
                    // 156
                    // Take snapshots of setter.parent.exports for any setters that we are     // 157
                    // planning to call, so that we can later determine if calling the         // 158
                    // setters modified any of those exports objects.                          // 159
                    forEachSetter(function (setter, value, name) {                             // 160
                      var parent = setter.parent;                                              // 161
                      parentSnapshots = parentSnapshots || Object.create(null);                // 162
                      if (!hasOwn.call(parentSnapshots, parent.id)) {                         // 163
                        relevantParents = relevantParents || Object.create(null);              // 164
                        relevantParents[parent.id] = parent;                                   // 165
                        if (utils.isPlainObject(parent.exports)) {                             // 166
                          // If parent.exports is an object, make a shallow clone of it so     // 167
                          // that we can see if it changes as a result of calling setters.     // 168
                          parentSnapshots[parent.id] = utils.assign({}, parent.exports);       // 169
                        } else {                                                               // 170
                          // If parent.exports is not an object, the "snapshot" is just the    // 171
                          // value of parent.exports.                                          // 172
                          parentSnapshots[parent.id] = parent.exports;                         // 173
                        }                                                                      // 174
                      }                                                                        // 175
                      // 176
                      // Push three elements at a time to avoid creating wrapper arrays for    // 177
                      // each (setter, value, name) triple. Note the i += 3 below.             // 178
                      settersToCall.push(setter, value, name);                                 // 179
                    });                                                                        // 180
                    // 181
                    // Now call all the setters that we decided we need to call.               // 182
                    for (var i = 0; i < settersToCall.length; i += 3) {                        // 183
                      var setter = settersToCall[i];                                           // 184
                      var value = settersToCall[i + 1];                                        // 185
                      var name = settersToCall[i + 2];                                         // 186
                      setter.call(module, setter.last[name] = value, name);                    // 187
                    }                                                                          // 188
                    // 189
                    ++entry.runCount;                                                          // 190
                    // 191
                    if (!relevantParents) {                                                   // 192
                      // If we never called takeSnapshot, then we can avoid checking           // 193
                      // relevantParents and parentSnapshots below.                            // 194
                      return;                                                                  // 195
                    }                                                                          // 196
                    // 197
                    // If any of the setters updated the module.exports of a parent module,    // 198
                    // or updated local variables that are exported by that parent module,     // 199
                    // then we must re-run any setters registered by that parent module.       // 200
                    Object.keys(relevantParents).forEach(function (id) {                       // 201
                      var parent = relevantParents[id];                                        // 202
                      // 203
                      if (runModuleGetters(parent) > 0) {                                      // 204
                        return runModuleSetters(parent);                                       // 205
                      }                                                                        // 206
                      // 207
                      var exports = parent.exports;                                            // 208
                      var snapshot = parentSnapshots[parent.id];                               // 209
                      if (utils.shallowObjEqual(exports, snapshot)) {                          // 210
                        // If parent.exports have not changed since we took the snapshot,      // 211
                        // then we do not need to run the parent's setters.                    // 212
                        return;                                                                // 213
                      }                                                                        // 214
                      // 215
                      runModuleSetters(parent);                                                // 216
                    });                                                                        // 217
                  };                                                                           // 218
                  // 219
                  exports.Entry = Entry;                                                       // 220
                  // 221
                  ///////////////////////////////////////////////////////////////////////////////

                }], "utils.js": function (require, exports) {

                  ///////////////////////////////////////////////////////////////////////////////
                  //                                                                           //
                  // node_modules/meteor/modules/node_modules/reify/lib/utils.js               //
                  //                                                                           //
                  ///////////////////////////////////////////////////////////////////////////////
                  //
                  var hasOwn = Object.prototype.hasOwnProperty;                                // 1
                  var objToStr = Object.prototype.toString;                                    // 2
                  var objStr = objToStr.call({});                                              // 3
                  // 4
                  function isPlainObject(value) {                                              // 5
                    return objToStr.call(value) === objStr;                                    // 6
                  }                                                                            // 7
                  exports.isPlainObject = isPlainObject;                                       // 8
                  // 9
                  exports.assign = Object.assign || function (obj) {                           // 10
                    var argc = arguments.length;                                               // 11
                    for (var i = 1; i < argc; ++i) {                                           // 12
                      var arg = arguments[i];                                                  // 13
                      if (arg && typeof arg === "object") {                                    // 14
                        var keys = Object.keys(arg);                                           // 15
                        for (var k = 0; k < keys.length; ++k) {                                // 16
                          var key = keys[k];                                                   // 17
                          obj[key] = arg[key];                                                 // 18
                        }                                                                      // 19
                      }                                                                        // 20
                    }                                                                          // 21
                    return obj;                                                                // 22
                  };                                                                           // 23
                  // 24
                  exports.shallowObjEqual = function (a, b) {                                   // 25
                    if (a === b) {                                                             // 26
                      return true;                                                             // 27
                    }                                                                          // 28
                    // 29
                    if (!isPlainObject(a) ||                                                  // 30
                      !isPlainObject(b)) {                                                  // 31
                      return false;                                                            // 32
                    }                                                                          // 33
                    // 34
                    var aKeys = Object.keys(a);                                                // 35
                    var bKeys = Object.keys(b);                                                // 36
                    // 37
                    if (aKeys.length !== bKeys.length) {                                       // 38
                      return false;                                                            // 39
                    }                                                                          // 40
                    // 41
                    return aKeys.every(function (key) {                                        // 42
                      return hasOwn.call(b, key) &&                                            // 43
                        a[key] === b[key];                                                     // 44
                    });                                                                        // 45
                  };                                                                           // 46
                  // 47
                  ///////////////////////////////////////////////////////////////////////////////

                }
              }
            }
          }
        }
      }
    }
  }, { "extensions": [".js", ".json"] });
  var exports = require("./node_modules/meteor/modules/client.js");

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols)
      (s in pkg) || (pkg[s] = symbols[s]);
  })(Package.modules = exports, {
    meteorInstall: meteorInstall,
    Buffer: Buffer,
    process: process
  });

})();
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var Buffer = Package.modules.Buffer;
  var process = Package.modules.process;

  /* Package-scope variables */
  var Promise;

  var require = meteorInstall({
    "node_modules": {
      "meteor": {
        "promise": {
          "client.js": ["meteor-promise", "./common.js", function (require, exports) {

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                  //
            // packages/promise/client.js                                                                                       //
            //                                                                                                                  //
            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            require("meteor-promise").makeCompatible(                                                                           // 1
              exports.Promise = require("./common.js").Promise                                                                  // 2
            );                                                                                                                  // 3
            // 4
            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

          }], "common.js": ["promise/lib/es6-extensions", function (require, exports) {

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                  //
            // packages/promise/common.js                                                                                       //
            //                                                                                                                  //
            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var global = this;                                                                                                  // 1
            // 2
            if (typeof global.Promise === "function") {                                                                         // 3
              exports.Promise = global.Promise;                                                                                 // 4
            } else {                                                                                                            // 5
              exports.Promise = require("promise/lib/es6-extensions");                                                          // 6
            }                                                                                                                   // 7
            // 8
            exports.Promise.prototype.done = function (onFulfilled, onRejected) {                                               // 9
              var self = this;                                                                                                  // 10
              // 11
              if (arguments.length > 0) {                                                                                       // 12
                self = this.then.apply(this, arguments);                                                                        // 13
              }                                                                                                                 // 14
              // 15
              self.then(null, function (err) {                                                                                  // 16
                Meteor._setImmediate(function () {                                                                              // 17
                  throw err;                                                                                                    // 18
                });                                                                                                             // 19
              });                                                                                                               // 20
            };                                                                                                                  // 21
            // 22
            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

          }], "node_modules": {
            "meteor-promise": {
              "package.json": function (require, exports) {

                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //                                                                                                                  //
                // ../npm/node_modules/meteor-promise/package.json                                                                  //
                //                                                                                                                  //
                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //
                exports.name = "meteor-promise";                                                                                    // 1
                exports.version = "0.7.2";                                                                                          // 2
                exports.main = "promise_client.js";                                                                                 // 3
                // 4
                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

              }, "promise_client.js": function (require, exports) {

                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //                                                                                                                  //
                // node_modules/meteor/promise/node_modules/meteor-promise/promise_client.js                                        //
                //                                                                                                                  //
                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //
                exports.makeCompatible = function (Promise) {                                                                       // 1
                  var es6PromiseThen = Promise.prototype.then;                                                                      // 2
                  // 3
                  Promise.prototype.then = function (onResolved, onRejected) {                                                      // 4
                    if (typeof Meteor === "object" &&                                                                               // 5
                      typeof Meteor.bindEnvironment === "function") {                                                             // 6
                      return es6PromiseThen.call(                                                                                   // 7
                        this,                                                                                                       // 8
                        onResolved && Meteor.bindEnvironment(onResolved, raise),                                                    // 9
                        onRejected && Meteor.bindEnvironment(onRejected, raise)                                                     // 10
                      );                                                                                                            // 11
                    }                                                                                                               // 12
                    // 13
                    return es6PromiseThen.call(this, onResolved, onRejected);                                                       // 14
                  };                                                                                                                // 15
                };                                                                                                                  // 16
                // 17
                function raise(exception) {                                                                                         // 18
                  throw exception;                                                                                                  // 19
                }                                                                                                                   // 20
                // 21
                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

              }
            }, "promise": {
              "lib": {
                "es6-extensions.js": ["./core.js", function (require, exports, module) {

                  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                  //
                  // node_modules/meteor/promise/node_modules/promise/lib/es6-extensions.js                                           //
                  //                                                                                                                  //
                  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  'use strict';                                                                                                       // 1
                  // 2
                  //This file contains the ES6 extensions to the core Promises/A+ API                                                 // 3
                  // 4
                  var Promise = require('./core.js');                                                                                 // 5
                  // 6
                  module.exports = Promise;                                                                                           // 7
                  // 8
                  /* Static Functions */                                                                                              // 9
                  // 10
                  var TRUE = valuePromise(true);                                                                                      // 11
                  var FALSE = valuePromise(false);                                                                                    // 12
                  var NULL = valuePromise(null);                                                                                      // 13
                  var UNDEFINED = valuePromise(undefined);                                                                            // 14
                  var ZERO = valuePromise(0);                                                                                         // 15
                  var EMPTYSTRING = valuePromise('');                                                                                 // 16
                  // 17
                  function valuePromise(value) {                                                                                      // 18
                    var p = new Promise(Promise._61);                                                                                 // 19
                    p._81 = 1;                                                                                                        // 20
                    p._65 = value;                                                                                                    // 21
                    return p;                                                                                                         // 22
                  }                                                                                                                   // 23
                  Promise.resolve = function (value) {                                                                                // 24
                    if (value instanceof Promise) return value;                                                                       // 25
                    // 26
                    if (value === null) return NULL;                                                                                  // 27
                    if (value === undefined) return UNDEFINED;                                                                        // 28
                    if (value === true) return TRUE;                                                                                  // 29
                    if (value === false) return FALSE;                                                                                // 30
                    if (value === 0) return ZERO;                                                                                     // 31
                    if (value === '') return EMPTYSTRING;                                                                             // 32
                    // 33
                    if (typeof value === 'object' || typeof value === 'function') {                                                   // 34
                      try {                                                                                                           // 35
                        var then = value.then;                                                                                        // 36
                        if (typeof then === 'function') {                                                                             // 37
                          return new Promise(then.bind(value));                                                                       // 38
                        }                                                                                                             // 39
                      } catch (ex) {                                                                                                  // 40
                        return new Promise(function (resolve, reject) {                                                               // 41
                          reject(ex);                                                                                                 // 42
                        });                                                                                                           // 43
                      }                                                                                                               // 44
                    }                                                                                                                 // 45
                    return valuePromise(value);                                                                                       // 46
                  };                                                                                                                  // 47
                  // 48
                  Promise.all = function (arr) {                                                                                      // 49
                    var args = Array.prototype.slice.call(arr);                                                                       // 50
                    // 51
                    return new Promise(function (resolve, reject) {                                                                   // 52
                      if (args.length === 0) return resolve([]);                                                                      // 53
                      var remaining = args.length;                                                                                    // 54
                      function res(i, val) {                                                                                          // 55
                        if (val && (typeof val === 'object' || typeof val === 'function')) {                                          // 56
                          if (val instanceof Promise && val.then === Promise.prototype.then) {                                        // 57
                            while (val._81 === 3) {                                                                                   // 58
                              val = val._65;                                                                                          // 59
                            }                                                                                                         // 60
                            if (val._81 === 1) return res(i, val._65);                                                                // 61
                            if (val._81 === 2) reject(val._65);                                                                       // 62
                            val.then(function (val) {                                                                                 // 63
                              res(i, val);                                                                                            // 64
                            }, reject);                                                                                               // 65
                            return;                                                                                                   // 66
                          } else {                                                                                                    // 67
                            var then = val.then;                                                                                      // 68
                            if (typeof then === 'function') {                                                                         // 69
                              var p = new Promise(then.bind(val));                                                                    // 70
                              p.then(function (val) {                                                                                 // 71
                                res(i, val);                                                                                          // 72
                              }, reject);                                                                                             // 73
                              return;                                                                                                 // 74
                            }                                                                                                         // 75
                          }                                                                                                           // 76
                        }                                                                                                             // 77
                        args[i] = val;                                                                                                // 78
                        if (--remaining === 0) {                                                                                      // 79
                          resolve(args);                                                                                              // 80
                        }                                                                                                             // 81
                      }                                                                                                               // 82
                      for (var i = 0; i < args.length; i++) {                                                                         // 83
                        res(i, args[i]);                                                                                              // 84
                      }                                                                                                               // 85
                    });                                                                                                               // 86
                  };                                                                                                                  // 87
                  // 88
                  Promise.reject = function (value) {                                                                                 // 89
                    return new Promise(function (resolve, reject) {                                                                   // 90
                      reject(value);                                                                                                  // 91
                    });                                                                                                               // 92
                  };                                                                                                                  // 93
                  // 94
                  Promise.race = function (values) {                                                                                  // 95
                    return new Promise(function (resolve, reject) {                                                                   // 96
                      values.forEach(function (value) {                                                                                 // 97
                        Promise.resolve(value).then(resolve, reject);                                                                 // 98
                      });                                                                                                             // 99
                    });                                                                                                               // 100
                  };                                                                                                                  // 101
                  // 102
                  /* Prototype Methods */                                                                                             // 103
                  // 104
                  Promise.prototype['catch'] = function (onRejected) {                                                                // 105
                    return this.then(null, onRejected);                                                                               // 106
                  };                                                                                                                  // 107
                  // 108
                  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                }], "core.js": ["asap/raw", function (require, exports, module) {

                  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                  //
                  // node_modules/meteor/promise/node_modules/promise/lib/core.js                                                     //
                  //                                                                                                                  //
                  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  'use strict';                                                                                                       // 1
                  // 2
                  var asap = require('asap/raw');                                                                                     // 3
                  // 4
                  function noop() { }                                                                                                  // 5
                  // 6
                  // States:                                                                                                          // 7
                  //                                                                                                                  // 8
                  // 0 - pending                                                                                                      // 9
                  // 1 - fulfilled with _value                                                                                        // 10
                  // 2 - rejected with _value                                                                                         // 11
                  // 3 - adopted the state of another promise, _value                                                                 // 12
                  //                                                                                                                  // 13
                  // once the state is no longer pending (0) it is immutable                                                          // 14
                  // 15
                  // All `_` prefixed properties will be reduced to `_{random number}`                                                // 16
                  // at build time to obfuscate them and discourage their use.                                                        // 17
                  // We don't use symbols or Object.defineProperty to fully hide them                                                 // 18
                  // because the performance isn't good enough.                                                                       // 19
                  // 20
                  // 21
                  // to avoid using try/catch inside critical functions, we                                                           // 22
                  // extract them to here.                                                                                            // 23
                  var LAST_ERROR = null;                                                                                              // 24
                  var IS_ERROR = {};                                                                                                  // 25
                  function getThen(obj) {                                                                                             // 26
                    try {                                                                                                             // 27
                      return obj.then;                                                                                                // 28
                    } catch (ex) {                                                                                                    // 29
                      LAST_ERROR = ex;                                                                                                // 30
                      return IS_ERROR;                                                                                                // 31
                    }                                                                                                                 // 32
                  }                                                                                                                   // 33
                  // 34
                  function tryCallOne(fn, a) {                                                                                        // 35
                    try {                                                                                                             // 36
                      return fn(a);                                                                                                   // 37
                    } catch (ex) {                                                                                                    // 38
                      LAST_ERROR = ex;                                                                                                // 39
                      return IS_ERROR;                                                                                                // 40
                    }                                                                                                                 // 41
                  }                                                                                                                   // 42
                  function tryCallTwo(fn, a, b) {                                                                                     // 43
                    try {                                                                                                             // 44
                      fn(a, b);                                                                                                       // 45
                    } catch (ex) {                                                                                                    // 46
                      LAST_ERROR = ex;                                                                                                // 47
                      return IS_ERROR;                                                                                                // 48
                    }                                                                                                                 // 49
                  }                                                                                                                   // 50
                  // 51
                  module.exports = Promise;                                                                                           // 52
                  // 53
                  function Promise(fn) {                                                                                              // 54
                    if (typeof this !== 'object') {                                                                                   // 55
                      throw new TypeError('Promises must be constructed via new');                                                    // 56
                    }                                                                                                                 // 57
                    if (typeof fn !== 'function') {                                                                                   // 58
                      throw new TypeError('not a function');                                                                          // 59
                    }                                                                                                                 // 60
                    this._45 = 0;                                                                                                     // 61
                    this._81 = 0;                                                                                                     // 62
                    this._65 = null;                                                                                                  // 63
                    this._54 = null;                                                                                                  // 64
                    if (fn === noop) return;                                                                                          // 65
                    doResolve(fn, this);                                                                                              // 66
                  }                                                                                                                   // 67
                  Promise._10 = null;                                                                                                 // 68
                  Promise._97 = null;                                                                                                 // 69
                  Promise._61 = noop;                                                                                                 // 70
                  // 71
                  Promise.prototype.then = function (onFulfilled, onRejected) {                                                        // 72
                    if (this.constructor !== Promise) {                                                                               // 73
                      return safeThen(this, onFulfilled, onRejected);                                                                 // 74
                    }                                                                                                                 // 75
                    var res = new Promise(noop);                                                                                      // 76
                    handle(this, new Handler(onFulfilled, onRejected, res));                                                          // 77
                    return res;                                                                                                       // 78
                  };                                                                                                                  // 79
                  // 80
                  function safeThen(self, onFulfilled, onRejected) {                                                                  // 81
                    return new self.constructor(function (resolve, reject) {                                                          // 82
                      var res = new Promise(noop);                                                                                    // 83
                      res.then(resolve, reject);                                                                                      // 84
                      handle(self, new Handler(onFulfilled, onRejected, res));                                                        // 85
                    });                                                                                                               // 86
                  };                                                                                                                  // 87
                  function handle(self, deferred) {                                                                                   // 88
                    while (self._81 === 3) {                                                                                          // 89
                      self = self._65;                                                                                                // 90
                    }                                                                                                                 // 91
                    if (Promise._10) {                                                                                                // 92
                      Promise._10(self);                                                                                              // 93
                    }                                                                                                                 // 94
                    if (self._81 === 0) {                                                                                             // 95
                      if (self._45 === 0) {                                                                                           // 96
                        self._45 = 1;                                                                                                 // 97
                        self._54 = deferred;                                                                                          // 98
                        return;                                                                                                       // 99
                      }                                                                                                               // 100
                      if (self._45 === 1) {                                                                                           // 101
                        self._45 = 2;                                                                                                 // 102
                        self._54 = [self._54, deferred];                                                                              // 103
                        return;                                                                                                       // 104
                      }                                                                                                               // 105
                      self._54.push(deferred);                                                                                        // 106
                      return;                                                                                                         // 107
                    }                                                                                                                 // 108
                    handleResolved(self, deferred);                                                                                   // 109
                  }                                                                                                                   // 110
                  // 111
                  function handleResolved(self, deferred) {                                                                           // 112
                    asap(function () {                                                                                                 // 113
                      var cb = self._81 === 1 ? deferred.onFulfilled : deferred.onRejected;                                           // 114
                      if (cb === null) {                                                                                              // 115
                        if (self._81 === 1) {                                                                                         // 116
                          resolve(deferred.promise, self._65);                                                                        // 117
                        } else {                                                                                                      // 118
                          reject(deferred.promise, self._65);                                                                         // 119
                        }                                                                                                             // 120
                        return;                                                                                                       // 121
                      }                                                                                                               // 122
                      var ret = tryCallOne(cb, self._65);                                                                             // 123
                      if (ret === IS_ERROR) {                                                                                         // 124
                        reject(deferred.promise, LAST_ERROR);                                                                         // 125
                      } else {                                                                                                        // 126
                        resolve(deferred.promise, ret);                                                                               // 127
                      }                                                                                                               // 128
                    });                                                                                                               // 129
                  }                                                                                                                   // 130
                  function resolve(self, newValue) {                                                                                  // 131
                    // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
                    if (newValue === self) {                                                                                          // 133
                      return reject(                                                                                                  // 134
                        self,                                                                                                         // 135
                        new TypeError('A promise cannot be resolved with itself.')                                                    // 136
                      );                                                                                                              // 137
                    }                                                                                                                 // 138
                    if (                                                                                                              // 139
                      newValue &&                                                                                                     // 140
                      (typeof newValue === 'object' || typeof newValue === 'function')                                                // 141
                    ) {                                                                                                               // 142
                      var then = getThen(newValue);                                                                                   // 143
                      if (then === IS_ERROR) {                                                                                        // 144
                        return reject(self, LAST_ERROR);                                                                              // 145
                      }                                                                                                               // 146
                      if (                                                                                                            // 147
                        then === self.then &&                                                                                         // 148
                        newValue instanceof Promise                                                                                   // 149
                      ) {                                                                                                             // 150
                        self._81 = 3;                                                                                                 // 151
                        self._65 = newValue;                                                                                          // 152
                        finale(self);                                                                                                 // 153
                        return;                                                                                                       // 154
                      } else if (typeof then === 'function') {                                                                        // 155
                        doResolve(then.bind(newValue), self);                                                                         // 156
                        return;                                                                                                       // 157
                      }                                                                                                               // 158
                    }                                                                                                                 // 159
                    self._81 = 1;                                                                                                     // 160
                    self._65 = newValue;                                                                                              // 161
                    finale(self);                                                                                                     // 162
                  }                                                                                                                   // 163
                  // 164
                  function reject(self, newValue) {                                                                                   // 165
                    self._81 = 2;                                                                                                     // 166
                    self._65 = newValue;                                                                                              // 167
                    if (Promise._97) {                                                                                                // 168
                      Promise._97(self, newValue);                                                                                    // 169
                    }                                                                                                                 // 170
                    finale(self);                                                                                                     // 171
                  }                                                                                                                   // 172
                  function finale(self) {                                                                                             // 173
                    if (self._45 === 1) {                                                                                             // 174
                      handle(self, self._54);                                                                                         // 175
                      self._54 = null;                                                                                                // 176
                    }                                                                                                                 // 177
                    if (self._45 === 2) {                                                                                             // 178
                      for (var i = 0; i < self._54.length; i++) {                                                                     // 179
                        handle(self, self._54[i]);                                                                                    // 180
                      }                                                                                                               // 181
                      self._54 = null;                                                                                                // 182
                    }                                                                                                                 // 183
                  }                                                                                                                   // 184
                  // 185
                  function Handler(onFulfilled, onRejected, promise) {                                                                 // 186
                    this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;                                        // 187
                    this.onRejected = typeof onRejected === 'function' ? onRejected : null;                                           // 188
                    this.promise = promise;                                                                                           // 189
                  }                                                                                                                   // 190
                  // 191
                  /**                                                                                                                 // 192
                   * Take a potentially misbehaving resolver function and make sure                                                   // 193
                   * onFulfilled and onRejected are only called once.                                                                 // 194
                   *                                                                                                                  // 195
                   * Makes no guarantees about asynchrony.                                                                            // 196
                   */                                                                                                                 // 197
                  function doResolve(fn, promise) {                                                                                   // 198
                    var done = false;                                                                                                 // 199
                    var res = tryCallTwo(fn, function (value) {                                                                       // 200
                      if (done) return;                                                                                               // 201
                      done = true;                                                                                                    // 202
                      resolve(promise, value);                                                                                        // 203
                    }, function (reason) {                                                                                            // 204
                      if (done) return;                                                                                               // 205
                      done = true;                                                                                                    // 206
                      reject(promise, reason);                                                                                        // 207
                    })                                                                                                                // 208
                    if (!done && res === IS_ERROR) {                                                                                  // 209
                      done = true;                                                                                                    // 210
                      reject(promise, LAST_ERROR);                                                                                    // 211
                    }                                                                                                                 // 212
                  }                                                                                                                   // 213
                  // 214
                  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                }]
              }, "node_modules": {
                "asap": {
                  "raw.js": ["domain", function (require, exports, module) {

                    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    //                                                                                                                  //
                    // node_modules/meteor/promise/node_modules/promise/node_modules/asap/raw.js                                        //
                    //                                                                                                                  //
                    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    //
                    "use strict";                                                                                                       // 1
                    // 2
                    var domain; // The domain module is executed on demand                                                              // 3
                    var hasSetImmediate = typeof setImmediate === "function";                                                           // 4
                    // 5
                    // Use the fastest means possible to execute a task in its own turn, with                                           // 6
                    // priority over other events including network IO events in Node.js.                                               // 7
                    //                                                                                                                  // 8
                    // An exception thrown by a task will permanently interrupt the processing of                                       // 9
                    // subsequent tasks. The higher level `asap` function ensures that if an                                            // 10
                    // exception is thrown by a task, that the task queue will continue flushing as                                     // 11
                    // soon as possible, but if you use `rawAsap` directly, you are responsible to                                      // 12
                    // either ensure that no exceptions are thrown from your task, or to manually                                       // 13
                    // call `rawAsap.requestFlush` if an exception is thrown.                                                           // 14
                    module.exports = rawAsap;                                                                                           // 15
                    function rawAsap(task) {                                                                                            // 16
                      if (!queue.length) {                                                                                            // 17
                        requestFlush();                                                                                             // 18
                        flushing = true;                                                                                            // 19
                      }                                                                                                               // 20
                      // Avoids a function call                                                                                       // 21
                      queue[queue.length] = task;                                                                                     // 22
                    }                                                                                                                   // 23
                    // 24
                    var queue = [];                                                                                                     // 25
                    // Once a flush has been requested, no further calls to `requestFlush` are                                          // 26
                    // necessary until the next `flush` completes.                                                                      // 27
                    var flushing = false;                                                                                               // 28
                    // The position of the next task to execute in the task queue. This is                                              // 29
                    // preserved between calls to `flush` so that it can be resumed if                                                  // 30
                    // a task throws an exception.                                                                                      // 31
                    var index = 0;                                                                                                      // 32
                    // If a task schedules additional tasks recursively, the task queue can grow                                        // 33
                    // unbounded. To prevent memory excaustion, the task queue will periodically                                        // 34
                    // truncate already-completed tasks.                                                                                // 35
                    var capacity = 1024;                                                                                                // 36
                    // 37
                    // The flush function processes all tasks that have been scheduled with                                             // 38
                    // `rawAsap` unless and until one of those tasks throws an exception.                                               // 39
                    // If a task throws an exception, `flush` ensures that its state will remain                                        // 40
                    // consistent and will resume where it left off when called again.                                                  // 41
                    // However, `flush` does not make any arrangements to be called again if an                                         // 42
                    // exception is thrown.                                                                                             // 43
                    function flush() {                                                                                                  // 44
                      while (index < queue.length) {                                                                                  // 45
                        var currentIndex = index;                                                                                   // 46
                        // Advance the index before calling the task. This ensures that we will                                     // 47
                        // begin flushing on the next task the task throws an error.                                                // 48
                        index = index + 1;                                                                                          // 49
                        queue[currentIndex].call();                                                                                 // 50
                        // Prevent leaking memory for long chains of recursive calls to `asap`.                                     // 51
                        // If we call `asap` within tasks scheduled by `asap`, the queue will                                       // 52
                        // grow, but to avoid an O(n) walk for every task we execute, we don't                                      // 53
                        // shift tasks off the queue after they have been executed.                                                 // 54
                        // Instead, we periodically shift 1024 tasks off the queue.                                                 // 55
                        if (index > capacity) {                                                                                     // 56
                          // Manually shift all values starting at the index back to the                                          // 57
                          // beginning of the queue.                                                                              // 58
                          for (var scan = 0, newLength = queue.length - index; scan < newLength; scan++) {                        // 59
                            queue[scan] = queue[scan + index];                                                                  // 60
                          }                                                                                                       // 61
                          queue.length -= index;                                                                                  // 62
                          index = 0;                                                                                              // 63
                        }                                                                                                           // 64
                      }                                                                                                               // 65
                      queue.length = 0;                                                                                               // 66
                      index = 0;                                                                                                      // 67
                      flushing = false;                                                                                               // 68
                    }                                                                                                                   // 69
                    // 70
                    rawAsap.requestFlush = requestFlush;                                                                                // 71
                    function requestFlush() {                                                                                           // 72
                      // Ensure flushing is not bound to any domain.                                                                  // 73
                      // It is not sufficient to exit the domain, because domains exist on a stack.                                   // 74
                      // To execute code outside of any domain, the following dance is necessary.                                     // 75
                      var parentDomain = process.domain;                                                                              // 76
                      if (parentDomain) {                                                                                             // 77
                        if (!domain) {                                                                                              // 78
                          // Lazy execute the domain module.                                                                      // 79
                          // Only employed if the user elects to use domains.                                                     // 80
                          domain = require("domain");                                                                             // 81
                        }                                                                                                           // 82
                        domain.active = process.domain = null;                                                                      // 83
                      }                                                                                                               // 84
                      // 85
                      // `setImmediate` is slower that `process.nextTick`, but `process.nextTick`                                     // 86
                      // cannot handle recursion.                                                                                     // 87
                      // `requestFlush` will only be called recursively from `asap.js`, to resume                                     // 88
                      // flushing after an error is thrown into a domain.                                                             // 89
                      // Conveniently, `setImmediate` was introduced in the same version                                              // 90
                      // `process.nextTick` started throwing recursion errors.                                                        // 91
                      if (flushing && hasSetImmediate) {                                                                              // 92
                        setImmediate(flush);                                                                                        // 93
                      } else {                                                                                                        // 94
                        process.nextTick(flush);                                                                                    // 95
                      }                                                                                                               // 96
                      // 97
                      if (parentDomain) {                                                                                             // 98
                        domain.active = process.domain = parentDomain;                                                              // 99
                      }                                                                                                               // 100
                    }                                                                                                                   // 101
                    // 102
                    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                  }]
                }
              }
            }
          }
        }
      }
    }
  }, { "extensions": [".js", ".json"] });
  var exports = require("./node_modules/meteor/promise/client.js");

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols)
      (s in pkg) || (pkg[s] = symbols[s]);
  })(Package.promise = exports, {
    Promise: Promise
  });

})();
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var Buffer = Package.modules.Buffer;
  var process = Package.modules.process;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var meteorBabelHelpers;

  var require = meteorInstall({
    "node_modules": {
      "meteor": {
        "babel-runtime": {
          "babel-runtime.js": ["meteor-babel-helpers", "regenerator-runtime", function (require, exports, module) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                         //
            // packages/babel-runtime/babel-runtime.js                                                                 //
            //                                                                                                         //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var hasOwn = Object.prototype.hasOwnProperty;                                                              // 1
            var S = typeof Symbol === "function" ? Symbol : {};                                                        // 2
            var iteratorSymbol = S.iterator || "@@iterator";                                                           // 3
            // 4
            meteorBabelHelpers = require("meteor-babel-helpers");                                                      // 5
            // 6
            var BabelRuntime = {                                                                                       // 7
              // es6.templateLiterals                                                                                  // 8
              // Constructs the object passed to the tag function in a tagged                                          // 9
              // template literal.                                                                                     // 10
              taggedTemplateLiteralLoose: function (strings, raw) {                                                    // 11
                // Babel's own version of this calls Object.freeze on `strings` and                                    // 12
                // `strings.raw`, but it doesn't seem worth the compatibility and                                      // 13
                // performance concerns.  If you're writing code against this helper,                                  // 14
                // don't add properties to these objects.                                                              // 15
                strings.raw = raw;                                                                                     // 16
                return strings;                                                                                        // 17
              },                                                                                                       // 18
              // 19
              // es6.classes                                                                                           // 20
              // Checks that a class constructor is being called with `new`, and throws                                // 21
              // an error if it is not.                                                                                // 22
              classCallCheck: function (instance, Constructor) {                                                       // 23
                if (!(instance instanceof Constructor)) {                                                              // 24
                  throw new TypeError("Cannot call a class as a function");                                            // 25
                }                                                                                                      // 26
              },                                                                                                       // 27
              // 28
              // es6.classes                                                                                           // 29
              inherits: function (subClass, superClass) {                                                              // 30
                if (typeof superClass !== "function" && superClass !== null) {                                         // 31
                  throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
                }                                                                                                      // 33
                // 34
                if (superClass) {                                                                                      // 35
                  if (Object.create) {                                                                                 // 36
                    // All but IE 8                                                                                    // 37
                    subClass.prototype = Object.create(superClass.prototype, {                                         // 38
                      constructor: {                                                                                   // 39
                        value: subClass,                                                                               // 40
                        enumerable: false,                                                                             // 41
                        writable: true,                                                                                // 42
                        configurable: true                                                                             // 43
                      }                                                                                                // 44
                    });                                                                                                // 45
                  } else {                                                                                             // 46
                    // IE 8 path.  Slightly worse for modern browsers, because `constructor`                           // 47
                    // is enumerable and shows up in the inspector unnecessarily.                                      // 48
                    // It's not an "own" property of any instance though.                                              // 49
                    //                                                                                                 // 50
                    // For correctness when writing code,                                                              // 51
                    // don't enumerate all the own-and-inherited properties of an instance                             // 52
                    // of a class and expect not to find `constructor` (but who does that?).                           // 53
                    var F = function () {                                                                              // 54
                      this.constructor = subClass;                                                                     // 55
                    };                                                                                                 // 56
                    F.prototype = superClass.prototype;                                                                // 57
                    subClass.prototype = new F();                                                                      // 58
                  }                                                                                                    // 59
                  // 60
                  // For modern browsers, this would be `subClass.__proto__ = superClass`,                             // 61
                  // but IE <=10 don't support `__proto__`, and in this case the difference                            // 62
                  // would be detectable; code that works in modern browsers could easily                              // 63
                  // fail on IE 8 if we ever used the `__proto__` trick.                                               // 64
                  //                                                                                                   // 65
                  // There's no perfect way to make static methods inherited if they are                               // 66
                  // assigned after declaration of the classes.  The best we can do is                                 // 67
                  // to copy them.  In other words, when you write `class Foo                                          // 68
                  // extends Bar`, we copy the static methods from Bar onto Foo, but future                            // 69
                  // ones are not copied.                                                                              // 70
                  //                                                                                                   // 71
                  // For correctness when writing code, don't add static methods to a class                            // 72
                  // after you subclass it.                                                                            // 73
                  // 74
                  // The ecmascript-runtime package provides adequate polyfills for                                    // 75
                  // all of these Object.* functions (and Array#forEach), and anyone                                   // 76
                  // using babel-runtime is almost certainly using it because of the                                   // 77
                  // ecmascript package, which also implies ecmascript-runtime.                                        // 78
                  Object.getOwnPropertyNames(superClass).forEach(function (k) {                                        // 79
                    // This property descriptor dance preserves getter/setter behavior                                 // 80
                    // in browsers that support accessor properties (all except                                        // 81
                    // IE8). In IE8, the superClass can't have accessor properties                                     // 82
                    // anyway, so this code is still safe.                                                             // 83
                    var descriptor = Object.getOwnPropertyDescriptor(superClass, k);                                   // 84
                    if (descriptor && typeof descriptor === "object") {                                                // 85
                      if (Object.getOwnPropertyDescriptor(subClass, k)) {                                              // 86
                        // If subClass already has a property by this name, then it                                    // 87
                        // would not be inherited, so it should not be copied. This                                    // 88
                        // notably excludes properties like .prototype and .name.                                      // 89
                        return;                                                                                        // 90
                      }                                                                                                // 91
                      // 92
                      Object.defineProperty(subClass, k, descriptor);                                                  // 93
                    }                                                                                                  // 94
                  });                                                                                                  // 95
                }                                                                                                      // 96
              },                                                                                                       // 97
              // 98
              createClass: (function () {                                                                              // 99
                var hasDefineProperty = false;                                                                         // 100
                try {                                                                                                  // 101
                  // IE 8 has a broken Object.defineProperty, so feature-test by                                       // 102
                  // trying to call it.                                                                                // 103
                  Object.defineProperty({}, 'x', {});                                                                  // 104
                  hasDefineProperty = true;                                                                            // 105
                } catch (e) { }                                                                                         // 106
                // 107
                function defineProperties(target, props) {                                                             // 108
                  for (var i = 0; i < props.length; i++) {                                                             // 109
                    var descriptor = props[i];                                                                         // 110
                    descriptor.enumerable = descriptor.enumerable || false;                                            // 111
                    descriptor.configurable = true;                                                                    // 112
                    if ("value" in descriptor) descriptor.writable = true;                                             // 113
                    Object.defineProperty(target, descriptor.key, descriptor);                                         // 114
                  }                                                                                                    // 115
                }                                                                                                      // 116
                // 117
                return function (Constructor, protoProps, staticProps) {                                               // 118
                  if (!hasDefineProperty) {                                                                           // 119
                    // e.g. `class Foo { get bar() {} }`.  If you try to use getters and                               // 120
                    // setters in IE 8, you will get a big nasty error, with or without                                // 121
                    // Babel.  I don't know of any other syntax features besides getters                               // 122
                    // and setters that will trigger this error.                                                       // 123
                    throw new Error(                                                                                   // 124
                      "Your browser does not support this type of class property.  " +                                 // 125
                      "For example, Internet Explorer 8 does not support getters and " +                             // 126
                      "setters.");                                                                                   // 127
                  }                                                                                                    // 128
                  // 129
                  if (protoProps) defineProperties(Constructor.prototype, protoProps);                                 // 130
                  if (staticProps) defineProperties(Constructor, staticProps);                                         // 131
                  return Constructor;                                                                                  // 132
                };                                                                                                     // 133
              })(),                                                                                                    // 134
              // 135
              "typeof": function (obj) {                                                                               // 136
                return obj && obj.constructor === Symbol ? "symbol" : typeof obj;                                      // 137
              },                                                                                                       // 138
              // 139
              possibleConstructorReturn: function (self, call) {                                                       // 140
                if (!self) {                                                                                          // 141
                  throw new ReferenceError(                                                                            // 142
                    "this hasn't been initialised - super() hasn't been called"                                        // 143
                  );                                                                                                   // 144
                }                                                                                                      // 145
                // 146
                var callType = typeof call;                                                                            // 147
                if (call &&                                                                                            // 148
                  callType === "function" ||                                                                         // 149
                  callType === "object") {                                                                           // 150
                  return call;                                                                                         // 151
                }                                                                                                      // 152
                // 153
                return self;                                                                                           // 154
              },                                                                                                       // 155
              // 156
              interopRequireDefault: function (obj) {                                                                  // 157
                return obj && obj.__esModule ? obj : { 'default': obj };                                               // 158
              },                                                                                                       // 159
              // 160
              interopRequireWildcard: function (obj) {                                                                 // 161
                if (obj && obj.__esModule) {                                                                           // 162
                  return obj;                                                                                          // 163
                }                                                                                                      // 164
                // 165
                var newObj = {};                                                                                       // 166
                // 167
                if (obj != null) {                                                                                     // 168
                  for (var key in obj) {                                                                               // 169
                    if (hasOwn.call(obj, key)) {                                                                       // 170
                      newObj[key] = obj[key];                                                                          // 171
                    }                                                                                                  // 172
                  }                                                                                                    // 173
                }                                                                                                      // 174
                // 175
                newObj["default"] = obj;                                                                               // 176
                return newObj;                                                                                         // 177
              },                                                                                                       // 178
              // 179
              interopExportWildcard: function (obj, defaults) {                                                        // 180
                var newObj = defaults({}, obj);                                                                        // 181
                delete newObj["default"];                                                                              // 182
                return newObj;                                                                                         // 183
              },                                                                                                       // 184
              // 185
              defaults: function (obj, defaults) {                                                                     // 186
                Object.getOwnPropertyNames(defaults).forEach(function (key) {                                          // 187
                  var desc = Object.getOwnPropertyDescriptor(defaults, key);                                           // 188
                  if (desc && desc.configurable && typeof obj[key] === "undefined") {                                  // 189
                    Object.defineProperty(obj, key, desc);                                                             // 190
                  }                                                                                                    // 191
                });                                                                                                    // 192
                // 193
                return obj;                                                                                            // 194
              },                                                                                                       // 195
              // 196
              // es7.objectRestSpread and react (JSX)                                                                  // 197
              "extends": Object.assign || (function (target) {                                                         // 198
                for (var i = 1; i < arguments.length; i++) {                                                           // 199
                  var source = arguments[i];                                                                           // 200
                  for (var key in source) {                                                                            // 201
                    if (hasOwn.call(source, key)) {                                                                    // 202
                      target[key] = source[key];                                                                       // 203
                    }                                                                                                  // 204
                  }                                                                                                    // 205
                }                                                                                                      // 206
                return target;                                                                                         // 207
              }),                                                                                                      // 208
              // 209
              // es6.destructuring                                                                                     // 210
              objectWithoutProperties: function (obj, keys) {                                                          // 211
                var target = {};                                                                                       // 212
                outer: for (var i in obj) {                                                                            // 213
                  if (!hasOwn.call(obj, i)) continue;                                                                 // 214
                  for (var j = 0; j < keys.length; j++) {                                                              // 215
                    if (keys[j] === i) continue outer;                                                                 // 216
                  }                                                                                                    // 217
                  target[i] = obj[i];                                                                                  // 218
                }                                                                                                      // 219
                return target;                                                                                         // 220
              },                                                                                                       // 221
              // 222
              // es6.destructuring                                                                                     // 223
              objectDestructuringEmpty: function (obj) {                                                               // 224
                if (obj == null) throw new TypeError("Cannot destructure undefined");                                  // 225
              },                                                                                                       // 226
              // 227
              // es6.spread                                                                                            // 228
              bind: Function.prototype.bind || (function () {                                                          // 229
                var isCallable = function (value) { return typeof value === 'function'; };                             // 230
                var $Object = Object;                                                                                  // 231
                var to_string = Object.prototype.toString;                                                             // 232
                var array_slice = Array.prototype.slice;                                                               // 233
                var array_concat = Array.prototype.concat;                                                             // 234
                var array_push = Array.prototype.push;                                                                 // 235
                var max = Math.max;                                                                                    // 236
                var Empty = function Empty() { };                                                                       // 237
                // 238
                // Copied from es5-shim.js (3ac7942).  See original for more comments.                                 // 239
                return function bind(that) {                                                                           // 240
                  var target = this;                                                                                   // 241
                  if (!isCallable(target)) {                                                                           // 242
                    throw new TypeError('Function.prototype.bind called on incompatible ' + target);                   // 243
                  }                                                                                                    // 244
                  // 245
                  var args = array_slice.call(arguments, 1);                                                           // 246
                  // 247
                  var bound;                                                                                           // 248
                  var binder = function () {                                                                           // 249
                    // 250
                    if (this instanceof bound) {                                                                       // 251
                      var result = target.apply(                                                                       // 252
                        this,                                                                                          // 253
                        array_concat.call(args, array_slice.call(arguments))                                           // 254
                      );                                                                                               // 255
                      if ($Object(result) === result) {                                                                // 256
                        return result;                                                                                 // 257
                      }                                                                                                // 258
                      return this;                                                                                     // 259
                    } else {                                                                                           // 260
                      return target.apply(                                                                             // 261
                        that,                                                                                          // 262
                        array_concat.call(args, array_slice.call(arguments))                                           // 263
                      );                                                                                               // 264
                    }                                                                                                  // 265
                  };                                                                                                   // 266
                  // 267
                  var boundLength = max(0, target.length - args.length);                                               // 268
                  // 269
                  var boundArgs = [];                                                                                  // 270
                  for (var i = 0; i < boundLength; i++) {                                                              // 271
                    array_push.call(boundArgs, '$' + i);                                                               // 272
                  }                                                                                                    // 273
                  // 274
                  // Create a Function from source code so that it has the right `.length`.                            // 275
                  // Probably not important for Babel.  This code violates CSPs that ban                               // 276
                  // `eval`, but the browsers that need this polyfill don't have CSP!                                  // 277
                  bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this, arguments); }')(binder);
                  // 279
                  if (target.prototype) {                                                                              // 280
                    Empty.prototype = target.prototype;                                                                // 281
                    bound.prototype = new Empty();                                                                     // 282
                    Empty.prototype = null;                                                                            // 283
                  }                                                                                                    // 284
                  // 285
                  return bound;                                                                                        // 286
                };                                                                                                     // 287
                // 288
              })(),                                                                                                    // 289
              // 290
              toConsumableArray: function (arr) {                                                                      // 291
                if (Array.isArray(arr)) {                                                                              // 292
                  for (var i = arr.length - 1, arr2 = Array(i + 1); i >= 0; --i) {                                     // 293
                    arr2[i] = arr[i];                                                                                  // 294
                  }                                                                                                    // 295
                  // 296
                  return arr2;                                                                                         // 297
                }                                                                                                      // 298
                // 299
                return Array.from(arr);                                                                                // 300
              },                                                                                                       // 301
              // 302
              toArray: function (arr) {                                                                                // 303
                return Array.isArray(arr) ? arr : Array.from(arr);                                                     // 304
              },                                                                                                       // 305
              // 306
              slicedToArray: function (iterable, limit) {                                                              // 307
                if (Array.isArray(iterable)) {                                                                         // 308
                  return iterable;                                                                                     // 309
                }                                                                                                      // 310
                // 311
                if (iterable) {                                                                                        // 312
                  var it = iterable[iteratorSymbol]();                                                                 // 313
                  var result = [];                                                                                     // 314
                  var info;                                                                                            // 315
                  // 316
                  if (typeof limit !== "number") {                                                                     // 317
                    limit = Infinity;                                                                                  // 318
                  }                                                                                                    // 319
                  // 320
                  while (result.length < limit &&                                                                      // 321
                    !(info = it.next()).done) {                                                                  // 322
                    result.push(info.value);                                                                           // 323
                  }                                                                                                    // 324
                  // 325
                  return result;                                                                                       // 326
                }                                                                                                      // 327
                // 328
                throw new TypeError(                                                                                   // 329
                  "Invalid attempt to destructure non-iterable instance"                                               // 330
                );                                                                                                     // 331
              },                                                                                                       // 332
              // 333
              slice: Array.prototype.slice                                                                             // 334
            };                                                                                                         // 335
            // 336
            // Use meteorInstall to install all of the above helper functions within                                   // 337
            // node_modules/babel-runtime/helpers.                                                                     // 338
            Object.keys(BabelRuntime).forEach(function (helperName) {                                                  // 339
              var helpers = {};                                                                                        // 340
              // 341
              helpers[helperName + ".js"] = function (require, exports, module) {                                      // 342
                module.exports = BabelRuntime[helperName];                                                             // 343
              };                                                                                                       // 344
              // 345
              meteorInstall({                                                                                          // 346
                node_modules: {                                                                                        // 347
                  "babel-runtime": {                                                                                   // 348
                    helpers: helpers                                                                                   // 349
                  }                                                                                                    // 350
                }                                                                                                      // 351
              });                                                                                                      // 352
            });                                                                                                        // 353
            // 354
            // Use meteorInstall to install the regenerator runtime at                                                 // 355
            // node_modules/babel-runtime/regenerator.                                                                 // 356
            meteorInstall({                                                                                            // 357
              node_modules: {                                                                                          // 358
                "babel-runtime": {                                                                                     // 359
                  "regenerator.js": function (r, e, module) {                                                          // 360
                    // Note that we use the require function provided to the                                           // 361
                    // babel-runtime.js file, not the one named 'r' above.                                             // 362
                    var runtime = require("regenerator-runtime");                                                      // 363
                    // 364
                    // If Promise.asyncApply is defined, use it to wrap calls to                                       // 365
                    // runtime.async so that the entire async function will run in its                                 // 366
                    // own Fiber, not just the code that comes after the first await.                                  // 367
                    if (typeof Promise === "function" &&                                                               // 368
                      typeof Promise.asyncApply === "function") {                                                    // 369
                      var realAsync = runtime.async;                                                                   // 370
                      runtime.async = function () {                                                                    // 371
                        return Promise.asyncApply(realAsync, runtime, arguments);                                      // 372
                      };                                                                                               // 373
                    }                                                                                                  // 374
                    // 375
                    module.exports = runtime;                                                                          // 376
                  }                                                                                                    // 377
                }                                                                                                      // 378
              }                                                                                                        // 379
            });                                                                                                        // 380
            // 381
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////

          }], "node_modules": {
            "meteor-babel-helpers": {
              "package.json": function (require, exports) {

                /////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //                                                                                                         //
                // ../npm/node_modules/meteor-babel-helpers/package.json                                                   //
                //                                                                                                         //
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //
                exports.name = "meteor-babel-helpers";                                                                     // 1
                exports.version = "0.0.3";                                                                                 // 2
                exports.main = "index.js";                                                                                 // 3
                // 4
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////

              }, "index.js": function (require, exports, module) {

                /////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //                                                                                                         //
                // node_modules/meteor/babel-runtime/node_modules/meteor-babel-helpers/index.js                            //
                //                                                                                                         //
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //
                function canDefineNonEnumerableProperties() {                                                              // 1
                  var testObj = {};                                                                                        // 2
                  var testPropName = "t";                                                                                  // 3
                  // 4
                  try {                                                                                                    // 5
                    Object.defineProperty(testObj, testPropName, {                                                         // 6
                      enumerable: false,                                                                                   // 7
                      value: testObj                                                                                       // 8
                    });                                                                                                    // 9
                    // 10
                    for (var k in testObj) {                                                                               // 11
                      if (k === testPropName) {                                                                            // 12
                        return false;                                                                                      // 13
                      }                                                                                                    // 14
                    }                                                                                                      // 15
                  } catch (e) {                                                                                            // 16
                    return false;                                                                                          // 17
                  }                                                                                                        // 18
                  // 19
                  return testObj[testPropName] === testObj;                                                                // 20
                }                                                                                                          // 21
                // 22
                function sanitizeEasy(value) {                                                                             // 23
                  return value;                                                                                            // 24
                }                                                                                                          // 25
                // 26
                function sanitizeHard(obj) {                                                                               // 27
                  if (Array.isArray(obj)) {                                                                                // 28
                    var newObj = {};                                                                                       // 29
                    var keys = Object.keys(obj);                                                                           // 30
                    var keyCount = keys.length;                                                                            // 31
                    for (var i = 0; i < keyCount; ++i) {                                                                   // 32
                      var key = keys[i];                                                                                   // 33
                      newObj[key] = obj[key];                                                                              // 34
                    }                                                                                                      // 35
                    return newObj;                                                                                         // 36
                  }                                                                                                        // 37
                  // 38
                  return obj;                                                                                              // 39
                }                                                                                                          // 40
                // 41
                meteorBabelHelpers = module.exports = {                                                                    // 42
                  // Meteor-specific runtime helper for wrapping the object of for-in                                      // 43
                  // loops, so that inherited Array methods defined by es5-shim can be                                     // 44
                  // ignored in browsers where they cannot be defined as non-enumerable.                                   // 45
                  sanitizeForInObject: canDefineNonEnumerableProperties()                                                  // 46
                    ? sanitizeEasy                                                                                         // 47
                    : sanitizeHard,                                                                                        // 48
                  // 49
                  // Exposed so that we can test sanitizeForInObject in environments that                                  // 50
                  // support defining non-enumerable properties.                                                           // 51
                  _sanitizeForInObjectHard: sanitizeHard                                                                   // 52
                };                                                                                                         // 53
                // 54
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////

              }
            }, "regenerator-runtime": {
              "package.json": function (require, exports, module) {

                /////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //                                                                                                         //
                // ../npm/node_modules/regenerator-runtime/package.json                                                    //
                //                                                                                                         //
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //
                exports.name = "regenerator-runtime";                                                                      // 1
                exports.version = "0.9.5";                                                                                 // 2
                exports.main = "runtime-module.js";                                                                        // 3
                // 4
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////

              }, "runtime-module.js": ["./runtime", function (require, exports, module) {

                /////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //                                                                                                         //
                // node_modules/meteor/babel-runtime/node_modules/regenerator-runtime/runtime-module.js                    //
                //                                                                                                         //
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //
                // This method of obtaining a reference to the global object needs to be                                   // 1
                // kept identical to the way it is obtained in runtime.js                                                  // 2
                var g =                                                                                                    // 3
                  typeof global === "object" ? global :                                                                    // 4
                    typeof window === "object" ? window :                                                                    // 5
                      typeof self === "object" ? self : this;                                                                  // 6
                // 7
                // Use `getOwnPropertyNames` because not all browsers support calling                                      // 8
                // `hasOwnProperty` on the global `self` object in a worker. See #183.                                     // 9
                var hadRuntime = g.regeneratorRuntime &&                                                                   // 10
                  Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;                                        // 11
                // 12
                // Save the old regeneratorRuntime in case it needs to be restored later.                                  // 13
                var oldRuntime = hadRuntime && g.regeneratorRuntime;                                                       // 14
                // 15
                // Force reevalutation of runtime.js.                                                                      // 16
                g.regeneratorRuntime = undefined;                                                                          // 17
                // 18
                module.exports = require("./runtime");                                                                     // 19
                // 20
                if (hadRuntime) {                                                                                          // 21
                  // Restore the original runtime.                                                                         // 22
                  g.regeneratorRuntime = oldRuntime;                                                                       // 23
                } else {                                                                                                   // 24
                  // Remove the global property added by runtime.js.                                                       // 25
                  try {                                                                                                    // 26
                    delete g.regeneratorRuntime;                                                                           // 27
                  } catch (e) {                                                                                             // 28
                    g.regeneratorRuntime = undefined;                                                                      // 29
                  }                                                                                                        // 30
                }                                                                                                          // 31
                // 32
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////

              }], "runtime.js": function (require, exports, module) {

                /////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //                                                                                                         //
                // node_modules/meteor/babel-runtime/node_modules/regenerator-runtime/runtime.js                           //
                //                                                                                                         //
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //
                /**                                                                                                        // 1
                 * Copyright (c) 2014, Facebook, Inc.                                                                      // 2
                 * All rights reserved.                                                                                    // 3
                 *                                                                                                         // 4
                 * This source code is licensed under the BSD-style license found in the                                   // 5
                 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An                                     // 6
                 * additional grant of patent rights can be found in the PATENTS file in                                   // 7
                 * the same directory.                                                                                     // 8
                 */                                                                                                        // 9
                // 10
                !(function (global) {                                                                                       // 11
                  "use strict";                                                                                            // 12
                  // 13
                  var hasOwn = Object.prototype.hasOwnProperty;                                                            // 14
                  var undefined; // More compressible than void 0.                                                         // 15
                  var $Symbol = typeof Symbol === "function" ? Symbol : {};                                                // 16
                  var iteratorSymbol = $Symbol.iterator || "@@iterator";                                                   // 17
                  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";                                          // 18
                  // 19
                  var inModule = typeof module === "object";                                                               // 20
                  var runtime = global.regeneratorRuntime;                                                                 // 21
                  if (runtime) {                                                                                           // 22
                    if (inModule) {                                                                                        // 23
                      // If regeneratorRuntime is defined globally and we're in a module,                                  // 24
                      // make the exports object identical to regeneratorRuntime.                                          // 25
                      module.exports = runtime;                                                                            // 26
                    }                                                                                                      // 27
                    // Don't bother evaluating the rest of this file if the runtime was                                    // 28
                    // already defined globally.                                                                           // 29
                    return;                                                                                                // 30
                  }                                                                                                        // 31
                  // 32
                  // Define the runtime globally (as expected by generated code) as either                                 // 33
                  // module.exports (if we're in a module) or a new, empty object.                                         // 34
                  runtime = global.regeneratorRuntime = inModule ? module.exports : {};                                    // 35
                  // 36
                  function wrap(innerFn, outerFn, self, tryLocsList) {                                                     // 37
                    // If outerFn provided, then outerFn.prototype instanceof Generator.                                   // 38
                    var generator = Object.create((outerFn || Generator).prototype);                                       // 39
                    var context = new Context(tryLocsList || []);                                                          // 40
                    // 41
                    // The ._invoke method unifies the implementations of the .next,                                       // 42
                    // .throw, and .return methods.                                                                        // 43
                    generator._invoke = makeInvokeMethod(innerFn, self, context);                                          // 44
                    // 45
                    return generator;                                                                                      // 46
                  }                                                                                                        // 47
                  runtime.wrap = wrap;                                                                                     // 48
                  // 49
                  // Try/catch helper to minimize deoptimizations. Returns a completion                                    // 50
                  // record like context.tryEntries[i].completion. This interface could                                    // 51
                  // have been (and was previously) designed to take a closure to be                                       // 52
                  // invoked without arguments, but in all the cases we care about we                                      // 53
                  // already have an existing method we want to call, so there's no need                                   // 54
                  // to create a new function object. We can even get away with assuming                                   // 55
                  // the method takes exactly one argument, since that happens to be true                                  // 56
                  // in every case, so we don't have to touch the arguments object. The                                    // 57
                  // only additional allocation required is the completion record, which                                   // 58
                  // has a stable shape and so hopefully should be cheap to allocate.                                      // 59
                  function tryCatch(fn, obj, arg) {                                                                        // 60
                    try {                                                                                                  // 61
                      return { type: "normal", arg: fn.call(obj, arg) };                                                   // 62
                    } catch (err) {                                                                                        // 63
                      return { type: "throw", arg: err };                                                                  // 64
                    }                                                                                                      // 65
                  }                                                                                                        // 66
                  // 67
                  var GenStateSuspendedStart = "suspendedStart";                                                           // 68
                  var GenStateSuspendedYield = "suspendedYield";                                                           // 69
                  var GenStateExecuting = "executing";                                                                     // 70
                  var GenStateCompleted = "completed";                                                                     // 71
                  // 72
                  // Returning this object from the innerFn has the same effect as                                         // 73
                  // breaking out of the dispatch switch statement.                                                        // 74
                  var ContinueSentinel = {};                                                                               // 75
                  // 76
                  // Dummy constructor functions that we use as the .constructor and                                       // 77
                  // .constructor.prototype properties for functions that return Generator                                 // 78
                  // objects. For full spec compliance, you may wish to configure your                                     // 79
                  // minifier not to mangle the names of these two functions.                                              // 80
                  function Generator() { }                                                                                  // 81
                  function GeneratorFunction() { }                                                                          // 82
                  function GeneratorFunctionPrototype() { }                                                                 // 83
                  // 84
                  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;                                     // 85
                  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;                               // 86
                  GeneratorFunctionPrototype.constructor = GeneratorFunction;                                              // 87
                  GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction";     // 88
                  // 89
                  // Helper for defining the .next, .throw, and .return methods of the                                     // 90
                  // Iterator interface in terms of a single ._invoke method.                                              // 91
                  function defineIteratorMethods(prototype) {                                                              // 92
                    ["next", "throw", "return"].forEach(function (method) {                                                 // 93
                      prototype[method] = function (arg) {                                                                  // 94
                        return this._invoke(method, arg);                                                                  // 95
                      };                                                                                                   // 96
                    });                                                                                                    // 97
                  }                                                                                                        // 98
                  // 99
                  runtime.isGeneratorFunction = function (genFun) {                                                         // 100
                    var ctor = typeof genFun === "function" && genFun.constructor;                                         // 101
                    return ctor                                                                                            // 102
                      ? ctor === GeneratorFunction ||                                                                      // 103
                      // For the native GeneratorFunction constructor, the best we can                                   // 104
                      // do is to check its .name property.                                                              // 105
                      (ctor.displayName || ctor.name) === "GeneratorFunction"                                            // 106
                      : false;                                                                                             // 107
                  };                                                                                                       // 108
                  // 109
                  runtime.mark = function (genFun) {                                                                        // 110
                    if (Object.setPrototypeOf) {                                                                           // 111
                      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);                                           // 112
                    } else {                                                                                               // 113
                      genFun.__proto__ = GeneratorFunctionPrototype;                                                       // 114
                      if (!(toStringTagSymbol in genFun)) {                                                                // 115
                        genFun[toStringTagSymbol] = "GeneratorFunction";                                                   // 116
                      }                                                                                                    // 117
                    }                                                                                                      // 118
                    genFun.prototype = Object.create(Gp);                                                                  // 119
                    return genFun;                                                                                         // 120
                  };                                                                                                       // 121
                  // 122
                  // Within the body of any async function, `await x` is transformed to                                    // 123
                  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test                                     // 124
                  // `value instanceof AwaitArgument` to determine if the yielded value is                                 // 125
                  // meant to be awaited. Some may consider the name of this method too                                    // 126
                  // cutesy, but they are curmudgeons.                                                                     // 127
                  runtime.awrap = function (arg) {                                                                          // 128
                    return new AwaitArgument(arg);                                                                         // 129
                  };                                                                                                       // 130
                  // 131
                  function AwaitArgument(arg) {                                                                            // 132
                    this.arg = arg;                                                                                        // 133
                  }                                                                                                        // 134
                  // 135
                  function AsyncIterator(generator) {                                                                      // 136
                    function invoke(method, arg, resolve, reject) {                                                        // 137
                      var record = tryCatch(generator[method], generator, arg);                                            // 138
                      if (record.type === "throw") {                                                                       // 139
                        reject(record.arg);                                                                                // 140
                      } else {                                                                                             // 141
                        var result = record.arg;                                                                           // 142
                        var value = result.value;                                                                          // 143
                        if (value instanceof AwaitArgument) {                                                              // 144
                          return Promise.resolve(value.arg).then(function (value) {                                         // 145
                            invoke("next", value, resolve, reject);                                                        // 146
                          }, function (err) {                                                                               // 147
                            invoke("throw", err, resolve, reject);                                                         // 148
                          });                                                                                              // 149
                        }                                                                                                  // 150
                        // 151
                        return Promise.resolve(value).then(function (unwrapped) {                                           // 152
                          // When a yielded Promise is resolved, its final value becomes                                   // 153
                          // the .value of the Promise<{value,done}> result for the                                        // 154
                          // current iteration. If the Promise is rejected, however, the                                   // 155
                          // result for this iteration will be rejected with the same                                      // 156
                          // reason. Note that rejections of yielded Promises are not                                      // 157
                          // thrown back into the generator function, as is the case                                       // 158
                          // when an awaited Promise is rejected. This difference in                                       // 159
                          // behavior between yield and await is important, because it                                     // 160
                          // allows the consumer to decide what to do with the yielded                                     // 161
                          // rejection (swallow it and continue, manually .throw it back                                   // 162
                          // into the generator, abandon iteration, whatever). With                                        // 163
                          // await, by contrast, there is no opportunity to examine the                                    // 164
                          // rejection reason outside the generator function, so the                                       // 165
                          // only option is to throw it from the await expression, and                                     // 166
                          // let the generator function handle the exception.                                              // 167
                          result.value = unwrapped;                                                                        // 168
                          resolve(result);                                                                                 // 169
                        }, reject);                                                                                        // 170
                      }                                                                                                    // 171
                    }                                                                                                      // 172
                    // 173
                    if (typeof process === "object" && process.domain) {                                                   // 174
                      invoke = process.domain.bind(invoke);                                                                // 175
                    }                                                                                                      // 176
                    // 177
                    var previousPromise;                                                                                   // 178
                    // 179
                    function enqueue(method, arg) {                                                                        // 180
                      function callInvokeWithMethodAndArg() {                                                              // 181
                        return new Promise(function (resolve, reject) {                                                     // 182
                          invoke(method, arg, resolve, reject);                                                            // 183
                        });                                                                                                // 184
                      }                                                                                                    // 185
                      // 186
                      return previousPromise =                                                                             // 187
                        // If enqueue has been called before, then we want to wait until                                   // 188
                        // all previous Promises have been resolved before calling invoke,                                 // 189
                        // so that results are always delivered in the correct order. If                                   // 190
                        // enqueue has not been called before, then it is important to                                     // 191
                        // call invoke immediately, without waiting on a callback to fire,                                 // 192
                        // so that the async generator function has the opportunity to do                                  // 193
                        // any necessary setup in a predictable way. This predictability                                   // 194
                        // is why the Promise constructor synchronously invokes its                                        // 195
                        // executor callback, and why async functions synchronously                                        // 196
                        // execute code before the first await. Since we implement simple                                  // 197
                        // async functions in terms of async generators, it is especially                                  // 198
                        // important to get this right, even though it requires care.                                      // 199
                        previousPromise ? previousPromise.then(                                                            // 200
                          callInvokeWithMethodAndArg,                                                                      // 201
                          // Avoid propagating failures to Promises returned by later                                      // 202
                          // invocations of the iterator.                                                                  // 203
                          callInvokeWithMethodAndArg                                                                       // 204
                        ) : callInvokeWithMethodAndArg();                                                                  // 205
                    }                                                                                                      // 206
                    // 207
                    // Define the unified helper method that is used to implement .next,                                   // 208
                    // .throw, and .return (see defineIteratorMethods).                                                    // 209
                    this._invoke = enqueue;                                                                                // 210
                  }                                                                                                        // 211
                  // 212
                  defineIteratorMethods(AsyncIterator.prototype);                                                          // 213
                  // 214
                  // Note that simple async functions are implemented on top of                                            // 215
                  // AsyncIterator objects; they just return a Promise for the value of                                    // 216
                  // the final result produced by the iterator.                                                            // 217
                  runtime.async = function (innerFn, outerFn, self, tryLocsList) {                                          // 218
                    var iter = new AsyncIterator(                                                                          // 219
                      wrap(innerFn, outerFn, self, tryLocsList)                                                            // 220
                    );                                                                                                     // 221
                    // 222
                    return runtime.isGeneratorFunction(outerFn)                                                            // 223
                      ? iter // If outerFn is a generator, return the full iterator.                                       // 224
                      : iter.next().then(function (result) {                                                                // 225
                        return result.done ? result.value : iter.next();                                                 // 226
                      });                                                                                                // 227
                  };                                                                                                       // 228
                  // 229
                  function makeInvokeMethod(innerFn, self, context) {                                                      // 230
                    var state = GenStateSuspendedStart;                                                                    // 231
                    // 232
                    return function invoke(method, arg) {                                                                  // 233
                      if (state === GenStateExecuting) {                                                                   // 234
                        throw new Error("Generator is already running");                                                   // 235
                      }                                                                                                    // 236
                      // 237
                      if (state === GenStateCompleted) {                                                                   // 238
                        if (method === "throw") {                                                                          // 239
                          throw arg;                                                                                       // 240
                        }                                                                                                  // 241
                        // 242
                        // Be forgiving, per 25.3.3.3.3 of the spec:                                                       // 243
                        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume                       // 244
                        return doneResult();                                                                               // 245
                      }                                                                                                    // 246
                      // 247
                      while (true) {                                                                                       // 248
                        var delegate = context.delegate;                                                                   // 249
                        if (delegate) {                                                                                    // 250
                          if (method === "return" ||                                                                       // 251
                            (method === "throw" && delegate.iterator[method] === undefined)) {                           // 252
                            // A return or throw (when the delegate iterator has no throw                                  // 253
                            // method) always terminates the yield* loop.                                                  // 254
                            context.delegate = null;                                                                       // 255
                            // 256
                            // If the delegate iterator has a return method, give it a                                     // 257
                            // chance to clean up.                                                                         // 258
                            var returnMethod = delegate.iterator["return"];                                                // 259
                            if (returnMethod) {                                                                            // 260
                              var record = tryCatch(returnMethod, delegate.iterator, arg);                                 // 261
                              if (record.type === "throw") {                                                               // 262
                                // If the return method threw an exception, let that                                       // 263
                                // exception prevail over the original return or throw.                                    // 264
                                method = "throw";                                                                          // 265
                                arg = record.arg;                                                                          // 266
                                continue;                                                                                  // 267
                              }                                                                                            // 268
                            }                                                                                              // 269
                            // 270
                            if (method === "return") {                                                                     // 271
                              // Continue with the outer return, now that the delegate                                     // 272
                              // iterator has been terminated.                                                             // 273
                              continue;                                                                                    // 274
                            }                                                                                              // 275
                          }                                                                                                // 276
                          // 277
                          var record = tryCatch(                                                                           // 278
                            delegate.iterator[method],                                                                     // 279
                            delegate.iterator,                                                                             // 280
                            arg                                                                                            // 281
                          );                                                                                               // 282
                          // 283
                          if (record.type === "throw") {                                                                   // 284
                            context.delegate = null;                                                                       // 285
                            // 286
                            // Like returning generator.throw(uncaught), but without the                                   // 287
                            // overhead of an extra function call.                                                         // 288
                            method = "throw";                                                                              // 289
                            arg = record.arg;                                                                              // 290
                            continue;                                                                                      // 291
                          }                                                                                                // 292
                          // 293
                          // Delegate generator ran and handled its own exceptions so                                      // 294
                          // regardless of what the method was, we continue as if it is                                    // 295
                          // "next" with an undefined arg.                                                                 // 296
                          method = "next";                                                                                 // 297
                          arg = undefined;                                                                                 // 298
                          // 299
                          var info = record.arg;                                                                           // 300
                          if (info.done) {                                                                                 // 301
                            context[delegate.resultName] = info.value;                                                     // 302
                            context.next = delegate.nextLoc;                                                               // 303
                          } else {                                                                                         // 304
                            state = GenStateSuspendedYield;                                                                // 305
                            return info;                                                                                   // 306
                          }                                                                                                // 307
                          // 308
                          context.delegate = null;                                                                         // 309
                        }                                                                                                  // 310
                        // 311
                        if (method === "next") {                                                                           // 312
                          // Setting context._sent for legacy support of Babel's                                           // 313
                          // function.sent implementation.                                                                 // 314
                          context.sent = context._sent = arg;                                                              // 315
                          // 316
                        } else if (method === "throw") {                                                                   // 317
                          if (state === GenStateSuspendedStart) {                                                          // 318
                            state = GenStateCompleted;                                                                     // 319
                            throw arg;                                                                                     // 320
                          }                                                                                                // 321
                          // 322
                          if (context.dispatchException(arg)) {                                                            // 323
                            // If the dispatched exception was caught by a catch block,                                    // 324
                            // then let that catch block handle the exception normally.                                    // 325
                            method = "next";                                                                               // 326
                            arg = undefined;                                                                               // 327
                          }                                                                                                // 328
                          // 329
                        } else if (method === "return") {                                                                  // 330
                          context.abrupt("return", arg);                                                                   // 331
                        }                                                                                                  // 332
                        // 333
                        state = GenStateExecuting;                                                                         // 334
                        // 335
                        var record = tryCatch(innerFn, self, context);                                                     // 336
                        if (record.type === "normal") {                                                                    // 337
                          // If an exception is thrown from innerFn, we leave state ===                                    // 338
                          // GenStateExecuting and loop back for another invocation.                                       // 339
                          state = context.done                                                                             // 340
                            ? GenStateCompleted                                                                            // 341
                            : GenStateSuspendedYield;                                                                      // 342
                          // 343
                          var info = {                                                                                     // 344
                            value: record.arg,                                                                             // 345
                            done: context.done                                                                             // 346
                          };                                                                                               // 347
                          // 348
                          if (record.arg === ContinueSentinel) {                                                           // 349
                            if (context.delegate && method === "next") {                                                   // 350
                              // Deliberately forget the last sent value so that we don't                                  // 351
                              // accidentally pass it on to the delegate.                                                  // 352
                              arg = undefined;                                                                             // 353
                            }                                                                                              // 354
                          } else {                                                                                         // 355
                            return info;                                                                                   // 356
                          }                                                                                                // 357
                          // 358
                        } else if (record.type === "throw") {                                                              // 359
                          state = GenStateCompleted;                                                                       // 360
                          // Dispatch the exception by looping back around to the                                          // 361
                          // context.dispatchException(arg) call above.                                                    // 362
                          method = "throw";                                                                                // 363
                          arg = record.arg;                                                                                // 364
                        }                                                                                                  // 365
                      }                                                                                                    // 366
                    };                                                                                                     // 367
                  }                                                                                                        // 368
                  // 369
                  // Define Generator.prototype.{next,throw,return} in terms of the                                        // 370
                  // unified ._invoke helper method.                                                                       // 371
                  defineIteratorMethods(Gp);                                                                               // 372
                  // 373
                  Gp[iteratorSymbol] = function () {                                                                        // 374
                    return this;                                                                                           // 375
                  };                                                                                                       // 376
                  // 377
                  Gp[toStringTagSymbol] = "Generator";                                                                     // 378
                  // 379
                  Gp.toString = function () {                                                                               // 380
                    return "[object Generator]";                                                                           // 381
                  };                                                                                                       // 382
                  // 383
                  function pushTryEntry(locs) {                                                                            // 384
                    var entry = { tryLoc: locs[0] };                                                                       // 385
                    // 386
                    if (1 in locs) {                                                                                       // 387
                      entry.catchLoc = locs[1];                                                                            // 388
                    }                                                                                                      // 389
                    // 390
                    if (2 in locs) {                                                                                       // 391
                      entry.finallyLoc = locs[2];                                                                          // 392
                      entry.afterLoc = locs[3];                                                                            // 393
                    }                                                                                                      // 394
                    // 395
                    this.tryEntries.push(entry);                                                                           // 396
                  }                                                                                                        // 397
                  // 398
                  function resetTryEntry(entry) {                                                                          // 399
                    var record = entry.completion || {};                                                                   // 400
                    record.type = "normal";                                                                                // 401
                    delete record.arg;                                                                                     // 402
                    entry.completion = record;                                                                             // 403
                  }                                                                                                        // 404
                  // 405
                  function Context(tryLocsList) {                                                                          // 406
                    // The root entry object (effectively a try statement without a catch                                  // 407
                    // or a finally block) gives us a place to store values thrown from                                    // 408
                    // locations where there is no enclosing try statement.                                                // 409
                    this.tryEntries = [{ tryLoc: "root" }];                                                                // 410
                    tryLocsList.forEach(pushTryEntry, this);                                                               // 411
                    this.reset(true);                                                                                      // 412
                  }                                                                                                        // 413
                  // 414
                  runtime.keys = function (object) {                                                                        // 415
                    var keys = [];                                                                                         // 416
                    for (var key in object) {                                                                              // 417
                      keys.push(key);                                                                                      // 418
                    }                                                                                                      // 419
                    keys.reverse();                                                                                        // 420
                    // 421
                    // Rather than returning an object with a next method, we keep                                         // 422
                    // things simple and return the next function itself.                                                  // 423
                    return function next() {                                                                               // 424
                      while (keys.length) {                                                                                // 425
                        var key = keys.pop();                                                                              // 426
                        if (key in object) {                                                                               // 427
                          next.value = key;                                                                                // 428
                          next.done = false;                                                                               // 429
                          return next;                                                                                     // 430
                        }                                                                                                  // 431
                      }                                                                                                    // 432
                      // 433
                      // To avoid creating an additional object, we just hang the .value                                   // 434
                      // and .done properties off the next function object itself. This                                    // 435
                      // also ensures that the minifier will not anonymize the function.                                   // 436
                      next.done = true;                                                                                    // 437
                      return next;                                                                                         // 438
                    };                                                                                                     // 439
                  };                                                                                                       // 440
                  // 441
                  function values(iterable) {                                                                              // 442
                    if (iterable) {                                                                                        // 443
                      var iteratorMethod = iterable[iteratorSymbol];                                                       // 444
                      if (iteratorMethod) {                                                                                // 445
                        return iteratorMethod.call(iterable);                                                              // 446
                      }                                                                                                    // 447
                      // 448
                      if (typeof iterable.next === "function") {                                                           // 449
                        return iterable;                                                                                   // 450
                      }                                                                                                    // 451
                      // 452
                      if (!isNaN(iterable.length)) {                                                                       // 453
                        var i = -1, next = function next() {                                                               // 454
                          while (++i < iterable.length) {                                                                  // 455
                            if (hasOwn.call(iterable, i)) {                                                                // 456
                              next.value = iterable[i];                                                                    // 457
                              next.done = false;                                                                           // 458
                              return next;                                                                                 // 459
                            }                                                                                              // 460
                          }                                                                                                // 461
                          // 462
                          next.value = undefined;                                                                          // 463
                          next.done = true;                                                                                // 464
                          // 465
                          return next;                                                                                     // 466
                        };                                                                                                 // 467
                        // 468
                        return next.next = next;                                                                           // 469
                      }                                                                                                    // 470
                    }                                                                                                      // 471
                    // 472
                    // Return an iterator with no values.                                                                  // 473
                    return { next: doneResult };                                                                           // 474
                  }                                                                                                        // 475
                  runtime.values = values;                                                                                 // 476
                  // 477
                  function doneResult() {                                                                                  // 478
                    return { value: undefined, done: true };                                                               // 479
                  }                                                                                                        // 480
                  // 481
                  Context.prototype = {                                                                                    // 482
                    constructor: Context,                                                                                  // 483
                    // 484
                    reset: function (skipTempReset) {                                                                       // 485
                      this.prev = 0;                                                                                       // 486
                      this.next = 0;                                                                                       // 487
                      // Resetting context._sent for legacy support of Babel's                                             // 488
                      // function.sent implementation.                                                                     // 489
                      this.sent = this._sent = undefined;                                                                  // 490
                      this.done = false;                                                                                   // 491
                      this.delegate = null;                                                                                // 492
                      // 493
                      this.tryEntries.forEach(resetTryEntry);                                                              // 494
                      // 495
                      if (!skipTempReset) {                                                                                // 496
                        for (var name in this) {                                                                           // 497
                          // Not sure about the optimal order of these conditions:                                         // 498
                          if (name.charAt(0) === "t" &&                                                                    // 499
                            hasOwn.call(this, name) &&                                                                   // 500
                            !isNaN(+name.slice(1))) {                                                                    // 501
                            this[name] = undefined;                                                                        // 502
                          }                                                                                                // 503
                        }                                                                                                  // 504
                      }                                                                                                    // 505
                    },                                                                                                     // 506
                    // 507
                    stop: function () {                                                                                     // 508
                      this.done = true;                                                                                    // 509
                      // 510
                      var rootEntry = this.tryEntries[0];                                                                  // 511
                      var rootRecord = rootEntry.completion;                                                               // 512
                      if (rootRecord.type === "throw") {                                                                   // 513
                        throw rootRecord.arg;                                                                              // 514
                      }                                                                                                    // 515
                      // 516
                      return this.rval;                                                                                    // 517
                    },                                                                                                     // 518
                    // 519
                    dispatchException: function (exception) {                                                               // 520
                      if (this.done) {                                                                                     // 521
                        throw exception;                                                                                   // 522
                      }                                                                                                    // 523
                      // 524
                      var context = this;                                                                                  // 525
                      function handle(loc, caught) {                                                                       // 526
                        record.type = "throw";                                                                             // 527
                        record.arg = exception;                                                                            // 528
                        context.next = loc;                                                                                // 529
                        return !!caught;                                                                                   // 530
                      }                                                                                                    // 531
                      // 532
                      for (var i = this.tryEntries.length - 1; i >= 0; --i) {                                              // 533
                        var entry = this.tryEntries[i];                                                                    // 534
                        var record = entry.completion;                                                                     // 535
                        // 536
                        if (entry.tryLoc === "root") {                                                                     // 537
                          // Exception thrown outside of any try block that could handle                                   // 538
                          // it, so set the completion value of the entire function to                                     // 539
                          // throw the exception.                                                                          // 540
                          return handle("end");                                                                            // 541
                        }                                                                                                  // 542
                        // 543
                        if (entry.tryLoc <= this.prev) {                                                                   // 544
                          var hasCatch = hasOwn.call(entry, "catchLoc");                                                   // 545
                          var hasFinally = hasOwn.call(entry, "finallyLoc");                                               // 546
                          // 547
                          if (hasCatch && hasFinally) {                                                                    // 548
                            if (this.prev < entry.catchLoc) {                                                              // 549
                              return handle(entry.catchLoc, true);                                                         // 550
                            } else if (this.prev < entry.finallyLoc) {                                                     // 551
                              return handle(entry.finallyLoc);                                                             // 552
                            }                                                                                              // 553
                            // 554
                          } else if (hasCatch) {                                                                           // 555
                            if (this.prev < entry.catchLoc) {                                                              // 556
                              return handle(entry.catchLoc, true);                                                         // 557
                            }                                                                                              // 558
                            // 559
                          } else if (hasFinally) {                                                                         // 560
                            if (this.prev < entry.finallyLoc) {                                                            // 561
                              return handle(entry.finallyLoc);                                                             // 562
                            }                                                                                              // 563
                            // 564
                          } else {                                                                                         // 565
                            throw new Error("try statement without catch or finally");                                     // 566
                          }                                                                                                // 567
                        }                                                                                                  // 568
                      }                                                                                                    // 569
                    },                                                                                                     // 570
                    // 571
                    abrupt: function (type, arg) {                                                                          // 572
                      for (var i = this.tryEntries.length - 1; i >= 0; --i) {                                              // 573
                        var entry = this.tryEntries[i];                                                                    // 574
                        if (entry.tryLoc <= this.prev &&                                                                   // 575
                          hasOwn.call(entry, "finallyLoc") &&                                                            // 576
                          this.prev < entry.finallyLoc) {                                                                // 577
                          var finallyEntry = entry;                                                                        // 578
                          break;                                                                                           // 579
                        }                                                                                                  // 580
                      }                                                                                                    // 581
                      // 582
                      if (finallyEntry &&                                                                                  // 583
                        (type === "break" ||                                                                             // 584
                          type === "continue") &&                                                                         // 585
                        finallyEntry.tryLoc <= arg &&                                                                    // 586
                        arg <= finallyEntry.finallyLoc) {                                                                // 587
                        // Ignore the finally entry if control is not jumping to a                                         // 588
                        // location outside the try/catch block.                                                           // 589
                        finallyEntry = null;                                                                               // 590
                      }                                                                                                    // 591
                      // 592
                      var record = finallyEntry ? finallyEntry.completion : {};                                            // 593
                      record.type = type;                                                                                  // 594
                      record.arg = arg;                                                                                    // 595
                      // 596
                      if (finallyEntry) {                                                                                  // 597
                        this.next = finallyEntry.finallyLoc;                                                               // 598
                      } else {                                                                                             // 599
                        this.complete(record);                                                                             // 600
                      }                                                                                                    // 601
                      // 602
                      return ContinueSentinel;                                                                             // 603
                    },                                                                                                     // 604
                    // 605
                    complete: function (record, afterLoc) {                                                                 // 606
                      if (record.type === "throw") {                                                                       // 607
                        throw record.arg;                                                                                  // 608
                      }                                                                                                    // 609
                      // 610
                      if (record.type === "break" ||                                                                       // 611
                        record.type === "continue") {                                                                    // 612
                        this.next = record.arg;                                                                            // 613
                      } else if (record.type === "return") {                                                               // 614
                        this.rval = record.arg;                                                                            // 615
                        this.next = "end";                                                                                 // 616
                      } else if (record.type === "normal" && afterLoc) {                                                   // 617
                        this.next = afterLoc;                                                                              // 618
                      }                                                                                                    // 619
                    },                                                                                                     // 620
                    // 621
                    finish: function (finallyLoc) {                                                                         // 622
                      for (var i = this.tryEntries.length - 1; i >= 0; --i) {                                              // 623
                        var entry = this.tryEntries[i];                                                                    // 624
                        if (entry.finallyLoc === finallyLoc) {                                                             // 625
                          this.complete(entry.completion, entry.afterLoc);                                                 // 626
                          resetTryEntry(entry);                                                                            // 627
                          return ContinueSentinel;                                                                         // 628
                        }                                                                                                  // 629
                      }                                                                                                    // 630
                    },                                                                                                     // 631
                    // 632
                    "catch": function (tryLoc) {                                                                            // 633
                      for (var i = this.tryEntries.length - 1; i >= 0; --i) {                                              // 634
                        var entry = this.tryEntries[i];                                                                    // 635
                        if (entry.tryLoc === tryLoc) {                                                                     // 636
                          var record = entry.completion;                                                                   // 637
                          if (record.type === "throw") {                                                                   // 638
                            var thrown = record.arg;                                                                       // 639
                            resetTryEntry(entry);                                                                          // 640
                          }                                                                                                // 641
                          return thrown;                                                                                   // 642
                        }                                                                                                  // 643
                      }                                                                                                    // 644
                      // 645
                      // The context.catch method must only be called with a location                                      // 646
                      // argument that corresponds to a known catch block.                                                 // 647
                      throw new Error("illegal catch attempt");                                                            // 648
                    },                                                                                                     // 649
                    // 650
                    delegateYield: function (iterable, resultName, nextLoc) {                                               // 651
                      this.delegate = {                                                                                    // 652
                        iterator: values(iterable),                                                                        // 653
                        resultName: resultName,                                                                            // 654
                        nextLoc: nextLoc                                                                                   // 655
                      };                                                                                                   // 656
                      // 657
                      return ContinueSentinel;                                                                             // 658
                    }                                                                                                      // 659
                  };                                                                                                       // 660
                })(                                                                                                        // 661
                  // Among the various tricks for obtaining a reference to the global                                      // 662
                  // object, this seems to be the most reliable technique that does not                                    // 663
                  // use indirect eval (which violates Content Security Policy).                                           // 664
                  typeof global === "object" ? global :                                                                    // 665
                    typeof window === "object" ? window :                                                                    // 666
                      typeof self === "object" ? self : this                                                                   // 667
                );                                                                                                         // 668
                // 669
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////

              }
            }
          }
        }
      }
    }
  }, { "extensions": [".js", ".json"] });
  require("./node_modules/meteor/babel-runtime/babel-runtime.js");

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols)
      (s in pkg) || (pkg[s] = symbols[s]);
  })(Package['babel-runtime'] = {}, {
    meteorBabelHelpers: meteorBabelHelpers
  });

})();
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var Buffer = Package.modules.Buffer;
  var process = Package.modules.process;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var Symbol, Map, Set, __g, __e;

  var require = meteorInstall({
    "node_modules": {
      "meteor": {
        "ecmascript-runtime": {
          "runtime.js": ["meteor-ecmascript-runtime", function (require, exports, module) {

            ///////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                   //
            // packages/ecmascript-runtime/runtime.js                                                            //
            //                                                                                                   //
            ///////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // TODO Allow just api.mainModule("meteor-ecmascript-runtime");                                      // 1
            module.exports = require("meteor-ecmascript-runtime");                                               // 2
            // 3
            ///////////////////////////////////////////////////////////////////////////////////////////////////////

          }], "node_modules": {
            "meteor-ecmascript-runtime": {
              "package.json": function (require, exports) {

                ///////////////////////////////////////////////////////////////////////////////////////////////////////
                //                                                                                                   //
                // ../npm/node_modules/meteor-ecmascript-runtime/package.json                                        //
                //                                                                                                   //
                ///////////////////////////////////////////////////////////////////////////////////////////////////////
                //
                exports.name = "meteor-ecmascript-runtime";                                                          // 1
                exports.version = "0.2.6";                                                                           // 2
                exports.main = "server.js";                                                                          // 3
                // 4
                ///////////////////////////////////////////////////////////////////////////////////////////////////////

              }, "server.js": ["core-js/es6/object", "core-js/es6/array", "core-js/es6/string", "core-js/es6/function", "core-js/es6/symbol", "core-js/es6/map", "core-js/es6/set", function (require, exports) {

                ///////////////////////////////////////////////////////////////////////////////////////////////////////
                //                                                                                                   //
                // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/server.js           //
                //                                                                                                   //
                ///////////////////////////////////////////////////////////////////////////////////////////////////////
                //
                require("core-js/es6/object");                                                                       // 1
                require("core-js/es6/array");                                                                        // 2
                require("core-js/es6/string");                                                                       // 3
                require("core-js/es6/function");                                                                     // 4
                // 5
                Symbol = exports.Symbol = require("core-js/es6/symbol");                                             // 6
                Map = exports.Map = require("core-js/es6/map");                                                      // 7
                Set = exports.Set = require("core-js/es6/set");                                                      // 8
                // 9
                ///////////////////////////////////////////////////////////////////////////////////////////////////////

              }], "node_modules": {
                "core-js": {
                  "es6": {
                    "object.js": ["../modules/es6.symbol", "../modules/es6.object.assign", "../modules/es6.object.is", "../modules/es6.object.set-prototype-of", "../modules/es6.object.to-string", "../modules/es6.object.freeze", "../modules/es6.object.seal", "../modules/es6.object.prevent-extensions", "../modules/es6.object.is-frozen", "../modules/es6.object.is-sealed", "../modules/es6.object.is-extensible", "../modules/es6.object.get-own-property-descriptor", "../modules/es6.object.get-prototype-of", "../modules/es6.object.keys", "../modules/es6.object.get-own-property-names", "../modules/$.core", function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      require('../modules/es6.symbol');                                                                    // 1
                      require('../modules/es6.object.assign');                                                             // 2
                      require('../modules/es6.object.is');                                                                 // 3
                      require('../modules/es6.object.set-prototype-of');                                                   // 4
                      require('../modules/es6.object.to-string');                                                          // 5
                      require('../modules/es6.object.freeze');                                                             // 6
                      require('../modules/es6.object.seal');                                                               // 7
                      require('../modules/es6.object.prevent-extensions');                                                 // 8
                      require('../modules/es6.object.is-frozen');                                                          // 9
                      require('../modules/es6.object.is-sealed');                                                          // 10
                      require('../modules/es6.object.is-extensible');                                                      // 11
                      require('../modules/es6.object.get-own-property-descriptor');                                        // 12
                      require('../modules/es6.object.get-prototype-of');                                                   // 13
                      require('../modules/es6.object.keys');                                                               // 14
                      require('../modules/es6.object.get-own-property-names');                                             // 15
                      // 16
                      module.exports = require('../modules/$.core').Object;                                                // 17
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "array.js": ["../modules/es6.string.iterator", "../modules/es6.array.from", "../modules/es6.array.of", "../modules/es6.array.species", "../modules/es6.array.iterator", "../modules/es6.array.copy-within", "../modules/es6.array.fill", "../modules/es6.array.find", "../modules/es6.array.find-index", "../modules/$.core", function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      require('../modules/es6.string.iterator');                                                           // 1
                      require('../modules/es6.array.from');                                                                // 2
                      require('../modules/es6.array.of');                                                                  // 3
                      require('../modules/es6.array.species');                                                             // 4
                      require('../modules/es6.array.iterator');                                                            // 5
                      require('../modules/es6.array.copy-within');                                                         // 6
                      require('../modules/es6.array.fill');                                                                // 7
                      require('../modules/es6.array.find');                                                                // 8
                      require('../modules/es6.array.find-index');                                                          // 9
                      module.exports = require('../modules/$.core').Array;                                                 // 10
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "string.js": ["../modules/es6.string.from-code-point", "../modules/es6.string.raw", "../modules/es6.string.trim", "../modules/es6.string.iterator", "../modules/es6.string.code-point-at", "../modules/es6.string.ends-with", "../modules/es6.string.includes", "../modules/es6.string.repeat", "../modules/es6.string.starts-with", "../modules/es6.regexp.match", "../modules/es6.regexp.replace", "../modules/es6.regexp.search", "../modules/es6.regexp.split", "../modules/$.core", function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      require('../modules/es6.string.from-code-point');                                                    // 1
                      require('../modules/es6.string.raw');                                                                // 2
                      require('../modules/es6.string.trim');                                                               // 3
                      require('../modules/es6.string.iterator');                                                           // 4
                      require('../modules/es6.string.code-point-at');                                                      // 5
                      require('../modules/es6.string.ends-with');                                                          // 6
                      require('../modules/es6.string.includes');                                                           // 7
                      require('../modules/es6.string.repeat');                                                             // 8
                      require('../modules/es6.string.starts-with');                                                        // 9
                      require('../modules/es6.regexp.match');                                                              // 10
                      require('../modules/es6.regexp.replace');                                                            // 11
                      require('../modules/es6.regexp.search');                                                             // 12
                      require('../modules/es6.regexp.split');                                                              // 13
                      module.exports = require('../modules/$.core').String;                                                // 14
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "function.js": ["../modules/es6.function.name", "../modules/es6.function.has-instance", "../modules/$.core", function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      require('../modules/es6.function.name');                                                             // 1
                      require('../modules/es6.function.has-instance');                                                     // 2
                      module.exports = require('../modules/$.core').Function;                                              // 3
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "symbol.js": ["../modules/es6.symbol", "../modules/$.core", function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      require('../modules/es6.symbol');                                                                    // 1
                      module.exports = require('../modules/$.core').Symbol;                                                // 2
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "map.js": ["../modules/es6.object.to-string", "../modules/es6.string.iterator", "../modules/web.dom.iterable", "../modules/es6.map", "../modules/$.core", function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      require('../modules/es6.object.to-string');                                                          // 1
                      require('../modules/es6.string.iterator');                                                           // 2
                      require('../modules/web.dom.iterable');                                                              // 3
                      require('../modules/es6.map');                                                                       // 4
                      module.exports = require('../modules/$.core').Map;                                                   // 5
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "set.js": ["../modules/es6.object.to-string", "../modules/es6.string.iterator", "../modules/web.dom.iterable", "../modules/es6.set", "../modules/$.core", function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      require('../modules/es6.object.to-string');                                                          // 1
                      require('../modules/es6.string.iterator');                                                           // 2
                      require('../modules/web.dom.iterable');                                                              // 3
                      require('../modules/es6.set');                                                                       // 4
                      module.exports = require('../modules/$.core').Set;                                                   // 5
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }]
                  }, "modules": {
                    "es6.symbol.js": ["./$", "./$.global", "./$.has", "./$.support-desc", "./$.def", "./$.redef", "./$.fails", "./$.shared", "./$.tag", "./$.uid", "./$.wks", "./$.keyof", "./$.get-names", "./$.enum-keys", "./$.is-array", "./$.is-object", "./$.an-object", "./$.to-iobject", "./$.property-desc", "./$.library", function (require) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      'use strict';                                                                                        // 1
                      // ECMAScript 6 symbols shim                                                                         // 2
                      var $ = require('./$')                                                                  // 3
                        , global = require('./$.global')                                                           // 4
                        , has = require('./$.has')                                                              // 5
                        , SUPPORT_DESC = require('./$.support-desc')                                                     // 6
                        , $def = require('./$.def')                                                              // 7
                        , $redef = require('./$.redef')                                                            // 8
                        , $fails = require('./$.fails')                                                            // 9
                        , shared = require('./$.shared')                                                           // 10
                        , setTag = require('./$.tag')                                                              // 11
                        , uid = require('./$.uid')                                                              // 12
                        , wks = require('./$.wks')                                                              // 13
                        , keyOf = require('./$.keyof')                                                            // 14
                        , $names = require('./$.get-names')                                                        // 15
                        , enumKeys = require('./$.enum-keys')                                                        // 16
                        , isArray = require('./$.is-array')                                                         // 17
                        , isObject = require('./$.is-object')                                                        // 18
                        , anObject = require('./$.an-object')                                                        // 19
                        , toIObject = require('./$.to-iobject')                                                       // 20
                        , createDesc = require('./$.property-desc')                                                    // 21
                        , getDesc = $.getDesc                                                                       // 22
                        , setDesc = $.setDesc                                                                       // 23
                        , _create = $.create                                                                        // 24
                        , getNames = $names.get                                                                      // 25
                        , $Symbol = global.Symbol                                                                   // 26
                        , $JSON = global.JSON                                                                     // 27
                        , _stringify = $JSON && $JSON.stringify                                                        // 28
                        , setter = false                                                                           // 29
                        , HIDDEN = wks('_hidden')                                                                  // 30
                        , isEnum = $.isEnum                                                                        // 31
                        , SymbolRegistry = shared('symbol-registry')                                                       // 32
                        , AllSymbols = shared('symbols')                                                               // 33
                        , useNative = typeof $Symbol == 'function'                                                    // 34
                        , ObjectProto = Object.prototype;                                                               // 35
                      // 36
                      // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687                       // 37
                      var setSymbolDesc = SUPPORT_DESC && $fails(function () {                                               // 38
                        return _create(setDesc({}, 'a', {                                                                  // 39
                          get: function () { return setDesc(this, 'a', { value: 7 }).a; }                                      // 40
                        })).a != 7;                                                                                        // 41
                      }) ? function (it, key, D) {                                                                           // 42
                        var protoDesc = getDesc(ObjectProto, key);                                                         // 43
                        if (protoDesc) delete ObjectProto[key];                                                              // 44
                        setDesc(it, key, D);                                                                               // 45
                        if (protoDesc && it !== ObjectProto) setDesc(ObjectProto, key, protoDesc);                           // 46
                      } : setDesc;                                                                                         // 47
                      // 48
                      var wrap = function (tag) {                                                                            // 49
                        var sym = AllSymbols[tag] = _create($Symbol.prototype);                                            // 50
                        sym._k = tag;                                                                                      // 51
                        SUPPORT_DESC && setter && setSymbolDesc(ObjectProto, tag, {                                        // 52
                          configurable: true,                                                                              // 53
                          set: function (value) {                                                                            // 54
                            if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;                      // 55
                            setSymbolDesc(this, tag, createDesc(1, value));                                                // 56
                          }                                                                                                // 57
                        });                                                                                                // 58
                        return sym;                                                                                        // 59
                      };                                                                                                   // 60
                      // 61
                      var isSymbol = function (it) {                                                                         // 62
                        return typeof it == 'symbol';                                                                      // 63
                      };                                                                                                   // 64
                      // 65
                      var $defineProperty = function defineProperty(it, key, D) {                                           // 66
                        if (D && has(AllSymbols, key)) {                                                                     // 67
                          if (!D.enumerable) {                                                                               // 68
                            if (!has(it, HIDDEN)) setDesc(it, HIDDEN, createDesc(1, {}));                                    // 69
                            it[HIDDEN][key] = true;                                                                        // 70
                          } else {                                                                                         // 71
                            if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;                                 // 72
                            D = _create(D, { enumerable: createDesc(0, false) });                                            // 73
                          } return setSymbolDesc(it, key, D);                                                              // 74
                        } return setDesc(it, key, D);                                                                      // 75
                      };                                                                                                   // 76
                      var $defineProperties = function defineProperties(it, P) {                                            // 77
                        anObject(it);                                                                                      // 78
                        var keys = enumKeys(P = toIObject(P))                                                              // 79
                          , i = 0                                                                                       // 80
                          , l = keys.length                                                                                // 81
                          , key;                                                                                           // 82
                        while (l > i) $defineProperty(it, key = keys[i++], P[key]);                                          // 83
                        return it;                                                                                         // 84
                      };                                                                                                   // 85
                      var $create = function create(it, P) {                                                                // 86
                        return P === undefined ? _create(it) : $defineProperties(_create(it), P);                          // 87
                      };                                                                                                   // 88
                      var $propertyIsEnumerable = function propertyIsEnumerable(key) {                                      // 89
                        var E = isEnum.call(this, key);                                                                    // 90
                        return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key]     // 91
                          ? E : true;                                                                                      // 92
                      };                                                                                                   // 93
                      var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {                          // 94
                        var D = getDesc(it = toIObject(it), key);                                                          // 95
                        if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;         // 96
                        return D;                                                                                          // 97
                      };                                                                                                   // 98
                      var $getOwnPropertyNames = function getOwnPropertyNames(it) {                                         // 99
                        var names = getNames(toIObject(it))                                                               // 100
                          , result = []                                                                                    // 101
                          , i = 0                                                                                     // 102
                          , key;                                                                                           // 103
                        while (names.length > i) if (!has(AllSymbols, key = names[i++]) && key != HIDDEN) result.push(key);    // 104
                        return result;                                                                                     // 105
                      };                                                                                                   // 106
                      var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {                                     // 107
                        var names = getNames(toIObject(it))                                                               // 108
                          , result = []                                                                                    // 109
                          , i = 0                                                                                     // 110
                          , key;                                                                                           // 111
                        while (names.length > i) if (has(AllSymbols, key = names[i++])) result.push(AllSymbols[key]);          // 112
                        return result;                                                                                     // 113
                      };                                                                                                   // 114
                      var $stringify = function stringify(it) {                                                             // 115
                        var args = [it]                                                                                    // 116
                          , i = 1                                                                                       // 117
                          , replacer, $replacer;                                                                           // 118
                        while (arguments.length > i) args.push(arguments[i++]);                                              // 119
                        replacer = args[1];                                                                                // 120
                        if (typeof replacer == 'function') $replacer = replacer;                                             // 121
                        if ($replacer || !isArray(replacer)) replacer = function (key, value) {                                // 122
                          if ($replacer) value = $replacer.call(this, key, value);                                           // 123
                          if (!isSymbol(value)) return value;                                                                // 124
                        };                                                                                                 // 125
                        args[1] = replacer;                                                                                // 126
                        return _stringify.apply($JSON, args);                                                              // 127
                      };                                                                                                   // 128
                      var buggyJSON = $fails(function () {                                                                   // 129
                        var S = $Symbol();                                                                                 // 130
                        // MS Edge converts symbol values to JSON as {}                                                    // 131
                        // WebKit converts symbol values to JSON as null                                                   // 132
                        // V8 throws on boxed symbols                                                                      // 133
                        return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
                      });                                                                                                  // 135
                      // 136
                      // 19.4.1.1 Symbol([description])                                                                    // 137
                      if (!useNative) {                                                                                      // 138
                        $Symbol = function Symbol() {                                                                       // 139
                          if (isSymbol(this)) throw TypeError('Symbol is not a constructor');                                // 140
                          return wrap(uid(arguments[0]));                                                                  // 141
                        };                                                                                                 // 142
                        $redef($Symbol.prototype, 'toString', function toString() {                                         // 143
                          return this._k;                                                                                  // 144
                        });                                                                                                // 145
                        // 146
                        isSymbol = function (it) {                                                                           // 147
                          return it instanceof $Symbol;                                                                    // 148
                        };                                                                                                 // 149
                        // 150
                        $.create = $create;                                                                            // 151
                        $.isEnum = $propertyIsEnumerable;                                                              // 152
                        $.getDesc = $getOwnPropertyDescriptor;                                                          // 153
                        $.setDesc = $defineProperty;                                                                    // 154
                        $.setDescs = $defineProperties;                                                                  // 155
                        $.getNames = $names.get = $getOwnPropertyNames;                                                  // 156
                        $.getSymbols = $getOwnPropertySymbols;                                                             // 157
                        // 158
                        if (SUPPORT_DESC && !require('./$.library')) {                                                       // 159
                          $redef(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);                        // 160
                        }                                                                                                  // 161
                      }                                                                                                    // 162
                      // 163
                      var symbolStatics = {                                                                                // 164
                        // 19.4.2.1 Symbol.for(key)                                                                        // 165
                        'for': function (key) {                                                                              // 166
                          return has(SymbolRegistry, key += '')                                                            // 167
                            ? SymbolRegistry[key]                                                                          // 168
                            : SymbolRegistry[key] = $Symbol(key);                                                          // 169
                        },                                                                                                 // 170
                        // 19.4.2.5 Symbol.keyFor(sym)                                                                     // 171
                        keyFor: function keyFor(key) {                                                                      // 172
                          return keyOf(SymbolRegistry, key);                                                               // 173
                        },                                                                                                 // 174
                        useSetter: function () { setter = true; },                                                           // 175
                        useSimple: function () { setter = false; }                                                           // 176
                      };                                                                                                   // 177
                      // 19.4.2.2 Symbol.hasInstance                                                                       // 178
                      // 19.4.2.3 Symbol.isConcatSpreadable                                                                // 179
                      // 19.4.2.4 Symbol.iterator                                                                          // 180
                      // 19.4.2.6 Symbol.match                                                                             // 181
                      // 19.4.2.8 Symbol.replace                                                                           // 182
                      // 19.4.2.9 Symbol.search                                                                            // 183
                      // 19.4.2.10 Symbol.species                                                                          // 184
                      // 19.4.2.11 Symbol.split                                                                            // 185
                      // 19.4.2.12 Symbol.toPrimitive                                                                      // 186
                      // 19.4.2.13 Symbol.toStringTag                                                                      // 187
                      // 19.4.2.14 Symbol.unscopables                                                                      // 188
                      $.each.call((                                                                                        // 189
                        'hasInstance,isConcatSpreadable,iterator,match,replace,search,' +                                // 190
                        'species,split,toPrimitive,toStringTag,unscopables'                                              // 191
                      ).split(','), function (it) {                                                                        // 192
                        var sym = wks(it);                                                                               // 193
                        symbolStatics[it] = useNative ? sym : wrap(sym);                                                 // 194
                      }                                                                                                  // 195
                      );                                                                                                   // 196
                      // 197
                      setter = true;                                                                                       // 198
                      // 199
                      $def($def.G + $def.W, { Symbol: $Symbol });                                                            // 200
                      // 201
                      $def($def.S, 'Symbol', symbolStatics);                                                               // 202
                      // 203
                      $def($def.S + $def.F * !useNative, 'Object', {                                                       // 204
                        // 19.1.2.2 Object.create(O [, Properties])                                                        // 205
                        create: $create,                                                                                   // 206
                        // 19.1.2.4 Object.defineProperty(O, P, Attributes)                                                // 207
                        defineProperty: $defineProperty,                                                                   // 208
                        // 19.1.2.3 Object.defineProperties(O, Properties)                                                 // 209
                        defineProperties: $defineProperties,                                                               // 210
                        // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)                                                  // 211
                        getOwnPropertyDescriptor: $getOwnPropertyDescriptor,                                               // 212
                        // 19.1.2.7 Object.getOwnPropertyNames(O)                                                          // 213
                        getOwnPropertyNames: $getOwnPropertyNames,                                                         // 214
                        // 19.1.2.8 Object.getOwnPropertySymbols(O)                                                        // 215
                        getOwnPropertySymbols: $getOwnPropertySymbols                                                      // 216
                      });                                                                                                  // 217
                      // 218
                      // 24.3.2 JSON.stringify(value [, replacer [, space]])                                               // 219
                      $JSON && $def($def.S + $def.F * (!useNative || buggyJSON), 'JSON', { stringify: $stringify });         // 220
                      // 221
                      // 19.4.3.5 Symbol.prototype[@@toStringTag]                                                          // 222
                      setTag($Symbol, 'Symbol');                                                                           // 223
                      // 20.2.1.9 Math[@@toStringTag]                                                                      // 224
                      setTag(Math, 'Math', true);                                                                          // 225
                      // 24.3.3 JSON[@@toStringTag]                                                                        // 226
                      setTag(global.JSON, 'JSON', true);                                                                   // 227
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "$.js": function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      var $Object = Object;                                                                                // 1
                      module.exports = {                                                                                   // 2
                        create: $Object.create,                                                                        // 3
                        getProto: $Object.getPrototypeOf,                                                                // 4
                        isEnum: {}.propertyIsEnumerable,                                                               // 5
                        getDesc: $Object.getOwnPropertyDescriptor,                                                      // 6
                        setDesc: $Object.defineProperty,                                                                // 7
                        setDescs: $Object.defineProperties,                                                              // 8
                        getKeys: $Object.keys,                                                                          // 9
                        getNames: $Object.getOwnPropertyNames,                                                           // 10
                        getSymbols: $Object.getOwnPropertySymbols,                                                         // 11
                        each: [].forEach                                                                             // 12
                      };                                                                                                   // 13
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }, "$.global.js": function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028                              // 1
                      var UNDEFINED = 'undefined';                                                                         // 2
                      var global = module.exports = typeof window != UNDEFINED && window.Math == Math                      // 3
                        ? window : typeof self != UNDEFINED && self.Math == Math ? self : Function('return this')();       // 4
                      if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef                              // 5
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }, "$.has.js": function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      var hasOwnProperty = {}.hasOwnProperty;                                                              // 1
                      module.exports = function (it, key) {                                                                  // 2
                        return hasOwnProperty.call(it, key);                                                               // 3
                      };                                                                                                   // 4
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }, "$.support-desc.js": ["./$.fails", function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      // Thank's IE8 for his funny defineProperty                                                          // 1
                      module.exports = !require('./$.fails')(function () {                                                   // 2
                        return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;                      // 3
                      });                                                                                                  // 4
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "$.fails.js": function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      module.exports = function (exec) {                                                                     // 1
                        try {                                                                                              // 2
                          return !!exec();                                                                                 // 3
                        } catch (e) {                                                                                        // 4
                          return true;                                                                                     // 5
                        }                                                                                                  // 6
                      };                                                                                                   // 7
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }, "$.def.js": ["./$.global", "./$.core", "./$.hide", "./$.redef", function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      var global = require('./$.global')                                                               // 1
                        , core = require('./$.core')                                                                 // 2
                        , hide = require('./$.hide')                                                                 // 3
                        , $redef = require('./$.redef')                                                                // 4
                        , PROTOTYPE = 'prototype';                                                                        // 5
                      var ctx = function (fn, that) {                                                                        // 6
                        return function () {                                                                                 // 7
                          return fn.apply(that, arguments);                                                                // 8
                        };                                                                                                 // 9
                      };                                                                                                   // 10
                      var $def = function (type, name, source) {                                                             // 11
                        var key, own, out, exp                                                                             // 12
                          , isGlobal = type & $def.G                                                                       // 13
                          , isProto = type & $def.P                                                                       // 14
                          , target = isGlobal ? global : type & $def.S                                                   // 15
                            ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE]                      // 16
                          , exports = isGlobal ? core : core[name] || (core[name] = {});                                  // 17
                        if (isGlobal) source = name;                                                                         // 18
                        for (key in source) {                                                                                // 19
                          // contains in native                                                                            // 20
                          own = !(type & $def.F) && target && key in target;                                               // 21
                          // export native or passed                                                                       // 22
                          out = (own ? target : source)[key];                                                              // 23
                          // bind timers to global for call from export context                                            // 24
                          if (type & $def.B && own) exp = ctx(out, global);                                                  // 25
                          else exp = isProto && typeof out == 'function' ? ctx(Function.call, out) : out;                  // 26
                          // extend global                                                                                 // 27
                          if (target && !own) $redef(target, key, out);                                                      // 28
                          // export                                                                                        // 29
                          if (exports[key] != out) hide(exports, key, exp);                                                  // 30
                          if (isProto) (exports[PROTOTYPE] || (exports[PROTOTYPE] = {}))[key] = out;                         // 31
                        }                                                                                                  // 32
                      };                                                                                                   // 33
                      global.core = core;                                                                                  // 34
                      // type bitmap                                                                                       // 35
                      $def.F = 1;  // forced                                                                               // 36
                      $def.G = 2;  // global                                                                               // 37
                      $def.S = 4;  // static                                                                               // 38
                      $def.P = 8;  // proto                                                                                // 39
                      $def.B = 16; // bind                                                                                 // 40
                      $def.W = 32; // wrap                                                                                 // 41
                      module.exports = $def;                                                                               // 42
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "$.core.js": function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      var core = module.exports = { version: '1.2.1' };                                                      // 1
                      if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef                                // 2
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }, "$.hide.js": ["./$", "./$.property-desc", "./$.support-desc", function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      var $ = require('./$')                                                                      // 1
                        , createDesc = require('./$.property-desc');                                                       // 2
                      module.exports = require('./$.support-desc') ? function (object, key, value) {                         // 3
                        return $.setDesc(object, key, createDesc(1, value));                                               // 4
                      } : function (object, key, value) {                                                                    // 5
                        object[key] = value;                                                                               // 6
                        return object;                                                                                     // 7
                      };                                                                                                   // 8
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "$.property-desc.js": function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      module.exports = function (bitmap, value) {                                                            // 1
                        return {                                                                                           // 2
                          enumerable: !(bitmap & 1),                                                                     // 3
                          configurable: !(bitmap & 2),                                                                     // 4
                          writable: !(bitmap & 4),                                                                     // 5
                          value: value                                                                              // 6
                        };                                                                                                 // 7
                      };                                                                                                   // 8
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }, "$.redef.js": ["./$.global", "./$.hide", "./$.uid", "./$.core", function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      // add fake Function#toString                                                                        // 1
                      // for correct work wrapped methods / constructors with methods like LoDash isNative                 // 2
                      var global = require('./$.global')                                                                // 3
                        , hide = require('./$.hide')                                                                  // 4
                        , SRC = require('./$.uid')('src')                                                            // 5
                        , TO_STRING = 'toString'                                                                           // 6
                        , $toString = Function[TO_STRING]                                                                  // 7
                        , TPL = ('' + $toString).split(TO_STRING);                                                   // 8
                      // 9
                      require('./$.core').inspectSource = function (it) {                                                    // 10
                        return $toString.call(it);                                                                         // 11
                      };                                                                                                   // 12
                      // 13
                      (module.exports = function (O, key, val, safe) {                                                       // 14
                        if (typeof val == 'function') {                                                                      // 15
                          hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));                                    // 16
                          if (!('name' in val)) val.name = key;                                                              // 17
                        }                                                                                                  // 18
                        if (O === global) {                                                                                  // 19
                          O[key] = val;                                                                                    // 20
                        } else {                                                                                           // 21
                          if (!safe) delete O[key];                                                                          // 22
                          hide(O, key, val);                                                                               // 23
                        }                                                                                                  // 24
                      })(Function.prototype, TO_STRING, function toString() {                                               // 25
                        return typeof this == 'function' && this[SRC] || $toString.call(this);                             // 26
                      });                                                                                                  // 27
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "$.uid.js": function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      var id = 0                                                                                           // 1
                        , px = Math.random();                                                                              // 2
                      module.exports = function (key) {                                                                      // 3
                        return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));             // 4
                      };                                                                                                   // 5
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }, "$.shared.js": ["./$.global", function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      var global = require('./$.global')                                                                   // 1
                        , SHARED = '__core-js_shared__'                                                                    // 2
                        , store = global[SHARED] || (global[SHARED] = {});                                                // 3
                      module.exports = function (key) {                                                                      // 4
                        return store[key] || (store[key] = {});                                                            // 5
                      };                                                                                                   // 6
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "$.tag.js": ["./$.has", "./$.hide", "./$.wks", function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      var has = require('./$.has')                                                                        // 1
                        , hide = require('./$.hide')                                                                       // 2
                        , TAG = require('./$.wks')('toStringTag');                                                        // 3
                      // 4
                      module.exports = function (it, tag, stat) {                                                            // 5
                        if (it && !has(it = stat ? it : it.prototype, TAG)) hide(it, TAG, tag);                              // 6
                      };                                                                                                   // 7
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "$.wks.js": ["./$.shared", "./$.global", "./$.uid", function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      var store = require('./$.shared')('wks')                                                            // 1
                        , Symbol = require('./$.global').Symbol;                                                           // 2
                      module.exports = function (name) {                                                                     // 3
                        return store[name] || (store[name] =                                                               // 4
                          Symbol && Symbol[name] || (Symbol || require('./$.uid'))('Symbol.' + name));                     // 5
                      };                                                                                                   // 6
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "$.keyof.js": ["./$", "./$.to-iobject", function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      var $ = require('./$')                                                                       // 1
                        , toIObject = require('./$.to-iobject');                                                           // 2
                      module.exports = function (object, el) {                                                               // 3
                        var O = toIObject(object)                                                                     // 4
                          , keys = $.getKeys(O)                                                                          // 5
                          , length = keys.length                                                                           // 6
                          , index = 0                                                                                     // 7
                          , key;                                                                                           // 8
                        while (length > index) if (O[key = keys[index++]] === el) return key;                                  // 9
                      };                                                                                                   // 10
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "$.to-iobject.js": ["./$.iobject", "./$.defined", function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      // to indexed object, toObject with fallback for non-array-like ES3 strings                          // 1
                      var IObject = require('./$.iobject')                                                                 // 2
                        , defined = require('./$.defined');                                                                // 3
                      module.exports = function (it) {                                                                       // 4
                        return IObject(defined(it));                                                                       // 5
                      };                                                                                                   // 6
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "$.iobject.js": ["./$.cof", function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      // indexed object, fallback for non-array-like ES3 strings                                           // 1
                      var cof = require('./$.cof');                                                                        // 2
                      module.exports = 0 in Object('z') ? Object : function (it) {                                           // 3
                        return cof(it) == 'String' ? it.split('') : Object(it);                                            // 4
                      };                                                                                                   // 5
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "$.cof.js": function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      var toString = {}.toString;                                                                          // 1
                      // 2
                      module.exports = function (it) {                                                                       // 3
                        return toString.call(it).slice(8, -1);                                                             // 4
                      };                                                                                                   // 5
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }, "$.defined.js": function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      // 7.2.1 RequireObjectCoercible(argument)                                                            // 1
                      module.exports = function (it) {                                                                       // 2
                        if (it == undefined) throw TypeError("Can't call method on  " + it);                                 // 3
                        return it;                                                                                         // 4
                      };                                                                                                   // 5
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }, "$.get-names.js": ["./$.to-iobject", "./$", function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      // fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window                         // 1
                      var toString = {}.toString                                                                          // 2
                        , toIObject = require('./$.to-iobject')                                                            // 3
                        , getNames = require('./$').getNames;                                                             // 4
                      // 5
                      var windowNames = typeof window == 'object' && Object.getOwnPropertyNames                            // 6
                        ? Object.getOwnPropertyNames(window) : [];                                                         // 7
                      // 8
                      var getWindowNames = function (it) {                                                                   // 9
                        try {                                                                                              // 10
                          return getNames(it);                                                                             // 11
                        } catch (e) {                                                                                        // 12
                          return windowNames.slice();                                                                      // 13
                        }                                                                                                  // 14
                      };                                                                                                   // 15
                      // 16
                      module.exports.get = function getOwnPropertyNames(it) {                                               // 17
                        if (windowNames && toString.call(it) == '[object Window]') return getWindowNames(it);                // 18
                        return getNames(toIObject(it));                                                                    // 19
                      };                                                                                                   // 20
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "$.enum-keys.js": ["./$", function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      // all enumerable object keys, includes symbols                                                      // 1
                      var $ = require('./$');                                                                              // 2
                      module.exports = function (it) {                                                                       // 3
                        var keys = $.getKeys(it)                                                                     // 4
                          , getSymbols = $.getSymbols;                                                                     // 5
                        if (getSymbols) {                                                                                    // 6
                          var symbols = getSymbols(it)                                                                     // 7
                            , isEnum = $.isEnum                                                                           // 8
                            , i = 0                                                                                  // 9
                            , key;                                                                                         // 10
                          while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) keys.push(key);                  // 11
                        }                                                                                                  // 12
                        return keys;                                                                                       // 13
                      };                                                                                                   // 14
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "$.is-array.js": ["./$.cof", function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      // 7.2.2 IsArray(argument)                                                                           // 1
                      var cof = require('./$.cof');                                                                        // 2
                      module.exports = Array.isArray || function (arg) {                                                     // 3
                        return cof(arg) == 'Array';                                                                        // 4
                      };                                                                                                   // 5
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "$.is-object.js": function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      module.exports = function (it) {                                                                       // 1
                        return typeof it === 'object' ? it !== null : typeof it === 'function';                            // 2
                      };                                                                                                   // 3
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }, "$.an-object.js": ["./$.is-object", function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      var isObject = require('./$.is-object');                                                             // 1
                      module.exports = function (it) {                                                                       // 2
                        if (!isObject(it)) throw TypeError(it + ' is not an object!');                                       // 3
                        return it;                                                                                         // 4
                      };                                                                                                   // 5
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "$.library.js": function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      module.exports = false;                                                                              // 1
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }, "es6.object.assign.js": ["./$.def", "./$.assign", function (require) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      // 19.1.3.1 Object.assign(target, source)                                                            // 1
                      var $def = require('./$.def');                                                                       // 2
                      // 3
                      $def($def.S + $def.F, 'Object', { assign: require('./$.assign') });                                    // 4
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "$.assign.js": ["./$.to-object", "./$.iobject", "./$.enum-keys", "./$.has", "./$.fails", function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      // 19.1.2.1 Object.assign(target, source, ...)                                                       // 1
                      var toObject = require('./$.to-object')                                                              // 2
                        , IObject = require('./$.iobject')                                                                // 3
                        , enumKeys = require('./$.enum-keys')                                                              // 4
                        , has = require('./$.has');                                                                   // 5
                      // 6
                      // should work with symbols and should have deterministic property order (V8 bug)                    // 7
                      module.exports = require('./$.fails')(function () {                                                    // 8
                        var a = Object.assign                                                                              // 9
                          , A = {}                                                                                         // 10
                          , B = {}                                                                                         // 11
                          , S = Symbol()                                                                                   // 12
                          , K = 'abcdefghijklmnopqrst';                                                                    // 13
                        A[S] = 7;                                                                                          // 14
                        K.split('').forEach(function (k) { B[k] = k; });                                                     // 15
                        return a({}, A)[S] != 7 || Object.keys(a({}, B)).join('') != K;                                    // 16
                      }) ? function assign(target, source) {   // eslint-disable-line no-unused-vars                        // 17
                        var T = toObject(target)                                                                           // 18
                          , l = arguments.length                                                                           // 19
                          , i = 1;                                                                                         // 20
                        while (l > i) {                                                                                      // 21
                          var S = IObject(arguments[i++])                                                             // 22
                            , keys = enumKeys(S)                                                                         // 23
                            , length = keys.length                                                                         // 24
                            , j = 0                                                                                   // 25
                            , key;                                                                                         // 26
                          while (length > j) if (has(S, key = keys[j++])) T[key] = S[key];                                     // 27
                        }                                                                                                  // 28
                        return T;                                                                                          // 29
                      } : Object.assign;                                                                                   // 30
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "$.to-object.js": ["./$.defined", function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      // 7.1.13 ToObject(argument)                                                                         // 1
                      var defined = require('./$.defined');                                                                // 2
                      module.exports = function (it) {                                                                       // 3
                        return Object(defined(it));                                                                        // 4
                      };                                                                                                   // 5
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "es6.object.is.js": ["./$.def", "./$.same", function (require) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      // 19.1.3.10 Object.is(value1, value2)                                                               // 1
                      var $def = require('./$.def');                                                                       // 2
                      $def($def.S, 'Object', {                                                                             // 3
                        is: require('./$.same')                                                                            // 4
                      });                                                                                                  // 5
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "$.same.js": function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      module.exports = Object.is || function is(x, y) {                                                     // 1
                        return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;                                    // 2
                      };                                                                                                   // 3
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }, "es6.object.set-prototype-of.js": ["./$.def", "./$.set-proto", function (require) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      // 19.1.3.19 Object.setPrototypeOf(O, proto)                                                         // 1
                      var $def = require('./$.def');                                                                       // 2
                      $def($def.S, 'Object', { setPrototypeOf: require('./$.set-proto').set });                              // 3
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "$.set-proto.js": ["./$", "./$.is-object", "./$.an-object", "./$.ctx", function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      // Works with __proto__ only. Old v8 can't work with null proto objects.                             // 1
                      /* eslint-disable no-proto */                                                                        // 2
                      var getDesc = require('./$').getDesc                                                                // 3
                        , isObject = require('./$.is-object')                                                              // 4
                        , anObject = require('./$.an-object');                                                             // 5
                      var check = function (O, proto) {                                                                      // 6
                        anObject(O);                                                                                       // 7
                        if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");        // 8
                      };                                                                                                   // 9
                      module.exports = {                                                                                   // 10
                        set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line no-proto                 // 11
                          function (test, buggy, set) {                                                                      // 12
                            try {                                                                                          // 13
                              set = require('./$.ctx')(Function.call, getDesc(Object.prototype, '__proto__').set, 2);      // 14
                              set(test, []);                                                                               // 15
                              buggy = !(test instanceof Array);                                                            // 16
                            } catch (e) { buggy = true; }                                                                    // 17
                            return function setPrototypeOf(O, proto) {                                                      // 18
                              check(O, proto);                                                                             // 19
                              if (buggy) O.__proto__ = proto;                                                                // 20
                              else set(O, proto);                                                                          // 21
                              return O;                                                                                    // 22
                            };                                                                                             // 23
                          }({}, false) : undefined),                                                                       // 24
                        check: check                                                                                       // 25
                      };                                                                                                   // 26
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "$.ctx.js": ["./$.a-function", function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      // optional / simple context binding                                                                 // 1
                      var aFunction = require('./$.a-function');                                                           // 2
                      module.exports = function (fn, that, length) {                                                         // 3
                        aFunction(fn);                                                                                     // 4
                        if (that === undefined) return fn;                                                                   // 5
                        switch (length) {                                                                                    // 6
                          case 1: return function (a) {                                                                      // 7
                            return fn.call(that, a);                                                                       // 8
                          };                                                                                               // 9
                          case 2: return function (a, b) {                                                                   // 10
                            return fn.call(that, a, b);                                                                    // 11
                          };                                                                                               // 12
                          case 3: return function (a, b, c) {                                                                // 13
                            return fn.call(that, a, b, c);                                                                 // 14
                          };                                                                                               // 15
                        }                                                                                                  // 16
                        return function (/* ...args */) {                                                                    // 17
                          return fn.apply(that, arguments);                                                                // 18
                        };                                                                                                 // 19
                      };                                                                                                   // 20
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "$.a-function.js": function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      module.exports = function (it) {                                                                       // 1
                        if (typeof it != 'function') throw TypeError(it + ' is not a function!');                            // 2
                        return it;                                                                                         // 3
                      };                                                                                                   // 4
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }, "es6.object.to-string.js": ["./$.classof", "./$.wks", "./$.redef", function (require) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      'use strict';                                                                                        // 1
                      // 19.1.3.6 Object.prototype.toString()                                                              // 2
                      var classof = require('./$.classof')                                                                 // 3
                        , test = {};                                                                                    // 4
                      test[require('./$.wks')('toStringTag')] = 'z';                                                       // 5
                      if (test + '' != '[object z]') {                                                                       // 6
                        require('./$.redef')(Object.prototype, 'toString', function toString() {                            // 7
                          return '[object ' + classof(this) + ']';                                                         // 8
                        }, true);                                                                                          // 9
                      }                                                                                                    // 10
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "$.classof.js": ["./$.cof", "./$.wks", function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      // getting tag from 19.1.3.6 Object.prototype.toString()                                             // 1
                      var cof = require('./$.cof')                                                                         // 2
                        , TAG = require('./$.wks')('toStringTag')                                                          // 3
                        // ES3 wrong here                                                                                  // 4
                        , ARG = cof(function () { return arguments; }()) == 'Arguments';                                     // 5
                      // 6
                      module.exports = function (it) {                                                                       // 7
                        var O, T, B;                                                                                       // 8
                        return it === undefined ? 'Undefined' : it === null ? 'Null'                                       // 9
                          // @@toStringTag case                                                                            // 10
                          : typeof (T = (O = Object(it))[TAG]) == 'string' ? T                                             // 11
                            // builtinTag case                                                                               // 12
                            : ARG ? cof(O)                                                                                   // 13
                              // ES3 arguments fallback                                                                        // 14
                              : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;                   // 15
                      };                                                                                                   // 16
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "es6.object.freeze.js": ["./$.is-object", "./$.object-sap", function (require) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      // 19.1.2.5 Object.freeze(O)                                                                         // 1
                      var isObject = require('./$.is-object');                                                             // 2
                      // 3
                      require('./$.object-sap')('freeze', function ($freeze) {                                               // 4
                        return function freeze(it) {                                                                        // 5
                          return $freeze && isObject(it) ? $freeze(it) : it;                                               // 6
                        };                                                                                                 // 7
                      });                                                                                                  // 8
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "$.object-sap.js": ["./$.def", "./$.core", "./$.fails", function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      // most Object methods by ES6 should accept primitives                                               // 1
                      module.exports = function (KEY, exec) {                                                                // 2
                        var $def = require('./$.def')                                                                      // 3
                          , fn = (require('./$.core').Object || {})[KEY] || Object[KEY]                                  // 4
                          , exp = {};                                                                                     // 5
                        exp[KEY] = exec(fn);                                                                               // 6
                        $def($def.S + $def.F * require('./$.fails')(function () { fn(1); }), 'Object', exp);                 // 7
                      };                                                                                                   // 8
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "es6.object.seal.js": ["./$.is-object", "./$.object-sap", function (require) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      // 19.1.2.17 Object.seal(O)                                                                          // 1
                      var isObject = require('./$.is-object');                                                             // 2
                      // 3
                      require('./$.object-sap')('seal', function ($seal) {                                                   // 4
                        return function seal(it) {                                                                          // 5
                          return $seal && isObject(it) ? $seal(it) : it;                                                   // 6
                        };                                                                                                 // 7
                      });                                                                                                  // 8
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "es6.object.prevent-extensions.js": ["./$.is-object", "./$.object-sap", function (require) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      // 19.1.2.15 Object.preventExtensions(O)                                                             // 1
                      var isObject = require('./$.is-object');                                                             // 2
                      // 3
                      require('./$.object-sap')('preventExtensions', function ($preventExtensions) {                         // 4
                        return function preventExtensions(it) {                                                             // 5
                          return $preventExtensions && isObject(it) ? $preventExtensions(it) : it;                         // 6
                        };                                                                                                 // 7
                      });                                                                                                  // 8
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "es6.object.is-frozen.js": ["./$.is-object", "./$.object-sap", function (require) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      // 19.1.2.12 Object.isFrozen(O)                                                                      // 1
                      var isObject = require('./$.is-object');                                                             // 2
                      // 3
                      require('./$.object-sap')('isFrozen', function ($isFrozen) {                                           // 4
                        return function isFrozen(it) {                                                                      // 5
                          return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;                                  // 6
                        };                                                                                                 // 7
                      });                                                                                                  // 8
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "es6.object.is-sealed.js": ["./$.is-object", "./$.object-sap", function (require) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      // 19.1.2.13 Object.isSealed(O)                                                                      // 1
                      var isObject = require('./$.is-object');                                                             // 2
                      // 3
                      require('./$.object-sap')('isSealed', function ($isSealed) {                                           // 4
                        return function isSealed(it) {                                                                      // 5
                          return isObject(it) ? $isSealed ? $isSealed(it) : false : true;                                  // 6
                        };                                                                                                 // 7
                      });                                                                                                  // 8
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "es6.object.is-extensible.js": ["./$.is-object", "./$.object-sap", function (require) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      // 19.1.2.11 Object.isExtensible(O)                                                                  // 1
                      var isObject = require('./$.is-object');                                                             // 2
                      // 3
                      require('./$.object-sap')('isExtensible', function ($isExtensible) {                                   // 4
                        return function isExtensible(it) {                                                                  // 5
                          return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;                          // 6
                        };                                                                                                 // 7
                      });                                                                                                  // 8
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "es6.object.get-own-property-descriptor.js": ["./$.to-iobject", "./$.object-sap", function (require) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)                                                    // 1
                      var toIObject = require('./$.to-iobject');                                                           // 2
                      // 3
                      require('./$.object-sap')('getOwnPropertyDescriptor', function ($getOwnPropertyDescriptor) {           // 4
                        return function getOwnPropertyDescriptor(it, key) {                                                 // 5
                          return $getOwnPropertyDescriptor(toIObject(it), key);                                            // 6
                        };                                                                                                 // 7
                      });                                                                                                  // 8
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "es6.object.get-prototype-of.js": ["./$.to-object", "./$.object-sap", function (require) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      // 19.1.2.9 Object.getPrototypeOf(O)                                                                 // 1
                      var toObject = require('./$.to-object');                                                             // 2
                      // 3
                      require('./$.object-sap')('getPrototypeOf', function ($getPrototypeOf) {                               // 4
                        return function getPrototypeOf(it) {                                                                // 5
                          return $getPrototypeOf(toObject(it));                                                            // 6
                        };                                                                                                 // 7
                      });                                                                                                  // 8
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "es6.object.keys.js": ["./$.to-object", "./$.object-sap", function (require) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      // 19.1.2.14 Object.keys(O)                                                                          // 1
                      var toObject = require('./$.to-object');                                                             // 2
                      // 3
                      require('./$.object-sap')('keys', function ($keys) {                                                   // 4
                        return function keys(it) {                                                                          // 5
                          return $keys(toObject(it));                                                                      // 6
                        };                                                                                                 // 7
                      });                                                                                                  // 8
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "es6.object.get-own-property-names.js": ["./$.object-sap", "./$.get-names", function (require) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      // 19.1.2.7 Object.getOwnPropertyNames(O)                                                            // 1
                      require('./$.object-sap')('getOwnPropertyNames', function () {                                         // 2
                        return require('./$.get-names').get;                                                               // 3
                      });                                                                                                  // 4
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "es6.string.iterator.js": ["./$.string-at", "./$.iter-define", function (require) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      'use strict';                                                                                        // 1
                      var $at = require('./$.string-at')(true);                                                           // 2
                      // 3
                      // 21.1.3.27 String.prototype[@@iterator]()                                                          // 4
                      require('./$.iter-define')(String, 'String', function (iterated) {                                     // 5
                        this._t = String(iterated); // target                                                              // 6
                        this._i = 0;                // next index                                                          // 7
                        // 21.1.5.2.1 %StringIteratorPrototype%.next()                                                       // 8
                      }, function () {                                                                                       // 9
                        var O = this._t                                                                                // 10
                          , index = this._i                                                                                // 11
                          , point;                                                                                         // 12
                        if (index >= O.length) return { value: undefined, done: true };                                        // 13
                        point = $at(O, index);                                                                             // 14
                        this._i += point.length;                                                                           // 15
                        return { value: point, done: false };                                                                // 16
                      });                                                                                                  // 17
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "$.string-at.js": ["./$.to-integer", "./$.defined", function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      // true  -> String#at                                                                                // 1
                      // false -> String#codePointAt                                                                       // 2
                      var toInteger = require('./$.to-integer')                                                            // 3
                        , defined = require('./$.defined');                                                              // 4
                      module.exports = function (TO_STRING) {                                                                // 5
                        return function (that, pos) {                                                                        // 6
                          var s = String(defined(that))                                                                    // 7
                            , i = toInteger(pos)                                                                           // 8
                            , l = s.length                                                                                 // 9
                            , a, b;                                                                                        // 10
                          if (i < 0 || i >= l) return TO_STRING ? '' : undefined;                                            // 11
                          a = s.charCodeAt(i);                                                                             // 12
                          return a < 0xd800 || a > 0xdbff || i + 1 === l                                                   // 13
                            || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff                                            // 14
                            ? TO_STRING ? s.charAt(i) : a                                                                // 15
                            : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;               // 16
                        };                                                                                                 // 17
                      };                                                                                                   // 18
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "$.to-integer.js": function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      // 7.1.4 ToInteger                                                                                   // 1
                      var ceil = Math.ceil                                                                                // 2
                        , floor = Math.floor;                                                                              // 3
                      module.exports = function (it) {                                                                       // 4
                        return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);                                          // 5
                      };                                                                                                   // 6
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }, "$.iter-define.js": ["./$.library", "./$.def", "./$.redef", "./$.hide", "./$.has", "./$.wks", "./$.iterators", "./$.iter-create", "./$", "./$.tag", function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      'use strict';                                                                                        // 1
                      var LIBRARY = require('./$.library')                                                         // 2
                        , $def = require('./$.def')                                                             // 3
                        , $redef = require('./$.redef')                                                           // 4
                        , hide = require('./$.hide')                                                            // 5
                        , has = require('./$.has')                                                             // 6
                        , SYMBOL_ITERATOR = require('./$.wks')('iterator')                                                 // 7
                        , Iterators = require('./$.iterators')                                                       // 8
                        , BUGGY = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`     // 9
                        , FF_ITERATOR = '@@iterator'                                                                   // 10
                        , KEYS = 'keys'                                                                         // 11
                        , VALUES = 'values';                                                                      // 12
                      var returnThis = function () { return this; };                                                         // 13
                      module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCE) {                    // 14
                        require('./$.iter-create')(Constructor, NAME, next);                                               // 15
                        var createMethod = function (kind) {                                                                 // 16
                          switch (kind) {                                                                                    // 17
                            case KEYS: return function keys() { return new Constructor(this, kind); };                      // 18
                            case VALUES: return function values() { return new Constructor(this, kind); };                  // 19
                          } return function entries() { return new Constructor(this, kind); };                              // 20
                        };                                                                                                 // 21
                        var TAG = NAME + ' Iterator'                                                                  // 22
                          , proto = Base.prototype                                                                      // 23
                          , _native = proto[SYMBOL_ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]           // 24
                          , _default = _native || createMethod(DEFAULT)                                                    // 25
                          , methods, key;                                                                                  // 26
                        // Fix native                                                                                      // 27
                        if (_native) {                                                                                       // 28
                          var IteratorPrototype = require('./$').getProto(_default.call(new Base));                        // 29
                          // Set @@toStringTag to native iterators                                                         // 30
                          require('./$.tag')(IteratorPrototype, TAG, true);                                                // 31
                          // FF fix                                                                                        // 32
                          if (!LIBRARY && has(proto, FF_ITERATOR)) hide(IteratorPrototype, SYMBOL_ITERATOR, returnThis);     // 33
                        }                                                                                                  // 34
                        // Define iterator                                                                                 // 35
                        if (!LIBRARY || FORCE) hide(proto, SYMBOL_ITERATOR, _default);                                       // 36
                        // Plug for library                                                                                // 37
                        Iterators[NAME] = _default;                                                                        // 38
                        Iterators[TAG] = returnThis;                                                                      // 39
                        if (DEFAULT) {                                                                                       // 40
                          methods = {                                                                                      // 41
                            keys: IS_SET ? _default : createMethod(KEYS),                                    // 42
                            values: DEFAULT == VALUES ? _default : createMethod(VALUES),                                  // 43
                            entries: DEFAULT != VALUES ? _default : createMethod('entries')                                // 44
                          };                                                                                               // 45
                          if (FORCE) for (key in methods) {                                                                    // 46
                            if (!(key in proto)) $redef(proto, key, methods[key]);                                           // 47
                          } else $def($def.P + $def.F * BUGGY, NAME, methods);                                             // 48
                        }                                                                                                  // 49
                      };                                                                                                   // 50
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "$.iterators.js": function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      module.exports = {};                                                                                 // 1
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }, "$.iter-create.js": ["./$", "./$.hide", "./$.wks", "./$.property-desc", "./$.tag", function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      'use strict';                                                                                        // 1
                      var $ = require('./$')                                                                               // 2
                        , IteratorPrototype = {};                                                                          // 3
                      // 4
                      // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()                                                      // 5
                      require('./$.hide')(IteratorPrototype, require('./$.wks')('iterator'), function () { return this; });  // 6
                      // 7
                      module.exports = function (Constructor, NAME, next) {                                                  // 8
                        Constructor.prototype = $.create(IteratorPrototype, { next: require('./$.property-desc')(1, next) });
                        require('./$.tag')(Constructor, NAME + ' Iterator');                                               // 10
                      };                                                                                                   // 11
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "es6.array.from.js": ["./$.ctx", "./$.def", "./$.to-object", "./$.iter-call", "./$.is-array-iter", "./$.to-length", "./core.get-iterator-method", "./$.iter-detect", function (require) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      'use strict';                                                                                        // 1
                      var ctx = require('./$.ctx')                                                                 // 2
                        , $def = require('./$.def')                                                                 // 3
                        , toObject = require('./$.to-object')                                                           // 4
                        , call = require('./$.iter-call')                                                           // 5
                        , isArrayIter = require('./$.is-array-iter')                                                       // 6
                        , toLength = require('./$.to-length')                                                           // 7
                        , getIterFn = require('./core.get-iterator-method');                                             // 8
                      $def($def.S + $def.F * !require('./$.iter-detect')(function (iter) { Array.from(iter); }), 'Array', {  // 9
                        // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)                          // 10
                        from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/) {                        // 11
                          var O = toObject(arrayLike)                                                                // 12
                            , C = typeof this == 'function' ? this : Array                                           // 13
                            , mapfn = arguments[1]                                                                       // 14
                            , mapping = mapfn !== undefined                                                                // 15
                            , index = 0                                                                                  // 16
                            , iterFn = getIterFn(O)                                                                       // 17
                            , length, result, step, iterator;                                                              // 18
                          if (mapping) mapfn = ctx(mapfn, arguments[2], 2);                                                  // 19
                          // if object isn't iterable or it's array with default iterator - use simple case                // 20
                          if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {                                 // 21
                            for (iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++) {       // 22
                              result[index] = mapping ? call(iterator, mapfn, [step.value, index], true) : step.value;     // 23
                            }                                                                                              // 24
                          } else {                                                                                         // 25
                            length = toLength(O.length);                                                                   // 26
                            for (result = new C(length); length > index; index++) {                                          // 27
                              result[index] = mapping ? mapfn(O[index], index) : O[index];                                 // 28
                            }                                                                                              // 29
                          }                                                                                                // 30
                          result.length = index;                                                                           // 31
                          return result;                                                                                   // 32
                        }                                                                                                  // 33
                      });                                                                                                  // 34
                      // 35
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "$.iter-call.js": ["./$.an-object", function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      // call something on iterator step with safe closing on error                                        // 1
                      var anObject = require('./$.an-object');                                                             // 2
                      module.exports = function (iterator, fn, value, entries) {                                             // 3
                        try {                                                                                              // 4
                          return entries ? fn(anObject(value)[0], value[1]) : fn(value);                                   // 5
                          // 7.4.6 IteratorClose(iterator, completion)                                                       // 6
                        } catch (e) {                                                                                        // 7
                          var ret = iterator['return'];                                                                    // 8
                          if (ret !== undefined) anObject(ret.call(iterator));                                               // 9
                          throw e;                                                                                         // 10
                        }                                                                                                  // 11
                      };                                                                                                   // 12
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "$.is-array-iter.js": ["./$.iterators", "./$.wks", function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      // check on default Array iterator                                                                   // 1
                      var Iterators = require('./$.iterators')                                                             // 2
                        , ITERATOR = require('./$.wks')('iterator');                                                      // 3
                      module.exports = function (it) {                                                                       // 4
                        return (Iterators.Array || Array.prototype[ITERATOR]) === it;                                      // 5
                      };                                                                                                   // 6
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "$.to-length.js": ["./$.to-integer", function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      // 7.1.15 ToLength                                                                                   // 1
                      var toInteger = require('./$.to-integer')                                                            // 2
                        , min = Math.min;                                                                            // 3
                      module.exports = function (it) {                                                                       // 4
                        return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991    // 5
                      };                                                                                                   // 6
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "core.get-iterator-method.js": ["./$.classof", "./$.wks", "./$.iterators", "./$.core", function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      var classof = require('./$.classof')                                                               // 1
                        , ITERATOR = require('./$.wks')('iterator')                                                       // 2
                        , Iterators = require('./$.iterators');                                                            // 3
                      module.exports = require('./$.core').getIteratorMethod = function (it) {                               // 4
                        if (it != undefined) return it[ITERATOR] || it['@@iterator'] || Iterators[classof(it)];              // 5
                      };                                                                                                   // 6
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "$.iter-detect.js": ["./$.wks", function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      var SYMBOL_ITERATOR = require('./$.wks')('iterator')                                                 // 1
                        , SAFE_CLOSING = false;                                                                         // 2
                      try {                                                                                                // 3
                        var riter = [7][SYMBOL_ITERATOR]();                                                                // 4
                        riter['return'] = function () { SAFE_CLOSING = true; };                                              // 5
                        Array.from(riter, function () { throw 2; });                                                         // 6
                      } catch (e) { /* empty */ }                                                                            // 7
                      module.exports = function (exec) {                                                                     // 8
                        if (!SAFE_CLOSING) return false;                                                                     // 9
                        var safe = false;                                                                                  // 10
                        try {                                                                                              // 11
                          var arr = [7]                                                                                   // 12
                            , iter = arr[SYMBOL_ITERATOR]();                                                               // 13
                          iter.next = function () { safe = true; };                                                          // 14
                          arr[SYMBOL_ITERATOR] = function () { return iter; };                                               // 15
                          exec(arr);                                                                                       // 16
                        } catch (e) { /* empty */ }                                                                          // 17
                        return safe;                                                                                       // 18
                      };                                                                                                   // 19
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "es6.array.of.js": ["./$.def", "./$.fails", function (require) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      'use strict';                                                                                        // 1
                      var $def = require('./$.def');                                                                       // 2
                      // 3
                      // WebKit Array.of isn't generic                                                                     // 4
                      $def($def.S + $def.F * require('./$.fails')(function () {                                              // 5
                        function F() { }                                                                                     // 6
                        return !(Array.of.call(F) instanceof F);                                                           // 7
                      }), 'Array', {                                                                                       // 8
                        // 22.1.2.3 Array.of( ...items)                                                                    // 9
                        of: function of(/* ...args */) {                                                                    // 10
                          var index = 0                                                                                   // 11
                            , length = arguments.length                                                                    // 12
                            , result = new (typeof this == 'function' ? this : Array)(length);                             // 13
                          while (length > index) result[index] = arguments[index++];                                         // 14
                          result.length = length;                                                                          // 15
                          return result;                                                                                   // 16
                        }                                                                                                  // 17
                      });                                                                                                  // 18
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "es6.array.species.js": ["./$.species", function (require) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      require('./$.species')(Array);                                                                       // 1
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "$.species.js": ["./$", "./$.wks", "./$.support-desc", function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      'use strict';                                                                                        // 1
                      var $ = require('./$')                                                                         // 2
                        , SPECIES = require('./$.wks')('species');                                                         // 3
                      module.exports = function (C) {                                                                        // 4
                        if (require('./$.support-desc') && !(SPECIES in C)) $.setDesc(C, SPECIES, {                          // 5
                          configurable: true,                                                                              // 6
                          get: function () { return this; }                                                                  // 7
                        });                                                                                                // 8
                      };                                                                                                   // 9
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "es6.array.iterator.js": ["./$.unscope", "./$.iter-step", "./$.iterators", "./$.to-iobject", "./$.iter-define", function (require) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      'use strict';                                                                                        // 1
                      var setUnscope = require('./$.unscope')                                                              // 2
                        , step = require('./$.iter-step')                                                            // 3
                        , Iterators = require('./$.iterators')                                                            // 4
                        , toIObject = require('./$.to-iobject');                                                          // 5
                      // 6
                      // 22.1.3.4 Array.prototype.entries()                                                                // 7
                      // 22.1.3.13 Array.prototype.keys()                                                                  // 8
                      // 22.1.3.29 Array.prototype.values()                                                                // 9
                      // 22.1.3.30 Array.prototype[@@iterator]()                                                           // 10
                      require('./$.iter-define')(Array, 'Array', function (iterated, kind) {                                 // 11
                        this._t = toIObject(iterated); // target                                                           // 12
                        this._i = 0;                   // next index                                                       // 13
                        this._k = kind;                // kind                                                             // 14
                        // 22.1.5.2.1 %ArrayIteratorPrototype%.next()                                                        // 15
                      }, function () {                                                                                       // 16
                        var O = this._t                                                                                // 17
                          , kind = this._k                                                                                // 18
                          , index = this._i++;                                                                             // 19
                        if (!O || index >= O.length) {                                                                       // 20
                          this._t = undefined;                                                                             // 21
                          return step(1);                                                                                  // 22
                        }                                                                                                  // 23
                        if (kind == 'keys') return step(0, index);                                                         // 24
                        if (kind == 'values') return step(0, O[index]);                                                      // 25
                        return step(0, [index, O[index]]);                                                                 // 26
                      }, 'values');                                                                                        // 27
                      // 28
                      // argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)                               // 29
                      Iterators.Arguments = Iterators.Array;                                                               // 30
                      // 31
                      setUnscope('keys');                                                                                  // 32
                      setUnscope('values');                                                                                // 33
                      setUnscope('entries');                                                                               // 34
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "$.unscope.js": ["./$.wks", "./$.hide", function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      // 22.1.3.31 Array.prototype[@@unscopables]                                                          // 1
                      var UNSCOPABLES = require('./$.wks')('unscopables');                                                 // 2
                      if ([][UNSCOPABLES] == undefined) require('./$.hide')(Array.prototype, UNSCOPABLES, {});               // 3
                      module.exports = function (key) {                                                                      // 4
                        [][UNSCOPABLES][key] = true;                                                                       // 5
                      };                                                                                                   // 6
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "$.iter-step.js": function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      module.exports = function (done, value) {                                                              // 1
                        return { value: value, done: !!done };                                                               // 2
                      };                                                                                                   // 3
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }, "es6.array.copy-within.js": ["./$.def", "./$.array-copy-within", "./$.unscope", function (require) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      // 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)                             // 1
                      'use strict';                                                                                        // 2
                      var $def = require('./$.def');                                                                       // 3
                      // 4
                      $def($def.P, 'Array', { copyWithin: require('./$.array-copy-within') });                               // 5
                      // 6
                      require('./$.unscope')('copyWithin');                                                                // 7
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "$.array-copy-within.js": ["./$.to-object", "./$.to-index", "./$.to-length", function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      // 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)                             // 1
                      'use strict';                                                                                        // 2
                      var toObject = require('./$.to-object')                                                              // 3
                        , toIndex = require('./$.to-index')                                                               // 4
                        , toLength = require('./$.to-length');                                                             // 5
                      // 6
                      module.exports = [].copyWithin || function copyWithin(target/*= 0*/, start/*= 0, end = @length*/) {   // 7
                        var O = toObject(this)                                                                         // 8
                          , len = toLength(O.length)                                                                     // 9
                          , to = toIndex(target, len)                                                                   // 10
                          , from = toIndex(start, len)                                                                    // 11
                          , end = arguments[2]                                                                           // 12
                          , count = Math.min((end === undefined ? len : toIndex(end, len)) - from, len - to)               // 13
                          , inc = 1;                                                                                     // 14
                        if (from < to && to < from + count) {                                                                // 15
                          inc = -1;                                                                                       // 16
                          from += count - 1;                                                                               // 17
                          to += count - 1;                                                                               // 18
                        }                                                                                                  // 19
                        while (count-- > 0) {                                                                                // 20
                          if (from in O) O[to] = O[from];                                                                    // 21
                          else delete O[to];                                                                               // 22
                          to += inc;                                                                                     // 23
                          from += inc;                                                                                     // 24
                        } return O;                                                                                        // 25
                      };                                                                                                   // 26
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "$.to-index.js": ["./$.to-integer", function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      var toInteger = require('./$.to-integer')                                                            // 1
                        , max = Math.max                                                                             // 2
                        , min = Math.min;                                                                            // 3
                      module.exports = function (index, length) {                                                            // 4
                        index = toInteger(index);                                                                          // 5
                        return index < 0 ? max(index + length, 0) : min(index, length);                                    // 6
                      };                                                                                                   // 7
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "es6.array.fill.js": ["./$.def", "./$.array-fill", "./$.unscope", function (require) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      // 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)                                // 1
                      var $def = require('./$.def');                                                                       // 2
                      // 3
                      $def($def.P, 'Array', { fill: require('./$.array-fill') });                                            // 4
                      // 5
                      require('./$.unscope')('fill');                                                                      // 6
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "$.array-fill.js": ["./$.to-object", "./$.to-index", "./$.to-length", function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      // 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)                                // 1
                      'use strict';                                                                                        // 2
                      var toObject = require('./$.to-object')                                                              // 3
                        , toIndex = require('./$.to-index')                                                               // 4
                        , toLength = require('./$.to-length');                                                             // 5
                      module.exports = [].fill || function fill(value /*, start = 0, end = @length */) {                    // 6
                        var O = toObject(this, true)                                                                  // 7
                          , length = toLength(O.length)                                                                    // 8
                          , index = toIndex(arguments[1], length)                                                         // 9
                          , end = arguments[2]                                                                          // 10
                          , endPos = end === undefined ? length : toIndex(end, length);                                    // 11
                        while (endPos > index) O[index++] = value;                                                           // 12
                        return O;                                                                                          // 13
                      };                                                                                                   // 14
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "es6.array.find.js": ["./$.def", "./$.array-methods", "./$.unscope", function (require) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      'use strict';                                                                                        // 1
                      // 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)                                     // 2
                      var KEY = 'find'                                                                                  // 3
                        , $def = require('./$.def')                                                                      // 4
                        , forced = true                                                                                    // 5
                        , $find = require('./$.array-methods')(5);                                                        // 6
                      // Shouldn't skip holes                                                                              // 7
                      if (KEY in []) Array(1)[KEY](function () { forced = false; });                                           // 8
                      $def($def.P + $def.F * forced, 'Array', {                                                            // 9
                        find: function find(callbackfn/*, that = undefined */) {                                            // 10
                          return $find(this, callbackfn, arguments[1]);                                                    // 11
                        }                                                                                                  // 12
                      });                                                                                                  // 13
                      require('./$.unscope')(KEY);                                                                         // 14
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "$.array-methods.js": ["./$.ctx", "./$.is-object", "./$.iobject", "./$.to-object", "./$.to-length", "./$.is-array", "./$.wks", function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      // 0 -> Array#forEach                                                                                // 1
                      // 1 -> Array#map                                                                                    // 2
                      // 2 -> Array#filter                                                                                 // 3
                      // 3 -> Array#some                                                                                   // 4
                      // 4 -> Array#every                                                                                  // 5
                      // 5 -> Array#find                                                                                   // 6
                      // 6 -> Array#findIndex                                                                              // 7
                      var ctx = require('./$.ctx')                                                                    // 8
                        , isObject = require('./$.is-object')                                                              // 9
                        , IObject = require('./$.iobject')                                                                // 10
                        , toObject = require('./$.to-object')                                                              // 11
                        , toLength = require('./$.to-length')                                                              // 12
                        , isArray = require('./$.is-array')                                                               // 13
                        , SPECIES = require('./$.wks')('species');                                                        // 14
                      // 9.4.2.3 ArraySpeciesCreate(originalArray, length)                                                 // 15
                      var ASC = function (original, length) {                                                                // 16
                        var C;                                                                                             // 17
                        if (isArray(original) && isObject(C = original.constructor)) {                                       // 18
                          C = C[SPECIES];                                                                                  // 19
                          if (C === null) C = undefined;                                                                     // 20
                        } return new (C === undefined ? Array : C)(length);                                                 // 21
                      };                                                                                                   // 22
                      module.exports = function (TYPE) {                                                                     // 23
                        var IS_MAP = TYPE == 1                                                                      // 24
                          , IS_FILTER = TYPE == 2                                                                      // 25
                          , IS_SOME = TYPE == 3                                                                      // 26
                          , IS_EVERY = TYPE == 4                                                                      // 27
                          , IS_FIND_INDEX = TYPE == 6                                                                      // 28
                          , NO_HOLES = TYPE == 5 || IS_FIND_INDEX;                                                    // 29
                        return function ($this, callbackfn, that) {                                                          // 30
                          var O = toObject($this)                                                                     // 31
                            , self = IObject(O)                                                                          // 32
                            , f = ctx(callbackfn, that, 3)                                                            // 33
                            , length = toLength(self.length)                                                               // 34
                            , index = 0                                                                                   // 35
                            , result = IS_MAP ? ASC($this, length) : IS_FILTER ? ASC($this, 0) : undefined                 // 36
                            , val, res;                                                                                    // 37
                          for (; length > index; index++)if (NO_HOLES || index in self) {                                      // 38
                            val = self[index];                                                                             // 39
                            res = f(val, index, O);                                                                        // 40
                            if (TYPE) {                                                                                      // 41
                              if (IS_MAP) result[index] = res;            // map                                             // 42
                              else if (res) switch (TYPE) {                                                                    // 43
                                case 3: return true;                    // some                                            // 44
                                case 5: return val;                     // find                                            // 45
                                case 6: return index;                   // findIndex                                       // 46
                                case 2: result.push(val);               // filter                                          // 47
                              } else if (IS_EVERY) return false;          // every                                           // 48
                            }                                                                                              // 49
                          }                                                                                                // 50
                          return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;                             // 51
                        };                                                                                                 // 52
                      };                                                                                                   // 53
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "es6.array.find-index.js": ["./$.def", "./$.array-methods", "./$.unscope", function (require) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      'use strict';                                                                                        // 1
                      // 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)                                // 2
                      var KEY = 'findIndex'                                                                             // 3
                        , $def = require('./$.def')                                                                      // 4
                        , forced = true                                                                                    // 5
                        , $find = require('./$.array-methods')(6);                                                        // 6
                      // Shouldn't skip holes                                                                              // 7
                      if (KEY in []) Array(1)[KEY](function () { forced = false; });                                           // 8
                      $def($def.P + $def.F * forced, 'Array', {                                                            // 9
                        findIndex: function findIndex(callbackfn/*, that = undefined */) {                                  // 10
                          return $find(this, callbackfn, arguments[1]);                                                    // 11
                        }                                                                                                  // 12
                      });                                                                                                  // 13
                      require('./$.unscope')(KEY);                                                                         // 14
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "es6.string.from-code-point.js": ["./$.def", "./$.to-index", function (require) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      var $def = require('./$.def')                                                                     // 1
                        , toIndex = require('./$.to-index')                                                                // 2
                        , fromCharCode = String.fromCharCode                                                               // 3
                        , $fromCodePoint = String.fromCodePoint;                                                           // 4
                      // 5
                      // length should be 1, old FF problem                                                                // 6
                      $def($def.S + $def.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {                 // 7
                        // 21.1.2.2 String.fromCodePoint(...codePoints)                                                    // 8
                        fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars                    // 9
                          var res = []                                                                                     // 10
                            , len = arguments.length                                                                       // 11
                            , i = 0                                                                                      // 12
                            , code;                                                                                        // 13
                          while (len > i) {                                                                                  // 14
                            code = +arguments[i++];                                                                        // 15
                            if (toIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');     // 16
                            res.push(code < 0x10000                                                                        // 17
                              ? fromCharCode(code)                                                                         // 18
                              : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)                    // 19
                            );                                                                                             // 20
                          } return res.join('');                                                                           // 21
                        }                                                                                                  // 22
                      });                                                                                                  // 23
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "es6.string.raw.js": ["./$.def", "./$.to-iobject", "./$.to-length", function (require) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      var $def = require('./$.def')                                                                   // 1
                        , toIObject = require('./$.to-iobject')                                                            // 2
                        , toLength = require('./$.to-length');                                                            // 3
                      // 4
                      $def($def.S, 'String', {                                                                             // 5
                        // 21.1.2.4 String.raw(callSite, ...substitutions)                                                 // 6
                        raw: function raw(callSite) {                                                                       // 7
                          var tpl = toIObject(callSite.raw)                                                                // 8
                            , len = toLength(tpl.length)                                                                   // 9
                            , sln = arguments.length                                                                       // 10
                            , res = []                                                                                     // 11
                            , i = 0;                                                                                     // 12
                          while (len > i) {                                                                                  // 13
                            res.push(String(tpl[i++]));                                                                    // 14
                            if (i < sln) res.push(String(arguments[i]));                                                     // 15
                          } return res.join('');                                                                           // 16
                        }                                                                                                  // 17
                      });                                                                                                  // 18
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "es6.string.trim.js": ["./$.string-trim", function (require) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      'use strict';                                                                                        // 1
                      // 21.1.3.25 String.prototype.trim()                                                                 // 2
                      require('./$.string-trim')('trim', function ($trim) {                                                  // 3
                        return function trim() {                                                                            // 4
                          return $trim(this, 3);                                                                           // 5
                        };                                                                                                 // 6
                      });                                                                                                  // 7
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "$.string-trim.js": ["./$.def", "./$.defined", "./$.fails", function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      // 1 -> String#trimLeft                                                                              // 1
                      // 2 -> String#trimRight                                                                             // 2
                      // 3 -> String#trim                                                                                  // 3
                      var trim = function (string, TYPE) {                                                                   // 4
                        string = String(defined(string));                                                                  // 5
                        if (TYPE & 1) string = string.replace(ltrim, '');                                                    // 6
                        if (TYPE & 2) string = string.replace(rtrim, '');                                                    // 7
                        return string;                                                                                     // 8
                      };                                                                                                   // 9
                      // 10
                      var $def = require('./$.def')                                                                     // 11
                        , defined = require('./$.defined')                                                                 // 12
                        , spaces = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +                   // 13
                          '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF'               // 14
                        , space = '[' + spaces + ']'                                                                     // 15
                        , non = '\u200b\u0085'                                                                         // 16
                        , ltrim = RegExp('^' + space + space + '*')                                                      // 17
                        , rtrim = RegExp(space + space + '*$');                                                          // 18
                      // 19
                      module.exports = function (KEY, exec) {                                                                // 20
                        var exp = {};                                                                                     // 21
                        exp[KEY] = exec(trim);                                                                             // 22
                        $def($def.P + $def.F * require('./$.fails')(function () {                                            // 23
                          return !!spaces[KEY]() || non[KEY]() != non;                                                     // 24
                        }), 'String', exp);                                                                                // 25
                      };                                                                                                   // 26
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "es6.string.code-point-at.js": ["./$.def", "./$.string-at", function (require) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      'use strict';                                                                                        // 1
                      var $def = require('./$.def')                                                                        // 2
                        , $at = require('./$.string-at')(false);                                                          // 3
                      $def($def.P, 'String', {                                                                             // 4
                        // 21.1.3.3 String.prototype.codePointAt(pos)                                                      // 5
                        codePointAt: function codePointAt(pos) {                                                            // 6
                          return $at(this, pos);                                                                           // 7
                        }                                                                                                  // 8
                      });                                                                                                  // 9
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "es6.string.ends-with.js": ["./$.def", "./$.to-length", "./$.string-context", "./$.fails-is-regexp", function (require) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      // 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])                                  // 1
                      'use strict';                                                                                        // 2
                      var $def = require('./$.def')                                                                   // 3
                        , toLength = require('./$.to-length')                                                             // 4
                        , context = require('./$.string-context')                                                        // 5
                        , ENDS_WITH = 'endsWith'                                                                           // 6
                        , $endsWith = ''[ENDS_WITH];                                                                       // 7
                      // 8
                      $def($def.P + $def.F * require('./$.fails-is-regexp')(ENDS_WITH), 'String', {                        // 9
                        endsWith: function endsWith(searchString /*, endPosition = @length */) {                            // 10
                          var that = context(this, searchString, ENDS_WITH)                                                // 11
                            , endPosition = arguments[1]                                                                   // 12
                            , len = toLength(that.length)                                                               // 13
                            , end = endPosition === undefined ? len : Math.min(toLength(endPosition), len)              // 14
                            , search = String(searchString);                                                               // 15
                          return $endsWith                                                                                 // 16
                            ? $endsWith.call(that, search, end)                                                            // 17
                            : that.slice(end - search.length, end) === search;                                             // 18
                        }                                                                                                  // 19
                      });                                                                                                  // 20
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "$.string-context.js": ["./$.is-regexp", "./$.defined", function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      // helper for String#{startsWith, endsWith, includes}                                                // 1
                      var isRegExp = require('./$.is-regexp')                                                              // 2
                        , defined = require('./$.defined');                                                               // 3
                      // 4
                      module.exports = function (that, searchString, NAME) {                                                 // 5
                        if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");            // 6
                        return String(defined(that));                                                                      // 7
                      };                                                                                                   // 8
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "$.is-regexp.js": ["./$.is-object", "./$.cof", "./$.wks", function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      // 7.2.8 IsRegExp(argument)                                                                          // 1
                      var isObject = require('./$.is-object')                                                              // 2
                        , cof = require('./$.cof')                                                                    // 3
                        , MATCH = require('./$.wks')('match');                                                          // 4
                      module.exports = function (it) {                                                                       // 5
                        var isRegExp;                                                                                      // 6
                        return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');  // 7
                      };                                                                                                   // 8
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "$.fails-is-regexp.js": ["./$.wks", function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      module.exports = function (KEY) {                                                                      // 1
                        var re = /./;                                                                                      // 2
                        try {                                                                                              // 3
                          '/./'[KEY](re);                                                                                  // 4
                        } catch (e) {                                                                                        // 5
                          try {                                                                                            // 6
                            re[require('./$.wks')('match')] = false;                                                       // 7
                            return !'/./'[KEY](re);                                                                        // 8
                          } catch (e) { /* empty */ }                                                                        // 9
                        } return true;                                                                                     // 10
                      };                                                                                                   // 11
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "es6.string.includes.js": ["./$.def", "./$.string-context", "./$.fails-is-regexp", function (require) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      // 21.1.3.7 String.prototype.includes(searchString, position = 0)                                    // 1
                      'use strict';                                                                                        // 2
                      var $def = require('./$.def')                                                                    // 3
                        , context = require('./$.string-context')                                                         // 4
                        , INCLUDES = 'includes';                                                                           // 5
                      // 6
                      $def($def.P + $def.F * require('./$.fails-is-regexp')(INCLUDES), 'String', {                         // 7
                        includes: function includes(searchString /*, position = 0 */) {                                     // 8
                          return !!~context(this, searchString, INCLUDES).indexOf(searchString, arguments[1]);             // 9
                        }                                                                                                  // 10
                      });                                                                                                  // 11
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "es6.string.repeat.js": ["./$.def", "./$.string-repeat", function (require) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      var $def = require('./$.def');                                                                       // 1
                      // 2
                      $def($def.P, 'String', {                                                                             // 3
                        // 21.1.3.13 String.prototype.repeat(count)                                                        // 4
                        repeat: require('./$.string-repeat')                                                               // 5
                      });                                                                                                  // 6
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "$.string-repeat.js": ["./$.to-integer", "./$.defined", function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      'use strict';                                                                                        // 1
                      var toInteger = require('./$.to-integer')                                                            // 2
                        , defined = require('./$.defined');                                                              // 3
                      // 4
                      module.exports = function repeat(count) {                                                             // 5
                        var str = String(defined(this))                                                                    // 6
                          , res = ''                                                                                       // 7
                          , n = toInteger(count);                                                                        // 8
                        if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");                             // 9
                        for (; n > 0; (n >>>= 1) && (str += str))if (n & 1) res += str;                                        // 10
                        return res;                                                                                        // 11
                      };                                                                                                   // 12
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "es6.string.starts-with.js": ["./$.def", "./$.to-length", "./$.string-context", "./$.fails-is-regexp", function (require) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      // 21.1.3.18 String.prototype.startsWith(searchString [, position ])                                 // 1
                      'use strict';                                                                                        // 2
                      var $def = require('./$.def')                                                                 // 3
                        , toLength = require('./$.to-length')                                                           // 4
                        , context = require('./$.string-context')                                                      // 5
                        , STARTS_WITH = 'startsWith'                                                                       // 6
                        , $startsWith = ''[STARTS_WITH];                                                                   // 7
                      // 8
                      $def($def.P + $def.F * require('./$.fails-is-regexp')(STARTS_WITH), 'String', {                      // 9
                        startsWith: function startsWith(searchString /*, position = 0 */) {                                 // 10
                          var that = context(this, searchString, STARTS_WITH)                                            // 11
                            , index = toLength(Math.min(arguments[1], that.length))                                       // 12
                            , search = String(searchString);                                                               // 13
                          return $startsWith                                                                               // 14
                            ? $startsWith.call(that, search, index)                                                        // 15
                            : that.slice(index, index + search.length) === search;                                         // 16
                        }                                                                                                  // 17
                      });                                                                                                  // 18
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "es6.regexp.match.js": ["./$.fix-re-wks", function (require) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      // @@match logic                                                                                     // 1
                      require('./$.fix-re-wks')('match', 1, function (defined, MATCH) {                                      // 2
                        // 21.1.3.11 String.prototype.match(regexp)                                                        // 3
                        return function match(regexp) {                                                                     // 4
                          'use strict';                                                                                    // 5
                          var O = defined(this)                                                                           // 6
                            , fn = regexp == undefined ? undefined : regexp[MATCH];                                        // 7
                          return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));             // 8
                        };                                                                                                 // 9
                      });                                                                                                  // 10
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "$.fix-re-wks.js": ["./$.defined", "./$.wks", "./$.fails", "./$.redef", "./$.hide", function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      'use strict';                                                                                        // 1
                      module.exports = function (KEY, length, exec) {                                                        // 2
                        var defined = require('./$.defined')                                                              // 3
                          , SYMBOL = require('./$.wks')(KEY)                                                             // 4
                          , original = ''[KEY];                                                                            // 5
                        if (require('./$.fails')(function () {                                                                // 6
                          var O = {};                                                                                      // 7
                          O[SYMBOL] = function () { return 7; };                                                             // 8
                          return ''[KEY](O) != 7;                                                                          // 9
                        })) {                                                                                               // 10
                          require('./$.redef')(String.prototype, KEY, exec(defined, SYMBOL, original));                    // 11
                          require('./$.hide')(RegExp.prototype, SYMBOL, length == 2                                        // 12
                            // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)                                  // 13
                            // 21.2.5.11 RegExp.prototype[@@split](string, limit)                                          // 14
                            ? function (string, arg) { return original.call(string, this, arg); }                            // 15
                            // 21.2.5.6 RegExp.prototype[@@match](string)                                                  // 16
                            // 21.2.5.9 RegExp.prototype[@@search](string)                                                 // 17
                            : function (string) { return original.call(string, this); }                                      // 18
                          );                                                                                               // 19
                        }                                                                                                  // 20
                      };                                                                                                   // 21
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "es6.regexp.replace.js": ["./$.fix-re-wks", function (require) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      // @@replace logic                                                                                   // 1
                      require('./$.fix-re-wks')('replace', 2, function (defined, REPLACE, $replace) {                        // 2
                        // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)                                   // 3
                        return function replace(searchValue, replaceValue) {                                                // 4
                          'use strict';                                                                                    // 5
                          var O = defined(this)                                                                           // 6
                            , fn = searchValue == undefined ? undefined : searchValue[REPLACE];                            // 7
                          return fn !== undefined                                                                          // 8
                            ? fn.call(searchValue, O, replaceValue)                                                        // 9
                            : $replace.call(String(O), searchValue, replaceValue);                                         // 10
                        };                                                                                                 // 11
                      });                                                                                                  // 12
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "es6.regexp.search.js": ["./$.fix-re-wks", function (require) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      // @@search logic                                                                                    // 1
                      require('./$.fix-re-wks')('search', 1, function (defined, SEARCH) {                                    // 2
                        // 21.1.3.15 String.prototype.search(regexp)                                                       // 3
                        return function search(regexp) {                                                                    // 4
                          'use strict';                                                                                    // 5
                          var O = defined(this)                                                                           // 6
                            , fn = regexp == undefined ? undefined : regexp[SEARCH];                                       // 7
                          return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));            // 8
                        };                                                                                                 // 9
                      });                                                                                                  // 10
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "es6.regexp.split.js": ["./$.fix-re-wks", function (require) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      // @@split logic                                                                                     // 1
                      require('./$.fix-re-wks')('split', 2, function (defined, SPLIT, $split) {                              // 2
                        // 21.1.3.17 String.prototype.split(separator, limit)                                              // 3
                        return function split(separator, limit) {                                                           // 4
                          'use strict';                                                                                    // 5
                          var O = defined(this)                                                                           // 6
                            , fn = separator == undefined ? undefined : separator[SPLIT];                                  // 7
                          return fn !== undefined                                                                          // 8
                            ? fn.call(separator, O, limit)                                                                 // 9
                            : $split.call(String(O), separator, limit);                                                    // 10
                        };                                                                                                 // 11
                      });                                                                                                  // 12
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "es6.function.name.js": ["./$", "./$.property-desc", "./$.has", "./$.support-desc", function (require) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      var setDesc = require('./$').setDesc                                                              // 1
                        , createDesc = require('./$.property-desc')                                                        // 2
                        , has = require('./$.has')                                                                  // 3
                        , FProto = Function.prototype                                                                  // 4
                        , nameRE = /^\s*function ([^ (]*)/                                                             // 5
                        , NAME = 'name';                                                                             // 6
                      // 19.2.4.2 name                                                                                     // 7
                      NAME in FProto || require('./$.support-desc') && setDesc(FProto, NAME, {                             // 8
                        configurable: true,                                                                                // 9
                        get: function () {                                                                                   // 10
                          var match = ('' + this).match(nameRE)                                                            // 11
                            , name = match ? match[1] : '';                                                               // 12
                          has(this, NAME) || setDesc(this, NAME, createDesc(5, name));                                     // 13
                          return name;                                                                                     // 14
                        }                                                                                                  // 15
                      });                                                                                                  // 16
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "es6.function.has-instance.js": ["./$", "./$.is-object", "./$.wks", function (require) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      'use strict';                                                                                        // 1
                      var $ = require('./$')                                                                   // 2
                        , isObject = require('./$.is-object')                                                         // 3
                        , HAS_INSTANCE = require('./$.wks')('hasInstance')                                                // 4
                        , FunctionProto = Function.prototype;                                                              // 5
                      // 19.2.3.6 Function.prototype[@@hasInstance](V)                                                     // 6
                      if (!(HAS_INSTANCE in FunctionProto)) $.setDesc(FunctionProto, HAS_INSTANCE, {
                        value: function (O) {      // 7
                          if (typeof this != 'function' || !isObject(O)) return false;                                         // 8
                          if (!isObject(this.prototype)) return O instanceof this;                                             // 9
                          // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:             // 10
                          while (O = $.getProto(O)) if (this.prototype === O) return true;                                       // 11
                          return false;                                                                                      // 12
                        }
                      });                                                                                                 // 13
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "web.dom.iterable.js": ["./es6.array.iterator", "./$.global", "./$.hide", "./$.iterators", "./$.wks", function (require) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      require('./es6.array.iterator');                                                                     // 1
                      var global = require('./$.global')                                                              // 2
                        , hide = require('./$.hide')                                                                // 3
                        , Iterators = require('./$.iterators')                                                           // 4
                        , ITERATOR = require('./$.wks')('iterator')                                                     // 5
                        , NL = global.NodeList                                                                    // 6
                        , HTC = global.HTMLCollection                                                              // 7
                        , NLProto = NL && NL.prototype                                                                 // 8
                        , HTCProto = HTC && HTC.prototype                                                               // 9
                        , ArrayValues = Iterators.NodeList = Iterators.HTMLCollection = Iterators.Array;                   // 10
                      if (NL && !(ITERATOR in NLProto)) hide(NLProto, ITERATOR, ArrayValues);                                // 11
                      if (HTC && !(ITERATOR in HTCProto)) hide(HTCProto, ITERATOR, ArrayValues);                             // 12
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "es6.map.js": ["./$.collection-strong", "./$.collection", function (require) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      'use strict';                                                                                        // 1
                      var strong = require('./$.collection-strong');                                                       // 2
                      // 3
                      // 23.1 Map Objects                                                                                  // 4
                      require('./$.collection')('Map', function (get) {                                                      // 5
                        return function Map() { return get(this, arguments[0]); };                                          // 6
                      }, {                                                                                                 // 7
                        // 23.1.3.6 Map.prototype.get(key)                                                                 // 8
                        get: function get(key) {                                                                            // 9
                          var entry = strong.getEntry(this, key);                                                          // 10
                          return entry && entry.v;                                                                         // 11
                        },                                                                                                 // 12
                        // 23.1.3.9 Map.prototype.set(key, value)                                                          // 13
                        set: function set(key, value) {                                                                     // 14
                          return strong.def(this, key === 0 ? 0 : key, value);                                             // 15
                        }                                                                                                  // 16
                      }, strong, true);                                                                                    // 17
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "$.collection-strong.js": ["./$", "./$.hide", "./$.ctx", "./$.species", "./$.strict-new", "./$.defined", "./$.for-of", "./$.iter-step", "./$.uid", "./$.has", "./$.is-object", "./$.support-desc", "./$.mix", "./$.iter-define", "./$.core", function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      'use strict';                                                                                        // 1
                      var $ = require('./$')                                                                    // 2
                        , hide = require('./$.hide')                                                               // 3
                        , ctx = require('./$.ctx')                                                                // 4
                        , species = require('./$.species')                                                            // 5
                        , strictNew = require('./$.strict-new')                                                         // 6
                        , defined = require('./$.defined')                                                            // 7
                        , forOf = require('./$.for-of')                                                             // 8
                        , step = require('./$.iter-step')                                                          // 9
                        , ID = require('./$.uid')('id')                                                          // 10
                        , $has = require('./$.has')                                                                // 11
                        , isObject = require('./$.is-object')                                                          // 12
                        , isExtensible = Object.isExtensible || isObject                                                   // 13
                        , SUPPORT_DESC = require('./$.support-desc')                                                       // 14
                        , SIZE = SUPPORT_DESC ? '_s' : 'size'                                                      // 15
                        , id = 0;                                                                                // 16
                      // 17
                      var fastKey = function (it, create) {                                                                  // 18
                        // return primitive with prefix                                                                    // 19
                        if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;     // 20
                        if (!$has(it, ID)) {                                                                                 // 21
                          // can't set id to frozen object                                                                 // 22
                          if (!isExtensible(it)) return 'F';                                                                 // 23
                          // not necessary to add id                                                                       // 24
                          if (!create) return 'E';                                                                           // 25
                          // add missing object id                                                                         // 26
                          hide(it, ID, ++id);                                                                              // 27
                          // return object id with prefix                                                                    // 28
                        } return 'O' + it[ID];                                                                             // 29
                      };                                                                                                   // 30
                      // 31
                      var getEntry = function (that, key) {                                                                  // 32
                        // fast case                                                                                       // 33
                        var index = fastKey(key), entry;                                                                   // 34
                        if (index !== 'F') return that._i[index];                                                            // 35
                        // frozen object case                                                                              // 36
                        for (entry = that._f; entry; entry = entry.n) {                                                      // 37
                          if (entry.k == key) return entry;                                                                  // 38
                        }                                                                                                  // 39
                      };                                                                                                   // 40
                      // 41
                      module.exports = {                                                                                   // 42
                        getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {                                            // 43
                          var C = wrapper(function (that, iterable) {                                                        // 44
                            strictNew(that, C, NAME);                                                                      // 45
                            that._i = $.create(null); // index                                                             // 46
                            that._f = undefined;      // first entry                                                       // 47
                            that._l = undefined;      // last entry                                                        // 48
                            that[SIZE] = 0;           // size                                                              // 49
                            if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);                           // 50
                          });                                                                                              // 51
                          require('./$.mix')(C.prototype, {                                                                // 52
                            // 23.1.3.1 Map.prototype.clear()                                                              // 53
                            // 23.2.3.2 Set.prototype.clear()                                                              // 54
                            clear: function clear() {                                                                       // 55
                              for (var that = this, data = that._i, entry = that._f; entry; entry = entry.n) {               // 56
                                entry.r = true;                                                                            // 57
                                if (entry.p) entry.p = entry.p.n = undefined;                                                // 58
                                delete data[entry.i];                                                                      // 59
                              }                                                                                            // 60
                              that._f = that._l = undefined;                                                               // 61
                              that[SIZE] = 0;                                                                              // 62
                            },                                                                                             // 63
                            // 23.1.3.3 Map.prototype.delete(key)                                                          // 64
                            // 23.2.3.4 Set.prototype.delete(value)                                                        // 65
                            'delete': function (key) {                                                                       // 66
                              var that = this                                                                             // 67
                                , entry = getEntry(that, key);                                                             // 68
                              if (entry) {                                                                                   // 69
                                var next = entry.n                                                                         // 70
                                  , prev = entry.p;                                                                        // 71
                                delete that._i[entry.i];                                                                   // 72
                                entry.r = true;                                                                            // 73
                                if (prev) prev.n = next;                                                                     // 74
                                if (next) next.p = prev;                                                                     // 75
                                if (that._f == entry) that._f = next;                                                        // 76
                                if (that._l == entry) that._l = prev;                                                        // 77
                                that[SIZE]--;                                                                              // 78
                              } return !!entry;                                                                            // 79
                            },                                                                                             // 80
                            // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)                             // 81
                            // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)                             // 82
                            forEach: function forEach(callbackfn /*, that = undefined */) {                                 // 83
                              var f = ctx(callbackfn, arguments[1], 3)                                                     // 84
                                , entry;                                                                                   // 85
                              while (entry = entry ? entry.n : this._f) {                                                    // 86
                                f(entry.v, entry.k, this);                                                                 // 87
                                // revert to the last existing entry                                                       // 88
                                while (entry && entry.r) entry = entry.p;                                                    // 89
                              }                                                                                            // 90
                            },                                                                                             // 91
                            // 23.1.3.7 Map.prototype.has(key)                                                             // 92
                            // 23.2.3.7 Set.prototype.has(value)                                                           // 93
                            has: function has(key) {                                                                        // 94
                              return !!getEntry(this, key);                                                                // 95
                            }                                                                                              // 96
                          });                                                                                              // 97
                          if (SUPPORT_DESC) $.setDesc(C.prototype, 'size', {                                                 // 98
                            get: function () {                                                                               // 99
                              return defined(this[SIZE]);                                                                  // 100
                            }                                                                                              // 101
                          });                                                                                              // 102
                          return C;                                                                                        // 103
                        },                                                                                                 // 104
                        def: function (that, key, value) {                                                                   // 105
                          var entry = getEntry(that, key)                                                                  // 106
                            , prev, index;                                                                                 // 107
                          // change existing entry                                                                         // 108
                          if (entry) {                                                                                       // 109
                            entry.v = value;                                                                               // 110
                            // create new entry                                                                              // 111
                          } else {                                                                                         // 112
                            that._l = entry = {                                                                            // 113
                              i: index = fastKey(key, true), // <- index                                                   // 114
                              k: key,                        // <- key                                                     // 115
                              v: value,                      // <- value                                                   // 116
                              p: prev = that._l,             // <- previous entry                                          // 117
                              n: undefined,                  // <- next entry                                              // 118
                              r: false                       // <- removed                                                 // 119
                            };                                                                                             // 120
                            if (!that._f) that._f = entry;                                                                   // 121
                            if (prev) prev.n = entry;                                                                        // 122
                            that[SIZE]++;                                                                                  // 123
                            // add to index                                                                                // 124
                            if (index !== 'F') that._i[index] = entry;                                                       // 125
                          } return that;                                                                                   // 126
                        },                                                                                                 // 127
                        getEntry: getEntry,                                                                                // 128
                        setStrong: function (C, NAME, IS_MAP) {                                                              // 129
                          // add .keys, .values, .entries, [@@iterator]                                                    // 130
                          // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11            // 131
                          require('./$.iter-define')(C, NAME, function (iterated, kind) {                                    // 132
                            this._t = iterated;  // target                                                                 // 133
                            this._k = kind;      // kind                                                                   // 134
                            this._l = undefined; // previous                                                               // 135
                          }, function () {                                                                                   // 136
                            var that = this                                                                               // 137
                              , kind = that._k                                                                            // 138
                              , entry = that._l;                                                                           // 139
                            // revert to the last existing entry                                                           // 140
                            while (entry && entry.r) entry = entry.p;                                                        // 141
                            // get next entry                                                                              // 142
                            if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {                             // 143
                              // or finish the iteration                                                                   // 144
                              that._t = undefined;                                                                         // 145
                              return step(1);                                                                              // 146
                            }                                                                                              // 147
                            // return step by kind                                                                         // 148
                            if (kind == 'keys') return step(0, entry.k);                                                   // 149
                            if (kind == 'values') return step(0, entry.v);                                                   // 150
                            return step(0, [entry.k, entry.v]);                                                            // 151
                          }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);                                               // 152
                          // 153
                          // add [@@species], 23.1.2.2, 23.2.2.2                                                           // 154
                          species(C);                                                                                      // 155
                          species(require('./$.core')[NAME]); // for wrapper                                               // 156
                        }                                                                                                  // 157
                      };                                                                                                   // 158
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "$.strict-new.js": function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      module.exports = function (it, Constructor, name) {                                                    // 1
                        if (!(it instanceof Constructor)) throw TypeError(name + ": use the 'new' operator!");               // 2
                        return it;                                                                                         // 3
                      };                                                                                                   // 4
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }, "$.for-of.js": ["./$.ctx", "./$.iter-call", "./$.is-array-iter", "./$.an-object", "./$.to-length", "./core.get-iterator-method", function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      var ctx = require('./$.ctx')                                                                 // 1
                        , call = require('./$.iter-call')                                                           // 2
                        , isArrayIter = require('./$.is-array-iter')                                                       // 3
                        , anObject = require('./$.an-object')                                                           // 4
                        , toLength = require('./$.to-length')                                                           // 5
                        , getIterFn = require('./core.get-iterator-method');                                             // 6
                      module.exports = function (iterable, entries, fn, that) {                                              // 7
                        var iterFn = getIterFn(iterable)                                                                   // 8
                          , f = ctx(fn, that, entries ? 2 : 1)                                                        // 9
                          , index = 0                                                                                     // 10
                          , length, step, iterator;                                                                        // 11
                        if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');                    // 12
                        // fast case for arrays with default iterator                                                      // 13
                        if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {           // 14
                          entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);                  // 15
                        } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {                    // 16
                          call(iterator, f, step.value, entries);                                                          // 17
                        }                                                                                                  // 18
                      };                                                                                                   // 19
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "$.mix.js": ["./$.redef", function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      var $redef = require('./$.redef');                                                                   // 1
                      module.exports = function (target, src) {                                                              // 2
                        for (var key in src) $redef(target, key, src[key]);                                                  // 3
                        return target;                                                                                     // 4
                      };                                                                                                   // 5
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "$.collection.js": ["./$.global", "./$.def", "./$.for-of", "./$.strict-new", "./$.redef", "./$.fails", "./$.mix", "./$.iter-detect", "./$.tag", function (require, exports, module) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      'use strict';                                                                                        // 1
                      var global = require('./$.global')                                                               // 2
                        , $def = require('./$.def')                                                                  // 3
                        , forOf = require('./$.for-of')                                                               // 4
                        , strictNew = require('./$.strict-new');                                                          // 5
                      // 6
                      module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {                          // 7
                        var Base = global[NAME]                                                                           // 8
                          , C = Base                                                                                   // 9
                          , ADDER = IS_MAP ? 'set' : 'add'                                                                 // 10
                          , proto = C && C.prototype                                                                       // 11
                          , O = {};                                                                                    // 12
                        var fixMethod = function (KEY) {                                                                     // 13
                          var fn = proto[KEY];                                                                             // 14
                          require('./$.redef')(proto, KEY,                                                                 // 15
                            KEY == 'delete' ? function (a) { return fn.call(this, a === 0 ? 0 : a); }                        // 16
                              : KEY == 'has' ? function has(a) { return fn.call(this, a === 0 ? 0 : a); }                     // 17
                                : KEY == 'get' ? function get(a) { return fn.call(this, a === 0 ? 0 : a); }                     // 18
                                  : KEY == 'add' ? function add(a) { fn.call(this, a === 0 ? 0 : a); return this; }               // 19
                                    : function set(a, b) { fn.call(this, a === 0 ? 0 : a, b); return this; }                        // 20
                          );                                                                                               // 21
                        };                                                                                                 // 22
                        if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !require('./$.fails')(function () {       // 23
                          new C().entries().next();                                                                        // 24
                        }))) {                                                                                              // 25
                          // create collection constructor                                                                 // 26
                          C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);                                         // 27
                          require('./$.mix')(C.prototype, methods);                                                        // 28
                        } else {                                                                                           // 29
                          var inst = new C                                                                                // 30
                            , chain = inst[ADDER](IS_WEAK ? {} : -0, 1)                                                    // 31
                            , buggyZero;                                                                                   // 32
                          // wrap for init collections from iterable                                                       // 33
                          if (!require('./$.iter-detect')(function (iter) { new C(iter); })) { // eslint-disable-line no-new   // 34
                            C = wrapper(function (target, iterable) {                                                        // 35
                              strictNew(target, C, NAME);                                                                  // 36
                              var that = new Base;                                                                         // 37
                              if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);                         // 38
                              return that;                                                                                 // 39
                            });                                                                                            // 40
                            C.prototype = proto;                                                                           // 41
                            proto.constructor = C;                                                                         // 42
                          }                                                                                                // 43
                          IS_WEAK || inst.forEach(function (val, key) {                                                      // 44
                            buggyZero = 1 / key === -Infinity;                                                             // 45
                          });                                                                                              // 46
                          // fix converting -0 key to +0                                                                   // 47
                          if (buggyZero) {                                                                                   // 48
                            fixMethod('delete');                                                                           // 49
                            fixMethod('has');                                                                              // 50
                            IS_MAP && fixMethod('get');                                                                    // 51
                          }                                                                                                // 52
                          // + fix .add & .set for chaining                                                                // 53
                          if (buggyZero || chain !== inst) fixMethod(ADDER);                                                 // 54
                          // weak collections should not contains .clear method                                            // 55
                          if (IS_WEAK && proto.clear) delete proto.clear;                                                    // 56
                        }                                                                                                  // 57
                        // 58
                        require('./$.tag')(C, NAME);                                                                       // 59
                        // 60
                        O[NAME] = C;                                                                                       // 61
                        $def($def.G + $def.W + $def.F * (C != Base), O);                                                   // 62
                        // 63
                        if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);                                                     // 64
                        // 65
                        return C;                                                                                          // 66
                      };                                                                                                   // 67
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }], "es6.set.js": ["./$.collection-strong", "./$.collection", function (require) {

                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //                                                                                                   //
                      // node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/node_modules/core-j //
                      //                                                                                                   //
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////
                      //
                      'use strict';                                                                                        // 1
                      var strong = require('./$.collection-strong');                                                       // 2
                      // 3
                      // 23.2 Set Objects                                                                                  // 4
                      require('./$.collection')('Set', function (get) {                                                      // 5
                        return function Set() { return get(this, arguments[0]); };                                          // 6
                      }, {                                                                                                 // 7
                        // 23.2.3.1 Set.prototype.add(value)                                                               // 8
                        add: function add(value) {                                                                          // 9
                          return strong.def(this, value = value === 0 ? 0 : value, value);                                 // 10
                        }                                                                                                  // 11
                      }, strong);                                                                                          // 12
                      ///////////////////////////////////////////////////////////////////////////////////////////////////////

                    }]
                  }
                }
              }
            }
          }
        }
      }
    }
  }, { "extensions": [".js", ".json"] });
  var exports = require("./node_modules/meteor/ecmascript-runtime/runtime.js");

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols)
      (s in pkg) || (pkg[s] = symbols[s]);
  })(Package['ecmascript-runtime'] = exports, {
    Symbol: Symbol,
    Map: Map,
    Set: Set
  });

})();
(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;



  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  Package.ecmascript = {};

})();
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;

  /* Package-scope variables */
  var Base64;

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                      //
    // packages/base64/base64.js                                                            //
    //                                                                                      //
    //////////////////////////////////////////////////////////////////////////////////////////
    //
    // Base 64 encoding                                                                     // 1
    // 2
    var BASE_64_CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    // 4
    var BASE_64_VALS = {};                                                                  // 5
    // 6
    for (var i = 0; i < BASE_64_CHARS.length; i++) {                                        // 7
      BASE_64_VALS[BASE_64_CHARS.charAt(i)] = i;                                            // 8
    };                                                                                      // 9
    // 10
    Base64 = {};                                                                            // 11
    // 12
    Base64.encode = function (array) {                                                      // 13
      // 14
      if (typeof array === "string") {                                                      // 15
        var str = array;                                                                    // 16
        array = Base64.newBinary(str.length);                                               // 17
        for (var i = 0; i < str.length; i++) {                                              // 18
          var ch = str.charCodeAt(i);                                                       // 19
          if (ch > 0xFF) {                                                                  // 20
            throw new Error(                                                                // 21
              "Not ascii. Base64.encode can only take ascii strings.");                     // 22
          }                                                                                 // 23
          array[i] = ch;                                                                    // 24
        }                                                                                   // 25
      }                                                                                     // 26
      // 27
      var answer = [];                                                                      // 28
      var a = null;                                                                         // 29
      var b = null;                                                                         // 30
      var c = null;                                                                         // 31
      var d = null;                                                                         // 32
      for (var i = 0; i < array.length; i++) {                                              // 33
        switch (i % 3) {                                                                    // 34
          case 0:                                                                             // 35
            a = (array[i] >> 2) & 0x3F;                                                       // 36
            b = (array[i] & 0x03) << 4;                                                       // 37
            break;                                                                            // 38
          case 1:                                                                             // 39
            b = b | (array[i] >> 4) & 0xF;                                                    // 40
            c = (array[i] & 0xF) << 2;                                                        // 41
            break;                                                                            // 42
          case 2:                                                                             // 43
            c = c | (array[i] >> 6) & 0x03;                                                   // 44
            d = array[i] & 0x3F;                                                              // 45
            answer.push(getChar(a));                                                          // 46
            answer.push(getChar(b));                                                          // 47
            answer.push(getChar(c));                                                          // 48
            answer.push(getChar(d));                                                          // 49
            a = null;                                                                         // 50
            b = null;                                                                         // 51
            c = null;                                                                         // 52
            d = null;                                                                         // 53
            break;                                                                            // 54
        }                                                                                   // 55
      }                                                                                     // 56
      if (a != null) {                                                                      // 57
        answer.push(getChar(a));                                                            // 58
        answer.push(getChar(b));                                                            // 59
        if (c == null)                                                                      // 60
          answer.push('=');                                                                 // 61
        else                                                                                // 62
          answer.push(getChar(c));                                                          // 63
        if (d == null)                                                                      // 64
          answer.push('=');                                                                 // 65
      }                                                                                     // 66
      return answer.join("");                                                               // 67
    };                                                                                      // 68
    // 69
    var getChar = function (val) {                                                          // 70
      return BASE_64_CHARS.charAt(val);                                                     // 71
    };                                                                                      // 72
    // 73
    var getVal = function (ch) {                                                            // 74
      if (ch === '=') {                                                                     // 75
        return -1;                                                                          // 76
      }                                                                                     // 77
      return BASE_64_VALS[ch];                                                              // 78
    };                                                                                      // 79
    // 80
    // XXX This is a weird place for this to live, but it's used both by                    // 81
    // this package and 'ejson', and we can't put it in 'ejson' without                     // 82
    // introducing a circular dependency. It should probably be in its own                  // 83
    // package or as a helper in a package that both 'base64' and 'ejson'                   // 84
    // use.                                                                                 // 85
    Base64.newBinary = function (len) {                                                     // 86
      if (typeof Uint8Array === 'undefined' || typeof ArrayBuffer === 'undefined') {        // 87
        var ret = [];                                                                       // 88
        for (var i = 0; i < len; i++) {                                                     // 89
          ret.push(0);                                                                      // 90
        }                                                                                   // 91
        ret.$Uint8ArrayPolyfill = true;                                                     // 92
        return ret;                                                                         // 93
      }                                                                                     // 94
      return new Uint8Array(new ArrayBuffer(len));                                          // 95
    };                                                                                      // 96
    // 97
    Base64.decode = function (str) {                                                        // 98
      var len = Math.floor((str.length * 3) / 4);                                               // 99
      if (str.charAt(str.length - 1) == '=') {                                              // 100
        len--;                                                                              // 101
        if (str.charAt(str.length - 2) == '=')                                              // 102
          len--;                                                                            // 103
      }                                                                                     // 104
      var arr = Base64.newBinary(len);                                                      // 105
      // 106
      var one = null;                                                                       // 107
      var two = null;                                                                       // 108
      var three = null;                                                                     // 109
      // 110
      var j = 0;                                                                            // 111
      // 112
      for (var i = 0; i < str.length; i++) {                                                // 113
        var c = str.charAt(i);                                                              // 114
        var v = getVal(c);                                                                  // 115
        switch (i % 4) {                                                                    // 116
          case 0:                                                                             // 117
            if (v < 0)                                                                        // 118
              throw new Error('invalid base64 string');                                       // 119
            one = v << 2;                                                                     // 120
            break;                                                                            // 121
          case 1:                                                                             // 122
            if (v < 0)                                                                        // 123
              throw new Error('invalid base64 string');                                       // 124
            one = one | (v >> 4);                                                             // 125
            arr[j++] = one;                                                                   // 126
            two = (v & 0x0F) << 4;                                                            // 127
            break;                                                                            // 128
          case 2:                                                                             // 129
            if (v >= 0) {                                                                     // 130
              two = two | (v >> 2);                                                           // 131
              arr[j++] = two;                                                                 // 132
              three = (v & 0x03) << 6;                                                        // 133
            }                                                                                 // 134
            break;                                                                            // 135
          case 3:                                                                             // 136
            if (v >= 0) {                                                                     // 137
              arr[j++] = three | v;                                                           // 138
            }                                                                                 // 139
            break;                                                                            // 140
        }                                                                                   // 141
      }                                                                                     // 142
      return arr;                                                                           // 143
    };                                                                                      // 144
    // 145
    //////////////////////////////////////////////////////////////////////////////////////////

  }).call(this);


  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols)
      (s in pkg) || (pkg[s] = symbols[s]);
  })(Package.base64 = {}, {
    Base64: Base64
  });

})();
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var _ = Package.underscore._;
  var Base64 = Package.base64.Base64;

  /* Package-scope variables */
  var EJSON, EJSONTest;

  (function () {

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                   //
    // packages/ejson/ejson.js                                                                                           //
    //                                                                                                                   //
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    /**                                                                                                                  // 1
     * @namespace                                                                                                        // 2
     * @summary Namespace for EJSON functions                                                                            // 3
     */                                                                                                                  // 4
    EJSON = {};                                                                                                          // 5
    EJSONTest = {};                                                                                                      // 6
    // 7
    // 8
    // 9
    // Custom type interface definition                                                                                  // 10
    /**                                                                                                                  // 11
     * @class CustomType                                                                                                 // 12
     * @instanceName customType                                                                                          // 13
     * @memberOf EJSON                                                                                                   // 14
     * @summary The interface that a class must satisfy to be able to become an                                          // 15
     * EJSON custom type via EJSON.addType.                                                                              // 16
     */                                                                                                                  // 17
    // 18
    /**                                                                                                                  // 19
     * @function typeName                                                                                                // 20
     * @memberOf EJSON.CustomType                                                                                        // 21
     * @summary Return the tag used to identify this type.  This must match the tag used to register this type with [`EJSON.addType`](#ejson_add_type).
     * @locus Anywhere                                                                                                   // 23
     * @instance                                                                                                         // 24
     */                                                                                                                  // 25
    // 26
    /**                                                                                                                  // 27
     * @function toJSONValue                                                                                             // 28
     * @memberOf EJSON.CustomType                                                                                        // 29
     * @summary Serialize this instance into a JSON-compatible value.                                                    // 30
     * @locus Anywhere                                                                                                   // 31
     * @instance                                                                                                         // 32
     */                                                                                                                  // 33
    // 34
    /**                                                                                                                  // 35
     * @function clone                                                                                                   // 36
     * @memberOf EJSON.CustomType                                                                                        // 37
     * @summary Return a value `r` such that `this.equals(r)` is true, and modifications to `r` do not affect `this` and vice versa.
     * @locus Anywhere                                                                                                   // 39
     * @instance                                                                                                         // 40
     */                                                                                                                  // 41
    // 42
    /**                                                                                                                  // 43
     * @function equals                                                                                                  // 44
     * @memberOf EJSON.CustomType                                                                                        // 45
     * @summary Return `true` if `other` has a value equal to `this`; `false` otherwise.                                 // 46
     * @locus Anywhere                                                                                                   // 47
     * @param {Object} other Another object to compare this to.                                                          // 48
     * @instance                                                                                                         // 49
     */                                                                                                                  // 50
    // 51
    // 52
    var customTypes = {};                                                                                                // 53
    // Add a custom type, using a method of your choice to get to and                                                    // 54
    // from a basic JSON-able representation.  The factory argument                                                      // 55
    // is a function of JSON-able --> your object                                                                        // 56
    // The type you add must have:                                                                                       // 57
    // - A toJSONValue() method, so that Meteor can serialize it                                                         // 58
    // - a typeName() method, to show how to look it up in our type table.                                               // 59
    // It is okay if these methods are monkey-patched on.                                                                // 60
    // EJSON.clone will use toJSONValue and the given factory to produce                                                 // 61
    // a clone, but you may specify a method clone() that will be                                                        // 62
    // used instead.                                                                                                     // 63
    // Similarly, EJSON.equals will use toJSONValue to make comparisons,                                                 // 64
    // but you may provide a method equals() instead.                                                                    // 65
    /**                                                                                                                  // 66
     * @summary Add a custom datatype to EJSON.                                                                          // 67
     * @locus Anywhere                                                                                                   // 68
     * @param {String} name A tag for your custom type; must be unique among custom data types defined in your project, and must match the result of your type's `typeName` method.
     * @param {Function} factory A function that deserializes a JSON-compatible value into an instance of your type.  This should match the serialization performed by your type's `toJSONValue` method.
     */                                                                                                                  // 71
    EJSON.addType = function (name, factory) {                                                                           // 72
      if (_.has(customTypes, name))                                                                                      // 73
        throw new Error("Type " + name + " already present");                                                            // 74
      customTypes[name] = factory;                                                                                       // 75
    };                                                                                                                   // 76
    // 77
    var isInfOrNan = function (obj) {                                                                                    // 78
      return _.isNaN(obj) || obj === Infinity || obj === -Infinity;                                                      // 79
    };                                                                                                                   // 80
    // 81
    var builtinConverters = [                                                                                            // 82
      { // Date                                                                                                          // 83
        matchJSONValue: function (obj) {                                                                                 // 84
          return _.has(obj, '$date') && _.size(obj) === 1;                                                               // 85
        },                                                                                                               // 86
        matchObject: function (obj) {                                                                                    // 87
          return obj instanceof Date;                                                                                    // 88
        },                                                                                                               // 89
        toJSONValue: function (obj) {                                                                                    // 90
          return { $date: obj.getTime() };                                                                                 // 91
        },                                                                                                               // 92
        fromJSONValue: function (obj) {                                                                                  // 93
          return new Date(obj.$date);                                                                                    // 94
        }                                                                                                                // 95
      },                                                                                                                 // 96
      { // NaN, Inf, -Inf. (These are the only objects with typeof !== 'object'                                          // 97
        // which we match.)                                                                                              // 98
        matchJSONValue: function (obj) {                                                                                 // 99
          return _.has(obj, '$InfNaN') && _.size(obj) === 1;                                                             // 100
        },                                                                                                               // 101
        matchObject: isInfOrNan,                                                                                         // 102
        toJSONValue: function (obj) {                                                                                    // 103
          var sign;                                                                                                      // 104
          if (_.isNaN(obj))                                                                                              // 105
            sign = 0;                                                                                                    // 106
          else if (obj === Infinity)                                                                                     // 107
            sign = 1;                                                                                                    // 108
          else                                                                                                           // 109
            sign = -1;                                                                                                   // 110
          return { $InfNaN: sign };                                                                                        // 111
        },                                                                                                               // 112
        fromJSONValue: function (obj) {                                                                                  // 113
          return obj.$InfNaN / 0;                                                                                          // 114
        }                                                                                                                // 115
      },                                                                                                                 // 116
      { // Binary                                                                                                        // 117
        matchJSONValue: function (obj) {                                                                                 // 118
          return _.has(obj, '$binary') && _.size(obj) === 1;                                                             // 119
        },                                                                                                               // 120
        matchObject: function (obj) {                                                                                    // 121
          return typeof Uint8Array !== 'undefined' && obj instanceof Uint8Array                                          // 122
            || (obj && _.has(obj, '$Uint8ArrayPolyfill'));                                                               // 123
        },                                                                                                               // 124
        toJSONValue: function (obj) {                                                                                    // 125
          return { $binary: Base64.encode(obj) };                                                                          // 126
        },                                                                                                               // 127
        fromJSONValue: function (obj) {                                                                                  // 128
          return Base64.decode(obj.$binary);                                                                             // 129
        }                                                                                                                // 130
      },                                                                                                                 // 131
      { // Escaping one level                                                                                            // 132
        matchJSONValue: function (obj) {                                                                                 // 133
          return _.has(obj, '$escape') && _.size(obj) === 1;                                                             // 134
        },                                                                                                               // 135
        matchObject: function (obj) {                                                                                    // 136
          if (_.isEmpty(obj) || _.size(obj) > 2) {                                                                       // 137
            return false;                                                                                                // 138
          }                                                                                                              // 139
          return _.any(builtinConverters, function (converter) {                                                         // 140
            return converter.matchJSONValue(obj);                                                                        // 141
          });                                                                                                            // 142
        },                                                                                                               // 143
        toJSONValue: function (obj) {                                                                                    // 144
          var newObj = {};                                                                                               // 145
          _.each(obj, function (value, key) {                                                                            // 146
            newObj[key] = EJSON.toJSONValue(value);                                                                      // 147
          });                                                                                                            // 148
          return { $escape: newObj };                                                                                      // 149
        },                                                                                                               // 150
        fromJSONValue: function (obj) {                                                                                  // 151
          var newObj = {};                                                                                               // 152
          _.each(obj.$escape, function (value, key) {                                                                    // 153
            newObj[key] = EJSON.fromJSONValue(value);                                                                    // 154
          });                                                                                                            // 155
          return newObj;                                                                                                 // 156
        }                                                                                                                // 157
      },                                                                                                                 // 158
      { // Custom                                                                                                        // 159
        matchJSONValue: function (obj) {                                                                                 // 160
          return _.has(obj, '$type') && _.has(obj, '$value') && _.size(obj) === 2;                                       // 161
        },                                                                                                               // 162
        matchObject: function (obj) {                                                                                    // 163
          return EJSON._isCustomType(obj);                                                                               // 164
        },                                                                                                               // 165
        toJSONValue: function (obj) {                                                                                    // 166
          var jsonValue = Meteor._noYieldsAllowed(function () {                                                          // 167
            return obj.toJSONValue();                                                                                    // 168
          });                                                                                                            // 169
          return { $type: obj.typeName(), $value: jsonValue };                                                             // 170
        },                                                                                                               // 171
        fromJSONValue: function (obj) {                                                                                  // 172
          var typeName = obj.$type;                                                                                      // 173
          if (!_.has(customTypes, typeName))                                                                             // 174
            throw new Error("Custom EJSON type " + typeName + " is not defined");                                        // 175
          var converter = customTypes[typeName];                                                                         // 176
          return Meteor._noYieldsAllowed(function () {                                                                   // 177
            return converter(obj.$value);                                                                                // 178
          });                                                                                                            // 179
        }                                                                                                                // 180
      }                                                                                                                  // 181
    ];                                                                                                                   // 182
    // 183
    EJSON._isCustomType = function (obj) {                                                                               // 184
      return obj &&                                                                                                      // 185
        typeof obj.toJSONValue === 'function' &&                                                                         // 186
        typeof obj.typeName === 'function' &&                                                                            // 187
        _.has(customTypes, obj.typeName());                                                                              // 188
    };                                                                                                                   // 189
    // 190
    EJSON._getTypes = function () {                                                                                      // 191
      return customTypes;                                                                                                // 192
    };                                                                                                                   // 193
    // 194
    EJSON._getConverters = function () {                                                                                 // 195
      return builtinConverters;                                                                                          // 196
    };                                                                                                                   // 197
    // 198
    // for both arrays and objects, in-place modification.                                                               // 199
    var adjustTypesToJSONValue =                                                                                         // 200
      EJSON._adjustTypesToJSONValue = function (obj) {                                                                     // 201
        // Is it an atom that we need to adjust?                                                                           // 202
        if (obj === null)                                                                                                  // 203
          return null;                                                                                                     // 204
        var maybeChanged = toJSONValueHelper(obj);                                                                         // 205
        if (maybeChanged !== undefined)                                                                                    // 206
          return maybeChanged;                                                                                             // 207
        // 208
        // Other atoms are unchanged.                                                                                      // 209
        if (typeof obj !== 'object')                                                                                       // 210
          return obj;                                                                                                      // 211
        // 212
        // Iterate over array or object structure.                                                                         // 213
        _.each(obj, function (value, key) {                                                                                // 214
          if (typeof value !== 'object' && value !== undefined &&                                                          // 215
            !isInfOrNan(value))                                                                                          // 216
            return; // continue                                                                                            // 217
          // 218
          var changed = toJSONValueHelper(value);                                                                          // 219
          if (changed) {                                                                                                   // 220
            obj[key] = changed;                                                                                            // 221
            return; // on to the next key                                                                                  // 222
          }                                                                                                                // 223
          // if we get here, value is an object but not adjustable                                                         // 224
          // at this level.  recurse.                                                                                      // 225
          adjustTypesToJSONValue(value);                                                                                   // 226
        });                                                                                                                // 227
        return obj;                                                                                                        // 228
      };                                                                                                                   // 229
    // 230
    // Either return the JSON-compatible version of the argument, or undefined (if                                       // 231
    // the item isn't itself replaceable, but maybe some fields in it are)                                               // 232
    var toJSONValueHelper = function (item) {                                                                            // 233
      for (var i = 0; i < builtinConverters.length; i++) {                                                               // 234
        var converter = builtinConverters[i];                                                                            // 235
        if (converter.matchObject(item)) {                                                                               // 236
          return converter.toJSONValue(item);                                                                            // 237
        }                                                                                                                // 238
      }                                                                                                                  // 239
      return undefined;                                                                                                  // 240
    };                                                                                                                   // 241
    // 242
    /**                                                                                                                  // 243
     * @summary Serialize an EJSON-compatible value into its plain JSON representation.                                  // 244
     * @locus Anywhere                                                                                                   // 245
     * @param {EJSON} val A value to serialize to plain JSON.                                                            // 246
     */                                                                                                                  // 247
    EJSON.toJSONValue = function (item) {                                                                                // 248
      var changed = toJSONValueHelper(item);                                                                             // 249
      if (changed !== undefined)                                                                                         // 250
        return changed;                                                                                                  // 251
      if (typeof item === 'object') {                                                                                    // 252
        item = EJSON.clone(item);                                                                                        // 253
        adjustTypesToJSONValue(item);                                                                                    // 254
      }                                                                                                                  // 255
      return item;                                                                                                       // 256
    };                                                                                                                   // 257
    // 258
    // for both arrays and objects. Tries its best to just                                                               // 259
    // use the object you hand it, but may return something                                                              // 260
    // different if the object you hand it itself needs changing.                                                        // 261
    //                                                                                                                   // 262
    var adjustTypesFromJSONValue =                                                                                       // 263
      EJSON._adjustTypesFromJSONValue = function (obj) {                                                                   // 264
        if (obj === null)                                                                                                  // 265
          return null;                                                                                                     // 266
        var maybeChanged = fromJSONValueHelper(obj);                                                                       // 267
        if (maybeChanged !== obj)                                                                                          // 268
          return maybeChanged;                                                                                             // 269
        // 270
        // Other atoms are unchanged.                                                                                      // 271
        if (typeof obj !== 'object')                                                                                       // 272
          return obj;                                                                                                      // 273
        // 274
        _.each(obj, function (value, key) {                                                                                // 275
          if (typeof value === 'object') {                                                                                 // 276
            var changed = fromJSONValueHelper(value);                                                                      // 277
            if (value !== changed) {                                                                                       // 278
              obj[key] = changed;                                                                                          // 279
              return;                                                                                                      // 280
            }                                                                                                              // 281
            // if we get here, value is an object but not adjustable                                                       // 282
            // at this level.  recurse.                                                                                    // 283
            adjustTypesFromJSONValue(value);                                                                               // 284
          }                                                                                                                // 285
        });                                                                                                                // 286
        return obj;                                                                                                        // 287
      };                                                                                                                   // 288
    // 289
    // Either return the argument changed to have the non-json                                                           // 290
    // rep of itself (the Object version) or the argument itself.                                                        // 291
    // 292
    // DOES NOT RECURSE.  For actually getting the fully-changed value, use                                              // 293
    // EJSON.fromJSONValue                                                                                               // 294
    var fromJSONValueHelper = function (value) {                                                                         // 295
      if (typeof value === 'object' && value !== null) {                                                                 // 296
        if (_.size(value) <= 2                                                                                           // 297
          && _.all(value, function (v, k) {                                                                            // 298
            return typeof k === 'string' && k.substr(0, 1) === '$';                                                    // 299
          })) {                                                                                                        // 300
          for (var i = 0; i < builtinConverters.length; i++) {                                                           // 301
            var converter = builtinConverters[i];                                                                        // 302
            if (converter.matchJSONValue(value)) {                                                                       // 303
              return converter.fromJSONValue(value);                                                                     // 304
            }                                                                                                            // 305
          }                                                                                                              // 306
        }                                                                                                                // 307
      }                                                                                                                  // 308
      return value;                                                                                                      // 309
    };                                                                                                                   // 310
    // 311
    /**                                                                                                                  // 312
     * @summary Deserialize an EJSON value from its plain JSON representation.                                           // 313
     * @locus Anywhere                                                                                                   // 314
     * @param {JSONCompatible} val A value to deserialize into EJSON.                                                    // 315
     */                                                                                                                  // 316
    EJSON.fromJSONValue = function (item) {                                                                              // 317
      var changed = fromJSONValueHelper(item);                                                                           // 318
      if (changed === item && typeof item === 'object') {                                                                // 319
        item = EJSON.clone(item);                                                                                        // 320
        adjustTypesFromJSONValue(item);                                                                                  // 321
        return item;                                                                                                     // 322
      } else {                                                                                                           // 323
        return changed;                                                                                                  // 324
      }                                                                                                                  // 325
    };                                                                                                                   // 326
    // 327
    /**                                                                                                                  // 328
     * @summary Serialize a value to a string.                                                                           // 329
                                                                                                                         // 330
    For EJSON values, the serialization fully represents the value. For non-EJSON values, serializes the same way as `JSON.stringify`.
     * @locus Anywhere                                                                                                   // 332
     * @param {EJSON} val A value to stringify.                                                                          // 333
     * @param {Object} [options]                                                                                         // 334
     * @param {Boolean | Integer | String} options.indent Indents objects and arrays for easy readability.  When `true`, indents by 2 spaces; when an integer, indents by that number of spaces; and when a string, uses the string as the indentation pattern.
     * @param {Boolean} options.canonical When `true`, stringifies keys in an object in sorted order.                    // 336
     */                                                                                                                  // 337
    EJSON.stringify = function (item, options) {                                                                         // 338
      var json = EJSON.toJSONValue(item);                                                                                // 339
      if (options && (options.canonical || options.indent)) {                                                            // 340
        return EJSON._canonicalStringify(json, options);                                                                 // 341
      } else {                                                                                                           // 342
        return JSON.stringify(json);                                                                                     // 343
      }                                                                                                                  // 344
    };                                                                                                                   // 345
    // 346
    /**                                                                                                                  // 347
     * @summary Parse a string into an EJSON value. Throws an error if the string is not valid EJSON.                    // 348
     * @locus Anywhere                                                                                                   // 349
     * @param {String} str A string to parse into an EJSON value.                                                        // 350
     */                                                                                                                  // 351
    EJSON.parse = function (item) {                                                                                      // 352
      if (typeof item !== 'string')                                                                                      // 353
        throw new Error("EJSON.parse argument should be a string");                                                      // 354
      return EJSON.fromJSONValue(JSON.parse(item));                                                                      // 355
    };                                                                                                                   // 356
    // 357
    /**                                                                                                                  // 358
     * @summary Returns true if `x` is a buffer of binary data, as returned from [`EJSON.newBinary`](#ejson_new_binary).
     * @param {Object} x The variable to check.                                                                          // 360
     * @locus Anywhere                                                                                                   // 361
     */                                                                                                                  // 362
    EJSON.isBinary = function (obj) {                                                                                    // 363
      return !!((typeof Uint8Array !== 'undefined' && obj instanceof Uint8Array) ||                                      // 364
        (obj && obj.$Uint8ArrayPolyfill));                                                                               // 365
    };                                                                                                                   // 366
    // 367
    /**                                                                                                                  // 368
     * @summary Return true if `a` and `b` are equal to each other.  Return false otherwise.  Uses the `equals` method on `a` if present, otherwise performs a deep comparison.
     * @locus Anywhere                                                                                                   // 370
     * @param {EJSON} a                                                                                                  // 371
     * @param {EJSON} b                                                                                                  // 372
     * @param {Object} [options]                                                                                         // 373
     * @param {Boolean} options.keyOrderSensitive Compare in key sensitive order, if supported by the JavaScript implementation.  For example, `{a: 1, b: 2}` is equal to `{b: 2, a: 1}` only when `keyOrderSensitive` is `false`.  The default is `false`.
     */                                                                                                                  // 375
    EJSON.equals = function (a, b, options) {                                                                            // 376
      var i;                                                                                                             // 377
      var keyOrderSensitive = !!(options && options.keyOrderSensitive);                                                  // 378
      if (a === b)                                                                                                       // 379
        return true;                                                                                                     // 380
      if (_.isNaN(a) && _.isNaN(b))                                                                                      // 381
        return true; // This differs from the IEEE spec for NaN equality, b/c we don't want                              // 382
      // anything ever with a NaN to be poisoned from becoming equal to anything.                         // 383
      if (!a || !b) // if either one is falsy, they'd have to be === to be equal                                         // 384
        return false;                                                                                                    // 385
      if (!(typeof a === 'object' && typeof b === 'object'))                                                             // 386
        return false;                                                                                                    // 387
      if (a instanceof Date && b instanceof Date)                                                                        // 388
        return a.valueOf() === b.valueOf();                                                                              // 389
      if (EJSON.isBinary(a) && EJSON.isBinary(b)) {                                                                      // 390
        if (a.length !== b.length)                                                                                       // 391
          return false;                                                                                                  // 392
        for (i = 0; i < a.length; i++) {                                                                                 // 393
          if (a[i] !== b[i])                                                                                             // 394
            return false;                                                                                                // 395
        }                                                                                                                // 396
        return true;                                                                                                     // 397
      }                                                                                                                  // 398
      if (typeof (a.equals) === 'function')                                                                              // 399
        return a.equals(b, options);                                                                                     // 400
      if (typeof (b.equals) === 'function')                                                                              // 401
        return b.equals(a, options);                                                                                     // 402
      if (a instanceof Array) {                                                                                          // 403
        if (!(b instanceof Array))                                                                                       // 404
          return false;                                                                                                  // 405
        if (a.length !== b.length)                                                                                       // 406
          return false;                                                                                                  // 407
        for (i = 0; i < a.length; i++) {                                                                                 // 408
          if (!EJSON.equals(a[i], b[i], options))                                                                        // 409
            return false;                                                                                                // 410
        }                                                                                                                // 411
        return true;                                                                                                     // 412
      }                                                                                                                  // 413
      // fallback for custom types that don't implement their own equals                                                 // 414
      switch (EJSON._isCustomType(a) + EJSON._isCustomType(b)) {                                                         // 415
        case 1: return false;                                                                                            // 416
        case 2: return EJSON.equals(EJSON.toJSONValue(a), EJSON.toJSONValue(b));                                         // 417
      }                                                                                                                  // 418
      // fall back to structural equality of objects                                                                     // 419
      var ret;                                                                                                           // 420
      if (keyOrderSensitive) {                                                                                           // 421
        var bKeys = [];                                                                                                  // 422
        _.each(b, function (val, x) {                                                                                    // 423
          bKeys.push(x);                                                                                               // 424
        });                                                                                                              // 425
        i = 0;                                                                                                           // 426
        ret = _.all(a, function (val, x) {                                                                               // 427
          if (i >= bKeys.length) {                                                                                       // 428
            return false;                                                                                                // 429
          }                                                                                                              // 430
          if (x !== bKeys[i]) {                                                                                          // 431
            return false;                                                                                                // 432
          }                                                                                                              // 433
          if (!EJSON.equals(val, b[bKeys[i]], options)) {                                                                // 434
            return false;                                                                                                // 435
          }                                                                                                              // 436
          i++;                                                                                                           // 437
          return true;                                                                                                   // 438
        });                                                                                                              // 439
        return ret && i === bKeys.length;                                                                                // 440
      } else {                                                                                                           // 441
        i = 0;                                                                                                           // 442
        ret = _.all(a, function (val, key) {                                                                             // 443
          if (!_.has(b, key)) {                                                                                          // 444
            return false;                                                                                                // 445
          }                                                                                                              // 446
          if (!EJSON.equals(val, b[key], options)) {                                                                     // 447
            return false;                                                                                                // 448
          }                                                                                                              // 449
          i++;                                                                                                           // 450
          return true;                                                                                                   // 451
        });                                                                                                              // 452
        return ret && _.size(b) === i;                                                                                   // 453
      }                                                                                                                  // 454
    };                                                                                                                   // 455
    // 456
    /**                                                                                                                  // 457
     * @summary Return a deep copy of `val`.                                                                             // 458
     * @locus Anywhere                                                                                                   // 459
     * @param {EJSON} val A value to copy.                                                                               // 460
     */                                                                                                                  // 461
    EJSON.clone = function (v) {                                                                                         // 462
      var ret;                                                                                                           // 463
      if (typeof v !== "object")                                                                                         // 464
        return v;                                                                                                        // 465
      if (v === null)                                                                                                    // 466
        return null; // null has typeof "object"                                                                         // 467
      if (v instanceof Date)                                                                                             // 468
        return new Date(v.getTime());                                                                                    // 469
      // RegExps are not really EJSON elements (eg we don't define a serialization                                       // 470
      // for them), but they're immutable anyway, so we can support them in clone.                                       // 471
      if (v instanceof RegExp)                                                                                           // 472
        return v;                                                                                                        // 473
      if (EJSON.isBinary(v)) {                                                                                           // 474
        ret = EJSON.newBinary(v.length);                                                                                 // 475
        for (var i = 0; i < v.length; i++) {                                                                             // 476
          ret[i] = v[i];                                                                                                 // 477
        }                                                                                                                // 478
        return ret;                                                                                                      // 479
      }                                                                                                                  // 480
      // XXX: Use something better than underscore's isArray                                                             // 481
      if (_.isArray(v) || _.isArguments(v)) {                                                                            // 482
        // For some reason, _.map doesn't work in this context on Opera (weird test                                      // 483
        // failures).                                                                                                    // 484
        ret = [];                                                                                                        // 485
        for (i = 0; i < v.length; i++)                                                                                   // 486
          ret[i] = EJSON.clone(v[i]);                                                                                    // 487
        return ret;                                                                                                      // 488
      }                                                                                                                  // 489
      // handle general user-defined typed Objects if they have a clone method                                           // 490
      if (typeof v.clone === 'function') {                                                                               // 491
        return v.clone();                                                                                                // 492
      }                                                                                                                  // 493
      // handle other custom types                                                                                       // 494
      if (EJSON._isCustomType(v)) {                                                                                      // 495
        return EJSON.fromJSONValue(EJSON.clone(EJSON.toJSONValue(v)), true);                                             // 496
      }                                                                                                                  // 497
      // handle other objects                                                                                            // 498
      ret = {};                                                                                                          // 499
      _.each(v, function (value, key) {                                                                                  // 500
        ret[key] = EJSON.clone(value);                                                                                   // 501
      });                                                                                                                // 502
      return ret;                                                                                                        // 503
    };                                                                                                                   // 504
    // 505
    /**                                                                                                                  // 506
     * @summary Allocate a new buffer of binary data that EJSON can serialize.                                           // 507
     * @locus Anywhere                                                                                                   // 508
     * @param {Number} size The number of bytes of binary data to allocate.                                              // 509
     */                                                                                                                  // 510
    // EJSON.newBinary is the public documented API for this functionality,                                              // 511
    // but the implementation is in the 'base64' package to avoid                                                        // 512
    // introducing a circular dependency. (If the implementation were here,                                              // 513
    // then 'base64' would have to use EJSON.newBinary, and 'ejson' would                                                // 514
    // also have to use 'base64'.)                                                                                       // 515
    EJSON.newBinary = Base64.newBinary;                                                                                  // 516
    // 517
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }).call(this);






  (function () {

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                   //
    // packages/ejson/stringify.js                                                                                       //
    //                                                                                                                   //
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Based on json2.js from https://github.com/douglascrockford/JSON-js                                                // 1
    //                                                                                                                   // 2
    //    json2.js                                                                                                       // 3
    //    2012-10-08                                                                                                     // 4
    //                                                                                                                   // 5
    //    Public Domain.                                                                                                 // 6
    //                                                                                                                   // 7
    //    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.                                                        // 8
    // 9
    function quote(string) {                                                                                             // 10
      return JSON.stringify(string);                                                                                     // 11
    }                                                                                                                    // 12
    // 13
    var str = function (key, holder, singleIndent, outerIndent, canonical) {                                             // 14
      // 15
      // Produce a string from holder[key].                                                                              // 16
      // 17
      var i;          // The loop counter.                                                                               // 18
      var k;          // The member key.                                                                                 // 19
      var v;          // The member value.                                                                               // 20
      var length;                                                                                                        // 21
      var innerIndent = outerIndent;                                                                                     // 22
      var partial;                                                                                                       // 23
      var value = holder[key];                                                                                           // 24
      // 25
      // What happens next depends on the value's type.                                                                  // 26
      // 27
      switch (typeof value) {                                                                                            // 28
        case 'string':                                                                                                     // 29
          return quote(value);                                                                                             // 30
        case 'number':                                                                                                     // 31
          // JSON numbers must be finite. Encode non-finite numbers as null.                                               // 32
          return isFinite(value) ? String(value) : 'null';                                                                 // 33
        case 'boolean':                                                                                                    // 34
          return String(value);                                                                                            // 35
        // If the type is 'object', we might be dealing with an object or an array or                                      // 36
        // null.                                                                                                           // 37
        case 'object':                                                                                                     // 38
          // Due to a specification blunder in ECMAScript, typeof null is 'object',                                        // 39
          // so watch out for that case.                                                                                   // 40
          if (!value) {                                                                                                    // 41
            return 'null';                                                                                                 // 42
          }                                                                                                                // 43
          // Make an array to hold the partial results of stringifying this object value.                                  // 44
          innerIndent = outerIndent + singleIndent;                                                                        // 45
          partial = [];                                                                                                    // 46
          // 47
          // Is the value an array?                                                                                        // 48
          if (_.isArray(value) || _.isArguments(value)) {                                                                  // 49
            // 50
            // The value is an array. Stringify every element. Use null as a placeholder                                   // 51
            // for non-JSON values.                                                                                        // 52
            // 53
            length = value.length;                                                                                         // 54
            for (i = 0; i < length; i += 1) {                                                                              // 55
              partial[i] = str(i, value, singleIndent, innerIndent, canonical) || 'null';                                  // 56
            }                                                                                                              // 57
            // 58
            // Join all of the elements together, separated with commas, and wrap them in                                  // 59
            // brackets.                                                                                                   // 60
            // 61
            if (partial.length === 0) {                                                                                    // 62
              v = '[]';                                                                                                    // 63
            } else if (innerIndent) {                                                                                      // 64
              v = '[\n' + innerIndent + partial.join(',\n' + innerIndent) + '\n' + outerIndent + ']';                      // 65
            } else {                                                                                                       // 66
              v = '[' + partial.join(',') + ']';                                                                           // 67
            }                                                                                                              // 68
            return v;                                                                                                      // 69
          }                                                                                                                // 70
          // 71
          // 72
          // Iterate through all of the keys in the object.                                                                // 73
          var keys = _.keys(value);                                                                                        // 74
          if (canonical)                                                                                                   // 75
            keys = keys.sort();                                                                                            // 76
          _.each(keys, function (k) {                                                                                      // 77
            v = str(k, value, singleIndent, innerIndent, canonical);                                                       // 78
            if (v) {                                                                                                       // 79
              partial.push(quote(k) + (innerIndent ? ': ' : ':') + v);                                                     // 80
            }                                                                                                              // 81
          });                                                                                                              // 82
          // 83
          // 84
          // Join all of the member texts together, separated with commas,                                                 // 85
          // and wrap them in braces.                                                                                      // 86
          // 87
          if (partial.length === 0) {                                                                                      // 88
            v = '{}';                                                                                                      // 89
          } else if (innerIndent) {                                                                                        // 90
            v = '{\n' + innerIndent + partial.join(',\n' + innerIndent) + '\n' + outerIndent + '}';                        // 91
          } else {                                                                                                         // 92
            v = '{' + partial.join(',') + '}';                                                                             // 93
          }                                                                                                                // 94
          return v;                                                                                                        // 95
      }                                                                                                                  // 96
    }                                                                                                                    // 97
    // 98
    // If the JSON object does not yet have a stringify method, give it one.                                             // 99
    // 100
    EJSON._canonicalStringify = function (value, options) {                                                              // 101
      // Make a fake root object containing our value under the key of ''.                                               // 102
      // Return the result of stringifying the value.                                                                    // 103
      options = _.extend({                                                                                               // 104
        indent: "",                                                                                                      // 105
        canonical: false                                                                                                 // 106
      }, options);                                                                                                       // 107
      if (options.indent === true) {                                                                                     // 108
        options.indent = "  ";                                                                                           // 109
      } else if (typeof options.indent === 'number') {                                                                   // 110
        var newIndent = "";                                                                                              // 111
        for (var i = 0; i < options.indent; i++) {                                                                       // 112
          newIndent += ' ';                                                                                              // 113
        }                                                                                                                // 114
        options.indent = newIndent;                                                                                      // 115
      }                                                                                                                  // 116
      return str('', { '': value }, options.indent, "", options.canonical);                                                // 117
    };                                                                                                                   // 118
    // 119
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }).call(this);


  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols)
      (s in pkg) || (pkg[s] = symbols[s]);
  })(Package.ejson = {}, {
    EJSON: EJSON,
    EJSONTest: EJSONTest
  });

})();
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var Buffer = Package.modules.Buffer;
  var process = Package.modules.process;
  var _ = Package.underscore._;
  var EJSON = Package.ejson.EJSON;

  /* Package-scope variables */
  var check, Match;

  var require = meteorInstall({
    "node_modules": {
      "meteor": {
        "check": {
          "match.js": ["./isPlainObject.js", function (require, exports) {

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                   //
            // packages/check/match.js                                                                                           //
            //                                                                                                                   //
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // XXX docs                                                                                                          // 1
            // 2
            // Things we explicitly do NOT support:                                                                              // 3
            //    - heterogenous arrays                                                                                          // 4
            // 5
            var currentArgumentChecker = new Meteor.EnvironmentVariable;                                                         // 6
            var isPlainObject = require("./isPlainObject.js").isPlainObject;                                                     // 7
            // 8
            /**                                                                                                                  // 9
             * @summary Check that a value matches a [pattern](#matchpatterns).                                                  // 10
             * If the value does not match the pattern, throw a `Match.Error`.                                                   // 11
             *                                                                                                                   // 12
             * Particularly useful to assert that arguments to a function have the right                                         // 13
             * types and structure.                                                                                              // 14
             * @locus Anywhere                                                                                                   // 15
             * @param {Any} value The value to check                                                                             // 16
             * @param {MatchPattern} pattern The pattern to match                                                                // 17
             * `value` against                                                                                                   // 18
             */                                                                                                                  // 19
            var check = exports.check = function (value, pattern) {                                                              // 20
              // Record that check got called, if somebody cared.                                                                // 21
              //                                                                                                                 // 22
              // We use getOrNullIfOutsideFiber so that it's OK to call check()                                                  // 23
              // from non-Fiber server contexts; the downside is that if you forget to                                           // 24
              // bindEnvironment on some random callback in your method/publisher,                                               // 25
              // it might not find the argumentChecker and you'll get an error about                                             // 26
              // not checking an argument that it looks like you're checking (instead                                            // 27
              // of just getting a "Node code must run in a Fiber" error).                                                       // 28
              var argChecker = currentArgumentChecker.getOrNullIfOutsideFiber();                                                 // 29
              if (argChecker)                                                                                                    // 30
                argChecker.checking(value);                                                                                      // 31
              var result = testSubtree(value, pattern);                                                                          // 32
              if (result) {                                                                                                      // 33
                var err = new Match.Error(result.message);                                                                       // 34
                if (result.path) {                                                                                               // 35
                  err.message += " in field " + result.path;                                                                     // 36
                  err.path = result.path;                                                                                        // 37
                }                                                                                                                // 38
                throw err;                                                                                                       // 39
              }                                                                                                                  // 40
            };                                                                                                                   // 41
            // 42
            /**                                                                                                                  // 43
             * @namespace Match                                                                                                  // 44
             * @summary The namespace for all Match types and methods.                                                           // 45
             */                                                                                                                  // 46
            var Match = exports.Match = {                                                                                        // 47
              Optional: function (pattern) {                                                                                     // 48
                return new Optional(pattern);                                                                                    // 49
              },                                                                                                                 // 50
              Maybe: function (pattern) {                                                                                        // 51
                return new Maybe(pattern);                                                                                       // 52
              },                                                                                                                 // 53
              OneOf: function (/*arguments*/) {                                                                                  // 54
                return new OneOf(_.toArray(arguments));                                                                          // 55
              },                                                                                                                 // 56
              Any: ['__any__'],                                                                                                  // 57
              Where: function (condition) {                                                                                      // 58
                return new Where(condition);                                                                                     // 59
              },                                                                                                                 // 60
              ObjectIncluding: function (pattern) {                                                                              // 61
                return new ObjectIncluding(pattern);                                                                             // 62
              },                                                                                                                 // 63
              ObjectWithValues: function (pattern) {                                                                             // 64
                return new ObjectWithValues(pattern);                                                                            // 65
              },                                                                                                                 // 66
              // Matches only signed 32-bit integers                                                                             // 67
              Integer: ['__integer__'],                                                                                          // 68
              // 69
              // XXX matchers should know how to describe themselves for errors                                                  // 70
              Error: Meteor.makeErrorType("Match.Error", function (msg) {                                                        // 71
                this.message = "Match error: " + msg;                                                                            // 72
                // The path of the value that failed to match. Initially empty, this gets                                        // 73
                // populated by catching and rethrowing the exception as it goes back up the                                     // 74
                // stack.                                                                                                        // 75
                // E.g.: "vals[3].entity.created"                                                                                // 76
                this.path = "";                                                                                                  // 77
                // If this gets sent over DDP, don't give full internal details but at least                                     // 78
                // provide something better than 500 Internal server error.                                                      // 79
                this.sanitizedError = new Meteor.Error(400, "Match failed");                                                     // 80
              }),                                                                                                                // 81
              // 82
              // Tests to see if value matches pattern. Unlike check, it merely returns true                                     // 83
              // or false (unless an error other than Match.Error was thrown). It does not                                       // 84
              // interact with _failIfArgumentsAreNotAllChecked.                                                                 // 85
              // XXX maybe also implement a Match.match which returns more information about                                     // 86
              //     failures but without using exception handling or doing what check()                                         // 87
              //     does with _failIfArgumentsAreNotAllChecked and Meteor.Error conversion                                      // 88
              // 89
              /**                                                                                                                // 90
               * @summary Returns true if the value matches the pattern.                                                         // 91
               * @locus Anywhere                                                                                                 // 92
               * @param {Any} value The value to check                                                                           // 93
               * @param {MatchPattern} pattern The pattern to match `value` against                                              // 94
               */                                                                                                                // 95
              test: function (value, pattern) {                                                                                  // 96
                return !testSubtree(value, pattern);                                                                             // 97
              },                                                                                                                 // 98
              // 99
              // Runs `f.apply(context, args)`. If check() is not called on every element of                                     // 100
              // `args` (either directly or in the first level of an array), throws an error                                     // 101
              // (using `description` in the message).                                                                           // 102
              //                                                                                                                 // 103
              _failIfArgumentsAreNotAllChecked: function (f, context, args, description) {                                       // 104
                var argChecker = new ArgumentChecker(args, description);                                                         // 105
                var result = currentArgumentChecker.withValue(argChecker, function () {                                          // 106
                  return f.apply(context, args);                                                                                 // 107
                });                                                                                                              // 108
                // If f didn't itself throw, make sure it checked all of its arguments.                                          // 109
                argChecker.throwUnlessAllArgumentsHaveBeenChecked();                                                             // 110
                return result;                                                                                                   // 111
              }                                                                                                                  // 112
            };                                                                                                                   // 113
            // 114
            var Optional = function (pattern) {                                                                                  // 115
              this.pattern = pattern;                                                                                            // 116
            };                                                                                                                   // 117
            // 118
            var Maybe = function (pattern) {                                                                                     // 119
              this.pattern = pattern;                                                                                            // 120
            };                                                                                                                   // 121
            // 122
            var OneOf = function (choices) {                                                                                     // 123
              if (_.isEmpty(choices))                                                                                            // 124
                throw new Error("Must provide at least one choice to Match.OneOf");                                              // 125
              this.choices = choices;                                                                                            // 126
            };                                                                                                                   // 127
            // 128
            var Where = function (condition) {                                                                                   // 129
              this.condition = condition;                                                                                        // 130
            };                                                                                                                   // 131
            // 132
            var ObjectIncluding = function (pattern) {                                                                           // 133
              this.pattern = pattern;                                                                                            // 134
            };                                                                                                                   // 135
            // 136
            var ObjectWithValues = function (pattern) {                                                                          // 137
              this.pattern = pattern;                                                                                            // 138
            };                                                                                                                   // 139
            // 140
            var stringForErrorMessage = function (value, options) {                                                              // 141
              options = options || {};                                                                                           // 142
              // 143
              if (value === null) return "null";                                                                               // 144
              // 145
              if (options.onlyShowType) {                                                                                      // 146
                return typeof value;                                                                                             // 147
              }                                                                                                                  // 148
              // 149
              // Your average non-object things.  Saves from doing the try/catch below for.                                      // 150
              if (typeof value !== "object") {                                                                                 // 151
                return EJSON.stringify(value)                                                                                    // 152
              }                                                                                                                  // 153
              // 154
              try {                                                                                                              // 155
                // Find objects with circular references since EJSON doesn't support them yet (Issue #4778 + Unaccepted PR)      // 156
                // If the native stringify is going to choke, EJSON.stringify is going to choke too.                             // 157
                JSON.stringify(value);                                                                                           // 158
              } catch (stringifyError) {                                                                                         // 159
                if (stringifyError.name === "TypeError") {                                                                     // 160
                  return typeof value;                                                                                           // 161
                }                                                                                                                // 162
              }                                                                                                                  // 163
              // 164
              return EJSON.stringify(value);                                                                                     // 165
            };                                                                                                                   // 166
            // 167
            var typeofChecks = [                                                                                                 // 168
              [String, "string"],                                                                                                // 169
              [Number, "number"],                                                                                                // 170
              [Boolean, "boolean"],                                                                                              // 171
              // While we don't allow undefined/function in EJSON, this is good for optional                                     // 172
              // arguments with OneOf.                                                                                           // 173
              [Function, "function"],                                                                                            // 174
              [undefined, "undefined"]                                                                                           // 175
            ];                                                                                                                   // 176
            // 177
            // Return `false` if it matches. Otherwise, return an object with a `message` and a `path` field.                    // 178
            var testSubtree = function (value, pattern) {                                                                        // 179
              // Match anything!                                                                                                 // 180
              if (pattern === Match.Any)                                                                                         // 181
                return false;                                                                                                    // 182
              // 183
              // Basic atomic types.                                                                                             // 184
              // Do not match boxed objects (e.g. String, Boolean)                                                               // 185
              for (var i = 0; i < typeofChecks.length; ++i) {                                                                    // 186
                if (pattern === typeofChecks[i][0]) {                                                                            // 187
                  if (typeof value === typeofChecks[i][1])                                                                       // 188
                    return false;                                                                                                // 189
                  return {                                                                                                       // 190
                    message: "Expected " + typeofChecks[i][1] + ", got " + stringForErrorMessage(value, { onlyShowType: true }),
                    path: ""                                                                                                     // 192
                  };                                                                                                             // 193
                }                                                                                                                // 194
              }                                                                                                                  // 195
              // 196
              if (pattern === null) {                                                                                            // 197
                if (value === null) {                                                                                            // 198
                  return false;                                                                                                  // 199
                }                                                                                                                // 200
                return {                                                                                                         // 201
                  message: "Expected null, got " + stringForErrorMessage(value),                                                 // 202
                  path: ""                                                                                                       // 203
                };                                                                                                               // 204
              }                                                                                                                  // 205
              // 206
              // Strings, numbers, and booleans match literally. Goes well with Match.OneOf.                                     // 207
              if (typeof pattern === "string" || typeof pattern === "number" || typeof pattern === "boolean") {                  // 208
                if (value === pattern)                                                                                           // 209
                  return false;                                                                                                  // 210
                return {                                                                                                         // 211
                  message: "Expected " + pattern + ", got " + stringForErrorMessage(value),                                      // 212
                  path: ""                                                                                                       // 213
                };                                                                                                               // 214
              }                                                                                                                  // 215
              // 216
              // Match.Integer is special type encoded with array                                                                // 217
              if (pattern === Match.Integer) {                                                                                   // 218
                // There is no consistent and reliable way to check if variable is a 64-bit                                      // 219
                // integer. One of the popular solutions is to get reminder of division by 1                                     // 220
                // but this method fails on really large floats with big precision.                                              // 221
                // E.g.: 1.348192308491824e+23 % 1 === 0 in V8                                                                   // 222
                // Bitwise operators work consistantly but always cast variable to 32-bit                                        // 223
                // signed integer according to JavaScript specs.                                                                 // 224
                if (typeof value === "number" && (value | 0) === value)                                                          // 225
                  return false;                                                                                                  // 226
                return {                                                                                                         // 227
                  message: "Expected Integer, got " + stringForErrorMessage(value),                                              // 228
                  path: ""                                                                                                       // 229
                };                                                                                                               // 230
              }                                                                                                                  // 231
              // 232
              // "Object" is shorthand for Match.ObjectIncluding({});                                                            // 233
              if (pattern === Object)                                                                                            // 234
                pattern = Match.ObjectIncluding({});                                                                             // 235
              // 236
              // Array (checked AFTER Any, which is implemented as an Array).                                                    // 237
              if (pattern instanceof Array) {                                                                                    // 238
                if (pattern.length !== 1) {                                                                                      // 239
                  return {                                                                                                       // 240
                    message: "Bad pattern: arrays must have one type element" + stringForErrorMessage(pattern),                  // 241
                    path: ""                                                                                                     // 242
                  };                                                                                                             // 243
                }                                                                                                                // 244
                if (!_.isArray(value) && !_.isArguments(value)) {                                                                // 245
                  return {                                                                                                       // 246
                    message: "Expected array, got " + stringForErrorMessage(value),                                              // 247
                    path: ""                                                                                                     // 248
                  };                                                                                                             // 249
                }                                                                                                                // 250
                // 251
                for (var i = 0, length = value.length; i < length; i++) {                                                        // 252
                  var result = testSubtree(value[i], pattern[0]);                                                                // 253
                  if (result) {                                                                                                  // 254
                    result.path = _prependPath(i, result.path);                                                                  // 255
                    return result;                                                                                               // 256
                  }                                                                                                              // 257
                }                                                                                                                // 258
                return false;                                                                                                    // 259
              }                                                                                                                  // 260
              // 261
              // Arbitrary validation checks. The condition can return false or throw a                                          // 262
              // Match.Error (ie, it can internally use check()) to fail.                                                        // 263
              if (pattern instanceof Where) {                                                                                    // 264
                var result;                                                                                                      // 265
                try {                                                                                                            // 266
                  result = pattern.condition(value);                                                                             // 267
                } catch (err) {                                                                                                  // 268
                  if (!(err instanceof Match.Error))                                                                             // 269
                    throw err;                                                                                                   // 270
                  return {                                                                                                       // 271
                    message: err.message,                                                                                        // 272
                    path: err.path                                                                                               // 273
                  };                                                                                                             // 274
                }                                                                                                                // 275
                if (result)                                                                                                      // 276
                  return false;                                                                                                  // 277
                // XXX this error is terrible                                                                                    // 278
                return {                                                                                                         // 279
                  message: "Failed Match.Where validation",                                                                      // 280
                  path: ""                                                                                                       // 281
                };                                                                                                               // 282
              }                                                                                                                  // 283
              // 284
              // 285
              if (pattern instanceof Maybe) {                                                                                    // 286
                pattern = Match.OneOf(undefined, null, pattern.pattern);                                                         // 287
              }                                                                                                                  // 288
              else if (pattern instanceof Optional) {                                                                            // 289
                pattern = Match.OneOf(undefined, pattern.pattern);                                                               // 290
              }                                                                                                                  // 291
              // 292
              if (pattern instanceof OneOf) {                                                                                    // 293
                for (var i = 0; i < pattern.choices.length; ++i) {                                                               // 294
                  var result = testSubtree(value, pattern.choices[i]);                                                           // 295
                  if (!result) {                                                                                                 // 296
                    // No error? Yay, return.                                                                                    // 297
                    return false;                                                                                                // 298
                  }                                                                                                              // 299
                  // Match errors just mean try another choice.                                                                  // 300
                }                                                                                                                // 301
                // XXX this error is terrible                                                                                    // 302
                return {                                                                                                         // 303
                  message: "Failed Match.OneOf, Match.Maybe or Match.Optional validation",                                       // 304
                  path: ""                                                                                                       // 305
                };                                                                                                               // 306
              }                                                                                                                  // 307
              // 308
              // A function that isn't something we special-case is assumed to be a                                              // 309
              // constructor.                                                                                                    // 310
              if (pattern instanceof Function) {                                                                                 // 311
                if (value instanceof pattern)                                                                                    // 312
                  return false;                                                                                                  // 313
                return {                                                                                                         // 314
                  message: "Expected " + (pattern.name || "particular constructor"),                                              // 315
                  path: ""                                                                                                       // 316
                };                                                                                                               // 317
              }                                                                                                                  // 318
              // 319
              var unknownKeysAllowed = false;                                                                                    // 320
              var unknownKeyPattern;                                                                                             // 321
              if (pattern instanceof ObjectIncluding) {                                                                          // 322
                unknownKeysAllowed = true;                                                                                       // 323
                pattern = pattern.pattern;                                                                                       // 324
              }                                                                                                                  // 325
              if (pattern instanceof ObjectWithValues) {                                                                         // 326
                unknownKeysAllowed = true;                                                                                       // 327
                unknownKeyPattern = [pattern.pattern];                                                                           // 328
                pattern = {};  // no required keys                                                                               // 329
              }                                                                                                                  // 330
              // 331
              if (typeof pattern !== "object") {                                                                                 // 332
                return {                                                                                                         // 333
                  message: "Bad pattern: unknown pattern type",                                                                  // 334
                  path: ""                                                                                                       // 335
                };                                                                                                               // 336
              }                                                                                                                  // 337
              // 338
              // An object, with required and optional keys. Note that this does NOT do                                          // 339
              // structural matches against objects of special types that happen to match                                        // 340
              // the pattern: this really needs to be a plain old {Object}!                                                      // 341
              if (typeof value !== 'object') {                                                                                   // 342
                return {                                                                                                         // 343
                  message: "Expected object, got " + typeof value,                                                               // 344
                  path: ""                                                                                                       // 345
                };                                                                                                               // 346
              }                                                                                                                  // 347
              if (value === null) {                                                                                              // 348
                return {                                                                                                         // 349
                  message: "Expected object, got null",                                                                          // 350
                  path: ""                                                                                                       // 351
                };                                                                                                               // 352
              }                                                                                                                  // 353
              if (!isPlainObject(value)) {                                                                                      // 354
                return {                                                                                                         // 355
                  message: "Expected plain object",                                                                              // 356
                  path: ""                                                                                                       // 357
                };                                                                                                               // 358
              }                                                                                                                  // 359
              // 360
              var requiredPatterns = {};                                                                                         // 361
              var optionalPatterns = {};                                                                                         // 362
              _.each(pattern, function (subPattern, key) {                                                                       // 363
                if (subPattern instanceof Optional || subPattern instanceof Maybe)                                               // 364
                  optionalPatterns[key] = subPattern.pattern;                                                                    // 365
                else                                                                                                             // 366
                  requiredPatterns[key] = subPattern;                                                                            // 367
              });                                                                                                                // 368
              // 369
              //XXX: replace with underscore's _.allKeys if Meteor updates underscore to 1.8+ (or lodash)                        // 370
              var allKeys = function (obj) {                                                                                       // 371
                var keys = [];                                                                                                   // 372
                if (_.isObject(obj)) {                                                                                            // 373
                  for (var key in obj) keys.push(key);                                                                           // 374
                }                                                                                                                // 375
                return keys;                                                                                                     // 376
              }                                                                                                                  // 377
              // 378
              for (var keys = allKeys(value), i = 0, length = keys.length; i < length; i++) {                                    // 379
                var key = keys[i];                                                                                               // 380
                var subValue = value[key];                                                                                       // 381
                if (_.has(requiredPatterns, key)) {                                                                              // 382
                  var result = testSubtree(subValue, requiredPatterns[key]);                                                     // 383
                  if (result) {                                                                                                  // 384
                    result.path = _prependPath(key, result.path);                                                                // 385
                    return result;                                                                                               // 386
                  }                                                                                                              // 387
                  delete requiredPatterns[key];                                                                                  // 388
                } else if (_.has(optionalPatterns, key)) {                                                                       // 389
                  var result = testSubtree(subValue, optionalPatterns[key]);                                                     // 390
                  if (result) {                                                                                                  // 391
                    result.path = _prependPath(key, result.path);                                                                // 392
                    return result;                                                                                               // 393
                  }                                                                                                              // 394
                } else {                                                                                                         // 395
                  if (!unknownKeysAllowed) {                                                                                     // 396
                    return {                                                                                                     // 397
                      message: "Unknown key",                                                                                    // 398
                      path: key                                                                                                  // 399
                    };                                                                                                           // 400
                  }                                                                                                              // 401
                  if (unknownKeyPattern) {                                                                                       // 402
                    var result = testSubtree(subValue, unknownKeyPattern[0]);                                                    // 403
                    if (result) {                                                                                                // 404
                      result.path = _prependPath(key, result.path);                                                              // 405
                      return result;                                                                                             // 406
                    }                                                                                                            // 407
                  }                                                                                                              // 408
                }                                                                                                                // 409
              }                                                                                                                  // 410
              // 411
              var keys = _.keys(requiredPatterns);                                                                               // 412
              if (keys.length) {                                                                                                 // 413
                return {                                                                                                         // 414
                  message: "Missing key '" + keys[0] + "'",                                                                      // 415
                  path: ""                                                                                                       // 416
                };                                                                                                               // 417
              }                                                                                                                  // 418
            };                                                                                                                   // 419
            // 420
            var ArgumentChecker = function (args, description) {                                                                 // 421
              var self = this;                                                                                                   // 422
              // Make a SHALLOW copy of the arguments. (We'll be doing identity checks                                           // 423
              // against its contents.)                                                                                          // 424
              self.args = _.clone(args);                                                                                         // 425
              // Since the common case will be to check arguments in order, and we splice                                        // 426
              // out arguments when we check them, make it so we splice out from the end                                         // 427
              // rather than the beginning.                                                                                      // 428
              self.args.reverse();                                                                                               // 429
              self.description = description;                                                                                    // 430
            };                                                                                                                   // 431
            // 432
            _.extend(ArgumentChecker.prototype, {                                                                                // 433
              checking: function (value) {                                                                                       // 434
                var self = this;                                                                                                 // 435
                if (self._checkingOneValue(value))                                                                               // 436
                  return;                                                                                                        // 437
                // Allow check(arguments, [String]) or check(arguments.slice(1), [String])                                       // 438
                // or check([foo, bar], [String]) to count... but only if value wasn't                                           // 439
                // itself an argument.                                                                                           // 440
                if (_.isArray(value) || _.isArguments(value)) {                                                                  // 441
                  _.each(value, _.bind(self._checkingOneValue, self));                                                           // 442
                }                                                                                                                // 443
              },                                                                                                                 // 444
              _checkingOneValue: function (value) {                                                                              // 445
                var self = this;                                                                                                 // 446
                for (var i = 0; i < self.args.length; ++i) {                                                                     // 447
                  // Is this value one of the arguments? (This can have a false positive if                                      // 448
                  // the argument is an interned primitive, but it's still a good enough                                         // 449
                  // check.)                                                                                                     // 450
                  // (NaN is not === to itself, so we have to check specially.)                                                  // 451
                  if (value === self.args[i] || (_.isNaN(value) && _.isNaN(self.args[i]))) {                                     // 452
                    self.args.splice(i, 1);                                                                                      // 453
                    return true;                                                                                                 // 454
                  }                                                                                                              // 455
                }                                                                                                                // 456
                return false;                                                                                                    // 457
              },                                                                                                                 // 458
              throwUnlessAllArgumentsHaveBeenChecked: function () {                                                              // 459
                var self = this;                                                                                                 // 460
                if (!_.isEmpty(self.args))                                                                                       // 461
                  throw new Error("Did not check() all arguments during " +                                                      // 462
                    self.description);                                                                             // 463
              }                                                                                                                  // 464
            });                                                                                                                  // 465
            // 466
            var _jsKeywords = ["do", "if", "in", "for", "let", "new", "try", "var", "case",                                      // 467
              "else", "enum", "eval", "false", "null", "this", "true", "void", "with",                                           // 468
              "break", "catch", "class", "const", "super", "throw", "while", "yield",                                            // 469
              "delete", "export", "import", "public", "return", "static", "switch",                                              // 470
              "typeof", "default", "extends", "finally", "package", "private", "continue",                                       // 471
              "debugger", "function", "arguments", "interface", "protected", "implements",                                       // 472
              "instanceof"];                                                                                                     // 473
            // 474
            // Assumes the base of path is already escaped properly                                                              // 475
            // returns key + base                                                                                                // 476
            var _prependPath = function (key, base) {                                                                            // 477
              if ((typeof key) === "number" || key.match(/^[0-9]+$/))                                                            // 478
                key = "[" + key + "]";                                                                                           // 479
              else if (!key.match(/^[a-z_$][0-9a-z_$]*$/i) || _.contains(_jsKeywords, key))                                      // 480
                key = JSON.stringify([key]);                                                                                     // 481
              // 482
              if (base && base[0] !== "[")                                                                                       // 483
                return key + '.' + base;                                                                                         // 484
              return key + base;                                                                                                 // 485
            };                                                                                                                   // 486
            // 487
            // 488
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

          }], "isPlainObject.js": function (require, exports) {

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                   //
            // packages/check/isPlainObject.js                                                                                   //
            //                                                                                                                   //
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // Copy of jQuery.isPlainObject for the server side from jQuery v1.11.2.                                             // 1
            // 2
            var class2type = {};                                                                                                 // 3
            // 4
            var toString = class2type.toString;                                                                                  // 5
            // 6
            var hasOwn = class2type.hasOwnProperty;                                                                              // 7
            // 8
            var support = {};                                                                                                    // 9
            // 10
            // Populate the class2type map                                                                                       // 11
            _.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function (name, i) {               // 12
              class2type["[object " + name + "]"] = name.toLowerCase();                                                        // 13
            });                                                                                                                  // 14
            // 15
            function type(obj) {                                                                                               // 16
              if (obj == null) {                                                                                               // 17
                return obj + "";                                                                                                 // 18
              }                                                                                                                  // 19
              return typeof obj === "object" || typeof obj === "function" ?                                                      // 20
                class2type[toString.call(obj)] || "object" :                                                                   // 21
                typeof obj;                                                                                                      // 22
            }                                                                                                                    // 23
            // 24
            function isWindow(obj) {                                                                                           // 25
              /* jshint eqeqeq: false */                                                                                         // 26
              return obj != null && obj == obj.window;                                                                           // 27
            }                                                                                                                    // 28
            // 29
            exports.isPlainObject = function (obj) {                                                                            // 30
              var key;                                                                                                           // 31
              // 32
              // Must be an Object.                                                                                              // 33
              // Because of IE, we also have to check the presence of the constructor property.                                  // 34
              // Make sure that DOM nodes and window objects don't pass through, as well                                         // 35
              if (!obj || type(obj) !== "object" || obj.nodeType || isWindow(obj)) {                                         // 36
                return false;                                                                                                    // 37
              }                                                                                                                  // 38
              // 39
              try {                                                                                                              // 40
                // Not own constructor property must be Object                                                                   // 41
                if (obj.constructor &&                                                                                          // 42
                  !hasOwn.call(obj, "constructor") &&                                                                         // 43
                  !hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {                                                // 44
                  return false;                                                                                                  // 45
                }                                                                                                                // 46
              } catch (e) {                                                                                                    // 47
                // IE8,9 Will throw exceptions on certain host objects #9897                                                     // 48
                return false;                                                                                                    // 49
              }                                                                                                                  // 50
              // 51
              // Support: IE<9                                                                                                   // 52
              // Handle iteration over inherited properties before own properties.                                               // 53
              if (support.ownLast) {                                                                                           // 54
                for (key in obj) {                                                                                             // 55
                  return hasOwn.call(obj, key);                                                                                // 56
                }                                                                                                                // 57
              }                                                                                                                  // 58
              // 59
              // Own properties are enumerated firstly, so to speed up,                                                          // 60
              // if last one is own, then all properties are own.                                                                // 61
              for (key in obj) { }                                                                                              // 62
              // 63
              return key === undefined || hasOwn.call(obj, key);                                                               // 64
            };                                                                                                                   // 65
            // 66
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

          }
        }
      }
    }
  }, { "extensions": [".js", ".json"] });
  var exports = require("./node_modules/meteor/check/match.js");

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols)
      (s in pkg) || (pkg[s] = symbols[s]);
  })(Package.check = exports, {
    check: check,
    Match: Match
  });

})();
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var _ = Package.underscore._;
  var meteorInstall = Package.modules.meteorInstall;
  var Buffer = Package.modules.Buffer;
  var process = Package.modules.process;
  var Symbol = Package['ecmascript-runtime'].Symbol;
  var Map = Package['ecmascript-runtime'].Map;
  var Set = Package['ecmascript-runtime'].Set;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var Random;

  var require = meteorInstall({
    "node_modules": {
      "meteor": {
        "random": {
          "random.js": function (require) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/random/random.js                                                                                           //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // We use cryptographically strong PRNGs (crypto.getRandomBytes() on the server,                                       //
            // window.crypto.getRandomValues() in the browser) when available. If these                                            //
            // PRNGs fail, we fall back to the Alea PRNG, which is not cryptographically                                           //
            // strong, and we seed it with various sources such as the date, Math.random,                                          //
            // and window size on the client.  When using crypto.getRandomValues(), our                                            //
            // primitive is hexString(), from which we construct fraction(). When using                                            //
            // window.crypto.getRandomValues() or alea, the primitive is fraction and we use                                       //
            // that to construct hex string.                                                                                       //
            //
            if (Meteor.isServer) var nodeCrypto = Npm.require('crypto');                                                           // 10
            //
            // see http://baagoe.org/en/wiki/Better_random_numbers_for_javascript                                                  //
            // for a full discussion and Alea implementation.                                                                      //
            var Alea = function Alea() {                                                                                           // 15
              function Mash() {                                                                                                    // 16
                var n = 0xefc8249d;                                                                                                // 17
                //
                var mash = function mash(data) {                                                                                   // 19
                  data = data.toString();                                                                                          // 20
                  for (var i = 0; i < data.length; i++) {                                                                          // 21
                    n += data.charCodeAt(i);                                                                                       // 22
                    var h = 0.02519603282416938 * n;                                                                               // 23
                    n = h >>> 0;                                                                                                   // 24
                    h -= n;                                                                                                        // 25
                    h *= n;                                                                                                        // 26
                    n = h >>> 0;                                                                                                   // 27
                    h -= n;                                                                                                        // 28
                    n += h * 0x100000000; // 2^32                                                                                  // 29
                  }                                                                                                                // 30
                  return (n >>> 0) * 2.3283064365386963e-10; // 2^-32                                                              // 31
                };                                                                                                                 // 32
                //
                mash.version = 'Mash 0.9';                                                                                         // 34
                return mash;                                                                                                       // 35
              }                                                                                                                    // 36
              //
              return function (args) {                                                                                             // 38
                var s0 = 0;                                                                                                        // 39
                var s1 = 0;                                                                                                        // 40
                var s2 = 0;                                                                                                        // 41
                var c = 1;                                                                                                         // 42
                //
                if (args.length == 0) {                                                                                            // 44
                  args = [+new Date()];                                                                                            // 45
                }                                                                                                                  // 46
                var mash = Mash();                                                                                                 // 47
                s0 = mash(' ');                                                                                                    // 48
                s1 = mash(' ');                                                                                                    // 49
                s2 = mash(' ');                                                                                                    // 50
                //
                for (var i = 0; i < args.length; i++) {                                                                            // 52
                  s0 -= mash(args[i]);                                                                                             // 53
                  if (s0 < 0) {                                                                                                    // 54
                    s0 += 1;                                                                                                       // 55
                  }                                                                                                                // 56
                  s1 -= mash(args[i]);                                                                                             // 57
                  if (s1 < 0) {                                                                                                    // 58
                    s1 += 1;                                                                                                       // 59
                  }                                                                                                                // 60
                  s2 -= mash(args[i]);                                                                                             // 61
                  if (s2 < 0) {                                                                                                    // 62
                    s2 += 1;                                                                                                       // 63
                  }                                                                                                                // 64
                }                                                                                                                  // 65
                mash = null;                                                                                                       // 66
                //
                var random = function random() {                                                                                   // 68
                  var t = 2091639 * s0 + c * 2.3283064365386963e-10; // 2^-32                                                      // 69
                  s0 = s1;                                                                                                         // 70
                  s1 = s2;                                                                                                         // 71
                  return s2 = t - (c = t | 0);                                                                                     // 72
                };                                                                                                                 // 73
                random.uint32 = function () {                                                                                      // 74
                  return random() * 0x100000000; // 2^32                                                                           // 75
                };                                                                                                                 // 76
                random.fract53 = function () {                                                                                     // 77
                  return random() + (random() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53                                   // 78
                };                                                                                                                 // 80
                random.version = 'Alea 0.9';                                                                                       // 81
                random.args = args;                                                                                                // 82
                return random;                                                                                                     // 83
              }(Array.prototype.slice.call(arguments));                                                                            // 85
            };                                                                                                                     // 86
            //
            var UNMISTAKABLE_CHARS = "23456789ABCDEFGHJKLMNPQRSTWXYZabcdefghijkmnopqrstuvwxyz";                                    // 88
            var BASE64_CHARS = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ" + "0123456789-_";                            // 89
            //
            // `type` is one of `RandomGenerator.Type` as defined below.                                                           //
            //                                                                                                                     //
            // options:                                                                                                            //
            // - seeds: (required, only for RandomGenerator.Type.ALEA) an array                                                    //
            //   whose items will be `toString`ed and used as the seed to the Alea                                                 //
            //   algorithm                                                                                                         //
            var RandomGenerator = function RandomGenerator(type, options) {                                                        // 98
              var self = this;                                                                                                     // 99
              self.type = type;                                                                                                    // 100
              //
              if (!RandomGenerator.Type[type]) {                                                                                   // 102
                throw new Error("Unknown random generator type: " + type);                                                         // 103
              }                                                                                                                    // 104
              //
              if (type === RandomGenerator.Type.ALEA) {                                                                            // 106
                if (!options.seeds) {                                                                                              // 107
                  throw new Error("No seeds were provided for Alea PRNG");                                                         // 108
                }                                                                                                                  // 109
                self.alea = Alea.apply(null, options.seeds);                                                                       // 110
              }                                                                                                                    // 111
            };                                                                                                                     // 112
            //
            // Types of PRNGs supported by the `RandomGenerator` class                                                             //
            RandomGenerator.Type = {                                                                                               // 115
              // Use Node's built-in `crypto.getRandomBytes` (cryptographically                                                    //
              // secure but not seedable, runs only on the server). Reverts to                                                     //
              // `crypto.getPseudoRandomBytes` in the extremely uncommon case that                                                 //
              // there isn't enough entropy yet                                                                                    //
              NODE_CRYPTO: "NODE_CRYPTO",                                                                                          // 120
              //
              // Use non-IE browser's built-in `window.crypto.getRandomValues`                                                     //
              // (cryptographically secure but not seedable, runs only in the                                                      //
              // browser).                                                                                                         //
              BROWSER_CRYPTO: "BROWSER_CRYPTO",                                                                                    // 125
              //
              // Use the *fast*, seedaable and not cryptographically secure                                                        //
              // Alea algorithm                                                                                                    //
              ALEA: "ALEA"                                                                                                         // 129
            };                                                                                                                     // 115
            //
            /**                                                                                                                    //
             * @name Random.fraction                                                                                               //
             * @summary Return a number between 0 and 1, like `Math.random`.                                                       //
             * @locus Anywhere                                                                                                     //
             */                                                                                                                    //
            RandomGenerator.prototype.fraction = function () {                                                                     // 137
              var self = this;                                                                                                     // 138
              if (self.type === RandomGenerator.Type.ALEA) {                                                                       // 139
                return self.alea();                                                                                                // 140
              } else if (self.type === RandomGenerator.Type.NODE_CRYPTO) {                                                         // 141
                var numerator = parseInt(self.hexString(8), 16);                                                                   // 142
                return numerator * 2.3283064365386963e-10; // 2^-32                                                                // 143
              } else if (self.type === RandomGenerator.Type.BROWSER_CRYPTO) {                                                      // 144
                var array = new Uint32Array(1);                                                                                  // 145
                window.crypto.getRandomValues(array);                                                                            // 146
                return array[0] * 2.3283064365386963e-10; // 2^-32                                                               // 147
              } else {                                                                                                           // 148
                throw new Error('Unknown random generator type: ' + self.type);                                                // 149
              }                                                                                                                // 150
            };                                                                                                                     // 151
            //
            /**                                                                                                                    //
             * @name Random.hexString                                                                                              //
             * @summary Return a random string of `n` hexadecimal digits.                                                          //
             * @locus Anywhere                                                                                                     //
             * @param {Number} n Length of the string                                                                              //
             */                                                                                                                    //
            RandomGenerator.prototype.hexString = function (digits) {                                                              // 159
              var self = this;                                                                                                     // 160
              if (self.type === RandomGenerator.Type.NODE_CRYPTO) {                                                                // 161
                var numBytes = Math.ceil(digits / 2);                                                                              // 162
                var bytes;                                                                                                         // 163
                // Try to get cryptographically strong randomness. Fall back to                                                    //
                // non-cryptographically strong if not available.                                                                  //
                try {                                                                                                              // 166
                  bytes = nodeCrypto.randomBytes(numBytes);                                                                        // 167
                } catch (e) {                                                                                                      // 168
                  // XXX should re-throw any error except insufficient entropy                                                     //
                  bytes = nodeCrypto.pseudoRandomBytes(numBytes);                                                                  // 170
                }                                                                                                                  // 171
                var result = bytes.toString("hex");                                                                                // 172
                // If the number of digits is odd, we'll have generated an extra 4 bits                                            //
                // of randomness, so we need to trim the last digit.                                                               //
                return result.substring(0, digits);                                                                                // 175
              } else {                                                                                                             // 176
                return this._randomString(digits, "0123456789abcdef");                                                             // 177
              }                                                                                                                    // 178
            };                                                                                                                     // 179
            //
            RandomGenerator.prototype._randomString = function (charsCount, alphabet) {                                            // 181
              var self = this;                                                                                                     // 183
              var digits = [];                                                                                                     // 184
              for (var i = 0; i < charsCount; i++) {                                                                               // 185
                digits[i] = self.choice(alphabet);                                                                                 // 186
              }                                                                                                                    // 187
              return digits.join("");                                                                                              // 188
            };                                                                                                                     // 189
            //
            /**                                                                                                                    //
             * @name Random.id                                                                                                     //
             * @summary Return a unique identifier, such as `"Jjwjg6gouWLXhMGKW"`, that is                                         //
             * likely to be unique in the whole world.                                                                             //
             * @locus Anywhere                                                                                                     //
             * @param {Number} [n] Optional length of the identifier in characters                                                 //
             *   (defaults to 17)                                                                                                  //
             */                                                                                                                    //
            RandomGenerator.prototype.id = function (charsCount) {                                                                 // 199
              var self = this;                                                                                                     // 200
              // 17 characters is around 96 bits of entropy, which is the amount of                                                //
              // state in the Alea PRNG.                                                                                           //
              if (charsCount === undefined) charsCount = 17;                                                                       // 203
              //
              return self._randomString(charsCount, UNMISTAKABLE_CHARS);                                                           // 206
            };                                                                                                                     // 207
            //
            /**                                                                                                                    //
             * @name Random.secret                                                                                                 //
             * @summary Return a random string of printable characters with 6 bits of                                              //
             * entropy per character. Use `Random.secret` for security-critical secrets                                            //
             * that are intended for machine, rather than human, consumption.                                                      //
             * @locus Anywhere                                                                                                     //
             * @param {Number} [n] Optional length of the secret string (defaults to 43                                            //
             *   characters, or 256 bits of entropy)                                                                               //
             */                                                                                                                    //
            RandomGenerator.prototype.secret = function (charsCount) {                                                             // 218
              var self = this;                                                                                                     // 219
              // Default to 256 bits of entropy, or 43 characters at 6 bits per                                                    //
              // character.                                                                                                        //
              if (charsCount === undefined) charsCount = 43;                                                                       // 222
              return self._randomString(charsCount, BASE64_CHARS);                                                                 // 224
            };                                                                                                                     // 225
            //
            /**                                                                                                                    //
             * @name Random.choice                                                                                                 //
             * @summary Return a random element of the given array or string.                                                      //
             * @locus Anywhere                                                                                                     //
             * @param {Array|String} arrayOrString Array or string to choose from                                                  //
             */                                                                                                                    //
            RandomGenerator.prototype.choice = function (arrayOrString) {                                                          // 233
              var index = Math.floor(this.fraction() * arrayOrString.length);                                                      // 234
              if (typeof arrayOrString === "string") return arrayOrString.substr(index, 1); else return arrayOrString[index];       // 235
            };                                                                                                                     // 239
            //
            // instantiate RNG.  Heuristically collect entropy from various sources when a                                         //
            // cryptographic PRNG isn't available.                                                                                 //
            //
            // client sources                                                                                                      //
            var height = typeof window !== 'undefined' && window.innerHeight || typeof document !== 'undefined' && document.documentElement && document.documentElement.clientHeight || typeof document !== 'undefined' && document.body && document.body.clientHeight || 1;
            //
            var width = typeof window !== 'undefined' && window.innerWidth || typeof document !== 'undefined' && document.documentElement && document.documentElement.clientWidth || typeof document !== 'undefined' && document.body && document.body.clientWidth || 1;
            //
            var agent = typeof navigator !== 'undefined' && navigator.userAgent || "";                                             // 263
            //
            function createAleaGeneratorWithGeneratedSeed() {                                                                      // 265
              return new RandomGenerator(RandomGenerator.Type.ALEA, { seeds: [new Date(), height, width, agent, Math.random()] });
            };                                                                                                                     // 269
            //
            if (Meteor.isServer) {                                                                                                 // 271
              Random = new RandomGenerator(RandomGenerator.Type.NODE_CRYPTO);                                                      // 272
            } else {                                                                                                               // 273
              if (typeof window !== "undefined" && window.crypto && window.crypto.getRandomValues) {                               // 274
                Random = new RandomGenerator(RandomGenerator.Type.BROWSER_CRYPTO);                                                 // 276
              } else {                                                                                                             // 277
                // On IE 10 and below, there's no browser crypto API                                                               //
                // available. Fall back to Alea                                                                                    //
                //                                                                                                                 //
                // XXX looks like at the moment, we use Alea in IE 11 as well,                                                     //
                // which has `window.msCrypto` instead of `window.crypto`.                                                         //
                Random = createAleaGeneratorWithGeneratedSeed();                                                                   // 283
              }                                                                                                                    // 284
            }                                                                                                                      // 285
            //
            // Create a non-cryptographically secure PRNG with a given seed (using                                                 //
            // the Alea algorithm)                                                                                                 //
            Random.createWithSeeds = function () {                                                                                 // 289
              for (var _len = arguments.length, seeds = Array(_len), _key = 0; _key < _len; _key++) {                              // 289
                seeds[_key] = arguments[_key];                                                                                     // 289
              }                                                                                                                    // 289
              //
              if (seeds.length === 0) {                                                                                            // 290
                throw new Error("No seeds were provided");                                                                         // 291
              }                                                                                                                    // 292
              return new RandomGenerator(RandomGenerator.Type.ALEA, { seeds: seeds });                                             // 293
            };                                                                                                                     // 294
            //
            // Used like `Random`, but much faster and not cryptographically                                                       //
            // secure                                                                                                              //
            Random.insecure = createAleaGeneratorWithGeneratedSeed();                                                              // 298
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

          }, "deprecated.js": function () {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/random/deprecated.js                                                                                       //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // Before this package existed, we used to use this Meteor.uuid()                                                      //
            // implementing the RFC 4122 v4 UUID. It is no longer documented                                                       //
            // and will go away.                                                                                                   //
            // XXX COMPAT WITH 0.5.6                                                                                               //
            Meteor.uuid = function () {                                                                                            // 5
              var HEX_DIGITS = "0123456789abcdef";                                                                                 // 6
              var s = [];                                                                                                          // 7
              for (var i = 0; i < 36; i++) {                                                                                       // 8
                s[i] = Random.choice(HEX_DIGITS);                                                                                  // 9
              }                                                                                                                    // 10
              s[14] = "4";                                                                                                         // 11
              s[19] = HEX_DIGITS.substr(parseInt(s[19], 16) & 0x3 | 0x8, 1);                                                       // 12
              s[8] = s[13] = s[18] = s[23] = "-";                                                                                  // 13
              //
              var uuid = s.join("");                                                                                               // 15
              return uuid;                                                                                                         // 16
            };                                                                                                                     // 17
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

          }
        }
      }
    }
  }, { "extensions": [".js", ".json"] });
  require("./node_modules/meteor/random/random.js");
  require("./node_modules/meteor/random/deprecated.js");

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols)
      (s in pkg) || (pkg[s] = symbols[s]);
  })(Package.random = {}, {
    Random: Random
  });

})();
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;

  /* Package-scope variables */
  var Tracker, Deps;

  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                    //
    // packages/tracker/tracker.js                                                                                        //
    //                                                                                                                    //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    /////////////////////////////////////////////////////                                                                 // 1
    // Package docs at http://docs.meteor.com/#tracker //                                                                 // 2
    /////////////////////////////////////////////////////                                                                 // 3
    // 4
    /**                                                                                                                   // 5
     * @namespace Tracker                                                                                                 // 6
     * @summary The namespace for Tracker-related methods.                                                                // 7
     */                                                                                                                   // 8
    Tracker = {};                                                                                                         // 9
    // 10
    // http://docs.meteor.com/#tracker_active                                                                             // 11
    // 12
    /**                                                                                                                   // 13
     * @summary True if there is a current computation, meaning that dependencies on reactive data sources will be tracked and potentially cause the current computation to be rerun.
     * @locus Client                                                                                                      // 15
     * @type {Boolean}                                                                                                    // 16
     */                                                                                                                   // 17
    Tracker.active = false;                                                                                               // 18
    // 19
    // http://docs.meteor.com/#tracker_currentcomputation                                                                 // 20
    // 21
    /**                                                                                                                   // 22
     * @summary The current computation, or `null` if there isn't one.  The current computation is the [`Tracker.Computation`](#tracker_computation) object created by the innermost active call to `Tracker.autorun`, and it's the computation that gains dependencies when reactive data sources are accessed.
     * @locus Client                                                                                                      // 24
     * @type {Tracker.Computation}                                                                                        // 25
     */                                                                                                                   // 26
    Tracker.currentComputation = null;                                                                                    // 27
    // 28
    // References to all computations created within the Tracker by id.                                                   // 29
    // Keeping these references on an underscore property gives more control to                                           // 30
    // tooling and packages extending Tracker without increasing the API surface.                                         // 31
    // These can used to monkey-patch computations, their functions, use                                                  // 32
    // computation ids for tracking, etc.                                                                                 // 33
    Tracker._computations = {};                                                                                           // 34
    // 35
    var setCurrentComputation = function (c) {                                                                            // 36
      Tracker.currentComputation = c;                                                                                     // 37
      Tracker.active = !!c;                                                                                              // 38
    };                                                                                                                    // 39
    // 40
    var _debugFunc = function () {                                                                                        // 41
      // We want this code to work without Meteor, and also without                                                       // 42
      // "console" (which is technically non-standard and may be missing                                                  // 43
      // on some browser we come across, like it was on IE 7).                                                            // 44
      //                                                                                                                  // 45
      // Lazy evaluation because `Meteor` does not exist right away.(??)                                                  // 46
      return (typeof Meteor !== "undefined" ? Meteor._debug :                                                             // 47
        ((typeof console !== "undefined") && console.error ?                                                        // 48
          function () { console.error.apply(console, arguments); } :                                                 // 49
          function () { }));                                                                                          // 50
    };                                                                                                                    // 51
    // 52
    var _maybeSuppressMoreLogs = function (messagesLength) {                                                              // 53
      // Sometimes when running tests, we intentionally suppress logs on expected                                         // 54
      // printed errors. Since the current implementation of _throwOrLog can log                                          // 55
      // multiple separate log messages, suppress all of them if at least one suppress                                    // 56
      // is expected as we still want them to count as one.                                                               // 57
      if (typeof Meteor !== "undefined") {                                                                                // 58
        if (Meteor._suppressed_log_expected()) {                                                                          // 59
          Meteor._suppress_log(messagesLength - 1);                                                                       // 60
        }                                                                                                                 // 61
      }                                                                                                                   // 62
    };                                                                                                                    // 63
    // 64
    var _throwOrLog = function (from, e) {                                                                                // 65
      if (throwFirstError) {                                                                                              // 66
        throw e;                                                                                                          // 67
      } else {                                                                                                            // 68
        var printArgs = ["Exception from Tracker " + from + " function:"];                                                // 69
        if (e.stack && e.message && e.name) {                                                                             // 70
          var idx = e.stack.indexOf(e.message);                                                                           // 71
          if (idx < 0 || idx > e.name.length + 2) { // check for "Error: "                                                // 72
            // message is not part of the stack                                                                           // 73
            var message = e.name + ": " + e.message;                                                                      // 74
            printArgs.push(message);                                                                                      // 75
          }                                                                                                               // 76
        }                                                                                                                 // 77
        printArgs.push(e.stack);                                                                                          // 78
        _maybeSuppressMoreLogs(printArgs.length);                                                                         // 79
        // 80
        for (var i = 0; i < printArgs.length; i++) {                                                                      // 81
          _debugFunc()(printArgs[i]);                                                                                     // 82
        }                                                                                                                 // 83
      }                                                                                                                   // 84
    };                                                                                                                    // 85
    // 86
    // Takes a function `f`, and wraps it in a `Meteor._noYieldsAllowed`                                                  // 87
    // block if we are running on the server. On the client, returns the                                                  // 88
    // original function (since `Meteor._noYieldsAllowed` is a                                                            // 89
    // no-op). This has the benefit of not adding an unnecessary stack                                                    // 90
    // frame on the client.                                                                                               // 91
    var withNoYieldsAllowed = function (f) {                                                                              // 92
      if ((typeof Meteor === 'undefined') || Meteor.isClient) {                                                           // 93
        return f;                                                                                                         // 94
      } else {                                                                                                            // 95
        return function () {                                                                                              // 96
          var args = arguments;                                                                                           // 97
          Meteor._noYieldsAllowed(function () {                                                                           // 98
            f.apply(null, args);                                                                                          // 99
          });                                                                                                             // 100
        };                                                                                                                // 101
      }                                                                                                                   // 102
    };                                                                                                                    // 103
    // 104
    var nextId = 1;                                                                                                       // 105
    // computations whose callbacks we should call at flush time                                                          // 106
    var pendingComputations = [];                                                                                         // 107
    // `true` if a Tracker.flush is scheduled, or if we are in Tracker.flush now                                          // 108
    var willFlush = false;                                                                                                // 109
    // `true` if we are in Tracker.flush now                                                                              // 110
    var inFlush = false;                                                                                                  // 111
    // `true` if we are computing a computation now, either first time                                                    // 112
    // or recompute.  This matches Tracker.active unless we are inside                                                    // 113
    // Tracker.nonreactive, which nullfies currentComputation even though                                                 // 114
    // an enclosing computation may still be running.                                                                     // 115
    var inCompute = false;                                                                                                // 116
    // `true` if the `_throwFirstError` option was passed in to the call                                                  // 117
    // to Tracker.flush that we are in. When set, throw rather than log the                                               // 118
    // first error encountered while flushing. Before throwing the error,                                                 // 119
    // finish flushing (from a finally block), logging any subsequent                                                     // 120
    // errors.                                                                                                            // 121
    var throwFirstError = false;                                                                                          // 122
    // 123
    var afterFlushCallbacks = [];                                                                                         // 124
    // 125
    var requireFlush = function () {                                                                                      // 126
      if (!willFlush) {                                                                                                  // 127
        // We want this code to work without Meteor, see debugFunc above                                                  // 128
        if (typeof Meteor !== "undefined")                                                                                // 129
          Meteor._setImmediate(Tracker._runFlush);                                                                        // 130
        else                                                                                                              // 131
          setTimeout(Tracker._runFlush, 0);                                                                               // 132
        willFlush = true;                                                                                                 // 133
      }                                                                                                                   // 134
    };                                                                                                                    // 135
    // 136
    // Tracker.Computation constructor is visible but private                                                             // 137
    // (throws an error if you try to call it)                                                                            // 138
    var constructingComputation = false;                                                                                  // 139
    // 140
    //                                                                                                                    // 141
    // http://docs.meteor.com/#tracker_computation                                                                        // 142
    // 143
    /**                                                                                                                   // 144
     * @summary A Computation object represents code that is repeatedly rerun                                             // 145
     * in response to                                                                                                     // 146
     * reactive data changes. Computations don't have return values; they just                                            // 147
     * perform actions, such as rerendering a template on the screen. Computations                                        // 148
     * are created using Tracker.autorun. Use stop to prevent further rerunning of a                                      // 149
     * computation.                                                                                                       // 150
     * @instancename computation                                                                                          // 151
     */                                                                                                                   // 152
    Tracker.Computation = function (f, parent, onError) {                                                                 // 153
      if (!constructingComputation)                                                                                      // 154
        throw new Error(                                                                                                  // 155
          "Tracker.Computation constructor is private; use Tracker.autorun");                                             // 156
      constructingComputation = false;                                                                                    // 157
      // 158
      var self = this;                                                                                                    // 159
      // 160
      // http://docs.meteor.com/#computation_stopped                                                                      // 161
      // 162
      /**                                                                                                                 // 163
       * @summary True if this computation has been stopped.                                                              // 164
       * @locus Client                                                                                                    // 165
       * @memberOf Tracker.Computation                                                                                    // 166
       * @instance                                                                                                        // 167
       * @name  stopped                                                                                                   // 168
       */                                                                                                                 // 169
      self.stopped = false;                                                                                               // 170
      // 171
      // http://docs.meteor.com/#computation_invalidated                                                                  // 172
      // 173
      /**                                                                                                                 // 174
       * @summary True if this computation has been invalidated (and not yet rerun), or if it has been stopped.           // 175
       * @locus Client                                                                                                    // 176
       * @memberOf Tracker.Computation                                                                                    // 177
       * @instance                                                                                                        // 178
       * @name  invalidated                                                                                               // 179
       * @type {Boolean}                                                                                                  // 180
       */                                                                                                                 // 181
      self.invalidated = false;                                                                                           // 182
      // 183
      // http://docs.meteor.com/#computation_firstrun                                                                     // 184
      // 185
      /**                                                                                                                 // 186
       * @summary True during the initial run of the computation at the time `Tracker.autorun` is called, and false on subsequent reruns and at other times.
       * @locus Client                                                                                                    // 188
       * @memberOf Tracker.Computation                                                                                    // 189
       * @instance                                                                                                        // 190
       * @name  firstRun                                                                                                  // 191
       * @type {Boolean}                                                                                                  // 192
       */                                                                                                                 // 193
      self.firstRun = true;                                                                                               // 194
      // 195
      self._id = nextId++;                                                                                                // 196
      self._onInvalidateCallbacks = [];                                                                                   // 197
      self._onStopCallbacks = [];                                                                                         // 198
      // the plan is at some point to use the parent relation                                                             // 199
      // to constrain the order that computations are processed                                                           // 200
      self._parent = parent;                                                                                              // 201
      self._func = f;                                                                                                     // 202
      self._onError = onError;                                                                                            // 203
      self._recomputing = false;                                                                                          // 204
      // 205
      // Register the computation within the global Tracker.                                                              // 206
      Tracker._computations[self._id] = self;                                                                             // 207
      // 208
      var errored = true;                                                                                                 // 209
      try {                                                                                                               // 210
        self._compute();                                                                                                  // 211
        errored = false;                                                                                                  // 212
      } finally {                                                                                                         // 213
        self.firstRun = false;                                                                                            // 214
        if (errored)                                                                                                      // 215
          self.stop();                                                                                                    // 216
      }                                                                                                                   // 217
    };                                                                                                                    // 218
    // 219
    // http://docs.meteor.com/#computation_oninvalidate                                                                   // 220
    // 221
    /**                                                                                                                   // 222
     * @summary Registers `callback` to run when this computation is next invalidated, or runs it immediately if the computation is already invalidated.  The callback is run exactly once and not upon future invalidations unless `onInvalidate` is called again after the computation becomes valid again.
     * @locus Client                                                                                                      // 224
     * @param {Function} callback Function to be called on invalidation. Receives one argument, the computation that was invalidated.
     */                                                                                                                   // 226
    Tracker.Computation.prototype.onInvalidate = function (f) {                                                           // 227
      var self = this;                                                                                                    // 228
      // 229
      if (typeof f !== 'function')                                                                                        // 230
        throw new Error("onInvalidate requires a function");                                                              // 231
      // 232
      if (self.invalidated) {                                                                                             // 233
        Tracker.nonreactive(function () {                                                                                 // 234
          withNoYieldsAllowed(f)(self);                                                                                   // 235
        });                                                                                                               // 236
      } else {                                                                                                            // 237
        self._onInvalidateCallbacks.push(f);                                                                              // 238
      }                                                                                                                   // 239
    };                                                                                                                    // 240
    // 241
    /**                                                                                                                   // 242
     * @summary Registers `callback` to run when this computation is stopped, or runs it immediately if the computation is already stopped.  The callback is run after any `onInvalidate` callbacks.
     * @locus Client                                                                                                      // 244
     * @param {Function} callback Function to be called on stop. Receives one argument, the computation that was stopped.
     */                                                                                                                   // 246
    Tracker.Computation.prototype.onStop = function (f) {                                                                 // 247
      var self = this;                                                                                                    // 248
      // 249
      if (typeof f !== 'function')                                                                                        // 250
        throw new Error("onStop requires a function");                                                                    // 251
      // 252
      if (self.stopped) {                                                                                                 // 253
        Tracker.nonreactive(function () {                                                                                 // 254
          withNoYieldsAllowed(f)(self);                                                                                   // 255
        });                                                                                                               // 256
      } else {                                                                                                            // 257
        self._onStopCallbacks.push(f);                                                                                    // 258
      }                                                                                                                   // 259
    };                                                                                                                    // 260
    // 261
    // http://docs.meteor.com/#computation_invalidate                                                                     // 262
    // 263
    /**                                                                                                                   // 264
     * @summary Invalidates this computation so that it will be rerun.                                                    // 265
     * @locus Client                                                                                                      // 266
     */                                                                                                                   // 267
    Tracker.Computation.prototype.invalidate = function () {                                                              // 268
      var self = this;                                                                                                    // 269
      if (!self.invalidated) {                                                                                           // 270
        // if we're currently in _recompute(), don't enqueue                                                              // 271
        // ourselves, since we'll rerun immediately anyway.                                                               // 272
        if (!self._recomputing && !self.stopped) {                                                                      // 273
          requireFlush();                                                                                                 // 274
          pendingComputations.push(this);                                                                                 // 275
        }                                                                                                                 // 276
        // 277
        self.invalidated = true;                                                                                          // 278
        // 279
        // callbacks can't add callbacks, because                                                                         // 280
        // self.invalidated === true.                                                                                     // 281
        for (var i = 0, f; f = self._onInvalidateCallbacks[i]; i++) {                                                      // 282
          Tracker.nonreactive(function () {                                                                               // 283
            withNoYieldsAllowed(f)(self);                                                                                 // 284
          });                                                                                                             // 285
        }                                                                                                                 // 286
        self._onInvalidateCallbacks = [];                                                                                 // 287
      }                                                                                                                   // 288
    };                                                                                                                    // 289
    // 290
    // http://docs.meteor.com/#computation_stop                                                                           // 291
    // 292
    /**                                                                                                                   // 293
     * @summary Prevents this computation from rerunning.                                                                 // 294
     * @locus Client                                                                                                      // 295
     */                                                                                                                   // 296
    Tracker.Computation.prototype.stop = function () {                                                                    // 297
      var self = this;                                                                                                    // 298
      // 299
      if (!self.stopped) {                                                                                               // 300
        self.stopped = true;                                                                                              // 301
        self.invalidate();                                                                                                // 302
        // Unregister from global Tracker.                                                                                // 303
        delete Tracker._computations[self._id];                                                                           // 304
        for (var i = 0, f; f = self._onStopCallbacks[i]; i++) {                                                            // 305
          Tracker.nonreactive(function () {                                                                               // 306
            withNoYieldsAllowed(f)(self);                                                                                 // 307
          });                                                                                                             // 308
        }                                                                                                                 // 309
        self._onStopCallbacks = [];                                                                                       // 310
      }                                                                                                                   // 311
    };                                                                                                                    // 312
    // 313
    Tracker.Computation.prototype._compute = function () {                                                                // 314
      var self = this;                                                                                                    // 315
      self.invalidated = false;                                                                                           // 316
      // 317
      var previous = Tracker.currentComputation;                                                                          // 318
      setCurrentComputation(self);                                                                                        // 319
      var previousInCompute = inCompute;                                                                                  // 320
      inCompute = true;                                                                                                   // 321
      try {                                                                                                               // 322
        withNoYieldsAllowed(self._func)(self);                                                                            // 323
      } finally {                                                                                                         // 324
        setCurrentComputation(previous);                                                                                  // 325
        inCompute = previousInCompute;                                                                                    // 326
      }                                                                                                                   // 327
    };                                                                                                                    // 328
    // 329
    Tracker.Computation.prototype._needsRecompute = function () {                                                         // 330
      var self = this;                                                                                                    // 331
      return self.invalidated && !self.stopped;                                                                          // 332
    };                                                                                                                    // 333
    // 334
    Tracker.Computation.prototype._recompute = function () {                                                              // 335
      var self = this;                                                                                                    // 336
      // 337
      self._recomputing = true;                                                                                           // 338
      try {                                                                                                               // 339
        if (self._needsRecompute()) {                                                                                     // 340
          try {                                                                                                           // 341
            self._compute();                                                                                              // 342
          } catch (e) {                                                                                                   // 343
            if (self._onError) {                                                                                          // 344
              self._onError(e);                                                                                           // 345
            } else {                                                                                                      // 346
              _throwOrLog("recompute", e);                                                                                // 347
            }                                                                                                             // 348
          }                                                                                                               // 349
        }                                                                                                                 // 350
      } finally {                                                                                                         // 351
        self._recomputing = false;                                                                                        // 352
      }                                                                                                                   // 353
    };                                                                                                                    // 354
    // 355
    /**                                                                                                                   // 356
     * @summary Process the reactive updates for this computation immediately                                             // 357
     * and ensure that the computation is rerun. The computation is rerun only                                            // 358
     * if it is invalidated.                                                                                              // 359
     * @locus Client                                                                                                      // 360
     */                                                                                                                   // 361
    Tracker.Computation.prototype.flush = function () {                                                                   // 362
      var self = this;                                                                                                    // 363
      // 364
      if (self._recomputing)                                                                                              // 365
        return;                                                                                                           // 366
      // 367
      self._recompute();                                                                                                  // 368
    };                                                                                                                    // 369
    // 370
    /**                                                                                                                   // 371
     * @summary Causes the function inside this computation to run and                                                    // 372
     * synchronously process all reactive updtes.                                                                         // 373
     * @locus Client                                                                                                      // 374
     */                                                                                                                   // 375
    Tracker.Computation.prototype.run = function () {                                                                     // 376
      var self = this;                                                                                                    // 377
      self.invalidate();                                                                                                  // 378
      self.flush();                                                                                                       // 379
    };                                                                                                                    // 380
    // 381
    //                                                                                                                    // 382
    // http://docs.meteor.com/#tracker_dependency                                                                         // 383
    // 384
    /**                                                                                                                   // 385
     * @summary A Dependency represents an atomic unit of reactive data that a                                            // 386
     * computation might depend on. Reactive data sources such as Session or                                              // 387
     * Minimongo internally create different Dependency objects for different                                             // 388
     * pieces of data, each of which may be depended on by multiple computations.                                         // 389
     * When the data changes, the computations are invalidated.                                                           // 390
     * @class                                                                                                             // 391
     * @instanceName dependency                                                                                           // 392
     */                                                                                                                   // 393
    Tracker.Dependency = function () {                                                                                    // 394
      this._dependentsById = {};                                                                                          // 395
    };                                                                                                                    // 396
    // 397
    // http://docs.meteor.com/#dependency_depend                                                                          // 398
    //                                                                                                                    // 399
    // Adds `computation` to this set if it is not already                                                                // 400
    // present.  Returns true if `computation` is a new member of the set.                                                // 401
    // If no argument, defaults to currentComputation, or does nothing                                                    // 402
    // if there is no currentComputation.                                                                                 // 403
    // 404
    /**                                                                                                                   // 405
     * @summary Declares that the current computation (or `fromComputation` if given) depends on `dependency`.  The computation will be invalidated the next time `dependency` changes.
                                                                                                                          // 407
    If there is no current computation and `depend()` is called with no arguments, it does nothing and returns false.     // 408
                                                                                                                          // 409
    Returns true if the computation is a new dependent of `dependency` rather than an existing one.                       // 410
     * @locus Client                                                                                                      // 411
     * @param {Tracker.Computation} [fromComputation] An optional computation declared to depend on `dependency` instead of the current computation.
     * @returns {Boolean}                                                                                                 // 413
     */                                                                                                                   // 414
    Tracker.Dependency.prototype.depend = function (computation) {                                                        // 415
      if (!computation) {                                                                                                // 416
        if (!Tracker.active)                                                                                             // 417
          return false;                                                                                                   // 418
        // 419
        computation = Tracker.currentComputation;                                                                         // 420
      }                                                                                                                   // 421
      var self = this;                                                                                                    // 422
      var id = computation._id;                                                                                           // 423
      if (!(id in self._dependentsById)) {                                                                               // 424
        self._dependentsById[id] = computation;                                                                           // 425
        computation.onInvalidate(function () {                                                                            // 426
          delete self._dependentsById[id];                                                                                // 427
        });                                                                                                               // 428
        return true;                                                                                                      // 429
      }                                                                                                                   // 430
      return false;                                                                                                       // 431
    };                                                                                                                    // 432
    // 433
    // http://docs.meteor.com/#dependency_changed                                                                         // 434
    // 435
    /**                                                                                                                   // 436
     * @summary Invalidate all dependent computations immediately and remove them as dependents.                          // 437
     * @locus Client                                                                                                      // 438
     */                                                                                                                   // 439
    Tracker.Dependency.prototype.changed = function () {                                                                  // 440
      var self = this;                                                                                                    // 441
      for (var id in self._dependentsById)                                                                                // 442
        self._dependentsById[id].invalidate();                                                                            // 443
    };                                                                                                                    // 444
    // 445
    // http://docs.meteor.com/#dependency_hasdependents                                                                   // 446
    // 447
    /**                                                                                                                   // 448
     * @summary True if this Dependency has one or more dependent Computations, which would be invalidated if this Dependency were to change.
     * @locus Client                                                                                                      // 450
     * @returns {Boolean}                                                                                                 // 451
     */                                                                                                                   // 452
    Tracker.Dependency.prototype.hasDependents = function () {                                                            // 453
      var self = this;                                                                                                    // 454
      for (var id in self._dependentsById)                                                                                 // 455
        return true;                                                                                                      // 456
      return false;                                                                                                       // 457
    };                                                                                                                    // 458
    // 459
    // http://docs.meteor.com/#tracker_flush                                                                              // 460
    // 461
    /**                                                                                                                   // 462
     * @summary Process all reactive updates immediately and ensure that all invalidated computations are rerun.          // 463
     * @locus Client                                                                                                      // 464
     */                                                                                                                   // 465
    Tracker.flush = function (options) {                                                                                  // 466
      Tracker._runFlush({
        finishSynchronously: true,                                                                      // 467
        throwFirstError: options && options._throwFirstError
      });                                        // 468
    };                                                                                                                    // 469
    // 470
    // Run all pending computations and afterFlush callbacks.  If we were not called                                      // 471
    // directly via Tracker.flush, this may return before they're all done to allow                                       // 472
    // the event loop to run a little before continuing.                                                                  // 473
    Tracker._runFlush = function (options) {                                                                              // 474
      // XXX What part of the comment below is still true? (We no longer                                                  // 475
      // have Spark)                                                                                                      // 476
      //                                                                                                                  // 477
      // Nested flush could plausibly happen if, say, a flush causes                                                      // 478
      // DOM mutation, which causes a "blur" event, which runs an                                                         // 479
      // app event handler that calls Tracker.flush.  At the moment                                                       // 480
      // Spark blocks event handlers during DOM mutation anyway,                                                          // 481
      // because the LiveRange tree isn't valid.  And we don't have                                                       // 482
      // any useful notion of a nested flush.                                                                             // 483
      //                                                                                                                  // 484
      // https://app.asana.com/0/159908330244/385138233856                                                                // 485
      if (inFlush)                                                                                                        // 486
        throw new Error("Can't call Tracker.flush while flushing");                                                       // 487
      // 488
      if (inCompute)                                                                                                      // 489
        throw new Error("Can't flush inside Tracker.autorun");                                                            // 490
      // 491
      options = options || {};                                                                                            // 492
      // 493
      inFlush = true;                                                                                                     // 494
      willFlush = true;                                                                                                   // 495
      throwFirstError = !!options.throwFirstError;                                                                       // 496
      // 497
      var recomputedCount = 0;                                                                                            // 498
      var finishedTry = false;                                                                                            // 499
      try {                                                                                                               // 500
        while (pendingComputations.length ||                                                                              // 501
          afterFlushCallbacks.length) {                                                                              // 502
          // 503
          // recompute all pending computations                                                                           // 504
          while (pendingComputations.length) {                                                                            // 505
            var comp = pendingComputations.shift();                                                                       // 506
            comp._recompute();                                                                                            // 507
            if (comp._needsRecompute()) {                                                                                 // 508
              pendingComputations.unshift(comp);                                                                          // 509
            }                                                                                                             // 510
            // 511
            if (!options.finishSynchronously && ++recomputedCount > 1000) {                                              // 512
              finishedTry = true;                                                                                         // 513
              return;                                                                                                     // 514
            }                                                                                                             // 515
          }                                                                                                               // 516
          // 517
          if (afterFlushCallbacks.length) {                                                                               // 518
            // call one afterFlush callback, which may                                                                    // 519
            // invalidate more computations                                                                               // 520
            var func = afterFlushCallbacks.shift();                                                                       // 521
            try {                                                                                                         // 522
              func();                                                                                                     // 523
            } catch (e) {                                                                                                 // 524
              _throwOrLog("afterFlush", e);                                                                               // 525
            }                                                                                                             // 526
          }                                                                                                               // 527
        }                                                                                                                 // 528
        finishedTry = true;                                                                                               // 529
      } finally {                                                                                                         // 530
        if (!finishedTry) {                                                                                              // 531
          // we're erroring due to throwFirstError being true.                                                            // 532
          inFlush = false; // needed before calling `Tracker.flush()` again                                               // 533
          // finish flushing                                                                                              // 534
          Tracker._runFlush({                                                                                             // 535
            finishSynchronously: options.finishSynchronously,                                                             // 536
            throwFirstError: false                                                                                        // 537
          });                                                                                                             // 538
        }                                                                                                                 // 539
        willFlush = false;                                                                                                // 540
        inFlush = false;                                                                                                  // 541
        if (pendingComputations.length || afterFlushCallbacks.length) {                                                   // 542
          // We're yielding because we ran a bunch of computations and we aren't                                          // 543
          // required to finish synchronously, so we'd like to give the event loop a                                      // 544
          // chance. We should flush again soon.                                                                          // 545
          if (options.finishSynchronously) {                                                                              // 546
            throw new Error("still have more to do?");  // shouldn't happen                                               // 547
          }                                                                                                               // 548
          setTimeout(requireFlush, 10);                                                                                   // 549
        }                                                                                                                 // 550
      }                                                                                                                   // 551
    };                                                                                                                    // 552
    // 553
    // http://docs.meteor.com/#tracker_autorun                                                                            // 554
    //                                                                                                                    // 555
    // Run f(). Record its dependencies. Rerun it whenever the                                                            // 556
    // dependencies change.                                                                                               // 557
    //                                                                                                                    // 558
    // Returns a new Computation, which is also passed to f.                                                              // 559
    //                                                                                                                    // 560
    // Links the computation to the current computation                                                                   // 561
    // so that it is stopped if the current computation is invalidated.                                                   // 562
    // 563
    /**                                                                                                                   // 564
     * @callback Tracker.ComputationFunction                                                                              // 565
     * @param {Tracker.Computation}                                                                                       // 566
     */                                                                                                                   // 567
    /**                                                                                                                   // 568
     * @summary Run a function now and rerun it later whenever its dependencies                                           // 569
     * change. Returns a Computation object that can be used to stop or observe the                                       // 570
     * rerunning.                                                                                                         // 571
     * @locus Client                                                                                                      // 572
     * @param {Tracker.ComputationFunction} runFunc The function to run. It receives                                      // 573
     * one argument: the Computation object that will be returned.                                                        // 574
     * @param {Object} [options]                                                                                          // 575
     * @param {Function} options.onError Optional. The function to run when an error                                      // 576
     * happens in the Computation. The only argument it recieves is the Error                                             // 577
     * thrown. Defaults to the error being logged to the console.                                                         // 578
     * @returns {Tracker.Computation}                                                                                     // 579
     */                                                                                                                   // 580
    Tracker.autorun = function (f, options) {                                                                             // 581
      if (typeof f !== 'function')                                                                                        // 582
        throw new Error('Tracker.autorun requires a function argument');                                                  // 583
      // 584
      options = options || {};                                                                                            // 585
      // 586
      constructingComputation = true;                                                                                     // 587
      var c = new Tracker.Computation(                                                                                    // 588
        f, Tracker.currentComputation, options.onError);                                                                  // 589
      // 590
      if (Tracker.active)                                                                                                 // 591
        Tracker.onInvalidate(function () {                                                                                // 592
          c.stop();                                                                                                       // 593
        });                                                                                                               // 594
      // 595
      return c;                                                                                                           // 596
    };                                                                                                                    // 597
    // 598
    // http://docs.meteor.com/#tracker_nonreactive                                                                        // 599
    //                                                                                                                    // 600
    // Run `f` with no current computation, returning the return value                                                    // 601
    // of `f`.  Used to turn off reactivity for the duration of `f`,                                                      // 602
    // so that reactive data sources accessed by `f` will not result in any                                               // 603
    // computations being invalidated.                                                                                    // 604
    // 605
    /**                                                                                                                   // 606
     * @summary Run a function without tracking dependencies.                                                             // 607
     * @locus Client                                                                                                      // 608
     * @param {Function} func A function to call immediately.                                                             // 609
     */                                                                                                                   // 610
    Tracker.nonreactive = function (f) {                                                                                  // 611
      var previous = Tracker.currentComputation;                                                                          // 612
      setCurrentComputation(null);                                                                                        // 613
      try {                                                                                                               // 614
        return f();                                                                                                       // 615
      } finally {                                                                                                         // 616
        setCurrentComputation(previous);                                                                                  // 617
      }                                                                                                                   // 618
    };                                                                                                                    // 619
    // 620
    // http://docs.meteor.com/#tracker_oninvalidate                                                                       // 621
    // 622
    /**                                                                                                                   // 623
     * @summary Registers a new [`onInvalidate`](#computation_oninvalidate) callback on the current computation (which must exist), to be called immediately when the current computation is invalidated or stopped.
     * @locus Client                                                                                                      // 625
     * @param {Function} callback A callback function that will be invoked as `func(c)`, where `c` is the computation on which the callback is registered.
     */                                                                                                                   // 627
    Tracker.onInvalidate = function (f) {                                                                                 // 628
      if (!Tracker.active)                                                                                               // 629
        throw new Error("Tracker.onInvalidate requires a currentComputation");                                            // 630
      // 631
      Tracker.currentComputation.onInvalidate(f);                                                                         // 632
    };                                                                                                                    // 633
    // 634
    // http://docs.meteor.com/#tracker_afterflush                                                                         // 635
    // 636
    /**                                                                                                                   // 637
     * @summary Schedules a function to be called during the next flush, or later in the current flush if one is in progress, after all invalidated computations have been rerun.  The function will be run once and not on subsequent flushes unless `afterFlush` is called again.
     * @locus Client                                                                                                      // 639
     * @param {Function} callback A function to call at flush time.                                                       // 640
     */                                                                                                                   // 641
    Tracker.afterFlush = function (f) {                                                                                   // 642
      afterFlushCallbacks.push(f);                                                                                        // 643
      requireFlush();                                                                                                     // 644
    };                                                                                                                    // 645
    // 646
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }).call(this);






  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                    //
    // packages/tracker/deprecated.js                                                                                     //
    //                                                                                                                    //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Deprecated functions.                                                                                              // 1
    // 2
    // These functions used to be on the Meteor object (and worked slightly                                               // 3
    // differently).                                                                                                      // 4
    // XXX COMPAT WITH 0.5.7                                                                                              // 5
    Meteor.flush = Tracker.flush;                                                                                         // 6
    Meteor.autorun = Tracker.autorun;                                                                                     // 7
    // 8
    // We used to require a special "autosubscribe" call to reactively subscribe to                                       // 9
    // things. Now, it works with autorun.                                                                                // 10
    // XXX COMPAT WITH 0.5.4                                                                                              // 11
    Meteor.autosubscribe = Tracker.autorun;                                                                               // 12
    // 13
    // This Tracker API briefly existed in 0.5.8 and 0.5.9                                                                // 14
    // XXX COMPAT WITH 0.5.9                                                                                              // 15
    Tracker.depend = function (d) {                                                                                       // 16
      return d.depend();                                                                                                  // 17
    };                                                                                                                    // 18
    // 19
    Deps = Tracker;                                                                                                       // 20
    // 21
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }).call(this);


  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols)
      (s in pkg) || (pkg[s] = symbols[s]);
  })(Package.tracker = {}, {
    Tracker: Tracker,
    Deps: Deps
  });

})();
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var _ = Package.underscore._;
  var Random = Package.random.Random;

  /* Package-scope variables */
  var Retry;

  (function () {

    /////////////////////////////////////////////////////////////////////////////
    //                                                                         //
    // packages/retry/retry.js                                                 //
    //                                                                         //
    /////////////////////////////////////////////////////////////////////////////
    //
    // Retry logic with an exponential backoff.                                // 1
    //                                                                         // 2
    // options:                                                                // 3
    //  baseTimeout: time for initial reconnect attempt (ms).                  // 4
    //  exponent: exponential factor to increase timeout each attempt.         // 5
    //  maxTimeout: maximum time between retries (ms).                         // 6
    //  minCount: how many times to reconnect "instantly".                     // 7
    //  minTimeout: time to wait for the first `minCount` retries (ms).        // 8
    //  fuzz: factor to randomize retry times by (to avoid retry storms).      // 9
    // 10
    Retry = function (options) {                                               // 11
      var self = this;                                                         // 12
      _.extend(self, _.defaults(_.clone(options || {}), {                      // 13
        baseTimeout: 1000, // 1 second                                         // 14
        exponent: 2.2,                                                         // 15
        // The default is high-ish to ensure a server can recover from a       // 16
        // failure caused by load.                                             // 17
        maxTimeout: 5 * 60000, // 5 minutes                                    // 18
        minTimeout: 10,                                                        // 19
        minCount: 2,                                                           // 20
        fuzz: 0.5 // +- 25%                                                    // 21
      }));                                                                     // 22
      self.retryTimer = null;                                                  // 23
    };                                                                         // 24
    // 25
    _.extend(Retry.prototype, {                                                // 26
      // 27
      // Reset a pending retry, if any.                                        // 28
      clear: function () {                                                     // 29
        var self = this;                                                       // 30
        if (self.retryTimer)                                                   // 31
          clearTimeout(self.retryTimer);                                       // 32
        self.retryTimer = null;                                                // 33
      },                                                                       // 34
      // 35
      // Calculate how long to wait in milliseconds to retry, based on the     // 36
      // `count` of which retry this is.                                       // 37
      _timeout: function (count) {                                             // 38
        var self = this;                                                       // 39
        // 40
        if (count < self.minCount)                                             // 41
          return self.minTimeout;                                              // 42
        // 43
        var timeout = Math.min(                                                // 44
          self.maxTimeout,                                                     // 45
          self.baseTimeout * Math.pow(self.exponent, count));                  // 46
        // fuzz the timeout randomly, to avoid reconnect storms when a         // 47
        // server goes down.                                                   // 48
        timeout = timeout * ((Random.fraction() * self.fuzz) +                 // 49
          (1 - self.fuzz / 2));                               // 50
        return timeout;                                                        // 51
      },                                                                       // 52
      // 53
      // Call `fn` after a delay, based on the `count` of which retry this is.
      retryLater: function (count, fn) {                                       // 55
        var self = this;                                                       // 56
        var timeout = self._timeout(count);                                    // 57
        if (self.retryTimer)                                                   // 58
          clearTimeout(self.retryTimer);                                       // 59
        self.retryTimer = Meteor.setTimeout(fn, timeout);                      // 60
        return timeout;                                                        // 61
      }                                                                        // 62
      // 63
    });                                                                        // 64
    // 65
    /////////////////////////////////////////////////////////////////////////////

  }).call(this);


  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols)
      (s in pkg) || (pkg[s] = symbols[s]);
  })(Package.retry = {}, {
    Retry: Retry
  });

})();
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var _ = Package.underscore._;
  var EJSON = Package.ejson.EJSON;

  /* Package-scope variables */
  var IdMap;

  (function () {

    ////////////////////////////////////////////////////////////////////////////////
    //                                                                            //
    // packages/id-map/id-map.js                                                  //
    //                                                                            //
    ////////////////////////////////////////////////////////////////////////////////
    //
    IdMap = function (idStringify, idParse) {                                     // 1
      var self = this;                                                            // 2
      self._map = {};                                                             // 3
      self._idStringify = idStringify || JSON.stringify;                          // 4
      self._idParse = idParse || JSON.parse;                                      // 5
    };                                                                            // 6
    // 7
    // Some of these methods are designed to match methods on OrderedDict, since  // 8
    // (eg) ObserveMultiplex and _CachingChangeObserver use them interchangeably.
    // (Conceivably, this should be replaced with "UnorderedDict" with a specific
    // set of methods that overlap between the two.)                              // 11
    // 12
    _.extend(IdMap.prototype, {                                                   // 13
      get: function (id) {                                                        // 14
        var self = this;                                                          // 15
        var key = self._idStringify(id);                                          // 16
        return self._map[key];                                                    // 17
      },                                                                          // 18
      set: function (id, value) {                                                 // 19
        var self = this;                                                          // 20
        var key = self._idStringify(id);                                          // 21
        self._map[key] = value;                                                   // 22
      },                                                                          // 23
      remove: function (id) {                                                     // 24
        var self = this;                                                          // 25
        var key = self._idStringify(id);                                          // 26
        delete self._map[key];                                                    // 27
      },                                                                          // 28
      has: function (id) {                                                        // 29
        var self = this;                                                          // 30
        var key = self._idStringify(id);                                          // 31
        return _.has(self._map, key);                                             // 32
      },                                                                          // 33
      empty: function () {                                                        // 34
        var self = this;                                                          // 35
        return _.isEmpty(self._map);                                              // 36
      },                                                                          // 37
      clear: function () {                                                        // 38
        var self = this;                                                          // 39
        self._map = {};                                                           // 40
      },                                                                          // 41
      // Iterates over the items in the map. Return `false` to break the loop.    // 42
      forEach: function (iterator) {                                              // 43
        var self = this;                                                          // 44
        // don't use _.each, because we can't break out of it.                    // 45
        var keys = _.keys(self._map);                                             // 46
        for (var i = 0; i < keys.length; i++) {                                   // 47
          var breakIfFalse = iterator.call(null, self._map[keys[i]],              // 48
            self._idParse(keys[i]));               // 49
          if (breakIfFalse === false)                                             // 50
            return;                                                               // 51
        }                                                                         // 52
      },                                                                          // 53
      size: function () {                                                         // 54
        var self = this;                                                          // 55
        return _.size(self._map);                                                 // 56
      },                                                                          // 57
      setDefault: function (id, def) {                                            // 58
        var self = this;                                                          // 59
        var key = self._idStringify(id);                                          // 60
        if (_.has(self._map, key))                                                // 61
          return self._map[key];                                                  // 62
        self._map[key] = def;                                                     // 63
        return def;                                                               // 64
      },                                                                          // 65
      // Assumes that values are EJSON-cloneable, and that we don't need to clone
      // IDs (ie, that nobody is going to mutate an ObjectId).                    // 67
      clone: function () {                                                        // 68
        var self = this;                                                          // 69
        var clone = new IdMap(self._idStringify, self._idParse);                  // 70
        self.forEach(function (value, id) {                                       // 71
          clone.set(id, EJSON.clone(value));                                      // 72
        });                                                                       // 73
        return clone;                                                             // 74
      }                                                                           // 75
    });                                                                           // 76
    // 77
    // 78
    ////////////////////////////////////////////////////////////////////////////////

  }).call(this);


  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols)
      (s in pkg) || (pkg[s] = symbols[s]);
  })(Package['id-map'] = {}, {
    IdMap: IdMap
  });

})();
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var _ = Package.underscore._;

  /* Package-scope variables */
  var OrderedDict;

  (function () {

    ///////////////////////////////////////////////////////////////////////////////////
    //                                                                               //
    // packages/ordered-dict/ordered_dict.js                                         //
    //                                                                               //
    ///////////////////////////////////////////////////////////////////////////////////
    //
    // This file defines an ordered dictionary abstraction that is useful for        // 1
    // maintaining a dataset backed by observeChanges.  It supports ordering items   // 2
    // by specifying the item they now come before.                                  // 3
    // 4
    // The implementation is a dictionary that contains nodes of a doubly-linked     // 5
    // list as its values.                                                           // 6
    // 7
    // constructs a new element struct                                               // 8
    // next and prev are whole elements, not keys.                                   // 9
    var element = function (key, value, next, prev) {                                // 10
      return {                                                                       // 11
        key: key,                                                                    // 12
        value: value,                                                                // 13
        next: next,                                                                  // 14
        prev: prev                                                                   // 15
      };                                                                             // 16
    };                                                                               // 17
    OrderedDict = function (/* ... */) {                                             // 18
      var self = this;                                                               // 19
      self._dict = {};                                                               // 20
      self._first = null;                                                            // 21
      self._last = null;                                                             // 22
      self._size = 0;                                                                // 23
      var args = _.toArray(arguments);                                               // 24
      self._stringify = function (x) { return x; };                                  // 25
      if (typeof args[0] === 'function')                                             // 26
        self._stringify = args.shift();                                              // 27
      _.each(args, function (kv) {                                                   // 28
        self.putBefore(kv[0], kv[1], null);                                          // 29
      });                                                                            // 30
    };                                                                               // 31
    // 32
    _.extend(OrderedDict.prototype, {                                                // 33
      // the "prefix keys with a space" thing comes from here                        // 34
      // https://github.com/documentcloud/underscore/issues/376#issuecomment-2815649
      _k: function (key) { return " " + this._stringify(key); },                     // 36
      // 37
      empty: function () {                                                           // 38
        var self = this;                                                             // 39
        return !self._first;                                                         // 40
      },                                                                             // 41
      size: function () {                                                            // 42
        var self = this;                                                             // 43
        return self._size;                                                           // 44
      },                                                                             // 45
      _linkEltIn: function (elt) {                                                   // 46
        var self = this;                                                             // 47
        if (!elt.next) {                                                             // 48
          elt.prev = self._last;                                                     // 49
          if (self._last)                                                            // 50
            self._last.next = elt;                                                   // 51
          self._last = elt;                                                          // 52
        } else {                                                                     // 53
          elt.prev = elt.next.prev;                                                  // 54
          elt.next.prev = elt;                                                       // 55
          if (elt.prev)                                                              // 56
            elt.prev.next = elt;                                                     // 57
        }                                                                            // 58
        if (self._first === null || self._first === elt.next)                        // 59
          self._first = elt;                                                         // 60
      },                                                                             // 61
      _linkEltOut: function (elt) {                                                  // 62
        var self = this;                                                             // 63
        if (elt.next)                                                                // 64
          elt.next.prev = elt.prev;                                                  // 65
        if (elt.prev)                                                                // 66
          elt.prev.next = elt.next;                                                  // 67
        if (elt === self._last)                                                      // 68
          self._last = elt.prev;                                                     // 69
        if (elt === self._first)                                                     // 70
          self._first = elt.next;                                                    // 71
      },                                                                             // 72
      putBefore: function (key, item, before) {                                      // 73
        var self = this;                                                             // 74
        if (self._dict[self._k(key)])                                                // 75
          throw new Error("Item " + key + " already present in OrderedDict");        // 76
        var elt = before ?                                                           // 77
          element(key, item, self._dict[self._k(before)]) :                      // 78
          element(key, item, null);                                              // 79
        if (elt.next === undefined)                                                  // 80
          throw new Error("could not find item to put this one before");             // 81
        self._linkEltIn(elt);                                                        // 82
        self._dict[self._k(key)] = elt;                                              // 83
        self._size++;                                                                // 84
      },                                                                             // 85
      append: function (key, item) {                                                 // 86
        var self = this;                                                             // 87
        self.putBefore(key, item, null);                                             // 88
      },                                                                             // 89
      remove: function (key) {                                                       // 90
        var self = this;                                                             // 91
        var elt = self._dict[self._k(key)];                                          // 92
        if (elt === undefined)                                                       // 93
          throw new Error("Item " + key + " not present in OrderedDict");            // 94
        self._linkEltOut(elt);                                                       // 95
        self._size--;                                                                // 96
        delete self._dict[self._k(key)];                                             // 97
        return elt.value;                                                            // 98
      },                                                                             // 99
      get: function (key) {                                                          // 100
        var self = this;                                                             // 101
        if (self.has(key))                                                           // 102
          return self._dict[self._k(key)].value;                                   // 103
        return undefined;                                                            // 104
      },                                                                             // 105
      has: function (key) {                                                          // 106
        var self = this;                                                             // 107
        return _.has(self._dict, self._k(key));                                      // 108
      },                                                                             // 109
      // Iterate through the items in this dictionary in order, calling              // 110
      // iter(value, key, index) on each one.                                        // 111
      // 112
      // Stops whenever iter returns OrderedDict.BREAK, or after the last element.   // 113
      forEach: function (iter) {                                                     // 114
        var self = this;                                                             // 115
        var i = 0;                                                                   // 116
        var elt = self._first;                                                       // 117
        while (elt !== null) {                                                       // 118
          var b = iter(elt.value, elt.key, i);                                       // 119
          if (b === OrderedDict.BREAK)                                               // 120
            return;                                                                  // 121
          elt = elt.next;                                                            // 122
          i++;                                                                       // 123
        }                                                                            // 124
      },                                                                             // 125
      first: function () {                                                           // 126
        var self = this;                                                             // 127
        if (self.empty())                                                            // 128
          return undefined;                                                          // 129
        return self._first.key;                                                      // 130
      },                                                                             // 131
      firstValue: function () {                                                      // 132
        var self = this;                                                             // 133
        if (self.empty())                                                            // 134
          return undefined;                                                          // 135
        return self._first.value;                                                    // 136
      },                                                                             // 137
      last: function () {                                                            // 138
        var self = this;                                                             // 139
        if (self.empty())                                                            // 140
          return undefined;                                                          // 141
        return self._last.key;                                                       // 142
      },                                                                             // 143
      lastValue: function () {                                                       // 144
        var self = this;                                                             // 145
        if (self.empty())                                                            // 146
          return undefined;                                                          // 147
        return self._last.value;                                                     // 148
      },                                                                             // 149
      prev: function (key) {                                                         // 150
        var self = this;                                                             // 151
        if (self.has(key)) {                                                         // 152
          var elt = self._dict[self._k(key)];                                        // 153
          if (elt.prev)                                                              // 154
            return elt.prev.key;                                                     // 155
        }                                                                            // 156
        return null;                                                                 // 157
      },                                                                             // 158
      next: function (key) {                                                         // 159
        var self = this;                                                             // 160
        if (self.has(key)) {                                                         // 161
          var elt = self._dict[self._k(key)];                                        // 162
          if (elt.next)                                                              // 163
            return elt.next.key;                                                     // 164
        }                                                                            // 165
        return null;                                                                 // 166
      },                                                                             // 167
      moveBefore: function (key, before) {                                           // 168
        var self = this;                                                             // 169
        var elt = self._dict[self._k(key)];                                          // 170
        var eltBefore = before ? self._dict[self._k(before)] : null;                 // 171
        if (elt === undefined)                                                       // 172
          throw new Error("Item to move is not present");                            // 173
        if (eltBefore === undefined) {                                               // 174
          throw new Error("Could not find element to move this one before");         // 175
        }                                                                            // 176
        if (eltBefore === elt.next) // no moving necessary                           // 177
          return;                                                                    // 178
        // remove from its old place                                                 // 179
        self._linkEltOut(elt);                                                       // 180
        // patch into its new place                                                  // 181
        elt.next = eltBefore;                                                        // 182
        self._linkEltIn(elt);                                                        // 183
      },                                                                             // 184
      // Linear, sadly.                                                              // 185
      indexOf: function (key) {                                                      // 186
        var self = this;                                                             // 187
        var ret = null;                                                              // 188
        self.forEach(function (v, k, i) {                                            // 189
          if (self._k(k) === self._k(key)) {                                         // 190
            ret = i;                                                                 // 191
            return OrderedDict.BREAK;                                                // 192
          }                                                                          // 193
          return undefined;                                                          // 194
        });                                                                          // 195
        return ret;                                                                  // 196
      },                                                                             // 197
      _checkRep: function () {                                                       // 198
        var self = this;                                                             // 199
        _.each(self._dict, function (k, v) {                                         // 200
          if (v.next === v)                                                          // 201
            throw new Error("Next is a loop");                                       // 202
          if (v.prev === v)                                                          // 203
            throw new Error("Prev is a loop");                                       // 204
        });                                                                          // 205
      }                                                                              // 206
      // 207
    });                                                                              // 208
    OrderedDict.BREAK = { "break": true };                                             // 209
    // 210
    ///////////////////////////////////////////////////////////////////////////////////

  }).call(this);


  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols)
      (s in pkg) || (pkg[s] = symbols[s]);
  })(Package['ordered-dict'] = {}, {
    OrderedDict: OrderedDict
  });

})();
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var Buffer = Package.modules.Buffer;
  var process = Package.modules.process;

  /* Package-scope variables */
  var GeoJSON;

  var require = meteorInstall({
    "node_modules": {
      "meteor": {
        "geojson-utils": {
          "main.js": ["./geojson-utils.js", function (require, exports) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                         //
            // packages/geojson-utils/main.js                                                                          //
            //                                                                                                         //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            exports.GeoJSON = require("./geojson-utils.js");                                                           // 1
            // 2
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////

          }], "geojson-utils.js": function (require, exports, module) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                         //
            // packages/geojson-utils/geojson-utils.js                                                                 //
            //                                                                                                         //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            (function () {                                                                                             // 1
              var gju = {};                                                                                            // 2
              // 3
              // Export the geojson object for **CommonJS**                                                            // 4
              if (typeof module !== 'undefined' && module.exports) {                                                   // 5
                module.exports = gju;                                                                                  // 6
              }                                                                                                        // 7
              // 8
              // adapted from http://www.kevlindev.com/gui/math/intersection/Intersection.js                           // 9
              gju.lineStringsIntersect = function (l1, l2) {                                                           // 10
                var intersects = [];                                                                                   // 11
                for (var i = 0; i <= l1.coordinates.length - 2; ++i) {                                                 // 12
                  for (var j = 0; j <= l2.coordinates.length - 2; ++j) {                                               // 13
                    var a1 = {                                                                                         // 14
                      x: l1.coordinates[i][1],                                                                         // 15
                      y: l1.coordinates[i][0]                                                                          // 16
                    },                                                                                                 // 17
                      a2 = {                                                                                           // 18
                        x: l1.coordinates[i + 1][1],                                                                   // 19
                        y: l1.coordinates[i + 1][0]                                                                    // 20
                      },                                                                                               // 21
                      b1 = {                                                                                           // 22
                        x: l2.coordinates[j][1],                                                                       // 23
                        y: l2.coordinates[j][0]                                                                        // 24
                      },                                                                                               // 25
                      b2 = {                                                                                           // 26
                        x: l2.coordinates[j + 1][1],                                                                   // 27
                        y: l2.coordinates[j + 1][0]                                                                    // 28
                      },                                                                                               // 29
                      ua_t = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x),                            // 30
                      ub_t = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x),                            // 31
                      u_b = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);                             // 32
                    if (u_b != 0) {                                                                                    // 33
                      var ua = ua_t / u_b,                                                                             // 34
                        ub = ub_t / u_b;                                                                               // 35
                      if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {                                                  // 36
                        intersects.push({                                                                              // 37
                          'type': 'Point',                                                                             // 38
                          'coordinates': [a1.x + ua * (a2.x - a1.x), a1.y + ua * (a2.y - a1.y)]                        // 39
                        });                                                                                            // 40
                      }                                                                                                // 41
                    }                                                                                                  // 42
                  }                                                                                                    // 43
                }                                                                                                      // 44
                if (intersects.length == 0) intersects = false;                                                        // 45
                return intersects;                                                                                     // 46
              }                                                                                                        // 47
              // 48
              // Bounding Box                                                                                          // 49
              // 50
              function boundingBoxAroundPolyCoords(coords) {                                                          // 51
                var xAll = [], yAll = []                                                                               // 52
                // 53
                for (var i = 0; i < coords[0].length; i++) {                                                           // 54
                  xAll.push(coords[0][i][1])                                                                           // 55
                  yAll.push(coords[0][i][0])                                                                           // 56
                }                                                                                                      // 57
                // 58
                xAll = xAll.sort(function (a, b) { return a - b })                                                      // 59
                yAll = yAll.sort(function (a, b) { return a - b })                                                      // 60
                // 61
                return [[xAll[0], yAll[0]], [xAll[xAll.length - 1], yAll[yAll.length - 1]]]                          // 62
              }                                                                                                        // 63
              // 64
              gju.pointInBoundingBox = function (point, bounds) {                                                      // 65
                return !(point.coordinates[1] < bounds[0][0] || point.coordinates[1] > bounds[1][0] || point.coordinates[0] < bounds[0][1] || point.coordinates[0] > bounds[1][1])
              }                                                                                                        // 67
              // 68
              // Point in Polygon                                                                                      // 69
              // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html#Listing the Vertices           // 70
              // 71
              function pnpoly(x, y, coords) {                                                                           // 72
                var vert = [[0, 0]]                                                                                   // 73
                // 74
                for (var i = 0; i < coords.length; i++) {                                                              // 75
                  for (var j = 0; j < coords[i].length; j++) {                                                         // 76
                    vert.push(coords[i][j])                                                                            // 77
                  }                                                                                                    // 78
                  vert.push([0, 0])                                                                                     // 79
                }                                                                                                      // 80
                // 81
                var inside = false                                                                                     // 82
                for (var i = 0, j = vert.length - 1; i < vert.length; j = i++) {                                       // 83
                  if (((vert[i][0] > y) != (vert[j][0] > y)) && (x < (vert[j][1] - vert[i][1]) * (y - vert[i][0]) / (vert[j][0] - vert[i][0]) + vert[i][1])) inside = !inside
                }                                                                                                      // 85
                // 86
                return inside                                                                                          // 87
              }                                                                                                        // 88
              // 89
              gju.pointInPolygon = function (p, poly) {                                                                // 90
                var coords = (poly.type == "Polygon") ? [poly.coordinates] : poly.coordinates                        // 91
                // 92
                var insideBox = false                                                                                  // 93
                for (var i = 0; i < coords.length; i++) {                                                              // 94
                  if (gju.pointInBoundingBox(p, boundingBoxAroundPolyCoords(coords[i]))) insideBox = true              // 95
                }                                                                                                      // 96
                if (!insideBox) return false                                                                           // 97
                // 98
                var insidePoly = false                                                                                 // 99
                for (var i = 0; i < coords.length; i++) {                                                              // 100
                  if (pnpoly(p.coordinates[1], p.coordinates[0], coords[i])) insidePoly = true                         // 101
                }                                                                                                      // 102
                // 103
                return insidePoly                                                                                      // 104
              }                                                                                                        // 105
              // 106
              gju.numberToRadius = function (number) {                                                                 // 107
                return number * Math.PI / 180;                                                                         // 108
              }                                                                                                        // 109
              // 110
              gju.numberToDegree = function (number) {                                                                 // 111
                return number * 180 / Math.PI;                                                                         // 112
              }                                                                                                        // 113
              // 114
              // written with help from @tautologe                                                                     // 115
              gju.drawCircle = function (radiusInMeters, centerPoint, steps) {                                         // 116
                var center = [centerPoint.coordinates[1], centerPoint.coordinates[0]],                                 // 117
                  dist = (radiusInMeters / 1000) / 6371,                                                               // 118
                  // convert meters to radiant                                                                         // 119
                  radCenter = [gju.numberToRadius(center[0]), gju.numberToRadius(center[1])],                          // 120
                  steps = steps || 15,                                                                                 // 121
                  // 15 sided circle                                                                                   // 122
                  poly = [[center[0], center[1]]];                                                                     // 123
                for (var i = 0; i < steps; i++) {                                                                      // 124
                  var brng = 2 * Math.PI * i / steps;                                                                  // 125
                  var lat = Math.asin(Math.sin(radCenter[0]) * Math.cos(dist)                                          // 126
                    + Math.cos(radCenter[0]) * Math.sin(dist) * Math.cos(brng));                                 // 127
                  var lng = radCenter[1] + Math.atan2(Math.sin(brng) * Math.sin(dist) * Math.cos(radCenter[0]),        // 128
                    Math.cos(dist) - Math.sin(radCenter[0]) * Math.sin(lat));        // 129
                  poly[i] = [];                                                                                        // 130
                  poly[i][1] = gju.numberToDegree(lat);                                                                // 131
                  poly[i][0] = gju.numberToDegree(lng);                                                                // 132
                }                                                                                                      // 133
                return {                                                                                               // 134
                  "type": "Polygon",                                                                                   // 135
                  "coordinates": [poly]                                                                                // 136
                };                                                                                                     // 137
              }                                                                                                        // 138
              // 139
              // assumes rectangle starts at lower left point                                                          // 140
              gju.rectangleCentroid = function (rectangle) {                                                           // 141
                var bbox = rectangle.coordinates[0];                                                                   // 142
                var xmin = bbox[0][0],                                                                                 // 143
                  ymin = bbox[0][1],                                                                                   // 144
                  xmax = bbox[2][0],                                                                                   // 145
                  ymax = bbox[2][1];                                                                                   // 146
                var xwidth = xmax - xmin;                                                                              // 147
                var ywidth = ymax - ymin;                                                                              // 148
                return {                                                                                               // 149
                  'type': 'Point',                                                                                     // 150
                  'coordinates': [xmin + xwidth / 2, ymin + ywidth / 2]                                                // 151
                };                                                                                                     // 152
              }                                                                                                        // 153
              // 154
              // from http://www.movable-type.co.uk/scripts/latlong.html                                               // 155
              gju.pointDistance = function (pt1, pt2) {                                                                // 156
                var lon1 = pt1.coordinates[0],                                                                         // 157
                  lat1 = pt1.coordinates[1],                                                                           // 158
                  lon2 = pt2.coordinates[0],                                                                           // 159
                  lat2 = pt2.coordinates[1],                                                                           // 160
                  dLat = gju.numberToRadius(lat2 - lat1),                                                              // 161
                  dLon = gju.numberToRadius(lon2 - lon1),                                                              // 162
                  a = Math.pow(Math.sin(dLat / 2), 2) + Math.cos(gju.numberToRadius(lat1))                             // 163
                    * Math.cos(gju.numberToRadius(lat2)) * Math.pow(Math.sin(dLon / 2), 2),                            // 164
                  c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));                                                  // 165
                // Earth radius is 6371 km                                                                             // 166
                return (6371 * c) * 1000; // returns meters                                                            // 167
              },                                                                                                       // 168
                // 169
                // checks if geometry lies entirely within a circle                                                      // 170
                // works with Point, LineString, Polygon                                                                 // 171
                gju.geometryWithinRadius = function (geometry, center, radius) {                                         // 172
                  if (geometry.type == 'Point') {                                                                        // 173
                    return gju.pointDistance(geometry, center) <= radius;                                                // 174
                  } else if (geometry.type == 'LineString' || geometry.type == 'Polygon') {                              // 175
                    var point = {};                                                                                      // 176
                    var coordinates;                                                                                     // 177
                    if (geometry.type == 'Polygon') {                                                                    // 178
                      // it's enough to check the exterior ring of the Polygon                                           // 179
                      coordinates = geometry.coordinates[0];                                                             // 180
                    } else {                                                                                             // 181
                      coordinates = geometry.coordinates;                                                                // 182
                    }                                                                                                    // 183
                    for (var i in coordinates) {                                                                         // 184
                      point.coordinates = coordinates[i];                                                                // 185
                      if (gju.pointDistance(point, center) > radius) {                                                   // 186
                        return false;                                                                                    // 187
                      }                                                                                                  // 188
                    }                                                                                                    // 189
                  }                                                                                                      // 190
                  return true;                                                                                           // 191
                }                                                                                                        // 192
              // 193
              // adapted from http://paulbourke.net/geometry/polyarea/javascript.txt                                   // 194
              gju.area = function (polygon) {                                                                          // 195
                var area = 0;                                                                                          // 196
                // TODO: polygon holes at coordinates[1]                                                               // 197
                var points = polygon.coordinates[0];                                                                   // 198
                var j = points.length - 1;                                                                             // 199
                var p1, p2;                                                                                            // 200
                // 201
                for (var i = 0; i < points.length; j = i++) {                                                          // 202
                  var p1 = {                                                                                           // 203
                    x: points[i][1],                                                                                   // 204
                    y: points[i][0]                                                                                    // 205
                  };                                                                                                   // 206
                  var p2 = {                                                                                           // 207
                    x: points[j][1],                                                                                   // 208
                    y: points[j][0]                                                                                    // 209
                  };                                                                                                   // 210
                  area += p1.x * p2.y;                                                                                 // 211
                  area -= p1.y * p2.x;                                                                                 // 212
                }                                                                                                      // 213
                // 214
                area /= 2;                                                                                             // 215
                return area;                                                                                           // 216
              },                                                                                                       // 217
                // 218
                // adapted from http://paulbourke.net/geometry/polyarea/javascript.txt                                   // 219
                gju.centroid = function (polygon) {                                                                      // 220
                  var f, x = 0,                                                                                          // 221
                    y = 0;                                                                                               // 222
                  // TODO: polygon holes at coordinates[1]                                                               // 223
                  var points = polygon.coordinates[0];                                                                   // 224
                  var j = points.length - 1;                                                                             // 225
                  var p1, p2;                                                                                            // 226
                  // 227
                  for (var i = 0; i < points.length; j = i++) {                                                          // 228
                    var p1 = {                                                                                           // 229
                      x: points[i][1],                                                                                   // 230
                      y: points[i][0]                                                                                    // 231
                    };                                                                                                   // 232
                    var p2 = {                                                                                           // 233
                      x: points[j][1],                                                                                   // 234
                      y: points[j][0]                                                                                    // 235
                    };                                                                                                   // 236
                    f = p1.x * p2.y - p2.x * p1.y;                                                                       // 237
                    x += (p1.x + p2.x) * f;                                                                              // 238
                    y += (p1.y + p2.y) * f;                                                                              // 239
                  }                                                                                                      // 240
                  // 241
                  f = gju.area(polygon) * 6;                                                                             // 242
                  return {                                                                                               // 243
                    'type': 'Point',                                                                                     // 244
                    'coordinates': [y / f, x / f]                                                                        // 245
                  };                                                                                                     // 246
                },                                                                                                       // 247
                // 248
                gju.simplify = function (source, kink) { /* source[] array of geojson points */                          // 249
                  /* kink	in metres, kinks above this depth kept  */                                                     // 250
                  /* kink depth is the height of the triangle abc where a-b and b-c are two consecutive line segments */
                  kink = kink || 20;                                                                                     // 252
                  source = source.map(function (o) {                                                                     // 253
                    return {                                                                                             // 254
                      lng: o.coordinates[0],                                                                             // 255
                      lat: o.coordinates[1]                                                                              // 256
                    }                                                                                                    // 257
                  });                                                                                                    // 258
                  // 259
                  var n_source, n_stack, n_dest, start, end, i, sig;                                                     // 260
                  var dev_sqr, max_dev_sqr, band_sqr;                                                                    // 261
                  var x12, y12, d12, x13, y13, d13, x23, y23, d23;                                                       // 262
                  var F = (Math.PI / 180.0) * 0.5;                                                                       // 263
                  var index = new Array(); /* aray of indexes of source points to include in the reduced line */         // 264
                  var sig_start = new Array(); /* indices of start & end of working section */                           // 265
                  var sig_end = new Array();                                                                             // 266
                  // 267
                  /* check for simple cases */                                                                           // 268
                  // 269
                  if (source.length < 3) return (source); /* one or two points */                                        // 270
                  // 271
                  /* more complex case. initialize stack */                                                              // 272
                  // 273
                  n_source = source.length;                                                                              // 274
                  band_sqr = kink * 360.0 / (2.0 * Math.PI * 6378137.0); /* Now in degrees */                            // 275
                  band_sqr *= band_sqr;                                                                                  // 276
                  n_dest = 0;                                                                                            // 277
                  sig_start[0] = 0;                                                                                      // 278
                  sig_end[0] = n_source - 1;                                                                             // 279
                  n_stack = 1;                                                                                           // 280
                  // 281
                  /* while the stack is not empty  ... */                                                                // 282
                  while (n_stack > 0) {                                                                                  // 283
                    // 284
                    /* ... pop the top-most entries off the stacks */                                                    // 285
                    // 286
                    start = sig_start[n_stack - 1];                                                                      // 287
                    end = sig_end[n_stack - 1];                                                                          // 288
                    n_stack--;                                                                                           // 289
                    // 290
                    if ((end - start) > 1) { /* any intermediate points ? */                                             // 291
                      // 292
                      /* ... yes, so find most deviant intermediate point to                                             // 293
                      either side of line joining start & end points */                                                  // 294
                      // 295
                      x12 = (source[end].lng() - source[start].lng());                                                   // 296
                      y12 = (source[end].lat() - source[start].lat());                                                   // 297
                      if (Math.abs(x12) > 180.0) x12 = 360.0 - Math.abs(x12);                                            // 298
                      x12 *= Math.cos(F * (source[end].lat() + source[start].lat())); /* use avg lat to reduce lng */    // 299
                      d12 = (x12 * x12) + (y12 * y12);                                                                   // 300
                      // 301
                      for (i = start + 1, sig = start, max_dev_sqr = -1.0; i < end; i++) {                               // 302
                        // 303
                        x13 = source[i].lng() - source[start].lng();                                                     // 304
                        y13 = source[i].lat() - source[start].lat();                                                     // 305
                        if (Math.abs(x13) > 180.0) x13 = 360.0 - Math.abs(x13);                                          // 306
                        x13 *= Math.cos(F * (source[i].lat() + source[start].lat()));                                    // 307
                        d13 = (x13 * x13) + (y13 * y13);                                                                 // 308
                        // 309
                        x23 = source[i].lng() - source[end].lng();                                                       // 310
                        y23 = source[i].lat() - source[end].lat();                                                       // 311
                        if (Math.abs(x23) > 180.0) x23 = 360.0 - Math.abs(x23);                                          // 312
                        x23 *= Math.cos(F * (source[i].lat() + source[end].lat()));                                      // 313
                        d23 = (x23 * x23) + (y23 * y23);                                                                 // 314
                        // 315
                        if (d13 >= (d12 + d23)) dev_sqr = d23;                                                           // 316
                        else if (d23 >= (d12 + d13)) dev_sqr = d13;                                                      // 317
                        else dev_sqr = (x13 * y12 - y13 * x12) * (x13 * y12 - y13 * x12) / d12; // solve triangle        // 318
                        if (dev_sqr > max_dev_sqr) {                                                                     // 319
                          sig = i;                                                                                       // 320
                          max_dev_sqr = dev_sqr;                                                                         // 321
                        }                                                                                                // 322
                      }                                                                                                  // 323
                      // 324
                      if (max_dev_sqr < band_sqr) { /* is there a sig. intermediate point ? */                           // 325
                        /* ... no, so transfer current start point */                                                    // 326
                        index[n_dest] = start;                                                                           // 327
                        n_dest++;                                                                                        // 328
                      } else { /* ... yes, so push two sub-sections on stack for further processing */                   // 329
                        n_stack++;                                                                                       // 330
                        sig_start[n_stack - 1] = sig;                                                                    // 331
                        sig_end[n_stack - 1] = end;                                                                      // 332
                        n_stack++;                                                                                       // 333
                        sig_start[n_stack - 1] = start;                                                                  // 334
                        sig_end[n_stack - 1] = sig;                                                                      // 335
                      }                                                                                                  // 336
                    } else { /* ... no intermediate points, so transfer current start point */                           // 337
                      index[n_dest] = start;                                                                             // 338
                      n_dest++;                                                                                          // 339
                    }                                                                                                    // 340
                  }                                                                                                      // 341
                  // 342
                  /* transfer last point */                                                                              // 343
                  index[n_dest] = n_source - 1;                                                                          // 344
                  n_dest++;                                                                                              // 345
                  // 346
                  /* make return array */                                                                                // 347
                  var r = new Array();                                                                                   // 348
                  for (var i = 0; i < n_dest; i++)                                                                       // 349
                    r.push(source[index[i]]);                                                                            // 350
                  // 351
                  return r.map(function (o) {                                                                            // 352
                    return {                                                                                             // 353
                      type: "Point",                                                                                     // 354
                      coordinates: [o.lng, o.lat]                                                                        // 355
                    }                                                                                                    // 356
                  });                                                                                                    // 357
                }                                                                                                        // 358
              // 359
              // http://www.movable-type.co.uk/scripts/latlong.html#destPoint                                          // 360
              gju.destinationPoint = function (pt, brng, dist) {                                                       // 361
                dist = dist / 6371;  // convert dist to angular distance in radians                                      // 362
                brng = gju.numberToRadius(brng);                                                                       // 363
                // 364
                var lat1 = gju.numberToRadius(pt.coordinates[0]);                                                      // 365
                var lon1 = gju.numberToRadius(pt.coordinates[1]);                                                      // 366
                // 367
                var lat2 = Math.asin(Math.sin(lat1) * Math.cos(dist) +                                                  // 368
                  Math.cos(lat1) * Math.sin(dist) * Math.cos(brng));                                  // 369
                var lon2 = lon1 + Math.atan2(Math.sin(brng) * Math.sin(dist) * Math.cos(lat1),                             // 370
                  Math.cos(dist) - Math.sin(lat1) * Math.sin(lat2));                            // 371
                lon2 = (lon2 + 3 * Math.PI) % (2 * Math.PI) - Math.PI;  // normalise to -180..+180º                          // 372
                // 373
                return {                                                                                               // 374
                  'type': 'Point',                                                                                     // 375
                  'coordinates': [gju.numberToDegree(lat2), gju.numberToDegree(lon2)]                                  // 376
                };                                                                                                     // 377
              };                                                                                                       // 378
              // 379
            })();                                                                                                      // 380
            // 381
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////

          }
        }
      }
    }
  }, { "extensions": [".js", ".json"] });
  var exports = require("./node_modules/meteor/geojson-utils/main.js");

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols)
      (s in pkg) || (pkg[s] = symbols[s]);
  })(Package['geojson-utils'] = exports, {
    GeoJSON: GeoJSON
  });

})();
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var _ = Package.underscore._;
  var EJSON = Package.ejson.EJSON;

  /* Package-scope variables */
  var DiffSequence;

  (function () {

    /////////////////////////////////////////////////////////////////////////////////////
    //                                                                                 //
    // packages/diff-sequence/diff.js                                                  //
    //                                                                                 //
    /////////////////////////////////////////////////////////////////////////////////////
    //
    DiffSequence = {};                                                                 // 1
    // 2
    // ordered: bool.                                                                  // 3
    // old_results and new_results: collections of documents.                          // 4
    //    if ordered, they are arrays.                                                 // 5
    //    if unordered, they are IdMaps                                                // 6
    DiffSequence.diffQueryChanges = function (ordered, oldResults, newResults,         // 7
      observer, options) {                 // 8
      if (ordered)                                                                     // 9
        DiffSequence.diffQueryOrderedChanges(                                          // 10
          oldResults, newResults, observer, options);                                  // 11
      else                                                                             // 12
        DiffSequence.diffQueryUnorderedChanges(                                        // 13
          oldResults, newResults, observer, options);                                  // 14
    };                                                                                 // 15
    // 16
    DiffSequence.diffQueryUnorderedChanges = function (oldResults, newResults,         // 17
      observer, options) {        // 18
      options = options || {};                                                         // 19
      var projectionFn = options.projectionFn || EJSON.clone;                          // 20
      // 21
      if (observer.movedBefore) {                                                      // 22
        throw new Error("_diffQueryUnordered called with a movedBefore observer!");    // 23
      }                                                                                // 24
      // 25
      newResults.forEach(function (newDoc, id) {                                       // 26
        var oldDoc = oldResults.get(id);                                               // 27
        if (oldDoc) {                                                                  // 28
          if (observer.changed && !EJSON.equals(oldDoc, newDoc)) {                     // 29
            var projectedNew = projectionFn(newDoc);                                   // 30
            var projectedOld = projectionFn(oldDoc);                                   // 31
            var changedFields =                                                        // 32
              DiffSequence.makeChangedFields(projectedNew, projectedOld);          // 33
            if (!_.isEmpty(changedFields)) {                                          // 34
              observer.changed(id, changedFields);                                     // 35
            }                                                                          // 36
          }                                                                            // 37
        } else if (observer.added) {                                                   // 38
          var fields = projectionFn(newDoc);                                           // 39
          delete fields._id;                                                           // 40
          observer.added(newDoc._id, fields);                                          // 41
        }                                                                              // 42
      });                                                                              // 43
      // 44
      if (observer.removed) {                                                          // 45
        oldResults.forEach(function (oldDoc, id) {                                     // 46
          if (!newResults.has(id))                                                     // 47
            observer.removed(id);                                                      // 48
        });                                                                            // 49
      }                                                                                // 50
    };                                                                                 // 51
    // 52
    // 53
    DiffSequence.diffQueryOrderedChanges = function (old_results, new_results,         // 54
      observer, options) {          // 55
      options = options || {};                                                         // 56
      var projectionFn = options.projectionFn || EJSON.clone;                          // 57
      // 58
      var new_presence_of_id = {};                                                     // 59
      _.each(new_results, function (doc) {                                             // 60
        if (new_presence_of_id[doc._id])                                               // 61
          Meteor._debug("Duplicate _id in new_results");                               // 62
        new_presence_of_id[doc._id] = true;                                            // 63
      });                                                                              // 64
      // 65
      var old_index_of_id = {};                                                        // 66
      _.each(old_results, function (doc, i) {                                          // 67
        if (doc._id in old_index_of_id)                                                // 68
          Meteor._debug("Duplicate _id in old_results");                               // 69
        old_index_of_id[doc._id] = i;                                                  // 70
      });                                                                              // 71
      // 72
      // ALGORITHM:                                                                    // 73
      //                                                                               // 74
      // To determine which docs should be considered "moved" (and which               // 75
      // merely change position because of other docs moving) we run                   // 76
      // a "longest common subsequence" (LCS) algorithm.  The LCS of the               // 77
      // old doc IDs and the new doc IDs gives the docs that should NOT be             // 78
      // considered moved.                                                             // 79
      // 80
      // To actually call the appropriate callbacks to get from the old state to the   // 81
      // new state:                                                                    // 82
      // 83
      // First, we call removed() on all the items that only appear in the old         // 84
      // state.                                                                        // 85
      // 86
      // Then, once we have the items that should not move, we walk through the new    // 87
      // results array group-by-group, where a "group" is a set of items that have     // 88
      // moved, anchored on the end by an item that should not move.  One by one, we   // 89
      // move each of those elements into place "before" the anchoring end-of-group    // 90
      // item, and fire changed events on them if necessary.  Then we fire a changed   // 91
      // event on the anchor, and move on to the next group.  There is always at       // 92
      // least one group; the last group is anchored by a virtual "null" id at the     // 93
      // end.                                                                          // 94
      // 95
      // Asymptotically: O(N k) where k is number of ops, or potentially               // 96
      // O(N log N) if inner loop of LCS were made to be binary search.                // 97
      // 98
      // 99
      //////// LCS (longest common sequence, with respect to _id)                      // 100
      // (see Wikipedia article on Longest Increasing Subsequence,                     // 101
      // where the LIS is taken of the sequence of old indices of the                  // 102
      // docs in new_results)                                                          // 103
      //                                                                               // 104
      // unmoved: the output of the algorithm; members of the LCS,                     // 105
      // in the form of indices into new_results                                       // 106
      var unmoved = [];                                                                // 107
      // max_seq_len: length of LCS found so far                                       // 108
      var max_seq_len = 0;                                                             // 109
      // seq_ends[i]: the index into new_results of the last doc in a                  // 110
      // common subsequence of length of i+1 <= max_seq_len                            // 111
      var N = new_results.length;                                                      // 112
      var seq_ends = new Array(N);                                                     // 113
      // ptrs:  the common subsequence ending with new_results[n] extends              // 114
      // a common subsequence ending with new_results[ptr[n]], unless                  // 115
      // ptr[n] is -1.                                                                 // 116
      var ptrs = new Array(N);                                                         // 117
      // virtual sequence of old indices of new results                                // 118
      var old_idx_seq = function (i_new) {                                              // 119
        return old_index_of_id[new_results[i_new]._id];                                // 120
      };                                                                               // 121
      // for each item in new_results, use it to extend a common subsequence           // 122
      // of length j <= max_seq_len                                                    // 123
      for (var i = 0; i < N; i++) {                                                         // 124
        if (old_index_of_id[new_results[i]._id] !== undefined) {                       // 125
          var j = max_seq_len;                                                         // 126
          // this inner loop would traditionally be a binary search,                   // 127
          // but scanning backwards we will likely find a subseq to extend             // 128
          // pretty soon, bounded for example by the total number of ops.              // 129
          // If this were to be changed to a binary search, we'd still want            // 130
          // to scan backwards a bit as an optimization.                               // 131
          while (j > 0) {                                                              // 132
            if (old_idx_seq(seq_ends[j - 1]) < old_idx_seq(i))                           // 133
              break;                                                                   // 134
            j--;                                                                       // 135
          }                                                                            // 136
          // 137
          ptrs[i] = (j === 0 ? -1 : seq_ends[j - 1]);                                    // 138
          seq_ends[j] = i;                                                             // 139
          if (j + 1 > max_seq_len)                                                       // 140
            max_seq_len = j + 1;                                                         // 141
        }                                                                              // 142
      }                                                                                // 143
      // 144
      // pull out the LCS/LIS into unmoved                                             // 145
      var idx = (max_seq_len === 0 ? -1 : seq_ends[max_seq_len - 1]);                    // 146
      while (idx >= 0) {                                                               // 147
        unmoved.push(idx);                                                             // 148
        idx = ptrs[idx];                                                               // 149
      }                                                                                // 150
      // the unmoved item list is built backwards, so fix that                         // 151
      unmoved.reverse();                                                               // 152
      // 153
      // the last group is always anchored by the end of the result list, which is     // 154
      // an id of "null"                                                               // 155
      unmoved.push(new_results.length);                                                // 156
      // 157
      _.each(old_results, function (doc) {                                             // 158
        if (!new_presence_of_id[doc._id])                                              // 159
          observer.removed && observer.removed(doc._id);                               // 160
      });                                                                              // 161
      // for each group of things in the new_results that is anchored by an unmoved    // 162
      // element, iterate through the things before it.                                // 163
      var startOfGroup = 0;                                                            // 164
      _.each(unmoved, function (endOfGroup) {                                          // 165
        var groupId = new_results[endOfGroup] ? new_results[endOfGroup]._id : null;    // 166
        var oldDoc, newDoc, fields, projectedNew, projectedOld;                        // 167
        for (var i = startOfGroup; i < endOfGroup; i++) {                              // 168
          newDoc = new_results[i];                                                     // 169
          if (!_.has(old_index_of_id, newDoc._id)) {                                   // 170
            fields = projectionFn(newDoc);                                             // 171
            delete fields._id;                                                         // 172
            observer.addedBefore && observer.addedBefore(newDoc._id, fields, groupId);
            observer.added && observer.added(newDoc._id, fields);                      // 174
          } else {                                                                     // 175
            // moved                                                                   // 176
            oldDoc = old_results[old_index_of_id[newDoc._id]];                         // 177
            projectedNew = projectionFn(newDoc);                                       // 178
            projectedOld = projectionFn(oldDoc);                                       // 179
            fields = DiffSequence.makeChangedFields(projectedNew, projectedOld);       // 180
            if (!_.isEmpty(fields)) {                                                  // 181
              observer.changed && observer.changed(newDoc._id, fields);                // 182
            }                                                                          // 183
            observer.movedBefore && observer.movedBefore(newDoc._id, groupId);         // 184
          }                                                                            // 185
        }                                                                              // 186
        if (groupId) {                                                                 // 187
          newDoc = new_results[endOfGroup];                                            // 188
          oldDoc = old_results[old_index_of_id[newDoc._id]];                           // 189
          projectedNew = projectionFn(newDoc);                                         // 190
          projectedOld = projectionFn(oldDoc);                                         // 191
          fields = DiffSequence.makeChangedFields(projectedNew, projectedOld);         // 192
          if (!_.isEmpty(fields)) {                                                    // 193
            observer.changed && observer.changed(newDoc._id, fields);                  // 194
          }                                                                            // 195
        }                                                                              // 196
        startOfGroup = endOfGroup + 1;                                                   // 197
      });                                                                              // 198
      // 199
      // 200
    };                                                                                 // 201
    // 202
    // 203
    // General helper for diff-ing two objects.                                        // 204
    // callbacks is an object like so:                                                 // 205
    // { leftOnly: function (key, leftValue) {...},                                    // 206
    //   rightOnly: function (key, rightValue) {...},                                  // 207
    //   both: function (key, leftValue, rightValue) {...},                            // 208
    // }                                                                               // 209
    DiffSequence.diffObjects = function (left, right, callbacks) {                     // 210
      _.each(left, function (leftValue, key) {                                         // 211
        if (_.has(right, key))                                                         // 212
          callbacks.both && callbacks.both(key, leftValue, right[key]);                // 213
        else                                                                           // 214
          callbacks.leftOnly && callbacks.leftOnly(key, leftValue);                    // 215
      });                                                                              // 216
      if (callbacks.rightOnly) {                                                       // 217
        _.each(right, function (rightValue, key) {                                      // 218
          if (!_.has(left, key))                                                       // 219
            callbacks.rightOnly(key, rightValue);                                      // 220
        });                                                                            // 221
      }                                                                                // 222
    };                                                                                 // 223
    // 224
    // 225
    DiffSequence.makeChangedFields = function (newDoc, oldDoc) {                       // 226
      var fields = {};                                                                 // 227
      DiffSequence.diffObjects(oldDoc, newDoc, {                                       // 228
        leftOnly: function (key, value) {                                              // 229
          fields[key] = undefined;                                                     // 230
        },                                                                             // 231
        rightOnly: function (key, value) {                                             // 232
          fields[key] = value;                                                         // 233
        },                                                                             // 234
        both: function (key, leftValue, rightValue) {                                  // 235
          if (!EJSON.equals(leftValue, rightValue))                                    // 236
            fields[key] = rightValue;                                                  // 237
        }                                                                              // 238
      });                                                                              // 239
      return fields;                                                                   // 240
    };                                                                                 // 241
    // 242
    DiffSequence.applyChanges = function (doc, changeFields) {                         // 243
      _.each(changeFields, function (value, key) {                                     // 244
        if (value === undefined)                                                       // 245
          delete doc[key];                                                             // 246
        else                                                                           // 247
          doc[key] = value;                                                            // 248
      });                                                                              // 249
    };                                                                                 // 250
    // 251
    // 252
    /////////////////////////////////////////////////////////////////////////////////////

  }).call(this);


  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols)
      (s in pkg) || (pkg[s] = symbols[s]);
  })(Package['diff-sequence'] = {}, {
    DiffSequence: DiffSequence
  });

})();
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var EJSON = Package.ejson.EJSON;
  var IdMap = Package['id-map'].IdMap;
  var Random = Package.random.Random;

  /* Package-scope variables */
  var MongoID;

  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                    //
    // packages/mongo-id/id.js                                                                            //
    //                                                                                                    //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    MongoID = {};                                                                                         // 1
    // 2
    MongoID._looksLikeObjectID = function (str) {                                                         // 3
      return str.length === 24 && str.match(/^[0-9a-f]*$/);                                               // 4
    };                                                                                                    // 5
    // 6
    MongoID.ObjectID = function (hexString) {                                                             // 7
      //random-based impl of Mongo ObjectID                                                               // 8
      var self = this;                                                                                    // 9
      if (hexString) {                                                                                    // 10
        hexString = hexString.toLowerCase();                                                              // 11
        if (!MongoID._looksLikeObjectID(hexString)) {                                                     // 12
          throw new Error("Invalid hexadecimal string for creating an ObjectID");                         // 13
        }                                                                                                 // 14
        // meant to work with _.isEqual(), which relies on structural equality                            // 15
        self._str = hexString;                                                                            // 16
      } else {                                                                                            // 17
        self._str = Random.hexString(24);                                                                 // 18
      }                                                                                                   // 19
    };                                                                                                    // 20
    // 21
    MongoID.ObjectID.prototype.toString = function () {                                                   // 22
      var self = this;                                                                                    // 23
      return "ObjectID(\"" + self._str + "\")";                                                           // 24
    };                                                                                                    // 25
    // 26
    MongoID.ObjectID.prototype.equals = function (other) {                                                // 27
      var self = this;                                                                                    // 28
      return other instanceof MongoID.ObjectID &&                                                         // 29
        self.valueOf() === other.valueOf();                                                               // 30
    };                                                                                                    // 31
    // 32
    MongoID.ObjectID.prototype.clone = function () {                                                      // 33
      var self = this;                                                                                    // 34
      return new MongoID.ObjectID(self._str);                                                             // 35
    };                                                                                                    // 36
    // 37
    MongoID.ObjectID.prototype.typeName = function () {                                                    // 38
      return "oid";                                                                                       // 39
    };                                                                                                    // 40
    // 41
    MongoID.ObjectID.prototype.getTimestamp = function () {                                                // 42
      var self = this;                                                                                    // 43
      return parseInt(self._str.substr(0, 8), 16);                                                        // 44
    };                                                                                                    // 45
    // 46
    MongoID.ObjectID.prototype.valueOf =                                                                  // 47
      MongoID.ObjectID.prototype.toJSONValue =                                                          // 48
      MongoID.ObjectID.prototype.toHexString =                                                          // 49
      function () { return this._str; };                                                                // 50
    // 51
    EJSON.addType("oid", function (str) {                                                                // 52
      return new MongoID.ObjectID(str);                                                                   // 53
    });                                                                                                   // 54
    // 55
    MongoID.idStringify = function (id) {                                                                 // 56
      if (id instanceof MongoID.ObjectID) {                                                               // 57
        return id.valueOf();                                                                              // 58
      } else if (typeof id === 'string') {                                                                // 59
        if (id === "") {                                                                                  // 60
          return id;                                                                                      // 61
        } else if (id.substr(0, 1) === "-" || // escape previously dashed strings                         // 62
          id.substr(0, 1) === "~" || // escape escaped numbers, true, false                      // 63
          MongoID._looksLikeObjectID(id) || // escape object-id-form strings                     // 64
          id.substr(0, 1) === '{') { // escape object-form strings, for maybe implementing later
          return "-" + id;                                                                                // 66
        } else {                                                                                          // 67
          return id; // other strings go through unchanged.                                               // 68
        }                                                                                                 // 69
      } else if (id === undefined) {                                                                      // 70
        return '-';                                                                                       // 71
      } else if (typeof id === 'object' && id !== null) {                                                 // 72
        throw new Error("Meteor does not currently support objects other than ObjectID as ids");          // 73
      } else { // Numbers, true, false, null                                                              // 74
        return "~" + JSON.stringify(id);                                                                  // 75
      }                                                                                                   // 76
    };                                                                                                    // 77
    // 78
    // 79
    MongoID.idParse = function (id) {                                                                     // 80
      if (id === "") {                                                                                    // 81
        return id;                                                                                        // 82
      } else if (id === '-') {                                                                            // 83
        return undefined;                                                                                 // 84
      } else if (id.substr(0, 1) === '-') {                                                               // 85
        return id.substr(1);                                                                              // 86
      } else if (id.substr(0, 1) === '~') {                                                               // 87
        return JSON.parse(id.substr(1));                                                                  // 88
      } else if (MongoID._looksLikeObjectID(id)) {                                                        // 89
        return new MongoID.ObjectID(id);                                                                  // 90
      } else {                                                                                            // 91
        return id;                                                                                        // 92
      }                                                                                                   // 93
    };                                                                                                    // 94
    // 95
    // 96
    ////////////////////////////////////////////////////////////////////////////////////////////////////////

  }).call(this);


  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols)
      (s in pkg) || (pkg[s] = symbols[s]);
  })(Package['mongo-id'] = {}, {
    MongoID: MongoID
  });

})();
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var _ = Package.underscore._;
  var EJSON = Package.ejson.EJSON;
  var IdMap = Package['id-map'].IdMap;
  var OrderedDict = Package['ordered-dict'].OrderedDict;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;
  var MongoID = Package['mongo-id'].MongoID;
  var Random = Package.random.Random;
  var DiffSequence = Package['diff-sequence'].DiffSequence;
  var GeoJSON = Package['geojson-utils'].GeoJSON;

  /* Package-scope variables */
  var LocalCollection, Minimongo, MinimongoTest, MinimongoError, isArray, isPlainObject, isIndexable, isOperatorObject, isNumericKey, regexpElementMatcher, equalityElementMatcher, ELEMENT_OPERATORS, makeLookupFunction, expandArraysInBranches, projectionDetails, pathsToTree;

  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                            //
    // packages/minimongo/minimongo.js                                                                            //
    //                                                                                                            //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // XXX type checking on selectors (graceful error if malformed)                                               // 1
    // 2
    // LocalCollection: a set of documents that supports queries and modifiers.                                   // 3
    // 4
    // Cursor: a specification for a particular subset of documents, w/                                           // 5
    // a defined order, limit, and offset.  creating a Cursor with LocalCollection.find(),                        // 6
    // 7
    // ObserveHandle: the return value of a live query.                                                           // 8
    // 9
    LocalCollection = function (name) {                                                                           // 10
      var self = this;                                                                                            // 11
      self.name = name;                                                                                           // 12
      // _id -> document (also containing id)                                                                     // 13
      self._docs = new LocalCollection._IdMap;                                                                    // 14
      // 15
      self._observeQueue = new Meteor._SynchronousQueue();                                                        // 16
      // 17
      self.next_qid = 1; // live query id generator                                                               // 18
      // 19
      // qid -> live query object. keys:                                                                          // 20
      //  ordered: bool. ordered queries have addedBefore/movedBefore callbacks.                                  // 21
      //  results: array (ordered) or object (unordered) of current results                                       // 22
      //    (aliased with self._docs!)                                                                            // 23
      //  resultsSnapshot: snapshot of results. null if not paused.                                               // 24
      //  cursor: Cursor object for the query.                                                                    // 25
      //  selector, sorter, (callbacks): functions                                                                // 26
      self.queries = {};                                                                                          // 27
      // 28
      // null if not saving originals; an IdMap from id to original document value if                             // 29
      // saving originals. See comments before saveOriginals().                                                   // 30
      self._savedOriginals = null;                                                                                // 31
      // 32
      // True when observers are paused and we should not send callbacks.                                         // 33
      self.paused = false;                                                                                        // 34
    };                                                                                                            // 35
    // 36
    Minimongo = {};                                                                                               // 37
    // 38
    // Object exported only for unit testing.                                                                     // 39
    // Use it to export private functions to test in Tinytest.                                                    // 40
    MinimongoTest = {};                                                                                           // 41
    // 42
    MinimongoError = function (message) {                                                                         // 43
      var e = new Error(message);                                                                                 // 44
      e.name = "MinimongoError";                                                                                  // 45
      return e;                                                                                                   // 46
    };                                                                                                            // 47
    // 48
    // 49
    // options may include sort, skip, limit, reactive                                                            // 50
    // sort may be any of these forms:                                                                            // 51
    //     {a: 1, b: -1}                                                                                          // 52
    //     [["a", "asc"], ["b", "desc"]]                                                                          // 53
    //     ["a", ["b", "desc"]]                                                                                   // 54
    //   (in the first form you're beholden to key enumeration order in                                           // 55
    //   your javascript VM)                                                                                      // 56
    //                                                                                                            // 57
    // reactive: if given, and false, don't register with Tracker (default                                        // 58
    // is true)                                                                                                   // 59
    //                                                                                                            // 60
    // XXX possibly should support retrieving a subset of fields? and                                             // 61
    // have it be a hint (ignored on the client, when not copying the                                             // 62
    // doc?)                                                                                                      // 63
    //                                                                                                            // 64
    // XXX sort does not yet support subkeys ('a.b') .. fix that!                                                 // 65
    // XXX add one more sort form: "key"                                                                          // 66
    // XXX tests                                                                                                  // 67
    LocalCollection.prototype.find = function (selector, options) {                                               // 68
      // default syntax for everything is to omit the selector argument.                                          // 69
      // but if selector is explicitly passed in as false or undefined, we                                        // 70
      // want a selector that matches nothing.                                                                    // 71
      if (arguments.length === 0)                                                                                 // 72
        selector = {};                                                                                            // 73
      // 74
      return new LocalCollection.Cursor(this, selector, options);                                                 // 75
    };                                                                                                            // 76
    // 77
    // don't call this ctor directly.  use LocalCollection.find().                                                // 78
    // 79
    LocalCollection.Cursor = function (collection, selector, options) {                                           // 80
      var self = this;                                                                                            // 81
      if (!options) options = {};                                                                                 // 82
      // 83
      self.collection = collection;                                                                               // 84
      self.sorter = null;                                                                                         // 85
      self.matcher = new Minimongo.Matcher(selector);                                                             // 86
      // 87
      if (LocalCollection._selectorIsId(selector)) {                                                              // 88
        // stash for fast path                                                                                    // 89
        self._selectorId = selector;                                                                              // 90
      } else if (LocalCollection._selectorIsIdPerhapsAsObject(selector)) {                                        // 91
        // also do the fast path for { _id: idString }                                                            // 92
        self._selectorId = selector._id;                                                                          // 93
      } else {                                                                                                    // 94
        self._selectorId = undefined;                                                                             // 95
        if (self.matcher.hasGeoQuery() || options.sort) {                                                         // 96
          self.sorter = new Minimongo.Sorter(options.sort || [],                                                  // 97
            { matcher: self.matcher });                                          // 98
        }                                                                                                         // 99
      }                                                                                                           // 100
      // 101
      self.skip = options.skip;                                                                                   // 102
      self.limit = options.limit;                                                                                 // 103
      self.fields = options.fields;                                                                               // 104
      // 105
      self._projectionFn = LocalCollection._compileProjection(self.fields || {});                                 // 106
      // 107
      self._transform = LocalCollection.wrapTransform(options.transform);                                         // 108
      // 109
      // by default, queries register w/ Tracker when it is available.                                            // 110
      if (typeof Tracker !== "undefined")                                                                         // 111
        self.reactive = (options.reactive === undefined) ? true : options.reactive;                               // 112
    };                                                                                                            // 113
    // 114
    // Since we don't actually have a "nextObject" interface, there's really no                                   // 115
    // reason to have a "rewind" interface.  All it did was make multiple calls                                   // 116
    // to fetch/map/forEach return nothing the second time.                                                       // 117
    // XXX COMPAT WITH 0.8.1                                                                                      // 118
    LocalCollection.Cursor.prototype.rewind = function () {                                                       // 119
    };                                                                                                            // 120
    // 121
    LocalCollection.prototype.findOne = function (selector, options) {                                            // 122
      if (arguments.length === 0)                                                                                 // 123
        selector = {};                                                                                            // 124
      // 125
      // NOTE: by setting limit 1 here, we end up using very inefficient                                          // 126
      // code that recomputes the whole query on each update. The upside is                                       // 127
      // that when you reactively depend on a findOne you only get                                                // 128
      // invalidated when the found object changes, not any object in the                                         // 129
      // collection. Most findOne will be by id, which has a fast path, so                                        // 130
      // this might not be a big deal. In most cases, invalidation causes                                         // 131
      // the called to re-query anyway, so this should be a net performance                                       // 132
      // improvement.                                                                                             // 133
      options = options || {};                                                                                    // 134
      options.limit = 1;                                                                                          // 135
      // 136
      return this.find(selector, options).fetch()[0];                                                             // 137
    };                                                                                                            // 138
    // 139
    /**                                                                                                           // 140
     * @callback IterationCallback                                                                                // 141
     * @param {Object} doc                                                                                        // 142
     * @param {Number} index                                                                                      // 143
     */                                                                                                           // 144
    /**                                                                                                           // 145
     * @summary Call `callback` once for each matching document, sequentially and synchronously.                  // 146
     * @locus Anywhere                                                                                            // 147
     * @method  forEach                                                                                           // 148
     * @instance                                                                                                  // 149
     * @memberOf Mongo.Cursor                                                                                     // 150
     * @param {IterationCallback} callback Function to call. It will be called with three arguments: the document, a 0-based index, and <em>cursor</em> itself.
     * @param {Any} [thisArg] An object which will be the value of `this` inside `callback`.                      // 152
     */                                                                                                           // 153
    LocalCollection.Cursor.prototype.forEach = function (callback, thisArg) {                                     // 154
      var self = this;                                                                                            // 155
      // 156
      var objects = self._getRawObjects({ ordered: true });                                                         // 157
      // 158
      if (self.reactive) {                                                                                        // 159
        self._depend({                                                                                            // 160
          addedBefore: true,                                                                                      // 161
          removed: true,                                                                                          // 162
          changed: true,                                                                                          // 163
          movedBefore: true
        });                                                                                    // 164
      }                                                                                                           // 165
      // 166
      _.each(objects, function (elt, i) {                                                                         // 167
        // This doubles as a clone operation.                                                                     // 168
        elt = self._projectionFn(elt);                                                                            // 169
        // 170
        if (self._transform)                                                                                      // 171
          elt = self._transform(elt);                                                                             // 172
        callback.call(thisArg, elt, i, self);                                                                     // 173
      });                                                                                                         // 174
    };                                                                                                            // 175
    // 176
    LocalCollection.Cursor.prototype.getTransform = function () {                                                 // 177
      return this._transform;                                                                                     // 178
    };                                                                                                            // 179
    // 180
    /**                                                                                                           // 181
     * @summary Map callback over all matching documents.  Returns an Array.                                      // 182
     * @locus Anywhere                                                                                            // 183
     * @method map                                                                                                // 184
     * @instance                                                                                                  // 185
     * @memberOf Mongo.Cursor                                                                                     // 186
     * @param {IterationCallback} callback Function to call. It will be called with three arguments: the document, a 0-based index, and <em>cursor</em> itself.
     * @param {Any} [thisArg] An object which will be the value of `this` inside `callback`.                      // 188
     */                                                                                                           // 189
    LocalCollection.Cursor.prototype.map = function (callback, thisArg) {                                         // 190
      var self = this;                                                                                            // 191
      var res = [];                                                                                               // 192
      self.forEach(function (doc, index) {                                                                        // 193
        res.push(callback.call(thisArg, doc, index, self));                                                       // 194
      });                                                                                                         // 195
      return res;                                                                                                 // 196
    };                                                                                                            // 197
    // 198
    /**                                                                                                           // 199
     * @summary Return all matching documents as an Array.                                                        // 200
     * @memberOf Mongo.Cursor                                                                                     // 201
     * @method  fetch                                                                                             // 202
     * @instance                                                                                                  // 203
     * @locus Anywhere                                                                                            // 204
     * @returns {Object[]}                                                                                        // 205
     */                                                                                                           // 206
    LocalCollection.Cursor.prototype.fetch = function () {                                                        // 207
      var self = this;                                                                                            // 208
      var res = [];                                                                                               // 209
      self.forEach(function (doc) {                                                                               // 210
        res.push(doc);                                                                                            // 211
      });                                                                                                         // 212
      return res;                                                                                                 // 213
    };                                                                                                            // 214
    // 215
    /**                                                                                                           // 216
     * @summary Returns the number of documents that match a query.                                               // 217
     * @memberOf Mongo.Cursor                                                                                     // 218
     * @method  count                                                                                             // 219
     * @instance                                                                                                  // 220
     * @locus Anywhere                                                                                            // 221
     * @returns {Number}                                                                                          // 222
     */                                                                                                           // 223
    LocalCollection.Cursor.prototype.count = function () {                                                        // 224
      var self = this;                                                                                            // 225
      // 226
      if (self.reactive)                                                                                          // 227
        self._depend({ added: true, removed: true },                                                                // 228
          true /* allow the observe to be unordered */);                                               // 229
      // 230
      return self._getRawObjects({ ordered: true }).length;                                                         // 231
    };                                                                                                            // 232
    // 233
    LocalCollection.Cursor.prototype._publishCursor = function (sub) {                                            // 234
      var self = this;                                                                                            // 235
      if (!self.collection.name)                                                                                 // 236
        throw new Error("Can't publish a cursor from a collection without a name.");                              // 237
      var collection = self.collection.name;                                                                      // 238
      // 239
      // XXX minimongo should not depend on mongo-livedata!                                                       // 240
      if (!Package.mongo) {                                                                                      // 241
        throw new Error("Can't publish from Minimongo without the `mongo` package.");                             // 242
      }                                                                                                           // 243
      // 244
      return Package.mongo.Mongo.Collection._publishCursor(self, sub, collection);                                // 245
    };                                                                                                            // 246
    // 247
    LocalCollection.Cursor.prototype._getCollectionName = function () {                                           // 248
      var self = this;                                                                                            // 249
      return self.collection.name;                                                                                // 250
    };                                                                                                            // 251
    // 252
    LocalCollection._observeChangesCallbacksAreOrdered = function (callbacks) {                                   // 253
      if (callbacks.added && callbacks.addedBefore)                                                               // 254
        throw new Error("Please specify only one of added() and addedBefore()");                                  // 255
      return !!(callbacks.addedBefore || callbacks.movedBefore);                                                  // 256
    };                                                                                                            // 257
    // 258
    LocalCollection._observeCallbacksAreOrdered = function (callbacks) {                                          // 259
      if (callbacks.addedAt && callbacks.added)                                                                   // 260
        throw new Error("Please specify only one of added() and addedAt()");                                      // 261
      if (callbacks.changedAt && callbacks.changed)                                                               // 262
        throw new Error("Please specify only one of changed() and changedAt()");                                  // 263
      if (callbacks.removed && callbacks.removedAt)                                                               // 264
        throw new Error("Please specify only one of removed() and removedAt()");                                  // 265
      // 266
      return !!(callbacks.addedAt || callbacks.movedTo || callbacks.changedAt                                     // 267
        || callbacks.removedAt);                                                                          // 268
    };                                                                                                            // 269
    // 270
    // the handle that comes back from observe.                                                                   // 271
    LocalCollection.ObserveHandle = function () { };                                                               // 272
    // 273
    // options to contain:                                                                                        // 274
    //  * callbacks for observe():                                                                                // 275
    //    - addedAt (document, atIndex)                                                                           // 276
    //    - added (document)                                                                                      // 277
    //    - changedAt (newDocument, oldDocument, atIndex)                                                         // 278
    //    - changed (newDocument, oldDocument)                                                                    // 279
    //    - removedAt (document, atIndex)                                                                         // 280
    //    - removed (document)                                                                                    // 281
    //    - movedTo (document, oldIndex, newIndex)                                                                // 282
    //                                                                                                            // 283
    // attributes available on returned query handle:                                                             // 284
    //  * stop(): end updates                                                                                     // 285
    //  * collection: the collection this query is querying                                                       // 286
    //                                                                                                            // 287
    // iff x is a returned query handle, (x instanceof                                                            // 288
    // LocalCollection.ObserveHandle) is true                                                                     // 289
    //                                                                                                            // 290
    // initial results delivered through added callback                                                           // 291
    // XXX maybe callbacks should take a list of objects, to expose transactions?                                 // 292
    // XXX maybe support field limiting (to limit what you're notified on)                                        // 293
    // 294
    _.extend(LocalCollection.Cursor.prototype, {                                                                  // 295
      /**                                                                                                         // 296
       * @summary Watch a query.  Receive callbacks as the result set changes.                                    // 297
       * @locus Anywhere                                                                                          // 298
       * @memberOf Mongo.Cursor                                                                                   // 299
       * @instance                                                                                                // 300
       * @param {Object} callbacks Functions to call to deliver the result set as it changes                      // 301
       */                                                                                                         // 302
      observe: function (options) {                                                                               // 303
        var self = this;                                                                                          // 304
        return LocalCollection._observeFromObserveChanges(self, options);                                         // 305
      },                                                                                                          // 306
      // 307
      /**                                                                                                         // 308
       * @summary Watch a query.  Receive callbacks as the result set changes.  Only the differences between the old and new documents are passed to the callbacks.
       * @locus Anywhere                                                                                          // 310
       * @memberOf Mongo.Cursor                                                                                   // 311
       * @instance                                                                                                // 312
       * @param {Object} callbacks Functions to call to deliver the result set as it changes                      // 313
       */                                                                                                         // 314
      observeChanges: function (options) {                                                                        // 315
        var self = this;                                                                                          // 316
        // 317
        var ordered = LocalCollection._observeChangesCallbacksAreOrdered(options);                                // 318
        // 319
        // there are several places that assume you aren't combining skip/limit with                              // 320
        // unordered observe.  eg, update's EJSON.clone, and the "there are several"                              // 321
        // comment in _modifyAndNotify                                                                            // 322
        // XXX allow skip/limit with unordered observe                                                            // 323
        if (!options._allow_unordered && !ordered && (self.skip || self.limit))                                   // 324
          throw new Error("must use ordered observe (ie, 'addedBefore' instead of 'added') with skip or limit");  // 325
        // 326
        if (self.fields && (self.fields._id === 0 || self.fields._id === false))                                  // 327
          throw Error("You may not observe a cursor with {fields: {_id: 0}}");                                    // 328
        // 329
        var query = {                                                                                             // 330
          dirty: false,                                                                                           // 331
          matcher: self.matcher, // not fast pathed                                                               // 332
          sorter: ordered && self.sorter,                                                                         // 333
          distances: (                                                                                            // 334
            self.matcher.hasGeoQuery() && ordered && new LocalCollection._IdMap),                                 // 335
          resultsSnapshot: null,                                                                                  // 336
          ordered: ordered,                                                                                       // 337
          cursor: self,                                                                                           // 338
          projectionFn: self._projectionFn                                                                        // 339
        };                                                                                                        // 340
        var qid;                                                                                                  // 341
        // 342
        // Non-reactive queries call added[Before] and then never call anything                                   // 343
        // else.                                                                                                  // 344
        if (self.reactive) {                                                                                      // 345
          qid = self.collection.next_qid++;                                                                       // 346
          self.collection.queries[qid] = query;                                                                   // 347
        }                                                                                                         // 348
        query.results = self._getRawObjects({                                                                     // 349
          ordered: ordered, distances: query.distances
        });                                                         // 350
        if (self.collection.paused)                                                                               // 351
          query.resultsSnapshot = (ordered ? [] : new LocalCollection._IdMap);                                    // 352
        // 353
        // wrap callbacks we were passed. callbacks only fire when not paused and                                 // 354
        // are never undefined                                                                                    // 355
        // Filters out blacklisted fields according to cursor's projection.                                       // 356
        // XXX wrong place for this?                                                                              // 357
        // 358
        // furthermore, callbacks enqueue until the operation we're working on is                                 // 359
        // done.                                                                                                  // 360
        var wrapCallback = function (f) {                                                                         // 361
          if (!f)                                                                                                 // 362
            return function () { };                                                                                // 363
          return function (/*args*/) {                                                                            // 364
            var context = this;                                                                                   // 365
            var args = arguments;                                                                                 // 366
            // 367
            if (self.collection.paused)                                                                           // 368
              return;                                                                                             // 369
            // 370
            self.collection._observeQueue.queueTask(function () {                                                 // 371
              f.apply(context, args);                                                                             // 372
            });                                                                                                   // 373
          };                                                                                                      // 374
        };                                                                                                        // 375
        query.added = wrapCallback(options.added);                                                                // 376
        query.changed = wrapCallback(options.changed);                                                            // 377
        query.removed = wrapCallback(options.removed);                                                            // 378
        if (ordered) {                                                                                            // 379
          query.addedBefore = wrapCallback(options.addedBefore);                                                  // 380
          query.movedBefore = wrapCallback(options.movedBefore);                                                  // 381
        }                                                                                                         // 382
        // 383
        if (!options._suppress_initial && !self.collection.paused) {                                              // 384
          // XXX unify ordered and unordered interface                                                            // 385
          var each = ordered                                                                                      // 386
            ? _.bind(_.each, null, query.results)                                                             // 387
            : _.bind(query.results.forEach, query.results);                                                   // 388
          each(function (doc) {                                                                                   // 389
            var fields = EJSON.clone(doc);                                                                        // 390
            // 391
            delete fields._id;                                                                                    // 392
            if (ordered)                                                                                          // 393
              query.addedBefore(doc._id, self._projectionFn(fields), null);                                       // 394
            query.added(doc._id, self._projectionFn(fields));                                                     // 395
          });                                                                                                     // 396
        }                                                                                                         // 397
        // 398
        var handle = new LocalCollection.ObserveHandle;                                                           // 399
        _.extend(handle, {                                                                                        // 400
          collection: self.collection,                                                                            // 401
          stop: function () {                                                                                     // 402
            if (self.reactive)                                                                                    // 403
              delete self.collection.queries[qid];                                                                // 404
          }                                                                                                       // 405
        });                                                                                                       // 406
        // 407
        if (self.reactive && Tracker.active) {                                                                    // 408
          // XXX in many cases, the same observe will be recreated when                                           // 409
          // the current autorun is rerun.  we could save work by                                                 // 410
          // letting it linger across rerun and potentially get                                                   // 411
          // repurposed if the same observe is performed, using logic                                             // 412
          // similar to that of Meteor.subscribe.                                                                 // 413
          Tracker.onInvalidate(function () {                                                                      // 414
            handle.stop();                                                                                        // 415
          });                                                                                                     // 416
        }                                                                                                         // 417
        // run the observe callbacks resulting from the initial contents                                          // 418
        // before we leave the observe.                                                                           // 419
        self.collection._observeQueue.drain();                                                                    // 420
        // 421
        return handle;                                                                                            // 422
      }                                                                                                           // 423
    });                                                                                                           // 424
    // 425
    // Returns a collection of matching objects, but doesn't deep copy them.                                      // 426
    //                                                                                                            // 427
    // If ordered is set, returns a sorted array, respecting sorter, skip, and limit                              // 428
    // properties of the query.  if sorter is falsey, no sort -- you get the natural                              // 429
    // order.                                                                                                     // 430
    //                                                                                                            // 431
    // If ordered is not set, returns an object mapping from ID to doc (sorter, skip                              // 432
    // and limit should not be set).                                                                              // 433
    //                                                                                                            // 434
    // If ordered is set and this cursor is a $near geoquery, then this function                                  // 435
    // will use an _IdMap to track each distance from the $near argument point in                                 // 436
    // order to use it as a sort key. If an _IdMap is passed in the 'distances'                                   // 437
    // argument, this function will clear it and use it for this purpose (otherwise                               // 438
    // it will just create its own _IdMap). The observeChanges implementation uses                                // 439
    // this to remember the distances after this function returns.                                                // 440
    LocalCollection.Cursor.prototype._getRawObjects = function (options) {                                        // 441
      var self = this;                                                                                            // 442
      options = options || {};                                                                                    // 443
      // 444
      // XXX use OrderedDict instead of array, and make IdMap and OrderedDict                                     // 445
      // compatible                                                                                               // 446
      var results = options.ordered ? [] : new LocalCollection._IdMap;                                            // 447
      // 448
      // fast path for single ID value                                                                            // 449
      if (self._selectorId !== undefined) {                                                                       // 450
        // If you have non-zero skip and ask for a single id, you get                                             // 451
        // nothing. This is so it matches the behavior of the '{_id: foo}'                                        // 452
        // path.                                                                                                  // 453
        if (self.skip)                                                                                            // 454
          return results;                                                                                         // 455
        // 456
        var selectedDoc = self.collection._docs.get(self._selectorId);                                            // 457
        if (selectedDoc) {                                                                                        // 458
          if (options.ordered)                                                                                    // 459
            results.push(selectedDoc);                                                                            // 460
          else                                                                                                    // 461
            results.set(self._selectorId, selectedDoc);                                                           // 462
        }                                                                                                         // 463
        return results;                                                                                           // 464
      }                                                                                                           // 465
      // 466
      // slow path for arbitrary selector, sort, skip, limit                                                      // 467
      // 468
      // in the observeChanges case, distances is actually part of the "query" (ie,                               // 469
      // live results set) object.  in other cases, distances is only used inside                                 // 470
      // this function.                                                                                           // 471
      var distances;                                                                                              // 472
      if (self.matcher.hasGeoQuery() && options.ordered) {                                                        // 473
        if (options.distances) {                                                                                  // 474
          distances = options.distances;                                                                          // 475
          distances.clear();                                                                                      // 476
        } else {                                                                                                  // 477
          distances = new LocalCollection._IdMap();                                                               // 478
        }                                                                                                         // 479
      }                                                                                                           // 480
      // 481
      self.collection._docs.forEach(function (doc, id) {                                                          // 482
        var matchResult = self.matcher.documentMatches(doc);                                                      // 483
        if (matchResult.result) {                                                                                 // 484
          if (options.ordered) {                                                                                  // 485
            results.push(doc);                                                                                    // 486
            if (distances && matchResult.distance !== undefined)                                                  // 487
              distances.set(id, matchResult.distance);                                                            // 488
          } else {                                                                                                // 489
            results.set(id, doc);                                                                                 // 490
          }                                                                                                       // 491
        }                                                                                                         // 492
        // Fast path for limited unsorted queries.                                                                // 493
        // XXX 'length' check here seems wrong for ordered                                                        // 494
        if (self.limit && !self.skip && !self.sorter &&                                                           // 495
          results.length === self.limit)                                                                        // 496
          return false;  // break                                                                                 // 497
        return true;  // continue                                                                                 // 498
      });                                                                                                         // 499
      // 500
      if (!options.ordered)                                                                                       // 501
        return results;                                                                                           // 502
      // 503
      if (self.sorter) {                                                                                          // 504
        var comparator = self.sorter.getComparator({ distances: distances });                                       // 505
        results.sort(comparator);                                                                                 // 506
      }                                                                                                           // 507
      // 508
      var idx_start = self.skip || 0;                                                                             // 509
      var idx_end = self.limit ? (self.limit + idx_start) : results.length;                                       // 510
      return results.slice(idx_start, idx_end);                                                                   // 511
    };                                                                                                            // 512
    // 513
    // XXX Maybe we need a version of observe that just calls a callback if                                       // 514
    // anything changed.                                                                                          // 515
    LocalCollection.Cursor.prototype._depend = function (changers, _allow_unordered) {                            // 516
      var self = this;                                                                                            // 517
      // 518
      if (Tracker.active) {                                                                                       // 519
        var v = new Tracker.Dependency;                                                                           // 520
        v.depend();                                                                                               // 521
        var notifyChange = _.bind(v.changed, v);                                                                  // 522
        // 523
        var options = {                                                                                           // 524
          _suppress_initial: true,                                                                                // 525
          _allow_unordered: _allow_unordered                                                                      // 526
        };                                                                                                        // 527
        _.each(['added', 'changed', 'removed', 'addedBefore', 'movedBefore'],                                     // 528
          function (fnName) {                                                                                // 529
            if (changers[fnName])                                                                            // 530
              options[fnName] = notifyChange;                                                                // 531
          });                                                                                                // 532
        // 533
        // observeChanges will stop() when this computation is invalidated                                        // 534
        self.observeChanges(options);                                                                             // 535
      }                                                                                                           // 536
    };                                                                                                            // 537
    // 538
    // XXX enforce rule that field names can't start with '$' or contain '.'                                      // 539
    // (real mongodb does in fact enforce this)                                                                   // 540
    // XXX possibly enforce that 'undefined' does not appear (we assume                                           // 541
    // this in our handling of null and $exists)                                                                  // 542
    LocalCollection.prototype.insert = function (doc, callback) {                                                 // 543
      var self = this;                                                                                            // 544
      doc = EJSON.clone(doc);                                                                                     // 545
      // 546
      if (!_.has(doc, '_id')) {                                                                                   // 547
        // if you really want to use ObjectIDs, set this global.                                                  // 548
        // Mongo.Collection specifies its own ids and does not use this code.                                     // 549
        doc._id = LocalCollection._useOID ? new MongoID.ObjectID()                                                // 550
          : Random.id();                                                          // 551
      }                                                                                                           // 552
      var id = doc._id;                                                                                           // 553
      // 554
      if (self._docs.has(id))                                                                                     // 555
        throw MinimongoError("Duplicate _id '" + id + "'");                                                       // 556
      // 557
      self._saveOriginal(id, undefined);                                                                          // 558
      self._docs.set(id, doc);                                                                                    // 559
      // 560
      var queriesToRecompute = [];                                                                                // 561
      // trigger live queries that match                                                                          // 562
      for (var qid in self.queries) {                                                                             // 563
        var query = self.queries[qid];                                                                            // 564
        if (query.dirty) continue;                                                                                // 565
        var matchResult = query.matcher.documentMatches(doc);                                                     // 566
        if (matchResult.result) {                                                                                 // 567
          if (query.distances && matchResult.distance !== undefined)                                              // 568
            query.distances.set(id, matchResult.distance);                                                        // 569
          if (query.cursor.skip || query.cursor.limit)                                                            // 570
            queriesToRecompute.push(qid);                                                                         // 571
          else                                                                                                    // 572
            LocalCollection._insertInResults(query, doc);                                                         // 573
        }                                                                                                         // 574
      }                                                                                                           // 575
      // 576
      _.each(queriesToRecompute, function (qid) {                                                                 // 577
        if (self.queries[qid])                                                                                    // 578
          self._recomputeResults(self.queries[qid]);                                                              // 579
      });                                                                                                         // 580
      self._observeQueue.drain();                                                                                 // 581
      // 582
      // Defer because the caller likely doesn't expect the callback to be run                                    // 583
      // immediately.                                                                                             // 584
      if (callback)                                                                                               // 585
        Meteor.defer(function () {                                                                                // 586
          callback(null, id);                                                                                     // 587
        });                                                                                                       // 588
      return id;                                                                                                  // 589
    };                                                                                                            // 590
    // 591
    // Iterates over a subset of documents that could match selector; calls                                       // 592
    // f(doc, id) on each of them.  Specifically, if selector specifies                                           // 593
    // specific _id's, it only looks at those.  doc is *not* cloned: it is the                                    // 594
    // same object that is in _docs.                                                                              // 595
    LocalCollection.prototype._eachPossiblyMatchingDoc = function (selector, f) {                                 // 596
      var self = this;                                                                                            // 597
      var specificIds = LocalCollection._idsMatchedBySelector(selector);                                          // 598
      if (specificIds) {                                                                                          // 599
        for (var i = 0; i < specificIds.length; ++i) {                                                            // 600
          var id = specificIds[i];                                                                                // 601
          var doc = self._docs.get(id);                                                                           // 602
          if (doc) {                                                                                              // 603
            var breakIfFalse = f(doc, id);                                                                        // 604
            if (breakIfFalse === false)                                                                           // 605
              break;                                                                                              // 606
          }                                                                                                       // 607
        }                                                                                                         // 608
      } else {                                                                                                    // 609
        self._docs.forEach(f);                                                                                    // 610
      }                                                                                                           // 611
    };                                                                                                            // 612
    // 613
    LocalCollection.prototype.remove = function (selector, callback) {                                            // 614
      var self = this;                                                                                            // 615
      // 616
      // Easy special case: if we're not calling observeChanges callbacks and we're                               // 617
      // not saving originals and we got asked to remove everything, then just empty                              // 618
      // everything directly.                                                                                     // 619
      if (self.paused && !self._savedOriginals && EJSON.equals(selector, {})) {                                   // 620
        var result = self._docs.size();                                                                           // 621
        self._docs.clear();                                                                                       // 622
        _.each(self.queries, function (query) {                                                                   // 623
          if (query.ordered) {                                                                                    // 624
            query.results = [];                                                                                   // 625
          } else {                                                                                                // 626
            query.results.clear();                                                                                // 627
          }                                                                                                       // 628
        });                                                                                                       // 629
        if (callback) {                                                                                           // 630
          Meteor.defer(function () {                                                                              // 631
            callback(null, result);                                                                               // 632
          });                                                                                                     // 633
        }                                                                                                         // 634
        return result;                                                                                            // 635
      }                                                                                                           // 636
      // 637
      var matcher = new Minimongo.Matcher(selector);                                                              // 638
      var remove = [];                                                                                            // 639
      self._eachPossiblyMatchingDoc(selector, function (doc, id) {                                                // 640
        if (matcher.documentMatches(doc).result)                                                                  // 641
          remove.push(id);                                                                                        // 642
      });                                                                                                         // 643
      // 644
      var queriesToRecompute = [];                                                                                // 645
      var queryRemove = [];                                                                                       // 646
      for (var i = 0; i < remove.length; i++) {                                                                   // 647
        var removeId = remove[i];                                                                                 // 648
        var removeDoc = self._docs.get(removeId);                                                                 // 649
        _.each(self.queries, function (query, qid) {                                                              // 650
          if (query.dirty) return;                                                                                // 651
          // 652
          if (query.matcher.documentMatches(removeDoc).result) {                                                  // 653
            if (query.cursor.skip || query.cursor.limit)                                                          // 654
              queriesToRecompute.push(qid);                                                                       // 655
            else                                                                                                  // 656
              queryRemove.push({ qid: qid, doc: removeDoc });                                                       // 657
          }                                                                                                       // 658
        });                                                                                                       // 659
        self._saveOriginal(removeId, removeDoc);                                                                  // 660
        self._docs.remove(removeId);                                                                              // 661
      }                                                                                                           // 662
      // 663
      // run live query callbacks _after_ we've removed the documents.                                            // 664
      _.each(queryRemove, function (remove) {                                                                     // 665
        var query = self.queries[remove.qid];                                                                     // 666
        if (query) {                                                                                              // 667
          query.distances && query.distances.remove(remove.doc._id);                                              // 668
          LocalCollection._removeFromResults(query, remove.doc);                                                  // 669
        }                                                                                                         // 670
      });                                                                                                         // 671
      _.each(queriesToRecompute, function (qid) {                                                                 // 672
        var query = self.queries[qid];                                                                            // 673
        if (query)                                                                                                // 674
          self._recomputeResults(query);                                                                          // 675
      });                                                                                                         // 676
      self._observeQueue.drain();                                                                                 // 677
      result = remove.length;                                                                                     // 678
      if (callback)                                                                                               // 679
        Meteor.defer(function () {                                                                                // 680
          callback(null, result);                                                                                 // 681
        });                                                                                                       // 682
      return result;                                                                                              // 683
    };                                                                                                            // 684
    // 685
    // XXX atomicity: if multi is true, and one modification fails, do                                            // 686
    // we rollback the whole operation, or what?                                                                  // 687
    LocalCollection.prototype.update = function (selector, mod, options, callback) {                              // 688
      var self = this;                                                                                            // 689
      if (!callback && options instanceof Function) {                                                            // 690
        callback = options;                                                                                       // 691
        options = null;                                                                                           // 692
      }                                                                                                           // 693
      if (!options) options = {};                                                                                 // 694
      // 695
      var matcher = new Minimongo.Matcher(selector);                                                              // 696
      // 697
      // Save the original results of any query that we might need to                                             // 698
      // _recomputeResults on, because _modifyAndNotify will mutate the objects in                                // 699
      // it. (We don't need to save the original results of paused queries because                                // 700
      // they already have a resultsSnapshot and we won't be diffing in                                           // 701
      // _recomputeResults.)                                                                                      // 702
      var qidToOriginalResults = {};                                                                              // 703
      // We should only clone each document once, even if it appears in multiple queries                          // 704
      var docMap = new LocalCollection._IdMap;                                                                    // 705
      var idsMatchedBySelector = LocalCollection._idsMatchedBySelector(selector);                                 // 706
      // 707
      _.each(self.queries, function (query, qid) {                                                                // 708
        if ((query.cursor.skip || query.cursor.limit) && !self.paused) {                                         // 709
          // Catch the case of a reactive `count()` on a cursor with skip                                         // 710
          // or limit, which registers an unordered observe. This is a                                            // 711
          // pretty rare case, so we just clone the entire result set with                                        // 712
          // no optimizations for documents that appear in these result                                           // 713
          // sets and other queries.                                                                              // 714
          if (query.results instanceof LocalCollection._IdMap) {                                                  // 715
            qidToOriginalResults[qid] = query.results.clone();                                                    // 716
            return;                                                                                               // 717
          }                                                                                                       // 718
          // 719
          if (!(query.results instanceof Array)) {                                                                // 720
            throw new Error("Assertion failed: query.results not an array");                                      // 721
          }                                                                                                       // 722
          // 723
          // Clones a document to be stored in `qidToOriginalResults`                                             // 724
          // because it may be modified before the new and old result sets                                        // 725
          // are diffed. But if we know exactly which document IDs we're                                          // 726
          // going to modify, then we only need to clone those.                                                   // 727
          var memoizedCloneIfNeeded = function (doc) {                                                             // 728
            if (docMap.has(doc._id)) {                                                                            // 729
              return docMap.get(doc._id);                                                                         // 730
            } else {                                                                                              // 731
              var docToMemoize;                                                                                   // 732
              // 733
              if (idsMatchedBySelector && !_.any(idsMatchedBySelector, function (id) {                             // 734
                return EJSON.equals(id, doc._id);                                                                 // 735
              })) {                                                                                               // 736
                docToMemoize = doc;                                                                               // 737
              } else {                                                                                            // 738
                docToMemoize = EJSON.clone(doc);                                                                  // 739
              }                                                                                                   // 740
              // 741
              docMap.set(doc._id, docToMemoize);                                                                  // 742
              return docToMemoize;                                                                                // 743
            }                                                                                                     // 744
          };                                                                                                      // 745
          // 746
          qidToOriginalResults[qid] = query.results.map(memoizedCloneIfNeeded);                                   // 747
        }                                                                                                         // 748
      });                                                                                                         // 749
      var recomputeQids = {};                                                                                     // 750
      // 751
      var updateCount = 0;                                                                                        // 752
      // 753
      self._eachPossiblyMatchingDoc(selector, function (doc, id) {                                                // 754
        var queryResult = matcher.documentMatches(doc);                                                           // 755
        if (queryResult.result) {                                                                                 // 756
          // XXX Should we save the original even if mod ends up being a no-op?                                   // 757
          self._saveOriginal(id, doc);                                                                            // 758
          self._modifyAndNotify(doc, mod, recomputeQids, queryResult.arrayIndices);                               // 759
          ++updateCount;                                                                                          // 760
          if (!options.multi)                                                                                     // 761
            return false;  // break                                                                               // 762
        }                                                                                                         // 763
        return true;                                                                                              // 764
      });                                                                                                         // 765
      // 766
      _.each(recomputeQids, function (dummy, qid) {                                                               // 767
        var query = self.queries[qid];                                                                            // 768
        if (query)                                                                                                // 769
          self._recomputeResults(query, qidToOriginalResults[qid]);                                               // 770
      });                                                                                                         // 771
      self._observeQueue.drain();                                                                                 // 772
      // 773
      // If we are doing an upsert, and we didn't modify any documents yet, then                                  // 774
      // it's time to do an insert. Figure out what document we are inserting, and                                // 775
      // generate an id for it.                                                                                   // 776
      var insertedId;                                                                                             // 777
      if (updateCount === 0 && options.upsert) {                                                                  // 778
        var newDoc = LocalCollection._removeDollarOperators(selector);                                            // 779
        LocalCollection._modify(newDoc, mod, { isInsert: true });                                                   // 780
        if (!newDoc._id && options.insertedId)                                                                   // 781
          newDoc._id = options.insertedId;                                                                        // 782
        insertedId = self.insert(newDoc);                                                                         // 783
        updateCount = 1;                                                                                          // 784
      }                                                                                                           // 785
      // 786
      // Return the number of affected documents, or in the upsert case, an object                                // 787
      // containing the number of affected docs and the id of the doc that was                                    // 788
      // inserted, if any.                                                                                        // 789
      var result;                                                                                                 // 790
      if (options._returnObject) {                                                                                // 791
        result = {                                                                                                // 792
          numberAffected: updateCount                                                                             // 793
        };                                                                                                        // 794
        if (insertedId !== undefined)                                                                             // 795
          result.insertedId = insertedId;                                                                         // 796
      } else {                                                                                                    // 797
        result = updateCount;                                                                                     // 798
      }                                                                                                           // 799
      // 800
      if (callback)                                                                                               // 801
        Meteor.defer(function () {                                                                                // 802
          callback(null, result);                                                                                 // 803
        });                                                                                                       // 804
      return result;                                                                                              // 805
    };                                                                                                            // 806
    // 807
    // A convenience wrapper on update. LocalCollection.upsert(sel, mod) is                                       // 808
    // equivalent to LocalCollection.update(sel, mod, { upsert: true, _returnObject:                              // 809
    // true }).                                                                                                   // 810
    LocalCollection.prototype.upsert = function (selector, mod, options, callback) {                              // 811
      var self = this;                                                                                            // 812
      if (!callback && typeof options === "function") {                                                          // 813
        callback = options;                                                                                       // 814
        options = {};                                                                                             // 815
      }                                                                                                           // 816
      return self.update(selector, mod, _.extend({}, options, {                                                   // 817
        upsert: true,                                                                                             // 818
        _returnObject: true                                                                                       // 819
      }), callback);                                                                                              // 820
    };                                                                                                            // 821
    // 822
    LocalCollection.prototype._modifyAndNotify = function (                                                       // 823
      doc, mod, recomputeQids, arrayIndices) {                                                                  // 824
      var self = this;                                                                                            // 825
      // 826
      var matched_before = {};                                                                                    // 827
      for (var qid in self.queries) {                                                                             // 828
        var query = self.queries[qid];                                                                            // 829
        if (query.dirty) continue;                                                                                // 830
        // 831
        if (query.ordered) {                                                                                      // 832
          matched_before[qid] = query.matcher.documentMatches(doc).result;                                        // 833
        } else {                                                                                                  // 834
          // Because we don't support skip or limit (yet) in unordered queries, we                                // 835
          // can just do a direct lookup.                                                                         // 836
          matched_before[qid] = query.results.has(doc._id);                                                       // 837
        }                                                                                                         // 838
      }                                                                                                           // 839
      // 840
      var old_doc = EJSON.clone(doc);                                                                             // 841
      // 842
      LocalCollection._modify(doc, mod, { arrayIndices: arrayIndices });                                            // 843
      // 844
      for (qid in self.queries) {                                                                                 // 845
        query = self.queries[qid];                                                                                // 846
        if (query.dirty) continue;                                                                                // 847
        // 848
        var before = matched_before[qid];                                                                         // 849
        var afterMatch = query.matcher.documentMatches(doc);                                                      // 850
        var after = afterMatch.result;                                                                            // 851
        if (after && query.distances && afterMatch.distance !== undefined)                                        // 852
          query.distances.set(doc._id, afterMatch.distance);                                                      // 853
        // 854
        if (query.cursor.skip || query.cursor.limit) {                                                            // 855
          // We need to recompute any query where the doc may have been in the                                    // 856
          // cursor's window either before or after the update. (Note that if skip                                // 857
          // or limit is set, "before" and "after" being true do not necessarily                                  // 858
          // mean that the document is in the cursor's output after skip/limit is                                 // 859
          // applied... but if they are false, then the document definitely is NOT                                // 860
          // in the output. So it's safe to skip recompute if neither before or                                   // 861
          // after are true.)                                                                                     // 862
          if (before || after)                                                                                    // 863
            recomputeQids[qid] = true;                                                                            // 864
        } else if (before && !after) {                                                                            // 865
          LocalCollection._removeFromResults(query, doc);                                                         // 866
        } else if (!before && after) {                                                                            // 867
          LocalCollection._insertInResults(query, doc);                                                           // 868
        } else if (before && after) {                                                                             // 869
          LocalCollection._updateInResults(query, doc, old_doc);                                                  // 870
        }                                                                                                         // 871
      }                                                                                                           // 872
    };                                                                                                            // 873
    // 874
    // XXX the sorted-query logic below is laughably inefficient. we'll                                           // 875
    // need to come up with a better datastructure for this.                                                      // 876
    //                                                                                                            // 877
    // XXX the logic for observing with a skip or a limit is even more                                            // 878
    // laughably inefficient. we recompute the whole results every time!                                          // 879
    // 880
    LocalCollection._insertInResults = function (query, doc) {                                                    // 881
      var fields = EJSON.clone(doc);                                                                              // 882
      delete fields._id;                                                                                          // 883
      if (query.ordered) {                                                                                        // 884
        if (!query.sorter) {                                                                                      // 885
          query.addedBefore(doc._id, query.projectionFn(fields), null);                                           // 886
          query.results.push(doc);                                                                                // 887
        } else {                                                                                                  // 888
          var i = LocalCollection._insertInSortedList(                                                            // 889
            query.sorter.getComparator({ distances: query.distances }),                                             // 890
            query.results, doc);                                                                                  // 891
          var next = query.results[i + 1];                                                                          // 892
          if (next)                                                                                               // 893
            next = next._id;                                                                                      // 894
          else                                                                                                    // 895
            next = null;                                                                                          // 896
          query.addedBefore(doc._id, query.projectionFn(fields), next);                                           // 897
        }                                                                                                         // 898
        query.added(doc._id, query.projectionFn(fields));                                                         // 899
      } else {                                                                                                    // 900
        query.added(doc._id, query.projectionFn(fields));                                                         // 901
        query.results.set(doc._id, doc);                                                                          // 902
      }                                                                                                           // 903
    };                                                                                                            // 904
    // 905
    LocalCollection._removeFromResults = function (query, doc) {                                                  // 906
      if (query.ordered) {                                                                                        // 907
        var i = LocalCollection._findInOrderedResults(query, doc);                                                // 908
        query.removed(doc._id);                                                                                   // 909
        query.results.splice(i, 1);                                                                               // 910
      } else {                                                                                                    // 911
        var id = doc._id;  // in case callback mutates doc                                                        // 912
        query.removed(doc._id);                                                                                   // 913
        query.results.remove(id);                                                                                 // 914
      }                                                                                                           // 915
    };                                                                                                            // 916
    // 917
    LocalCollection._updateInResults = function (query, doc, old_doc) {                                           // 918
      if (!EJSON.equals(doc._id, old_doc._id))                                                                    // 919
        throw new Error("Can't change a doc's _id while updating");                                               // 920
      var projectionFn = query.projectionFn;                                                                      // 921
      var changedFields = DiffSequence.makeChangedFields(                                                         // 922
        projectionFn(doc), projectionFn(old_doc));                                                                // 923
      // 924
      if (!query.ordered) {                                                                                       // 925
        if (!_.isEmpty(changedFields)) {                                                                          // 926
          query.changed(doc._id, changedFields);                                                                  // 927
          query.results.set(doc._id, doc);                                                                        // 928
        }                                                                                                         // 929
        return;                                                                                                   // 930
      }                                                                                                           // 931
      // 932
      var orig_idx = LocalCollection._findInOrderedResults(query, doc);                                           // 933
      // 934
      if (!_.isEmpty(changedFields))                                                                              // 935
        query.changed(doc._id, changedFields);                                                                    // 936
      if (!query.sorter)                                                                                          // 937
        return;                                                                                                   // 938
      // 939
      // just take it out and put it back in again, and see if the index                                          // 940
      // changes                                                                                                  // 941
      query.results.splice(orig_idx, 1);                                                                          // 942
      var new_idx = LocalCollection._insertInSortedList(                                                          // 943
        query.sorter.getComparator({ distances: query.distances }),                                                 // 944
        query.results, doc);                                                                                      // 945
      if (orig_idx !== new_idx) {                                                                                 // 946
        var next = query.results[new_idx + 1];                                                                      // 947
        if (next)                                                                                                 // 948
          next = next._id;                                                                                        // 949
        else                                                                                                      // 950
          next = null;                                                                                            // 951
        query.movedBefore && query.movedBefore(doc._id, next);                                                    // 952
      }                                                                                                           // 953
    };                                                                                                            // 954
    // 955
    // Recomputes the results of a query and runs observe callbacks for the                                       // 956
    // difference between the previous results and the current results (unless                                    // 957
    // paused). Used for skip/limit queries.                                                                      // 958
    //                                                                                                            // 959
    // When this is used by insert or remove, it can just use query.results for the                               // 960
    // old results (and there's no need to pass in oldResults), because these                                     // 961
    // operations don't mutate the documents in the collection. Update needs to pass                              // 962
    // in an oldResults which was deep-copied before the modifier was applied.                                    // 963
    //                                                                                                            // 964
    // oldResults is guaranteed to be ignored if the query is not paused.                                         // 965
    LocalCollection.prototype._recomputeResults = function (query, oldResults) {                                  // 966
      var self = this;                                                                                            // 967
      if (self.paused) {                                                                                          // 968
        // There's no reason to recompute the results now as we're still paused.                                  // 969
        // By flagging the query as "dirty", the recompute will be performed                                      // 970
        // when resumeObservers is called.                                                                        // 971
        query.dirty = true;                                                                                       // 972
        return;                                                                                                   // 973
      }                                                                                                           // 974
      // 975
      if (!self.paused && !oldResults)                                                                          // 976
        oldResults = query.results;                                                                               // 977
      if (query.distances)                                                                                        // 978
        query.distances.clear();                                                                                  // 979
      query.results = query.cursor._getRawObjects({                                                               // 980
        ordered: query.ordered, distances: query.distances
      });                                                     // 981
      // 982
      if (!self.paused) {                                                                                        // 983
        LocalCollection._diffQueryChanges(                                                                        // 984
          query.ordered, oldResults, query.results, query,                                                        // 985
          { projectionFn: query.projectionFn });                                                                  // 986
      }                                                                                                           // 987
    };                                                                                                            // 988
    // 989
    // 990
    LocalCollection._findInOrderedResults = function (query, doc) {                                               // 991
      if (!query.ordered)                                                                                         // 992
        throw new Error("Can't call _findInOrderedResults on unordered query");                                   // 993
      for (var i = 0; i < query.results.length; i++)                                                              // 994
        if (query.results[i] === doc)                                                                             // 995
          return i;                                                                                               // 996
      throw Error("object missing from query");                                                                   // 997
    };                                                                                                            // 998
    // 999
    // This binary search puts a value between any equal values, and the first                                    // 1000
    // lesser value.                                                                                              // 1001
    LocalCollection._binarySearch = function (cmp, array, value) {                                                // 1002
      var first = 0, rangeLength = array.length;                                                                  // 1003
      // 1004
      while (rangeLength > 0) {                                                                                   // 1005
        var halfRange = Math.floor(rangeLength / 2);                                                                // 1006
        if (cmp(value, array[first + halfRange]) >= 0) {                                                          // 1007
          first += halfRange + 1;                                                                                 // 1008
          rangeLength -= halfRange + 1;                                                                           // 1009
        } else {                                                                                                  // 1010
          rangeLength = halfRange;                                                                                // 1011
        }                                                                                                         // 1012
      }                                                                                                           // 1013
      return first;                                                                                               // 1014
    };                                                                                                            // 1015
    // 1016
    LocalCollection._insertInSortedList = function (cmp, array, value) {                                          // 1017
      if (array.length === 0) {                                                                                   // 1018
        array.push(value);                                                                                        // 1019
        return 0;                                                                                                 // 1020
      }                                                                                                           // 1021
      // 1022
      var idx = LocalCollection._binarySearch(cmp, array, value);                                                 // 1023
      array.splice(idx, 0, value);                                                                                // 1024
      return idx;                                                                                                 // 1025
    };                                                                                                            // 1026
    // 1027
    // To track what documents are affected by a piece of code, call saveOriginals()                              // 1028
    // before it and retrieveOriginals() after it. retrieveOriginals returns an                                   // 1029
    // object whose keys are the ids of the documents that were affected since the                                // 1030
    // call to saveOriginals(), and the values are equal to the document's contents                               // 1031
    // at the time of saveOriginals. (In the case of an inserted document, undefined                              // 1032
    // is the value.) You must alternate between calls to saveOriginals() and                                     // 1033
    // retrieveOriginals().                                                                                       // 1034
    LocalCollection.prototype.saveOriginals = function () {                                                       // 1035
      var self = this;                                                                                            // 1036
      if (self._savedOriginals)                                                                                   // 1037
        throw new Error("Called saveOriginals twice without retrieveOriginals");                                  // 1038
      self._savedOriginals = new LocalCollection._IdMap;                                                          // 1039
    };                                                                                                            // 1040
    LocalCollection.prototype.retrieveOriginals = function () {                                                   // 1041
      var self = this;                                                                                            // 1042
      if (!self._savedOriginals)                                                                                  // 1043
        throw new Error("Called retrieveOriginals without saveOriginals");                                        // 1044
      // 1045
      var originals = self._savedOriginals;                                                                       // 1046
      self._savedOriginals = null;                                                                                // 1047
      return originals;                                                                                           // 1048
    };                                                                                                            // 1049
    // 1050
    LocalCollection.prototype._saveOriginal = function (id, doc) {                                                // 1051
      var self = this;                                                                                            // 1052
      // Are we even trying to save originals?                                                                    // 1053
      if (!self._savedOriginals)                                                                                  // 1054
        return;                                                                                                   // 1055
      // Have we previously mutated the original (and so 'doc' is not actually                                    // 1056
      // original)?  (Note the 'has' check rather than truth: we store undefined                                  // 1057
      // here for inserted docs!)                                                                                 // 1058
      if (self._savedOriginals.has(id))                                                                           // 1059
        return;                                                                                                   // 1060
      self._savedOriginals.set(id, EJSON.clone(doc));                                                             // 1061
    };                                                                                                            // 1062
    // 1063
    // Pause the observers. No callbacks from observers will fire until                                           // 1064
    // 'resumeObservers' is called.                                                                               // 1065
    LocalCollection.prototype.pauseObservers = function () {                                                      // 1066
      // No-op if already paused.                                                                                 // 1067
      if (this.paused)                                                                                            // 1068
        return;                                                                                                   // 1069
      // 1070
      // Set the 'paused' flag such that new observer messages don't fire.                                        // 1071
      this.paused = true;                                                                                         // 1072
      // 1073
      // Take a snapshot of the query results for each query.                                                     // 1074
      for (var qid in this.queries) {                                                                             // 1075
        var query = this.queries[qid];                                                                            // 1076
        // 1077
        query.resultsSnapshot = EJSON.clone(query.results);                                                       // 1078
      }                                                                                                           // 1079
    };                                                                                                            // 1080
    // 1081
    // Resume the observers. Observers immediately receive change                                                 // 1082
    // notifications to bring them to the current state of the                                                    // 1083
    // database. Note that this is not just replaying all the changes that                                        // 1084
    // happened during the pause, it is a smarter 'coalesced' diff.                                               // 1085
    LocalCollection.prototype.resumeObservers = function () {                                                     // 1086
      var self = this;                                                                                            // 1087
      // No-op if not paused.                                                                                     // 1088
      if (!this.paused)                                                                                           // 1089
        return;                                                                                                   // 1090
      // 1091
      // Unset the 'paused' flag. Make sure to do this first, otherwise                                           // 1092
      // observer methods won't actually fire when we trigger them.                                               // 1093
      this.paused = false;                                                                                        // 1094
      // 1095
      for (var qid in this.queries) {                                                                             // 1096
        var query = self.queries[qid];                                                                            // 1097
        if (query.dirty) {                                                                                        // 1098
          query.dirty = false;                                                                                    // 1099
          // re-compute results will perform `LocalCollection._diffQueryChanges` automatically.                   // 1100
          self._recomputeResults(query, query.resultsSnapshot);                                                   // 1101
        } else {                                                                                                  // 1102
          // Diff the current results against the snapshot and send to observers.                                 // 1103
          // pass the query object for its observer callbacks.                                                    // 1104
          LocalCollection._diffQueryChanges(                                                                      // 1105
            query.ordered, query.resultsSnapshot, query.results, query,                                           // 1106
            { projectionFn: query.projectionFn });                                                                  // 1107
        }                                                                                                         // 1108
        query.resultsSnapshot = null;                                                                             // 1109
      }                                                                                                           // 1110
      self._observeQueue.drain();                                                                                 // 1111
    };                                                                                                            // 1112
    // 1113
    // 1114
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }).call(this);






  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                            //
    // packages/minimongo/wrap_transform.js                                                                       //
    //                                                                                                            //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Wrap a transform function to return objects that have the _id field                                        // 1
    // of the untransformed document. This ensures that subsystems such as                                        // 2
    // the observe-sequence package that call `observe` can keep track of                                         // 3
    // the documents identities.                                                                                  // 4
    //                                                                                                            // 5
    // - Require that it returns objects                                                                          // 6
    // - If the return value has an _id field, verify that it matches the                                         // 7
    //   original _id field                                                                                       // 8
    // - If the return value doesn't have an _id field, add it back.                                              // 9
    LocalCollection.wrapTransform = function (transform) {                                                        // 10
      if (!transform)                                                                                            // 11
        return null;                                                                                              // 12
      // 13
      // No need to doubly-wrap transforms.                                                                       // 14
      if (transform.__wrappedTransform__)                                                                         // 15
        return transform;                                                                                         // 16
      // 17
      var wrapped = function (doc) {                                                                              // 18
        if (!_.has(doc, '_id')) {                                                                                 // 19
          // XXX do we ever have a transform on the oplog's collection? because that                              // 20
          // collection has no _id.                                                                               // 21
          throw new Error("can only transform documents with _id");                                               // 22
        }                                                                                                         // 23
        // 24
        var id = doc._id;                                                                                         // 25
        // XXX consider making tracker a weak dependency and checking Package.tracker here                        // 26
        var transformed = Tracker.nonreactive(function () {                                                       // 27
          return transform(doc);                                                                                  // 28
        });                                                                                                       // 29
        // 30
        if (!isPlainObject(transformed)) {                                                                        // 31
          throw new Error("transform must return object");                                                        // 32
        }                                                                                                         // 33
        // 34
        if (_.has(transformed, '_id')) {                                                                          // 35
          if (!EJSON.equals(transformed._id, id)) {                                                               // 36
            throw new Error("transformed document can't have different _id");                                     // 37
          }                                                                                                       // 38
        } else {                                                                                                  // 39
          transformed._id = id;                                                                                   // 40
        }                                                                                                         // 41
        return transformed;                                                                                       // 42
      };                                                                                                          // 43
      wrapped.__wrappedTransform__ = true;                                                                        // 44
      return wrapped;                                                                                             // 45
    };                                                                                                            // 46
    // 47
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }).call(this);






  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                            //
    // packages/minimongo/helpers.js                                                                              //
    //                                                                                                            //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Like _.isArray, but doesn't regard polyfilled Uint8Arrays on old browsers as                               // 1
    // arrays.                                                                                                    // 2
    // XXX maybe this should be EJSON.isArray                                                                     // 3
    isArray = function (x) {                                                                                      // 4
      return _.isArray(x) && !EJSON.isBinary(x);                                                                  // 5
    };                                                                                                            // 6
    // 7
    // XXX maybe this should be EJSON.isObject, though EJSON doesn't know about                                   // 8
    // RegExp                                                                                                     // 9
    // XXX note that _type(undefined) === 3!!!!                                                                   // 10
    isPlainObject = LocalCollection._isPlainObject = function (x) {                                               // 11
      return x && LocalCollection._f._type(x) === 3;                                                              // 12
    };                                                                                                            // 13
    // 14
    isIndexable = function (x) {                                                                                  // 15
      return isArray(x) || isPlainObject(x);                                                                      // 16
    };                                                                                                            // 17
    // 18
    // Returns true if this is an object with at least one key and all keys begin                                 // 19
    // with $.  Unless inconsistentOK is set, throws if some keys begin with $ and                                // 20
    // others don't.                                                                                              // 21
    isOperatorObject = function (valueSelector, inconsistentOK) {                                                 // 22
      if (!isPlainObject(valueSelector))                                                                          // 23
        return false;                                                                                             // 24
      // 25
      var theseAreOperators = undefined;                                                                          // 26
      _.each(valueSelector, function (value, selKey) {                                                            // 27
        var thisIsOperator = selKey.substr(0, 1) === '$';                                                         // 28
        if (theseAreOperators === undefined) {                                                                    // 29
          theseAreOperators = thisIsOperator;                                                                     // 30
        } else if (theseAreOperators !== thisIsOperator) {                                                        // 31
          if (!inconsistentOK)                                                                                    // 32
            throw new Error("Inconsistent operator: " +                                                           // 33
              JSON.stringify(valueSelector));                                                       // 34
          theseAreOperators = false;                                                                              // 35
        }                                                                                                         // 36
      });                                                                                                         // 37
      return !!theseAreOperators;  // {} has no operators                                                         // 38
    };                                                                                                            // 39
    // 40
    // 41
    // string can be converted to integer                                                                         // 42
    isNumericKey = function (s) {                                                                                 // 43
      return /^[0-9]+$/.test(s);                                                                                  // 44
    };                                                                                                            // 45
    // 46
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }).call(this);






  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                            //
    // packages/minimongo/selector.js                                                                             //
    //                                                                                                            //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // The minimongo selector compiler!                                                                           // 1
    // 2
    // Terminology:                                                                                               // 3
    //  - a "selector" is the EJSON object representing a selector                                                // 4
    //  - a "matcher" is its compiled form (whether a full Minimongo.Matcher                                      // 5
    //    object or one of the component lambdas that matches parts of it)                                        // 6
    //  - a "result object" is an object with a "result" field and maybe                                          // 7
    //    distance and arrayIndices.                                                                              // 8
    //  - a "branched value" is an object with a "value" field and maybe                                          // 9
    //    "dontIterate" and "arrayIndices".                                                                       // 10
    //  - a "document" is a top-level object that can be stored in a collection.                                  // 11
    //  - a "lookup function" is a function that takes in a document and returns                                  // 12
    //    an array of "branched values".                                                                          // 13
    //  - a "branched matcher" maps from an array of branched values to a result                                  // 14
    //    object.                                                                                                 // 15
    //  - an "element matcher" maps from a single value to a bool.                                                // 16
    // 17
    // Main entry point.                                                                                          // 18
    //   var matcher = new Minimongo.Matcher({a: {$gt: 5}});                                                      // 19
    //   if (matcher.documentMatches({a: 7})) ...                                                                 // 20
    Minimongo.Matcher = function (selector) {                                                                     // 21
      var self = this;                                                                                            // 22
      // A set (object mapping string -> *) of all of the document paths looked                                   // 23
      // at by the selector. Also includes the empty string if it may look at any                                 // 24
      // path (eg, $where).                                                                                       // 25
      self._paths = {};                                                                                           // 26
      // Set to true if compilation finds a $near.                                                                // 27
      self._hasGeoQuery = false;                                                                                  // 28
      // Set to true if compilation finds a $where.                                                               // 29
      self._hasWhere = false;                                                                                     // 30
      // Set to false if compilation finds anything other than a simple equality or                               // 31
      // one or more of '$gt', '$gte', '$lt', '$lte', '$ne', '$in', '$nin' used with                              // 32
      // scalars as operands.                                                                                     // 33
      self._isSimple = true;                                                                                      // 34
      // Set to a dummy document which always matches this Matcher. Or set to null                                // 35
      // if such document is too hard to find.                                                                    // 36
      self._matchingDocument = undefined;                                                                         // 37
      // A clone of the original selector. It may just be a function if the user                                  // 38
      // passed in a function; otherwise is definitely an object (eg, IDs are                                     // 39
      // translated into {_id: ID} first. Used by canBecomeTrueByModifier and                                     // 40
      // Sorter._useWithMatcher.                                                                                  // 41
      self._selector = null;                                                                                      // 42
      self._docMatcher = self._compileSelector(selector);                                                         // 43
    };                                                                                                            // 44
    // 45
    _.extend(Minimongo.Matcher.prototype, {                                                                       // 46
      documentMatches: function (doc) {                                                                           // 47
        if (!doc || typeof doc !== "object") {                                                                    // 48
          throw Error("documentMatches needs a document");                                                        // 49
        }                                                                                                         // 50
        return this._docMatcher(doc);                                                                             // 51
      },                                                                                                          // 52
      hasGeoQuery: function () {                                                                                  // 53
        return this._hasGeoQuery;                                                                                 // 54
      },                                                                                                          // 55
      hasWhere: function () {                                                                                     // 56
        return this._hasWhere;                                                                                    // 57
      },                                                                                                          // 58
      isSimple: function () {                                                                                     // 59
        return this._isSimple;                                                                                    // 60
      },                                                                                                          // 61
      // 62
      // Given a selector, return a function that takes one argument, a                                           // 63
      // document. It returns a result object.                                                                    // 64
      _compileSelector: function (selector) {                                                                     // 65
        var self = this;                                                                                          // 66
        // you can pass a literal function instead of a selector                                                  // 67
        if (selector instanceof Function) {                                                                       // 68
          self._isSimple = false;                                                                                 // 69
          self._selector = selector;                                                                              // 70
          self._recordPathUsed('');                                                                               // 71
          return function (doc) {                                                                                 // 72
            return { result: !!selector.call(doc) };                                                                // 73
          };                                                                                                      // 74
        }                                                                                                         // 75
        // 76
        // shorthand -- scalars match _id                                                                         // 77
        if (LocalCollection._selectorIsId(selector)) {                                                            // 78
          self._selector = { _id: selector };                                                                       // 79
          self._recordPathUsed('_id');                                                                            // 80
          return function (doc) {                                                                                 // 81
            return { result: EJSON.equals(doc._id, selector) };                                                     // 82
          };                                                                                                      // 83
        }                                                                                                         // 84
        // 85
        // protect against dangerous selectors.  falsey and {_id: falsey} are both                                // 86
        // likely programmer error, and not what you want, particularly for                                       // 87
        // destructive operations.                                                                                // 88
        if (!selector || (('_id' in selector) && !selector._id)) {                                                // 89
          self._isSimple = false;                                                                                 // 90
          return nothingMatcher;                                                                                  // 91
        }                                                                                                         // 92
        // 93
        // Top level can't be an array or true or binary.                                                         // 94
        if (typeof (selector) === 'boolean' || isArray(selector) ||                                                // 95
          EJSON.isBinary(selector))                                                                             // 96
          throw new Error("Invalid selector: " + selector);                                                       // 97
        // 98
        self._selector = EJSON.clone(selector);                                                                   // 99
        return compileDocumentSelector(selector, self, { isRoot: true });                                           // 100
      },                                                                                                          // 101
      _recordPathUsed: function (path) {                                                                          // 102
        this._paths[path] = true;                                                                                 // 103
      },                                                                                                          // 104
      // Returns a list of key paths the given selector is looking for. It includes                               // 105
      // the empty string if there is a $where.                                                                   // 106
      _getPaths: function () {                                                                                    // 107
        return _.keys(this._paths);                                                                               // 108
      }                                                                                                           // 109
    });                                                                                                           // 110
    // 111
    // 112
    // Takes in a selector that could match a full document (eg, the original                                     // 113
    // selector). Returns a function mapping document->result object.                                             // 114
    //                                                                                                            // 115
    // matcher is the Matcher object we are compiling.                                                            // 116
    //                                                                                                            // 117
    // If this is the root document selector (ie, not wrapped in $and or the like),                               // 118
    // then isRoot is true. (This is used by $near.)                                                              // 119
    var compileDocumentSelector = function (docSelector, matcher, options) {                                      // 120
      options = options || {};                                                                                    // 121
      var docMatchers = [];                                                                                       // 122
      _.each(docSelector, function (subSelector, key) {                                                           // 123
        if (key.substr(0, 1) === '$') {                                                                           // 124
          // Outer operators are either logical operators (they recurse back into                                 // 125
          // this function), or $where.                                                                           // 126
          if (!_.has(LOGICAL_OPERATORS, key))                                                                     // 127
            throw new Error("Unrecognized logical operator: " + key);                                             // 128
          matcher._isSimple = false;                                                                              // 129
          docMatchers.push(LOGICAL_OPERATORS[key](subSelector, matcher,                                           // 130
            options.inElemMatch));                                          // 131
        } else {                                                                                                  // 132
          // Record this path, but only if we aren't in an elemMatcher, since in an                               // 133
          // elemMatch this is a path inside an object in an array, not in the doc                                // 134
          // root.                                                                                                // 135
          if (!options.inElemMatch)                                                                               // 136
            matcher._recordPathUsed(key);                                                                         // 137
          var lookUpByIndex = makeLookupFunction(key);                                                            // 138
          var valueMatcher =                                                                                      // 139
            compileValueSelector(subSelector, matcher, options.isRoot);                                           // 140
          docMatchers.push(function (doc) {                                                                       // 141
            var branchValues = lookUpByIndex(doc);                                                                // 142
            return valueMatcher(branchValues);                                                                    // 143
          });                                                                                                     // 144
        }                                                                                                         // 145
      });                                                                                                         // 146
      // 147
      return andDocumentMatchers(docMatchers);                                                                    // 148
    };                                                                                                            // 149
    // 150
    // Takes in a selector that could match a key-indexed value in a document; eg,                                // 151
    // {$gt: 5, $lt: 9}, or a regular expression, or any non-expression object (to                                // 152
    // indicate equality).  Returns a branched matcher: a function mapping                                        // 153
    // [branched value]->result object.                                                                           // 154
    var compileValueSelector = function (valueSelector, matcher, isRoot) {                                        // 155
      if (valueSelector instanceof RegExp) {                                                                      // 156
        matcher._isSimple = false;                                                                                // 157
        return convertElementMatcherToBranchedMatcher(                                                            // 158
          regexpElementMatcher(valueSelector));                                                                   // 159
      } else if (isOperatorObject(valueSelector)) {                                                               // 160
        return operatorBranchedMatcher(valueSelector, matcher, isRoot);                                           // 161
      } else {                                                                                                    // 162
        return convertElementMatcherToBranchedMatcher(                                                            // 163
          equalityElementMatcher(valueSelector));                                                                 // 164
      }                                                                                                           // 165
    };                                                                                                            // 166
    // 167
    // Given an element matcher (which evaluates a single value), returns a branched                              // 168
    // value (which evaluates the element matcher on all the branches and returns a                               // 169
    // more structured return value possibly including arrayIndices).                                             // 170
    var convertElementMatcherToBranchedMatcher = function (                                                       // 171
      elementMatcher, options) {                                                                                // 172
      options = options || {};                                                                                    // 173
      return function (branches) {                                                                                // 174
        var expanded = branches;                                                                                  // 175
        if (!options.dontExpandLeafArrays) {                                                                      // 176
          expanded = expandArraysInBranches(                                                                      // 177
            branches, options.dontIncludeLeafArrays);                                                             // 178
        }                                                                                                         // 179
        var ret = {};                                                                                             // 180
        ret.result = _.any(expanded, function (element) {                                                         // 181
          var matched = elementMatcher(element.value);                                                            // 182
          // 183
          // Special case for $elemMatch: it means "true, and use this as an array                                // 184
          // index if I didn't already have one".                                                                 // 185
          if (typeof matched === 'number') {                                                                      // 186
            // XXX This code dates from when we only stored a single array index                                  // 187
            // (for the outermost array). Should we be also including deeper array                                // 188
            // indices from the $elemMatch match?                                                                 // 189
            if (!element.arrayIndices)                                                                            // 190
              element.arrayIndices = [matched];                                                                   // 191
            matched = true;                                                                                       // 192
          }                                                                                                       // 193
          // 194
          // If some element matched, and it's tagged with array indices, include                                 // 195
          // those indices in our result object.                                                                  // 196
          if (matched && element.arrayIndices)                                                                    // 197
            ret.arrayIndices = element.arrayIndices;                                                              // 198
          // 199
          return matched;                                                                                         // 200
        });                                                                                                       // 201
        return ret;                                                                                               // 202
      };                                                                                                          // 203
    };                                                                                                            // 204
    // 205
    // Takes a RegExp object and returns an element matcher.                                                      // 206
    regexpElementMatcher = function (regexp) {                                                                    // 207
      return function (value) {                                                                                   // 208
        if (value instanceof RegExp) {                                                                            // 209
          // Comparing two regexps means seeing if the regexps are identical                                      // 210
          // (really!). Underscore knows how.                                                                     // 211
          return _.isEqual(value, regexp);                                                                        // 212
        }                                                                                                         // 213
        // Regexps only work against strings.                                                                     // 214
        if (typeof value !== 'string')                                                                            // 215
          return false;                                                                                           // 216
        // 217
        // Reset regexp's state to avoid inconsistent matching for objects with the                               // 218
        // same value on consecutive calls of regexp.test. This happens only if the                               // 219
        // regexp has the 'g' flag. Also note that ES6 introduces a new flag 'y' for                              // 220
        // which we should *not* change the lastIndex but MongoDB doesn't support                                 // 221
        // either of these flags.                                                                                 // 222
        regexp.lastIndex = 0;                                                                                     // 223
        // 224
        return regexp.test(value);                                                                                // 225
      };                                                                                                          // 226
    };                                                                                                            // 227
    // 228
    // Takes something that is not an operator object and returns an element matcher                              // 229
    // for equality with that thing.                                                                              // 230
    equalityElementMatcher = function (elementSelector) {                                                         // 231
      if (isOperatorObject(elementSelector))                                                                      // 232
        throw Error("Can't create equalityValueSelector for operator object");                                    // 233
      // 234
      // Special-case: null and undefined are equal (if you got undefined in there                                // 235
      // somewhere, or if you got it due to some branch being non-existent in the                                 // 236
      // weird special case), even though they aren't with EJSON.equals.                                          // 237
      if (elementSelector == null) {  // undefined or null                                                        // 238
        return function (value) {                                                                                 // 239
          return value == null;  // undefined or null                                                             // 240
        };                                                                                                        // 241
      }                                                                                                           // 242
      // 243
      return function (value) {                                                                                   // 244
        return LocalCollection._f._equal(elementSelector, value);                                                 // 245
      };                                                                                                          // 246
    };                                                                                                            // 247
    // 248
    // Takes an operator object (an object with $ keys) and returns a branched                                    // 249
    // matcher for it.                                                                                            // 250
    var operatorBranchedMatcher = function (valueSelector, matcher, isRoot) {                                     // 251
      // Each valueSelector works separately on the various branches.  So one                                     // 252
      // operator can match one branch and another can match another branch.  This                                // 253
      // is OK.                                                                                                   // 254
      // 255
      var operatorMatchers = [];                                                                                  // 256
      _.each(valueSelector, function (operand, operator) {                                                        // 257
        var simpleRange = _.contains(['$lt', '$lte', '$gt', '$gte'], operator) &&                                 // 258
          _.isNumber(operand);                                                                                    // 259
        var simpleEquality = _.contains(['$ne', '$eq'], operator) && !_.isObject(operand);                        // 260
        var simpleInclusion = _.contains(['$in', '$nin'], operator) &&                                            // 261
          _.isArray(operand) && !_.any(operand, _.isObject);                                                      // 262
        // 263
        if (!(simpleRange || simpleInclusion || simpleEquality)) {                                               // 264
          matcher._isSimple = false;                                                                              // 265
        }                                                                                                         // 266
        // 267
        if (_.has(VALUE_OPERATORS, operator)) {                                                                   // 268
          operatorMatchers.push(                                                                                  // 269
            VALUE_OPERATORS[operator](operand, valueSelector, matcher, isRoot));                                  // 270
        } else if (_.has(ELEMENT_OPERATORS, operator)) {                                                          // 271
          var options = ELEMENT_OPERATORS[operator];                                                              // 272
          operatorMatchers.push(                                                                                  // 273
            convertElementMatcherToBranchedMatcher(                                                               // 274
              options.compileElementSelector(                                                                     // 275
                operand, valueSelector, matcher),                                                                 // 276
              options));                                                                                          // 277
        } else {                                                                                                  // 278
          throw new Error("Unrecognized operator: " + operator);                                                  // 279
        }                                                                                                         // 280
      });                                                                                                         // 281
      // 282
      return andBranchedMatchers(operatorMatchers);                                                               // 283
    };                                                                                                            // 284
    // 285
    var compileArrayOfDocumentSelectors = function (                                                              // 286
      selectors, matcher, inElemMatch) {                                                                        // 287
      if (!isArray(selectors) || _.isEmpty(selectors))                                                            // 288
        throw Error("$and/$or/$nor must be nonempty array");                                                      // 289
      return _.map(selectors, function (subSelector) {                                                            // 290
        if (!isPlainObject(subSelector))                                                                          // 291
          throw Error("$or/$and/$nor entries need to be full objects");                                           // 292
        return compileDocumentSelector(                                                                           // 293
          subSelector, matcher, { inElemMatch: inElemMatch });                                                      // 294
      });                                                                                                         // 295
    };                                                                                                            // 296
    // 297
    // Operators that appear at the top level of a document selector.                                             // 298
    var LOGICAL_OPERATORS = {                                                                                     // 299
      $and: function (subSelector, matcher, inElemMatch) {                                                        // 300
        var matchers = compileArrayOfDocumentSelectors(                                                           // 301
          subSelector, matcher, inElemMatch);                                                                     // 302
        return andDocumentMatchers(matchers);                                                                     // 303
      },                                                                                                          // 304
      // 305
      $or: function (subSelector, matcher, inElemMatch) {                                                         // 306
        var matchers = compileArrayOfDocumentSelectors(                                                           // 307
          subSelector, matcher, inElemMatch);                                                                     // 308
        // 309
        // Special case: if there is only one matcher, use it directly, *preserving*                              // 310
        // any arrayIndices it returns.                                                                           // 311
        if (matchers.length === 1)                                                                                // 312
          return matchers[0];                                                                                     // 313
        // 314
        return function (doc) {                                                                                   // 315
          var result = _.any(matchers, function (f) {                                                             // 316
            return f(doc).result;                                                                                 // 317
          });                                                                                                     // 318
          // $or does NOT set arrayIndices when it has multiple                                                   // 319
          // sub-expressions. (Tested against MongoDB.)                                                           // 320
          return { result: result };                                                                                // 321
        };                                                                                                        // 322
      },                                                                                                          // 323
      // 324
      $nor: function (subSelector, matcher, inElemMatch) {                                                        // 325
        var matchers = compileArrayOfDocumentSelectors(                                                           // 326
          subSelector, matcher, inElemMatch);                                                                     // 327
        return function (doc) {                                                                                   // 328
          var result = _.all(matchers, function (f) {                                                             // 329
            return !f(doc).result;                                                                                // 330
          });                                                                                                     // 331
          // Never set arrayIndices, because we only match if nothing in particular                               // 332
          // "matched" (and because this is consistent with MongoDB).                                             // 333
          return { result: result };                                                                                // 334
        };                                                                                                        // 335
      },                                                                                                          // 336
      // 337
      $where: function (selectorValue, matcher) {                                                                 // 338
        // Record that *any* path may be used.                                                                    // 339
        matcher._recordPathUsed('');                                                                              // 340
        matcher._hasWhere = true;                                                                                 // 341
        if (!(selectorValue instanceof Function)) {                                                               // 342
          // XXX MongoDB seems to have more complex logic to decide where or or not                               // 343
          // to add "return"; not sure exactly what it is.                                                        // 344
          selectorValue = Function("obj", "return " + selectorValue);                                             // 345
        }                                                                                                         // 346
        return function (doc) {                                                                                   // 347
          // We make the document available as both `this` and `obj`.                                             // 348
          // XXX not sure what we should do if this throws                                                        // 349
          return { result: selectorValue.call(doc, doc) };                                                          // 350
        };                                                                                                        // 351
      },                                                                                                          // 352
      // 353
      // This is just used as a comment in the query (in MongoDB, it also ends up in                              // 354
      // query logs); it has no effect on the actual selection.                                                   // 355
      $comment: function () {                                                                                     // 356
        return function () {                                                                                      // 357
          return { result: true };                                                                                  // 358
        };                                                                                                        // 359
      }                                                                                                           // 360
    };                                                                                                            // 361
    // 362
    // Returns a branched matcher that matches iff the given matcher does not.                                    // 363
    // Note that this implicitly "deMorganizes" the wrapped function.  ie, it                                     // 364
    // means that ALL branch values need to fail to match innerBranchedMatcher.                                   // 365
    var invertBranchedMatcher = function (branchedMatcher) {                                                      // 366
      return function (branchValues) {                                                                            // 367
        var invertMe = branchedMatcher(branchValues);                                                             // 368
        // We explicitly choose to strip arrayIndices here: it doesn't make sense to                              // 369
        // say "update the array element that does not match something", at least                                 // 370
        // in mongo-land.                                                                                         // 371
        return { result: !invertMe.result };                                                                        // 372
      };                                                                                                          // 373
    };                                                                                                            // 374
    // 375
    // Operators that (unlike LOGICAL_OPERATORS) pertain to individual paths in a                                 // 376
    // document, but (unlike ELEMENT_OPERATORS) do not have a simple definition as                                // 377
    // "match each branched value independently and combine with                                                  // 378
    // convertElementMatcherToBranchedMatcher".                                                                   // 379
    var VALUE_OPERATORS = {                                                                                       // 380
      $eq: function (operand) {                                                                                   // 381
        return convertElementMatcherToBranchedMatcher(                                                            // 382
          equalityElementMatcher(operand));                                                                       // 383
      },                                                                                                          // 384
      $not: function (operand, valueSelector, matcher) {                                                          // 385
        return invertBranchedMatcher(compileValueSelector(operand, matcher));                                     // 386
      },                                                                                                          // 387
      $ne: function (operand) {                                                                                   // 388
        return invertBranchedMatcher(convertElementMatcherToBranchedMatcher(                                      // 389
          equalityElementMatcher(operand)));                                                                      // 390
      },                                                                                                          // 391
      $nin: function (operand) {                                                                                  // 392
        return invertBranchedMatcher(convertElementMatcherToBranchedMatcher(                                      // 393
          ELEMENT_OPERATORS.$in.compileElementSelector(operand)));                                                // 394
      },                                                                                                          // 395
      $exists: function (operand) {                                                                               // 396
        var exists = convertElementMatcherToBranchedMatcher(function (value) {                                    // 397
          return value !== undefined;                                                                             // 398
        });                                                                                                       // 399
        return operand ? exists : invertBranchedMatcher(exists);                                                  // 400
      },                                                                                                          // 401
      // $options just provides options for $regex; its logic is inside $regex                                    // 402
      $options: function (operand, valueSelector) {                                                               // 403
        if (!_.has(valueSelector, '$regex'))                                                                      // 404
          throw Error("$options needs a $regex");                                                                 // 405
        return everythingMatcher;                                                                                 // 406
      },                                                                                                          // 407
      // $maxDistance is basically an argument to $near                                                           // 408
      $maxDistance: function (operand, valueSelector) {                                                           // 409
        if (!valueSelector.$near)                                                                                 // 410
          throw Error("$maxDistance needs a $near");                                                              // 411
        return everythingMatcher;                                                                                 // 412
      },                                                                                                          // 413
      $all: function (operand, valueSelector, matcher) {                                                          // 414
        if (!isArray(operand))                                                                                    // 415
          throw Error("$all requires array");                                                                     // 416
        // Not sure why, but this seems to be what MongoDB does.                                                  // 417
        if (_.isEmpty(operand))                                                                                   // 418
          return nothingMatcher;                                                                                  // 419
        // 420
        var branchedMatchers = [];                                                                                // 421
        _.each(operand, function (criterion) {                                                                    // 422
          // XXX handle $all/$elemMatch combination                                                               // 423
          if (isOperatorObject(criterion))                                                                        // 424
            throw Error("no $ expressions in $all");                                                              // 425
          // This is always a regexp or equality selector.                                                        // 426
          branchedMatchers.push(compileValueSelector(criterion, matcher));                                        // 427
        });                                                                                                       // 428
        // andBranchedMatchers does NOT require all selectors to return true on the                               // 429
        // SAME branch.                                                                                           // 430
        return andBranchedMatchers(branchedMatchers);                                                             // 431
      },                                                                                                          // 432
      $near: function (operand, valueSelector, matcher, isRoot) {                                                 // 433
        if (!isRoot)                                                                                              // 434
          throw Error("$near can't be inside another $ operator");                                                // 435
        matcher._hasGeoQuery = true;                                                                              // 436
        // 437
        // There are two kinds of geodata in MongoDB: coordinate pairs and                                        // 438
        // GeoJSON. They use different distance metrics, too. GeoJSON queries are                                 // 439
        // marked with a $geometry property.                                                                      // 440
        // 441
        var maxDistance, point, distance;                                                                         // 442
        if (isPlainObject(operand) && _.has(operand, '$geometry')) {                                              // 443
          // GeoJSON "2dsphere" mode.                                                                             // 444
          maxDistance = operand.$maxDistance;                                                                     // 445
          point = operand.$geometry;                                                                              // 446
          distance = function (value) {                                                                           // 447
            // XXX: for now, we don't calculate the actual distance between, say,                                 // 448
            // polygon and circle. If people care about this use-case it will get                                 // 449
            // a priority.                                                                                        // 450
            if (!value || !value.type)                                                                            // 451
              return null;                                                                                        // 452
            if (value.type === "Point") {                                                                         // 453
              return GeoJSON.pointDistance(point, value);                                                         // 454
            } else {                                                                                              // 455
              return GeoJSON.geometryWithinRadius(value, point, maxDistance)                                      // 456
                ? 0 : maxDistance + 1;                                                                            // 457
            }                                                                                                     // 458
          };                                                                                                      // 459
        } else {                                                                                                  // 460
          maxDistance = valueSelector.$maxDistance;                                                               // 461
          if (!isArray(operand) && !isPlainObject(operand))                                                       // 462
            throw Error("$near argument must be coordinate pair or GeoJSON");                                     // 463
          point = pointToArray(operand);                                                                          // 464
          distance = function (value) {                                                                           // 465
            if (!isArray(value) && !isPlainObject(value))                                                         // 466
              return null;                                                                                        // 467
            return distanceCoordinatePairs(point, value);                                                         // 468
          };                                                                                                      // 469
        }                                                                                                         // 470
        // 471
        return function (branchedValues) {                                                                        // 472
          // There might be multiple points in the document that match the given                                  // 473
          // field. Only one of them needs to be within $maxDistance, but we need to                              // 474
          // evaluate all of them and use the nearest one for the implicit sort                                   // 475
          // specifier. (That's why we can't just use ELEMENT_OPERATORS here.)                                    // 476
          //                                                                                                      // 477
          // Note: This differs from MongoDB's implementation, where a document will                              // 478
          // actually show up *multiple times* in the result set, with one entry for                              // 479
          // each within-$maxDistance branching point.                                                            // 480
          branchedValues = expandArraysInBranches(branchedValues);                                                // 481
          var result = { result: false };                                                                           // 482
          _.each(branchedValues, function (branch) {                                                              // 483
            var curDistance = distance(branch.value);                                                             // 484
            // Skip branches that aren't real points or are too far away.                                         // 485
            if (curDistance === null || curDistance > maxDistance)                                                // 486
              return;                                                                                             // 487
            // Skip anything that's a tie.                                                                        // 488
            if (result.distance !== undefined && result.distance <= curDistance)                                  // 489
              return;                                                                                             // 490
            result.result = true;                                                                                 // 491
            result.distance = curDistance;                                                                        // 492
            if (!branch.arrayIndices)                                                                             // 493
              delete result.arrayIndices;                                                                         // 494
            else                                                                                                  // 495
              result.arrayIndices = branch.arrayIndices;                                                          // 496
          });                                                                                                     // 497
          return result;                                                                                          // 498
        };                                                                                                        // 499
      }                                                                                                           // 500
    };                                                                                                            // 501
    // 502
    // Helpers for $near.                                                                                         // 503
    var distanceCoordinatePairs = function (a, b) {                                                               // 504
      a = pointToArray(a);                                                                                        // 505
      b = pointToArray(b);                                                                                        // 506
      var x = a[0] - b[0];                                                                                        // 507
      var y = a[1] - b[1];                                                                                        // 508
      if (_.isNaN(x) || _.isNaN(y))                                                                               // 509
        return null;                                                                                              // 510
      return Math.sqrt(x * x + y * y);                                                                            // 511
    };                                                                                                            // 512
    // Makes sure we get 2 elements array and assume the first one to be x and                                    // 513
    // the second one to y no matter what user passes.                                                            // 514
    // In case user passes { lon: x, lat: y } returns [x, y]                                                      // 515
    var pointToArray = function (point) {                                                                         // 516
      return _.map(point, _.identity);                                                                            // 517
    };                                                                                                            // 518
    // 519
    // Helper for $lt/$gt/$lte/$gte.                                                                              // 520
    var makeInequality = function (cmpValueComparator) {                                                          // 521
      return {                                                                                                    // 522
        compileElementSelector: function (operand) {                                                              // 523
          // Arrays never compare false with non-arrays for any inequality.                                       // 524
          // XXX This was behavior we observed in pre-release MongoDB 2.5, but                                    // 525
          //     it seems to have been reverted.                                                                  // 526
          //     See https://jira.mongodb.org/browse/SERVER-11444                                                 // 527
          if (isArray(operand)) {                                                                                 // 528
            return function () {                                                                                  // 529
              return false;                                                                                       // 530
            };                                                                                                    // 531
          }                                                                                                       // 532
          // 533
          // Special case: consider undefined and null the same (so true with                                     // 534
          // $gte/$lte).                                                                                          // 535
          if (operand === undefined)                                                                              // 536
            operand = null;                                                                                       // 537
          // 538
          var operandType = LocalCollection._f._type(operand);                                                    // 539
          // 540
          return function (value) {                                                                               // 541
            if (value === undefined)                                                                              // 542
              value = null;                                                                                       // 543
            // Comparisons are never true among things of different type (except                                  // 544
            // null vs undefined).                                                                                // 545
            if (LocalCollection._f._type(value) !== operandType)                                                  // 546
              return false;                                                                                       // 547
            return cmpValueComparator(LocalCollection._f._cmp(value, operand));                                   // 548
          };                                                                                                      // 549
        }                                                                                                         // 550
      };                                                                                                          // 551
    };                                                                                                            // 552
    // 553
    // Each element selector contains:                                                                            // 554
    //  - compileElementSelector, a function with args:                                                           // 555
    //    - operand - the "right hand side" of the operator                                                       // 556
    //    - valueSelector - the "context" for the operator (so that $regex can find                               // 557
    //      $options)                                                                                             // 558
    //    - matcher - the Matcher this is going into (so that $elemMatch can compile                              // 559
    //      more things)                                                                                          // 560
    //    returning a function mapping a single value to bool.                                                    // 561
    //  - dontExpandLeafArrays, a bool which prevents expandArraysInBranches from                                 // 562
    //    being called                                                                                            // 563
    //  - dontIncludeLeafArrays, a bool which causes an argument to be passed to                                  // 564
    //    expandArraysInBranches if it is called                                                                  // 565
    ELEMENT_OPERATORS = {                                                                                         // 566
      $lt: makeInequality(function (cmpValue) {                                                                   // 567
        return cmpValue < 0;                                                                                      // 568
      }),                                                                                                         // 569
      $gt: makeInequality(function (cmpValue) {                                                                   // 570
        return cmpValue > 0;                                                                                      // 571
      }),                                                                                                         // 572
      $lte: makeInequality(function (cmpValue) {                                                                  // 573
        return cmpValue <= 0;                                                                                     // 574
      }),                                                                                                         // 575
      $gte: makeInequality(function (cmpValue) {                                                                  // 576
        return cmpValue >= 0;                                                                                     // 577
      }),                                                                                                         // 578
      $mod: {                                                                                                     // 579
        compileElementSelector: function (operand) {                                                              // 580
          if (!(isArray(operand) && operand.length === 2                                                          // 581
            && typeof (operand[0]) === 'number'                                                                // 582
            && typeof (operand[1]) === 'number')) {                                                            // 583
            throw Error("argument to $mod must be an array of two numbers");                                      // 584
          }                                                                                                       // 585
          // XXX could require to be ints or round or something                                                   // 586
          var divisor = operand[0];                                                                               // 587
          var remainder = operand[1];                                                                             // 588
          return function (value) {                                                                               // 589
            return typeof value === 'number' && value % divisor === remainder;                                    // 590
          };                                                                                                      // 591
        }                                                                                                         // 592
      },                                                                                                          // 593
      $in: {                                                                                                      // 594
        compileElementSelector: function (operand) {                                                              // 595
          if (!isArray(operand))                                                                                  // 596
            throw Error("$in needs an array");                                                                    // 597
          // 598
          var elementMatchers = [];                                                                               // 599
          _.each(operand, function (option) {                                                                     // 600
            if (option instanceof RegExp)                                                                         // 601
              elementMatchers.push(regexpElementMatcher(option));                                                 // 602
            else if (isOperatorObject(option))                                                                    // 603
              throw Error("cannot nest $ under $in");                                                             // 604
            else                                                                                                  // 605
              elementMatchers.push(equalityElementMatcher(option));                                               // 606
          });                                                                                                     // 607
          // 608
          return function (value) {                                                                               // 609
            // Allow {a: {$in: [null]}} to match when 'a' does not exist.                                         // 610
            if (value === undefined)                                                                              // 611
              value = null;                                                                                       // 612
            return _.any(elementMatchers, function (e) {                                                          // 613
              return e(value);                                                                                    // 614
            });                                                                                                   // 615
          };                                                                                                      // 616
        }                                                                                                         // 617
      },                                                                                                          // 618
      $size: {                                                                                                    // 619
        // {a: [[5, 5]]} must match {a: {$size: 1}} but not {a: {$size: 2}}, so we                                // 620
        // don't want to consider the element [5,5] in the leaf array [[5,5]] as a                                // 621
        // possible value.                                                                                        // 622
        dontExpandLeafArrays: true,                                                                               // 623
        compileElementSelector: function (operand) {                                                              // 624
          if (typeof operand === 'string') {                                                                      // 625
            // Don't ask me why, but by experimentation, this seems to be what Mongo                              // 626
            // does.                                                                                              // 627
            operand = 0;                                                                                          // 628
          } else if (typeof operand !== 'number') {                                                               // 629
            throw Error("$size needs a number");                                                                  // 630
          }                                                                                                       // 631
          return function (value) {                                                                               // 632
            return isArray(value) && value.length === operand;                                                    // 633
          };                                                                                                      // 634
        }                                                                                                         // 635
      },                                                                                                          // 636
      $type: {                                                                                                    // 637
        // {a: [5]} must not match {a: {$type: 4}} (4 means array), but it should                                 // 638
        // match {a: {$type: 1}} (1 means number), and {a: [[5]]} must match {$a:                                 // 639
        // {$type: 4}}. Thus, when we see a leaf array, we *should* expand it but                                 // 640
        // should *not* include it itself.                                                                        // 641
        dontIncludeLeafArrays: true,                                                                              // 642
        compileElementSelector: function (operand) {                                                              // 643
          if (typeof operand !== 'number')                                                                        // 644
            throw Error("$type needs a number");                                                                  // 645
          return function (value) {                                                                               // 646
            return value !== undefined                                                                            // 647
              && LocalCollection._f._type(value) === operand;                                                     // 648
          };                                                                                                      // 649
        }                                                                                                         // 650
      },                                                                                                          // 651
      $regex: {                                                                                                   // 652
        compileElementSelector: function (operand, valueSelector) {                                               // 653
          if (!(typeof operand === 'string' || operand instanceof RegExp))                                        // 654
            throw Error("$regex has to be a string or RegExp");                                                   // 655
          // 656
          var regexp;                                                                                             // 657
          if (valueSelector.$options !== undefined) {                                                             // 658
            // Options passed in $options (even the empty string) always overrides                                // 659
            // options in the RegExp object itself. (See also                                                     // 660
            // Mongo.Collection._rewriteSelector.)                                                                // 661
            // 662
            // Be clear that we only support the JS-supported options, not extended                               // 663
            // ones (eg, Mongo supports x and s). Ideally we would implement x and s                              // 664
            // by transforming the regexp, but not today...                                                       // 665
            if (/[^gim]/.test(valueSelector.$options))                                                            // 666
              throw new Error("Only the i, m, and g regexp options are supported");                               // 667
            // 668
            var regexSource = operand instanceof RegExp ? operand.source : operand;                               // 669
            regexp = new RegExp(regexSource, valueSelector.$options);                                             // 670
          } else if (operand instanceof RegExp) {                                                                 // 671
            regexp = operand;                                                                                     // 672
          } else {                                                                                                // 673
            regexp = new RegExp(operand);                                                                         // 674
          }                                                                                                       // 675
          return regexpElementMatcher(regexp);                                                                    // 676
        }                                                                                                         // 677
      },                                                                                                          // 678
      $elemMatch: {                                                                                               // 679
        dontExpandLeafArrays: true,                                                                               // 680
        compileElementSelector: function (operand, valueSelector, matcher) {                                      // 681
          if (!isPlainObject(operand))                                                                            // 682
            throw Error("$elemMatch need an object");                                                             // 683
          // 684
          var subMatcher, isDocMatcher;                                                                           // 685
          if (isOperatorObject(_.omit(operand, _.keys(LOGICAL_OPERATORS)), true)) {                               // 686
            subMatcher = compileValueSelector(operand, matcher);                                                  // 687
            isDocMatcher = false;                                                                                 // 688
          } else {                                                                                                // 689
            // This is NOT the same as compileValueSelector(operand), and not just                                // 690
            // because of the slightly different calling convention.                                              // 691
            // {$elemMatch: {x: 3}} means "an element has a field x:3", not                                       // 692
            // "consists only of a field x:3". Also, regexps and sub-$ are allowed.                               // 693
            subMatcher = compileDocumentSelector(operand, matcher,                                                // 694
              { inElemMatch: true });                                            // 695
            isDocMatcher = true;                                                                                  // 696
          }                                                                                                       // 697
          // 698
          return function (value) {                                                                               // 699
            if (!isArray(value))                                                                                  // 700
              return false;                                                                                       // 701
            for (var i = 0; i < value.length; ++i) {                                                              // 702
              var arrayElement = value[i];                                                                        // 703
              var arg;                                                                                            // 704
              if (isDocMatcher) {                                                                                 // 705
                // We can only match {$elemMatch: {b: 3}} against objects.                                        // 706
                // (We can also match against arrays, if there's numeric indices,                                 // 707
                // eg {$elemMatch: {'0.b': 3}} or {$elemMatch: {0: 3}}.)                                          // 708
                if (!isPlainObject(arrayElement) && !isArray(arrayElement))                                       // 709
                  return false;                                                                                   // 710
                arg = arrayElement;                                                                               // 711
              } else {                                                                                            // 712
                // dontIterate ensures that {a: {$elemMatch: {$gt: 5}}} matches                                   // 713
                // {a: [8]} but not {a: [[8]]}                                                                    // 714
                arg = [{ value: arrayElement, dontIterate: true }];                                                 // 715
              }                                                                                                   // 716
              // XXX support $near in $elemMatch by propagating $distance?                                        // 717
              if (subMatcher(arg).result)                                                                         // 718
                return i;   // specially understood to mean "use as arrayIndices"                                 // 719
            }                                                                                                     // 720
            return false;                                                                                         // 721
          };                                                                                                      // 722
        }                                                                                                         // 723
      }                                                                                                           // 724
    };                                                                                                            // 725
    // 726
    // makeLookupFunction(key) returns a lookup function.                                                         // 727
    //                                                                                                            // 728
    // A lookup function takes in a document and returns an array of matching                                     // 729
    // branches.  If no arrays are found while looking up the key, this array will                                // 730
    // have exactly one branches (possibly 'undefined', if some segment of the key                                // 731
    // was not found).                                                                                            // 732
    //                                                                                                            // 733
    // If arrays are found in the middle, this can have more than one element, since                              // 734
    // we "branch". When we "branch", if there are more key segments to look up,                                  // 735
    // then we only pursue branches that are plain objects (not arrays or scalars).                               // 736
    // This means we can actually end up with no branches!                                                        // 737
    //                                                                                                            // 738
    // We do *NOT* branch on arrays that are found at the end (ie, at the last                                    // 739
    // dotted member of the key). We just return that array; if you want to                                       // 740
    // effectively "branch" over the array's values, post-process the lookup                                      // 741
    // function with expandArraysInBranches.                                                                      // 742
    //                                                                                                            // 743
    // Each branch is an object with keys:                                                                        // 744
    //  - value: the value at the branch                                                                          // 745
    //  - dontIterate: an optional bool; if true, it means that 'value' is an array                               // 746
    //    that expandArraysInBranches should NOT expand. This specifically happens                                // 747
    //    when there is a numeric index in the key, and ensures the                                               // 748
    //    perhaps-surprising MongoDB behavior where {'a.0': 5} does NOT                                           // 749
    //    match {a: [[5]]}.                                                                                       // 750
    //  - arrayIndices: if any array indexing was done during lookup (either due to                               // 751
    //    explicit numeric indices or implicit branching), this will be an array of                               // 752
    //    the array indices used, from outermost to innermost; it is falsey or                                    // 753
    //    absent if no array index is used. If an explicit numeric index is used,                                 // 754
    //    the index will be followed in arrayIndices by the string 'x'.                                           // 755
    //                                                                                                            // 756
    //    Note: arrayIndices is used for two purposes. First, it is used to                                       // 757
    //    implement the '$' modifier feature, which only ever looks at its first                                  // 758
    //    element.                                                                                                // 759
    //                                                                                                            // 760
    //    Second, it is used for sort key generation, which needs to be able to tell                              // 761
    //    the difference between different paths. Moreover, it needs to                                           // 762
    //    differentiate between explicit and implicit branching, which is why                                     // 763
    //    there's the somewhat hacky 'x' entry: this means that explicit and                                      // 764
    //    implicit array lookups will have different full arrayIndices paths. (That                               // 765
    //    code only requires that different paths have different arrayIndices; it                                 // 766
    //    doesn't actually "parse" arrayIndices. As an alternative, arrayIndices                                  // 767
    //    could contain objects with flags like "implicit", but I think that only                                 // 768
    //    makes the code surrounding them more complex.)                                                          // 769
    //                                                                                                            // 770
    //    (By the way, this field ends up getting passed around a lot without                                     // 771
    //    cloning, so never mutate any arrayIndices field/var in this package!)                                   // 772
    //                                                                                                            // 773
    //                                                                                                            // 774
    // At the top level, you may only pass in a plain object or array.                                            // 775
    //                                                                                                            // 776
    // See the test 'minimongo - lookup' for some examples of what lookup functions                               // 777
    // return.                                                                                                    // 778
    makeLookupFunction = function (key, options) {                                                                // 779
      options = options || {};                                                                                    // 780
      var parts = key.split('.');                                                                                 // 781
      var firstPart = parts.length ? parts[0] : '';                                                               // 782
      var firstPartIsNumeric = isNumericKey(firstPart);                                                           // 783
      var nextPartIsNumeric = parts.length >= 2 && isNumericKey(parts[1]);                                        // 784
      var lookupRest;                                                                                             // 785
      if (parts.length > 1) {                                                                                     // 786
        lookupRest = makeLookupFunction(parts.slice(1).join('.'));                                                // 787
      }                                                                                                           // 788
      // 789
      var omitUnnecessaryFields = function (retVal) {                                                             // 790
        if (!retVal.dontIterate)                                                                                  // 791
          delete retVal.dontIterate;                                                                              // 792
        if (retVal.arrayIndices && !retVal.arrayIndices.length)                                                   // 793
          delete retVal.arrayIndices;                                                                             // 794
        return retVal;                                                                                            // 795
      };                                                                                                          // 796
      // 797
      // Doc will always be a plain object or an array.                                                           // 798
      // apply an explicit numeric index, an array.                                                               // 799
      return function (doc, arrayIndices) {                                                                       // 800
        if (!arrayIndices)                                                                                        // 801
          arrayIndices = [];                                                                                      // 802
        // 803
        if (isArray(doc)) {                                                                                       // 804
          // If we're being asked to do an invalid lookup into an array (non-integer                              // 805
          // or out-of-bounds), return no results (which is different from returning                              // 806
          // a single undefined result, in that `null` equality checks won't match).                              // 807
          if (!(firstPartIsNumeric && firstPart < doc.length))                                                    // 808
            return [];                                                                                            // 809
          // 810
          // Remember that we used this array index. Include an 'x' to indicate that                              // 811
          // the previous index came from being considered as an explicit array                                   // 812
          // index (not branching).                                                                               // 813
          arrayIndices = arrayIndices.concat(+firstPart, 'x');                                                    // 814
        }                                                                                                         // 815
        // 816
        // Do our first lookup.                                                                                   // 817
        var firstLevel = doc[firstPart];                                                                          // 818
        // 819
        // If there is no deeper to dig, return what we found.                                                    // 820
        //                                                                                                        // 821
        // If what we found is an array, most value selectors will choose to treat                                // 822
        // the elements of the array as matchable values in their own right, but                                  // 823
        // that's done outside of the lookup function. (Exceptions to this are $size                              // 824
        // and stuff relating to $elemMatch.  eg, {a: {$size: 2}} does not match {a:                              // 825
        // [[1, 2]]}.)                                                                                            // 826
        //                                                                                                        // 827
        // That said, if we just did an *explicit* array lookup (on doc) to find                                  // 828
        // firstLevel, and firstLevel is an array too, we do NOT want value                                       // 829
        // selectors to iterate over it.  eg, {'a.0': 5} does not match {a: [[5]]}.                               // 830
        // So in that case, we mark the return value as "don't iterate".                                          // 831
        if (!lookupRest) {                                                                                        // 832
          return [omitUnnecessaryFields({                                                                         // 833
            value: firstLevel,                                                                                    // 834
            dontIterate: isArray(doc) && isArray(firstLevel),                                                     // 835
            arrayIndices: arrayIndices
          })];                                                                        // 836
        }                                                                                                         // 837
        // 838
        // We need to dig deeper.  But if we can't, because what we've found is not                               // 839
        // an array or plain object, we're done. If we just did a numeric index into                              // 840
        // an array, we return nothing here (this is a change in Mongo 2.5 from                                   // 841
        // Mongo 2.4, where {'a.0.b': null} stopped matching {a: [5]}). Otherwise,                                // 842
        // return a single `undefined` (which can, for example, match via equality                                // 843
        // with `null`).                                                                                          // 844
        if (!isIndexable(firstLevel)) {                                                                           // 845
          if (isArray(doc))                                                                                       // 846
            return [];                                                                                            // 847
          return [omitUnnecessaryFields({
            value: undefined,                                                        // 848
            arrayIndices: arrayIndices
          })];                                          // 849
        }                                                                                                         // 850
        // 851
        var result = [];                                                                                          // 852
        var appendToResult = function (more) {                                                                    // 853
          Array.prototype.push.apply(result, more);                                                               // 854
        };                                                                                                        // 855
        // 856
        // Dig deeper: look up the rest of the parts on whatever we've found.                                     // 857
        // (lookupRest is smart enough to not try to do invalid lookups into                                      // 858
        // firstLevel if it's an array.)                                                                          // 859
        appendToResult(lookupRest(firstLevel, arrayIndices));                                                     // 860
        // 861
        // If we found an array, then in *addition* to potentially treating the next                              // 862
        // part as a literal integer lookup, we should also "branch": try to look up                              // 863
        // the rest of the parts on each array element in parallel.                                               // 864
        //                                                                                                        // 865
        // In this case, we *only* dig deeper into array elements that are plain                                  // 866
        // objects. (Recall that we only got this far if we have further to dig.)                                 // 867
        // This makes sense: we certainly don't dig deeper into non-indexable                                     // 868
        // objects. And it would be weird to dig into an array: it's simpler to have                              // 869
        // a rule that explicit integer indexes only apply to an outer array, not to                              // 870
        // an array you find after a branching search.                                                            // 871
        //                                                                                                        // 872
        // In the special case of a numeric part in a *sort selector* (not a query                                // 873
        // selector), we skip the branching: we ONLY allow the numeric part to mean                               // 874
        // "look up this index" in that case, not "also look up this index in all                                 // 875
        // the elements of the array".                                                                            // 876
        if (isArray(firstLevel) && !(nextPartIsNumeric && options.forSort)) {                                     // 877
          _.each(firstLevel, function (branch, arrayIndex) {                                                      // 878
            if (isPlainObject(branch)) {                                                                          // 879
              appendToResult(lookupRest(                                                                          // 880
                branch,                                                                                           // 881
                arrayIndices.concat(arrayIndex)));                                                                // 882
            }                                                                                                     // 883
          });                                                                                                     // 884
        }                                                                                                         // 885
        // 886
        return result;                                                                                            // 887
      };                                                                                                          // 888
    };                                                                                                            // 889
    MinimongoTest.makeLookupFunction = makeLookupFunction;                                                        // 890
    // 891
    expandArraysInBranches = function (branches, skipTheArrays) {                                                 // 892
      var branchesOut = [];                                                                                       // 893
      _.each(branches, function (branch) {                                                                        // 894
        var thisIsArray = isArray(branch.value);                                                                  // 895
        // We include the branch itself, *UNLESS* we it's an array that we're going                               // 896
        // to iterate and we're told to skip arrays.  (That's right, we include some                              // 897
        // arrays even skipTheArrays is true: these are arrays that were found via                                // 898
        // explicit numerical indices.)                                                                           // 899
        if (!(skipTheArrays && thisIsArray && !branch.dontIterate)) {                                             // 900
          branchesOut.push({                                                                                      // 901
            value: branch.value,                                                                                  // 902
            arrayIndices: branch.arrayIndices                                                                     // 903
          });                                                                                                     // 904
        }                                                                                                         // 905
        if (thisIsArray && !branch.dontIterate) {                                                                 // 906
          _.each(branch.value, function (leaf, i) {                                                               // 907
            branchesOut.push({                                                                                    // 908
              value: leaf,                                                                                        // 909
              arrayIndices: (branch.arrayIndices || []).concat(i)                                                 // 910
            });                                                                                                   // 911
          });                                                                                                     // 912
        }                                                                                                         // 913
      });                                                                                                         // 914
      return branchesOut;                                                                                         // 915
    };                                                                                                            // 916
    // 917
    var nothingMatcher = function (docOrBranchedValues) {                                                         // 918
      return { result: false };                                                                                     // 919
    };                                                                                                            // 920
    // 921
    var everythingMatcher = function (docOrBranchedValues) {                                                      // 922
      return { result: true };                                                                                      // 923
    };                                                                                                            // 924
    // 925
    // 926
    // NB: We are cheating and using this function to implement "AND" for both                                    // 927
    // "document matchers" and "branched matchers". They both return result objects                               // 928
    // but the argument is different: for the former it's a whole doc, whereas for                                // 929
    // the latter it's an array of "branched values".                                                             // 930
    var andSomeMatchers = function (subMatchers) {                                                                // 931
      if (subMatchers.length === 0)                                                                               // 932
        return everythingMatcher;                                                                                 // 933
      if (subMatchers.length === 1)                                                                               // 934
        return subMatchers[0];                                                                                    // 935
      // 936
      return function (docOrBranches) {                                                                           // 937
        var ret = {};                                                                                             // 938
        ret.result = _.all(subMatchers, function (f) {                                                            // 939
          var subResult = f(docOrBranches);                                                                       // 940
          // Copy a 'distance' number out of the first sub-matcher that has                                       // 941
          // one. Yes, this means that if there are multiple $near fields in a                                    // 942
          // query, something arbitrary happens; this appears to be consistent with                               // 943
          // Mongo.                                                                                               // 944
          if (subResult.result && subResult.distance !== undefined                                                // 945
            && ret.distance === undefined) {                                                                    // 946
            ret.distance = subResult.distance;                                                                    // 947
          }                                                                                                       // 948
          // Similarly, propagate arrayIndices from sub-matchers... but to match                                  // 949
          // MongoDB behavior, this time the *last* sub-matcher with arrayIndices                                 // 950
          // wins.                                                                                                // 951
          if (subResult.result && subResult.arrayIndices) {                                                       // 952
            ret.arrayIndices = subResult.arrayIndices;                                                            // 953
          }                                                                                                       // 954
          return subResult.result;                                                                                // 955
        });                                                                                                       // 956
        // 957
        // If we didn't actually match, forget any extra metadata we came up with.                                // 958
        if (!ret.result) {                                                                                        // 959
          delete ret.distance;                                                                                    // 960
          delete ret.arrayIndices;                                                                                // 961
        }                                                                                                         // 962
        return ret;                                                                                               // 963
      };                                                                                                          // 964
    };                                                                                                            // 965
    // 966
    var andDocumentMatchers = andSomeMatchers;                                                                    // 967
    var andBranchedMatchers = andSomeMatchers;                                                                    // 968
    // 969
    // 970
    // helpers used by compiled selector code                                                                     // 971
    LocalCollection._f = {                                                                                        // 972
      // XXX for _all and _in, consider building 'inquery' at compile time..                                      // 973
      // 974
      _type: function (v) {                                                                                       // 975
        if (typeof v === "number")                                                                                // 976
          return 1;                                                                                               // 977
        if (typeof v === "string")                                                                                // 978
          return 2;                                                                                               // 979
        if (typeof v === "boolean")                                                                               // 980
          return 8;                                                                                               // 981
        if (isArray(v))                                                                                           // 982
          return 4;                                                                                               // 983
        if (v === null)                                                                                           // 984
          return 10;                                                                                              // 985
        if (v instanceof RegExp)                                                                                  // 986
          // note that typeof(/x/) === "object"                                                                   // 987
          return 11;                                                                                              // 988
        if (typeof v === "function")                                                                              // 989
          return 13;                                                                                              // 990
        if (v instanceof Date)                                                                                    // 991
          return 9;                                                                                               // 992
        if (EJSON.isBinary(v))                                                                                    // 993
          return 5;                                                                                               // 994
        if (v instanceof MongoID.ObjectID)                                                                        // 995
          return 7;                                                                                               // 996
        return 3; // object                                                                                       // 997
        // 998
        // XXX support some/all of these:                                                                         // 999
        // 14, symbol                                                                                             // 1000
        // 15, javascript code with scope                                                                         // 1001
        // 16, 18: 32-bit/64-bit integer                                                                          // 1002
        // 17, timestamp                                                                                          // 1003
        // 255, minkey                                                                                            // 1004
        // 127, maxkey                                                                                            // 1005
      },                                                                                                          // 1006
      // 1007
      // deep equality test: use for literal document and array matches                                           // 1008
      _equal: function (a, b) {                                                                                   // 1009
        return EJSON.equals(a, b, { keyOrderSensitive: true });                                                     // 1010
      },                                                                                                          // 1011
      // 1012
      // maps a type code to a value that can be used to sort values of                                           // 1013
      // different types                                                                                          // 1014
      _typeorder: function (t) {                                                                                  // 1015
        // http://www.mongodb.org/display/DOCS/What+is+the+Compare+Order+for+BSON+Types                           // 1016
        // XXX what is the correct sort position for Javascript code?                                             // 1017
        // ('100' in the matrix below)                                                                            // 1018
        // XXX minkey/maxkey                                                                                      // 1019
        return [-1,  // (not a type)                                                                              // 1020
          1,   // number                                                                                    // 1021
          2,   // string                                                                                    // 1022
          3,   // object                                                                                    // 1023
          4,   // array                                                                                     // 1024
          5,   // binary                                                                                    // 1025
        -1,  // deprecated                                                                                // 1026
          6,   // ObjectID                                                                                  // 1027
          7,   // bool                                                                                      // 1028
          8,   // Date                                                                                      // 1029
          0,   // null                                                                                      // 1030
          9,   // RegExp                                                                                    // 1031
        -1,  // deprecated                                                                                // 1032
          100, // JS code                                                                                   // 1033
          2,   // deprecated (symbol)                                                                       // 1034
          100, // JS code                                                                                   // 1035
          1,   // 32-bit int                                                                                // 1036
          8,   // Mongo timestamp                                                                           // 1037
          1    // 64-bit int                                                                                // 1038
        ][t];                                                                                              // 1039
      },                                                                                                          // 1040
      // 1041
      // compare two values of unknown type according to BSON ordering                                            // 1042
      // semantics. (as an extension, consider 'undefined' to be less than                                        // 1043
      // any other value.) return negative if a is less, positive if b is                                         // 1044
      // less, or 0 if equal                                                                                      // 1045
      _cmp: function (a, b) {                                                                                     // 1046
        if (a === undefined)                                                                                      // 1047
          return b === undefined ? 0 : -1;                                                                        // 1048
        if (b === undefined)                                                                                      // 1049
          return 1;                                                                                               // 1050
        var ta = LocalCollection._f._type(a);                                                                     // 1051
        var tb = LocalCollection._f._type(b);                                                                     // 1052
        var oa = LocalCollection._f._typeorder(ta);                                                               // 1053
        var ob = LocalCollection._f._typeorder(tb);                                                               // 1054
        if (oa !== ob)                                                                                            // 1055
          return oa < ob ? -1 : 1;                                                                                // 1056
        if (ta !== tb)                                                                                            // 1057
          // XXX need to implement this if we implement Symbol or integers, or                                    // 1058
          // Timestamp                                                                                            // 1059
          throw Error("Missing type coercion logic in _cmp");                                                     // 1060
        if (ta === 7) { // ObjectID                                                                               // 1061
          // Convert to string.                                                                                   // 1062
          ta = tb = 2;                                                                                            // 1063
          a = a.toHexString();                                                                                    // 1064
          b = b.toHexString();                                                                                    // 1065
        }                                                                                                         // 1066
        if (ta === 9) { // Date                                                                                   // 1067
          // Convert to millis.                                                                                   // 1068
          ta = tb = 1;                                                                                            // 1069
          a = a.getTime();                                                                                        // 1070
          b = b.getTime();                                                                                        // 1071
        }                                                                                                         // 1072
        // 1073
        if (ta === 1) // double                                                                                   // 1074
          return a - b;                                                                                           // 1075
        if (tb === 2) // string                                                                                   // 1076
          return a < b ? -1 : (a === b ? 0 : 1);                                                                  // 1077
        if (ta === 3) { // Object                                                                                 // 1078
          // this could be much more efficient in the expected case ...                                           // 1079
          var to_array = function (obj) {                                                                         // 1080
            var ret = [];                                                                                         // 1081
            for (var key in obj) {                                                                                // 1082
              ret.push(key);                                                                                      // 1083
              ret.push(obj[key]);                                                                                 // 1084
            }                                                                                                     // 1085
            return ret;                                                                                           // 1086
          };                                                                                                      // 1087
          return LocalCollection._f._cmp(to_array(a), to_array(b));                                               // 1088
        }                                                                                                         // 1089
        if (ta === 4) { // Array                                                                                  // 1090
          for (var i = 0; ; i++) {                                                                                // 1091
            if (i === a.length)                                                                                   // 1092
              return (i === b.length) ? 0 : -1;                                                                   // 1093
            if (i === b.length)                                                                                   // 1094
              return 1;                                                                                           // 1095
            var s = LocalCollection._f._cmp(a[i], b[i]);                                                          // 1096
            if (s !== 0)                                                                                          // 1097
              return s;                                                                                           // 1098
          }                                                                                                       // 1099
        }                                                                                                         // 1100
        if (ta === 5) { // binary                                                                                 // 1101
          // Surprisingly, a small binary blob is always less than a large one in                                 // 1102
          // Mongo.                                                                                               // 1103
          if (a.length !== b.length)                                                                              // 1104
            return a.length - b.length;                                                                           // 1105
          for (i = 0; i < a.length; i++) {                                                                        // 1106
            if (a[i] < b[i])                                                                                      // 1107
              return -1;                                                                                          // 1108
            if (a[i] > b[i])                                                                                      // 1109
              return 1;                                                                                           // 1110
          }                                                                                                       // 1111
          return 0;                                                                                               // 1112
        }                                                                                                         // 1113
        if (ta === 8) { // boolean                                                                                // 1114
          if (a) return b ? 0 : 1;                                                                                // 1115
          return b ? -1 : 0;                                                                                      // 1116
        }                                                                                                         // 1117
        if (ta === 10) // null                                                                                    // 1118
          return 0;                                                                                               // 1119
        if (ta === 11) // regexp                                                                                  // 1120
          throw Error("Sorting not supported on regular expression"); // XXX                                      // 1121
        // 13: javascript code                                                                                    // 1122
        // 14: symbol                                                                                             // 1123
        // 15: javascript code with scope                                                                         // 1124
        // 16: 32-bit integer                                                                                     // 1125
        // 17: timestamp                                                                                          // 1126
        // 18: 64-bit integer                                                                                     // 1127
        // 255: minkey                                                                                            // 1128
        // 127: maxkey                                                                                            // 1129
        if (ta === 13) // javascript code                                                                         // 1130
          throw Error("Sorting not supported on Javascript code"); // XXX                                         // 1131
        throw Error("Unknown type to sort");                                                                      // 1132
      }                                                                                                           // 1133
    };                                                                                                            // 1134
    // 1135
    // Oddball function used by upsert.                                                                           // 1136
    LocalCollection._removeDollarOperators = function (selector) {                                                // 1137
      var selectorDoc = {};                                                                                       // 1138
      for (var k in selector)                                                                                     // 1139
        if (k.substr(0, 1) !== '$')                                                                               // 1140
          selectorDoc[k] = selector[k];                                                                           // 1141
      return selectorDoc;                                                                                         // 1142
    };                                                                                                            // 1143
    // 1144
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }).call(this);






  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                            //
    // packages/minimongo/sort.js                                                                                 //
    //                                                                                                            //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Give a sort spec, which can be in any of these forms:                                                      // 1
    //   {"key1": 1, "key2": -1}                                                                                  // 2
    //   [["key1", "asc"], ["key2", "desc"]]                                                                      // 3
    //   ["key1", ["key2", "desc"]]                                                                               // 4
    //                                                                                                            // 5
    // (.. with the first form being dependent on the key enumeration                                             // 6
    // behavior of your javascript VM, which usually does what you mean in                                        // 7
    // this case if the key names don't look like integers ..)                                                    // 8
    //                                                                                                            // 9
    // return a function that takes two objects, and returns -1 if the                                            // 10
    // first object comes first in order, 1 if the second object comes                                            // 11
    // first, or 0 if neither object comes before the other.                                                      // 12
    // 13
    Minimongo.Sorter = function (spec, options) {                                                                 // 14
      var self = this;                                                                                            // 15
      options = options || {};                                                                                    // 16
      // 17
      self._sortSpecParts = [];                                                                                   // 18
      self._sortFunction = null;                                                                                  // 19
      // 20
      var addSpecPart = function (path, ascending) {                                                              // 21
        if (!path)                                                                                                // 22
          throw Error("sort keys must be non-empty");                                                             // 23
        if (path.charAt(0) === '$')                                                                               // 24
          throw Error("unsupported sort key: " + path);                                                           // 25
        self._sortSpecParts.push({                                                                                // 26
          path: path,                                                                                             // 27
          lookup: makeLookupFunction(path, { forSort: true }),                                                      // 28
          ascending: ascending                                                                                    // 29
        });                                                                                                       // 30
      };                                                                                                          // 31
      // 32
      if (spec instanceof Array) {                                                                                // 33
        for (var i = 0; i < spec.length; i++) {                                                                   // 34
          if (typeof spec[i] === "string") {                                                                      // 35
            addSpecPart(spec[i], true);                                                                           // 36
          } else {                                                                                                // 37
            addSpecPart(spec[i][0], spec[i][1] !== "desc");                                                       // 38
          }                                                                                                       // 39
        }                                                                                                         // 40
      } else if (typeof spec === "object") {                                                                      // 41
        _.each(spec, function (value, key) {                                                                      // 42
          addSpecPart(key, value >= 0);                                                                           // 43
        });                                                                                                       // 44
      } else if (typeof spec === "function") {                                                                    // 45
        self._sortFunction = spec;                                                                                // 46
      } else {                                                                                                    // 47
        throw Error("Bad sort specification: " + JSON.stringify(spec));                                           // 48
      }                                                                                                           // 49
      // 50
      // If a function is specified for sorting, we skip the rest.                                                // 51
      if (self._sortFunction)                                                                                     // 52
        return;                                                                                                   // 53
      // 54
      // To implement affectedByModifier, we piggy-back on top of Matcher's                                       // 55
      // affectedByModifier code; we create a selector that is affected by the same                               // 56
      // modifiers as this sort order. This is only implemented on the server.                                    // 57
      if (self.affectedByModifier) {                                                                              // 58
        var selector = {};                                                                                        // 59
        _.each(self._sortSpecParts, function (spec) {                                                             // 60
          selector[spec.path] = 1;                                                                                // 61
        });                                                                                                       // 62
        self._selectorForAffectedByModifier = new Minimongo.Matcher(selector);                                    // 63
      }                                                                                                           // 64
      // 65
      self._keyComparator = composeComparators(                                                                   // 66
        _.map(self._sortSpecParts, function (spec, i) {                                                           // 67
          return self._keyFieldComparator(i);                                                                     // 68
        }));                                                                                                      // 69
      // 70
      // If you specify a matcher for this Sorter, _keyFilter may be set to a                                     // 71
      // function which selects whether or not a given "sort key" (tuple of values                                // 72
      // for the different sort spec fields) is compatible with the selector.                                     // 73
      self._keyFilter = null;                                                                                     // 74
      options.matcher && self._useWithMatcher(options.matcher);                                                   // 75
    };                                                                                                            // 76
    // 77
    // In addition to these methods, sorter_project.js defines combineIntoProjection                              // 78
    // on the server only.                                                                                        // 79
    _.extend(Minimongo.Sorter.prototype, {                                                                        // 80
      getComparator: function (options) {                                                                         // 81
        var self = this;                                                                                          // 82
        // 83
        // If we have no distances, just use the comparator from the source                                       // 84
        // specification (which defaults to "everything is equal".                                                // 85
        if (!options || !options.distances) {                                                                     // 86
          return self._getBaseComparator();                                                                       // 87
        }                                                                                                         // 88
        // 89
        var distances = options.distances;                                                                        // 90
        // 91
        // Return a comparator which first tries the sort specification, and if that                              // 92
        // says "it's equal", breaks ties using $near distances.                                                  // 93
        return composeComparators([self._getBaseComparator(), function (a, b) {                                   // 94
          if (!distances.has(a._id))                                                                              // 95
            throw Error("Missing distance for " + a._id);                                                         // 96
          if (!distances.has(b._id))                                                                              // 97
            throw Error("Missing distance for " + b._id);                                                         // 98
          return distances.get(a._id) - distances.get(b._id);                                                     // 99
        }]);                                                                                                      // 100
      },                                                                                                          // 101
      // 102
      _getPaths: function () {                                                                                    // 103
        var self = this;                                                                                          // 104
        return _.pluck(self._sortSpecParts, 'path');                                                              // 105
      },                                                                                                          // 106
      // 107
      // Finds the minimum key from the doc, according to the sort specs.  (We say                                // 108
      // "minimum" here but this is with respect to the sort spec, so "descending"                                // 109
      // sort fields mean we're finding the max for that field.)                                                  // 110
      //                                                                                                          // 111
      // Note that this is NOT "find the minimum value of the first field, the                                    // 112
      // minimum value of the second field, etc"... it's "choose the                                              // 113
      // lexicographically minimum value of the key vector, allowing only keys which                              // 114
      // you can find along the same paths".  ie, for a doc {a: [{x: 0, y: 5}, {x:                                // 115
      // 1, y: 3}]} with sort spec {'a.x': 1, 'a.y': 1}, the only keys are [0,5] and                              // 116
      // [1,3], and the minimum key is [0,5]; notably, [0,3] is NOT a key.                                        // 117
      _getMinKeyFromDoc: function (doc) {                                                                         // 118
        var self = this;                                                                                          // 119
        var minKey = null;                                                                                        // 120
        // 121
        self._generateKeysFromDoc(doc, function (key) {                                                           // 122
          if (!self._keyCompatibleWithSelector(key))                                                              // 123
            return;                                                                                               // 124
          // 125
          if (minKey === null) {                                                                                  // 126
            minKey = key;                                                                                         // 127
            return;                                                                                               // 128
          }                                                                                                       // 129
          if (self._compareKeys(key, minKey) < 0) {                                                               // 130
            minKey = key;                                                                                         // 131
          }                                                                                                       // 132
        });                                                                                                       // 133
        // 134
        // This could happen if our key filter somehow filters out all the keys even                              // 135
        // though somehow the selector matches.                                                                   // 136
        if (minKey === null)                                                                                      // 137
          throw Error("sort selector found no keys in doc?");                                                     // 138
        return minKey;                                                                                            // 139
      },                                                                                                          // 140
      // 141
      _keyCompatibleWithSelector: function (key) {                                                                // 142
        var self = this;                                                                                          // 143
        return !self._keyFilter || self._keyFilter(key);                                                          // 144
      },                                                                                                          // 145
      // 146
      // Iterates over each possible "key" from doc (ie, over each branch), calling                               // 147
      // 'cb' with the key.                                                                                       // 148
      _generateKeysFromDoc: function (doc, cb) {                                                                  // 149
        var self = this;                                                                                          // 150
        // 151
        if (self._sortSpecParts.length === 0)                                                                     // 152
          throw new Error("can't generate keys without a spec");                                                  // 153
        // 154
        // maps index -> ({'' -> value} or {path -> value})                                                       // 155
        var valuesByIndexAndPath = [];                                                                            // 156
        // 157
        var pathFromIndices = function (indices) {                                                                // 158
          return indices.join(',') + ',';                                                                         // 159
        };                                                                                                        // 160
        // 161
        var knownPaths = null;                                                                                    // 162
        // 163
        _.each(self._sortSpecParts, function (spec, whichField) {                                                 // 164
          // Expand any leaf arrays that we find, and ignore those arrays                                         // 165
          // themselves.  (We never sort based on an array itself.)                                               // 166
          var branches = expandArraysInBranches(spec.lookup(doc), true);                                          // 167
          // 168
          // If there are no values for a key (eg, key goes to an empty array),                                   // 169
          // pretend we found one null value.                                                                     // 170
          if (!branches.length)                                                                                   // 171
            branches = [{ value: null }];                                                                           // 172
          // 173
          var usedPaths = false;                                                                                  // 174
          valuesByIndexAndPath[whichField] = {};                                                                  // 175
          _.each(branches, function (branch) {                                                                    // 176
            if (!branch.arrayIndices) {                                                                           // 177
              // If there are no array indices for a branch, then it must be the                                  // 178
              // only branch, because the only thing that produces multiple branches                              // 179
              // is the use of arrays.                                                                            // 180
              if (branches.length > 1)                                                                            // 181
                throw Error("multiple branches but no array used?");                                              // 182
              valuesByIndexAndPath[whichField][''] = branch.value;                                                // 183
              return;                                                                                             // 184
            }                                                                                                     // 185
            // 186
            usedPaths = true;                                                                                     // 187
            var path = pathFromIndices(branch.arrayIndices);                                                      // 188
            if (_.has(valuesByIndexAndPath[whichField], path))                                                    // 189
              throw Error("duplicate path: " + path);                                                             // 190
            valuesByIndexAndPath[whichField][path] = branch.value;                                                // 191
            // 192
            // If two sort fields both go into arrays, they have to go into the                                   // 193
            // exact same arrays and we have to find the same paths.  This is                                     // 194
            // roughly the same condition that makes MongoDB throw this strange                                   // 195
            // error message.  eg, the main thing is that if sort spec is {a: 1,                                  // 196
            // b:1} then a and b cannot both be arrays.                                                           // 197
            //                                                                                                    // 198
            // (In MongoDB it seems to be OK to have {a: 1, 'a.x.y': 1} where 'a'                                 // 199
            // and 'a.x.y' are both arrays, but we don't allow this for now.                                      // 200
            // #NestedArraySort                                                                                   // 201
            // XXX achieve full compatibility here                                                                // 202
            if (knownPaths && !_.has(knownPaths, path)) {                                                         // 203
              throw Error("cannot index parallel arrays");                                                        // 204
            }                                                                                                     // 205
          });                                                                                                     // 206
          // 207
          if (knownPaths) {                                                                                       // 208
            // Similarly to above, paths must match everywhere, unless this is a                                  // 209
            // non-array field.                                                                                   // 210
            if (!_.has(valuesByIndexAndPath[whichField], '') &&                                                   // 211
              _.size(knownPaths) !== _.size(valuesByIndexAndPath[whichField])) {                                // 212
              throw Error("cannot index parallel arrays!");                                                       // 213
            }                                                                                                     // 214
          } else if (usedPaths) {                                                                                 // 215
            knownPaths = {};                                                                                      // 216
            _.each(valuesByIndexAndPath[whichField], function (x, path) {                                         // 217
              knownPaths[path] = true;                                                                            // 218
            });                                                                                                   // 219
          }                                                                                                       // 220
        });                                                                                                       // 221
        // 222
        if (!knownPaths) {                                                                                        // 223
          // Easy case: no use of arrays.                                                                         // 224
          var soleKey = _.map(valuesByIndexAndPath, function (values) {                                           // 225
            if (!_.has(values, ''))                                                                               // 226
              throw Error("no value in sole key case?");                                                          // 227
            return values[''];                                                                                    // 228
          });                                                                                                     // 229
          cb(soleKey);                                                                                            // 230
          return;                                                                                                 // 231
        }                                                                                                         // 232
        // 233
        _.each(knownPaths, function (x, path) {                                                                   // 234
          var key = _.map(valuesByIndexAndPath, function (values) {                                               // 235
            if (_.has(values, ''))                                                                                // 236
              return values[''];                                                                                  // 237
            if (!_.has(values, path))                                                                             // 238
              throw Error("missing path?");                                                                       // 239
            return values[path];                                                                                  // 240
          });                                                                                                     // 241
          cb(key);                                                                                                // 242
        });                                                                                                       // 243
      },                                                                                                          // 244
      // 245
      // Takes in two keys: arrays whose lengths match the number of spec                                         // 246
      // parts. Returns negative, 0, or positive based on using the sort spec to                                  // 247
      // compare fields.                                                                                          // 248
      _compareKeys: function (key1, key2) {                                                                       // 249
        var self = this;                                                                                          // 250
        if (key1.length !== self._sortSpecParts.length ||                                                         // 251
          key2.length !== self._sortSpecParts.length) {                                                         // 252
          throw Error("Key has wrong length");                                                                    // 253
        }                                                                                                         // 254
        // 255
        return self._keyComparator(key1, key2);                                                                   // 256
      },                                                                                                          // 257
      // 258
      // Given an index 'i', returns a comparator that compares two key arrays based                              // 259
      // on field 'i'.                                                                                            // 260
      _keyFieldComparator: function (i) {                                                                         // 261
        var self = this;                                                                                          // 262
        var invert = !self._sortSpecParts[i].ascending;                                                           // 263
        return function (key1, key2) {                                                                            // 264
          var compare = LocalCollection._f._cmp(key1[i], key2[i]);                                                // 265
          if (invert)                                                                                             // 266
            compare = -compare;                                                                                   // 267
          return compare;                                                                                         // 268
        };                                                                                                        // 269
      },                                                                                                          // 270
      // 271
      // Returns a comparator that represents the sort specification (but not                                     // 272
      // including a possible geoquery distance tie-breaker).                                                     // 273
      _getBaseComparator: function () {                                                                           // 274
        var self = this;                                                                                          // 275
        // 276
        if (self._sortFunction)                                                                                   // 277
          return self._sortFunction;                                                                              // 278
        // 279
        // If we're only sorting on geoquery distance and no specs, just say                                      // 280
        // everything is equal.                                                                                   // 281
        if (!self._sortSpecParts.length) {                                                                        // 282
          return function (doc1, doc2) {                                                                          // 283
            return 0;                                                                                             // 284
          };                                                                                                      // 285
        }                                                                                                         // 286
        // 287
        return function (doc1, doc2) {                                                                            // 288
          var key1 = self._getMinKeyFromDoc(doc1);                                                                // 289
          var key2 = self._getMinKeyFromDoc(doc2);                                                                // 290
          return self._compareKeys(key1, key2);                                                                   // 291
        };                                                                                                        // 292
      },                                                                                                          // 293
      // 294
      // In MongoDB, if you have documents                                                                        // 295
      //    {_id: 'x', a: [1, 10]} and                                                                            // 296
      //    {_id: 'y', a: [5, 15]},                                                                               // 297
      // then C.find({}, {sort: {a: 1}}) puts x before y (1 comes before 5).                                      // 298
      // But  C.find({a: {$gt: 3}}, {sort: {a: 1}}) puts y before x (1 does not                                   // 299
      // match the selector, and 5 comes before 10).                                                              // 300
      //                                                                                                          // 301
      // The way this works is pretty subtle!  For example, if the documents                                      // 302
      // are instead {_id: 'x', a: [{x: 1}, {x: 10}]}) and                                                        // 303
      //             {_id: 'y', a: [{x: 5}, {x: 15}]}),                                                           // 304
      // then C.find({'a.x': {$gt: 3}}, {sort: {'a.x': 1}}) and                                                   // 305
      //      C.find({a: {$elemMatch: {x: {$gt: 3}}}}, {sort: {'a.x': 1}})                                        // 306
      // both follow this rule (y before x).  (ie, you do have to apply this                                      // 307
      // through $elemMatch.)                                                                                     // 308
      //                                                                                                          // 309
      // So if you pass a matcher to this sorter's constructor, we will attempt to                                // 310
      // skip sort keys that don't match the selector. The logic here is pretty                                   // 311
      // subtle and undocumented; we've gotten as close as we can figure out based                                // 312
      // on our understanding of Mongo's behavior.                                                                // 313
      _useWithMatcher: function (matcher) {                                                                       // 314
        var self = this;                                                                                          // 315
        // 316
        if (self._keyFilter)                                                                                      // 317
          throw Error("called _useWithMatcher twice?");                                                           // 318
        // 319
        // If we are only sorting by distance, then we're not going to bother to                                  // 320
        // build a key filter.                                                                                    // 321
        // XXX figure out how geoqueries interact with this stuff                                                 // 322
        if (_.isEmpty(self._sortSpecParts))                                                                       // 323
          return;                                                                                                 // 324
        // 325
        var selector = matcher._selector;                                                                         // 326
        // 327
        // If the user just passed a literal function to find(), then we can't get a                              // 328
        // key filter from it.                                                                                    // 329
        if (selector instanceof Function)                                                                         // 330
          return;                                                                                                 // 331
        // 332
        var constraintsByPath = {};                                                                               // 333
        _.each(self._sortSpecParts, function (spec, i) {                                                          // 334
          constraintsByPath[spec.path] = [];                                                                      // 335
        });                                                                                                       // 336
        // 337
        _.each(selector, function (subSelector, key) {                                                            // 338
          // XXX support $and and $or                                                                             // 339
          // 340
          var constraints = constraintsByPath[key];                                                               // 341
          if (!constraints)                                                                                       // 342
            return;                                                                                               // 343
          // 344
          // XXX it looks like the real MongoDB implementation isn't "does the                                    // 345
          // regexp match" but "does the value fall into a range named by the                                     // 346
          // literal prefix of the regexp", ie "foo" in /^foo(bar|baz)+/  But                                     // 347
          // "does the regexp match" is a good approximation.                                                     // 348
          if (subSelector instanceof RegExp) {                                                                    // 349
            // As far as we can tell, using either of the options that both we and                                // 350
            // MongoDB support ('i' and 'm') disables use of the key filter. This                                 // 351
            // makes sense: MongoDB mostly appears to be calculating ranges of an                                 // 352
            // index to use, which means it only cares about regexps that match                                   // 353
            // one range (with a literal prefix), and both 'i' and 'm' prevent the                                // 354
            // literal prefix of the regexp from actually meaning one range.                                      // 355
            if (subSelector.ignoreCase || subSelector.multiline)                                                  // 356
              return;                                                                                             // 357
            constraints.push(regexpElementMatcher(subSelector));                                                  // 358
            return;                                                                                               // 359
          }                                                                                                       // 360
          // 361
          if (isOperatorObject(subSelector)) {                                                                    // 362
            _.each(subSelector, function (operand, operator) {                                                    // 363
              if (_.contains(['$lt', '$lte', '$gt', '$gte'], operator)) {                                         // 364
                // XXX this depends on us knowing that these operators don't use any                              // 365
                // of the arguments to compileElementSelector other than operand.                                 // 366
                constraints.push(                                                                                 // 367
                  ELEMENT_OPERATORS[operator].compileElementSelector(operand));                                   // 368
              }                                                                                                   // 369
              // 370
              // See comments in the RegExp block above.                                                          // 371
              if (operator === '$regex' && !subSelector.$options) {                                               // 372
                constraints.push(                                                                                 // 373
                  ELEMENT_OPERATORS.$regex.compileElementSelector(                                                // 374
                    operand, subSelector));                                                                       // 375
              }                                                                                                   // 376
              // 377
              // XXX support {$exists: true}, $mod, $type, $in, $elemMatch                                        // 378
            });                                                                                                   // 379
            return;                                                                                               // 380
          }                                                                                                       // 381
          // 382
          // OK, it's an equality thing.                                                                          // 383
          constraints.push(equalityElementMatcher(subSelector));                                                  // 384
        });                                                                                                       // 385
        // 386
        // It appears that the first sort field is treated differently from the                                   // 387
        // others; we shouldn't create a key filter unless the first sort field is                                // 388
        // restricted, though after that point we can restrict the other sort fields                              // 389
        // or not as we wish.                                                                                     // 390
        if (_.isEmpty(constraintsByPath[self._sortSpecParts[0].path]))                                            // 391
          return;                                                                                                 // 392
        // 393
        self._keyFilter = function (key) {                                                                        // 394
          return _.all(self._sortSpecParts, function (specPart, index) {                                          // 395
            return _.all(constraintsByPath[specPart.path], function (f) {                                         // 396
              return f(key[index]);                                                                               // 397
            });                                                                                                   // 398
          });                                                                                                     // 399
        };                                                                                                        // 400
      }                                                                                                           // 401
    });                                                                                                           // 402
    // 403
    // Given an array of comparators                                                                              // 404
    // (functions (a,b)->(negative or positive or zero)), returns a single                                        // 405
    // comparator which uses each comparator in order and returns the first                                       // 406
    // non-zero value.                                                                                            // 407
    var composeComparators = function (comparatorArray) {                                                         // 408
      return function (a, b) {                                                                                    // 409
        for (var i = 0; i < comparatorArray.length; ++i) {                                                        // 410
          var compare = comparatorArray[i](a, b);                                                                 // 411
          if (compare !== 0)                                                                                      // 412
            return compare;                                                                                       // 413
        }                                                                                                         // 414
        return 0;                                                                                                 // 415
      };                                                                                                          // 416
    };                                                                                                            // 417
    // 418
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }).call(this);






  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                            //
    // packages/minimongo/projection.js                                                                           //
    //                                                                                                            //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Knows how to compile a fields projection to a predicate function.                                          // 1
    // @returns - Function: a closure that filters out an object according to the                                 // 2
    //            fields projection rules:                                                                        // 3
    //            @param obj - Object: MongoDB-styled document                                                    // 4
    //            @returns - Object: a document with the fields filtered out                                      // 5
    //                       according to projection rules. Doesn't retain subfields                              // 6
    //                       of passed argument.                                                                  // 7
    LocalCollection._compileProjection = function (fields) {                                                      // 8
      LocalCollection._checkSupportedProjection(fields);                                                          // 9
      // 10
      var _idProjection = _.isUndefined(fields._id) ? true : fields._id;                                          // 11
      var details = projectionDetails(fields);                                                                    // 12
      // 13
      // returns transformed doc according to ruleTree                                                            // 14
      var transform = function (doc, ruleTree) {                                                                  // 15
        // Special case for "sets"                                                                                // 16
        if (_.isArray(doc))                                                                                       // 17
          return _.map(doc, function (subdoc) { return transform(subdoc, ruleTree); });                           // 18
        // 19
        var res = details.including ? {} : EJSON.clone(doc);                                                      // 20
        _.each(ruleTree, function (rule, key) {                                                                   // 21
          if (!_.has(doc, key))                                                                                   // 22
            return;                                                                                               // 23
          if (_.isObject(rule)) {                                                                                 // 24
            // For sub-objects/subsets we branch                                                                  // 25
            if (_.isObject(doc[key]))                                                                             // 26
              res[key] = transform(doc[key], rule);                                                               // 27
            // Otherwise we don't even touch this subfield                                                        // 28
          } else if (details.including)                                                                           // 29
            res[key] = EJSON.clone(doc[key]);                                                                     // 30
          else                                                                                                    // 31
            delete res[key];                                                                                      // 32
        });                                                                                                       // 33
        // 34
        return res;                                                                                               // 35
      };                                                                                                          // 36
      // 37
      return function (obj) {                                                                                     // 38
        var res = transform(obj, details.tree);                                                                   // 39
        // 40
        if (_idProjection && _.has(obj, '_id'))                                                                   // 41
          res._id = obj._id;                                                                                      // 42
        if (!_idProjection && _.has(res, '_id'))                                                                  // 43
          delete res._id;                                                                                         // 44
        return res;                                                                                               // 45
      };                                                                                                          // 46
    };                                                                                                            // 47
    // 48
    // Traverses the keys of passed projection and constructs a tree where all                                    // 49
    // leaves are either all True or all False                                                                    // 50
    // @returns Object:                                                                                           // 51
    //  - tree - Object - tree representation of keys involved in projection                                      // 52
    //  (exception for '_id' as it is a special case handled separately)                                          // 53
    //  - including - Boolean - "take only certain fields" type of projection                                     // 54
    projectionDetails = function (fields) {                                                                       // 55
      // Find the non-_id keys (_id is handled specially because it is included unless                            // 56
      // explicitly excluded). Sort the keys, so that our code to detect overlaps                                 // 57
      // like 'foo' and 'foo.bar' can assume that 'foo' comes first.                                              // 58
      var fieldsKeys = _.keys(fields).sort();                                                                     // 59
      // 60
      // If _id is the only field in the projection, do not remove it, since it is                                // 61
      // required to determine if this is an exclusion or exclusion. Also keep an                                 // 62
      // inclusive _id, since inclusive _id follows the normal rules about mixing                                 // 63
      // inclusive and exclusive fields. If _id is not the only field in the                                      // 64
      // projection and is exclusive, remove it so it can be handled later by a                                   // 65
      // special case, since exclusive _id is always allowed.                                                     // 66
      if (fieldsKeys.length > 0 &&                                                                                // 67
        !(fieldsKeys.length === 1 && fieldsKeys[0] === '_id') &&                                                // 68
        !(_.contains(fieldsKeys, '_id') && fields['_id']))                                                      // 69
        fieldsKeys = _.reject(fieldsKeys, function (key) { return key === '_id'; });                              // 70
      // 71
      var including = null; // Unknown                                                                            // 72
      // 73
      _.each(fieldsKeys, function (keyPath) {                                                                     // 74
        var rule = !!fields[keyPath];                                                                             // 75
        if (including === null)                                                                                   // 76
          including = rule;                                                                                       // 77
        if (including !== rule)                                                                                   // 78
          // This error message is copied from MongoDB shell                                                      // 79
          throw MinimongoError("You cannot currently mix including and excluding fields.");                       // 80
      });                                                                                                         // 81
      // 82
      // 83
      var projectionRulesTree = pathsToTree(                                                                      // 84
        fieldsKeys,                                                                                               // 85
        function (path) { return including; },                                                                    // 86
        function (node, path, fullPath) {                                                                         // 87
          // Check passed projection fields' keys: If you have two rules such as                                  // 88
          // 'foo.bar' and 'foo.bar.baz', then the result becomes ambiguous. If                                   // 89
          // that happens, there is a probability you are doing something wrong,                                  // 90
          // framework should notify you about such mistake earlier on cursor                                     // 91
          // compilation step than later during runtime.  Note, that real mongo                                   // 92
          // doesn't do anything about it and the later rule appears in projection                                // 93
          // project, more priority it takes.                                                                     // 94
          //                                                                                                      // 95
          // Example, assume following in mongo shell:                                                            // 96
          // > db.coll.insert({ a: { b: 23, c: 44 } })                                                            // 97
          // > db.coll.find({}, { 'a': 1, 'a.b': 1 })                                                             // 98
          // { "_id" : ObjectId("520bfe456024608e8ef24af3"), "a" : { "b" : 23 } }                                 // 99
          // > db.coll.find({}, { 'a.b': 1, 'a': 1 })                                                             // 100
          // { "_id" : ObjectId("520bfe456024608e8ef24af3"), "a" : { "b" : 23, "c" : 44 } }                       // 101
          //                                                                                                      // 102
          // Note, how second time the return set of keys is different.                                           // 103
          // 104
          var currentPath = fullPath;                                                                             // 105
          var anotherPath = path;                                                                                 // 106
          throw MinimongoError("both " + currentPath + " and " + anotherPath +                                    // 107
            " found in fields option, using both of them may trigger " +                       // 108
            "unexpected behavior. Did you mean to use only one of them?");                     // 109
        });                                                                                                       // 110
      // 111
      return {                                                                                                    // 112
        tree: projectionRulesTree,                                                                                // 113
        including: including                                                                                      // 114
      };                                                                                                          // 115
    };                                                                                                            // 116
    // 117
    // paths - Array: list of mongo style paths                                                                   // 118
    // newLeafFn - Function: of form function(path) should return a scalar value to                               // 119
    //                       put into list created for that path                                                  // 120
    // conflictFn - Function: of form function(node, path, fullPath) is called                                    // 121
    //                        when building a tree path for 'fullPath' node on                                    // 122
    //                        'path' was already a leaf with a value. Must return a                               // 123
    //                        conflict resolution.                                                                // 124
    // initial tree - Optional Object: starting tree.                                                             // 125
    // @returns - Object: tree represented as a set of nested objects                                             // 126
    pathsToTree = function (paths, newLeafFn, conflictFn, tree) {                                                 // 127
      tree = tree || {};                                                                                          // 128
      _.each(paths, function (keyPath) {                                                                          // 129
        var treePos = tree;                                                                                       // 130
        var pathArr = keyPath.split('.');                                                                         // 131
        // 132
        // use _.all just for iteration with break                                                                // 133
        var success = _.all(pathArr.slice(0, -1), function (key, idx) {                                           // 134
          if (!_.has(treePos, key))                                                                               // 135
            treePos[key] = {};                                                                                    // 136
          else if (!_.isObject(treePos[key])) {                                                                   // 137
            treePos[key] = conflictFn(treePos[key],                                                               // 138
              pathArr.slice(0, idx + 1).join('.'),                                        // 139
              keyPath);                                                                   // 140
            // break out of loop if we are failing for this path                                                  // 141
            if (!_.isObject(treePos[key]))                                                                        // 142
              return false;                                                                                       // 143
          }                                                                                                       // 144
          // 145
          treePos = treePos[key];                                                                                 // 146
          return true;                                                                                            // 147
        });                                                                                                       // 148
        // 149
        if (success) {                                                                                            // 150
          var lastKey = _.last(pathArr);                                                                          // 151
          if (!_.has(treePos, lastKey))                                                                           // 152
            treePos[lastKey] = newLeafFn(keyPath);                                                                // 153
          else                                                                                                    // 154
            treePos[lastKey] = conflictFn(treePos[lastKey], keyPath, keyPath);                                    // 155
        }                                                                                                         // 156
      });                                                                                                         // 157
      // 158
      return tree;                                                                                                // 159
    };                                                                                                            // 160
    // 161
    LocalCollection._checkSupportedProjection = function (fields) {                                               // 162
      if (!_.isObject(fields) || _.isArray(fields))                                                               // 163
        throw MinimongoError("fields option must be an object");                                                  // 164
      // 165
      _.each(fields, function (val, keyPath) {                                                                    // 166
        if (_.contains(keyPath.split('.'), '$'))                                                                  // 167
          throw MinimongoError("Minimongo doesn't support $ operator in projections yet.");                       // 168
        if (typeof val === 'object' && _.intersection(['$elemMatch', '$meta', '$slice'], _.keys(val)).length > 0)
          throw MinimongoError("Minimongo doesn't support operators in projections yet.");                        // 170
        if (_.indexOf([1, 0, true, false], val) === -1)                                                           // 171
          throw MinimongoError("Projection values should be one of 1, 0, true, or false");                        // 172
      });                                                                                                         // 173
    };                                                                                                            // 174
    // 175
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }).call(this);






  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                            //
    // packages/minimongo/modify.js                                                                               //
    //                                                                                                            //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // XXX need a strategy for passing the binding of $ into this                                                 // 1
    // function, from the compiled selector                                                                       // 2
    //                                                                                                            // 3
    // maybe just {key.up.to.just.before.dollarsign: array_index}                                                 // 4
    //                                                                                                            // 5
    // XXX atomicity: if one modification fails, do we roll back the whole                                        // 6
    // change?                                                                                                    // 7
    //                                                                                                            // 8
    // options:                                                                                                   // 9
    //   - isInsert is set when _modify is being called to compute the document to                                // 10
    //     insert as part of an upsert operation. We use this primarily to figure                                 // 11
    //     out when to set the fields in $setOnInsert, if present.                                                // 12
    LocalCollection._modify = function (doc, mod, options) {                                                      // 13
      options = options || {};                                                                                    // 14
      if (!isPlainObject(mod))                                                                                    // 15
        throw MinimongoError("Modifier must be an object");                                                       // 16
      // 17
      // Make sure the caller can't mutate our data structures.                                                   // 18
      mod = EJSON.clone(mod);                                                                                     // 19
      // 20
      var isModifier = isOperatorObject(mod);                                                                     // 21
      // 22
      var newDoc;                                                                                                 // 23
      // 24
      if (!isModifier) {                                                                                          // 25
        if (mod._id && !EJSON.equals(doc._id, mod._id))                                                           // 26
          throw MinimongoError("Cannot change the _id of a document");                                            // 27
        // 28
        // replace the whole document                                                                             // 29
        for (var k in mod) {                                                                                      // 30
          if (/\./.test(k))                                                                                       // 31
            throw MinimongoError(                                                                                 // 32
              "When replacing document, field name may not contain '.'");                                         // 33
        }                                                                                                         // 34
        newDoc = mod;                                                                                             // 35
      } else {                                                                                                    // 36
        // apply modifiers to the doc.                                                                            // 37
        newDoc = EJSON.clone(doc);                                                                                // 38
        // 39
        _.each(mod, function (operand, op) {                                                                      // 40
          var modFunc = MODIFIERS[op];                                                                            // 41
          // Treat $setOnInsert as $set if this is an insert.                                                     // 42
          if (options.isInsert && op === '$setOnInsert')                                                          // 43
            modFunc = MODIFIERS['$set'];                                                                          // 44
          if (!modFunc)                                                                                           // 45
            throw MinimongoError("Invalid modifier specified " + op);                                             // 46
          _.each(operand, function (arg, keypath) {                                                               // 47
            if (keypath === '') {                                                                                 // 48
              throw MinimongoError("An empty update path is not valid.");                                         // 49
            }                                                                                                     // 50
            // 51
            if (keypath === '_id' && op !== '$setOnInsert') {                                                     // 52
              throw MinimongoError("Mod on _id not allowed");                                                     // 53
            }                                                                                                     // 54
            // 55
            var keyparts = keypath.split('.');                                                                    // 56
            // 57
            if (!_.all(keyparts, _.identity)) {                                                                  // 58
              throw MinimongoError(                                                                               // 59
                "The update path '" + keypath +                                                                   // 60
                "' contains an empty field name, which is not allowed.");                                       // 61
            }                                                                                                     // 62
            // 63
            var noCreate = _.has(NO_CREATE_MODIFIERS, op);                                                        // 64
            var forbidArray = (op === "$rename");                                                                 // 65
            var target = findModTarget(newDoc, keyparts, {                                                        // 66
              noCreate: NO_CREATE_MODIFIERS[op],                                                                  // 67
              forbidArray: (op === "$rename"),                                                                    // 68
              arrayIndices: options.arrayIndices                                                                  // 69
            });                                                                                                   // 70
            var field = keyparts.pop();                                                                           // 71
            modFunc(target, field, arg, keypath, newDoc);                                                         // 72
          });                                                                                                     // 73
        });                                                                                                       // 74
      }                                                                                                           // 75
      // 76
      // move new document into place.                                                                            // 77
      _.each(_.keys(doc), function (k) {                                                                          // 78
        // Note: this used to be for (var k in doc) however, this does not                                        // 79
        // work right in Opera. Deleting from a doc while iterating over it                                       // 80
        // would sometimes cause opera to skip some keys.                                                         // 81
        if (k !== '_id')                                                                                          // 82
          delete doc[k];                                                                                          // 83
      });                                                                                                         // 84
      _.each(newDoc, function (v, k) {                                                                            // 85
        doc[k] = v;                                                                                               // 86
      });                                                                                                         // 87
    };                                                                                                            // 88
    // 89
    // for a.b.c.2.d.e, keyparts should be ['a', 'b', 'c', '2', 'd', 'e'],                                        // 90
    // and then you would operate on the 'e' property of the returned                                             // 91
    // object.                                                                                                    // 92
    //                                                                                                            // 93
    // if options.noCreate is falsey, creates intermediate levels of                                              // 94
    // structure as necessary, like mkdir -p (and raises an exception if                                          // 95
    // that would mean giving a non-numeric property to an array.) if                                             // 96
    // options.noCreate is true, return undefined instead.                                                        // 97
    //                                                                                                            // 98
    // may modify the last element of keyparts to signal to the caller that it needs                              // 99
    // to use a different value to index into the returned object (for example,                                   // 100
    // ['a', '01'] -> ['a', 1]).                                                                                  // 101
    //                                                                                                            // 102
    // if forbidArray is true, return null if the keypath goes through an array.                                  // 103
    //                                                                                                            // 104
    // if options.arrayIndices is set, use its first element for the (first) '$' in                               // 105
    // the path.                                                                                                  // 106
    var findModTarget = function (doc, keyparts, options) {                                                       // 107
      options = options || {};                                                                                    // 108
      var usedArrayIndex = false;                                                                                 // 109
      for (var i = 0; i < keyparts.length; i++) {                                                                 // 110
        var last = (i === keyparts.length - 1);                                                                   // 111
        var keypart = keyparts[i];                                                                                // 112
        var indexable = isIndexable(doc);                                                                         // 113
        if (!indexable) {                                                                                         // 114
          if (options.noCreate)                                                                                   // 115
            return undefined;                                                                                     // 116
          var e = MinimongoError(                                                                                 // 117
            "cannot use the part '" + keypart + "' to traverse " + doc);                                          // 118
          e.setPropertyError = true;                                                                              // 119
          throw e;                                                                                                // 120
        }                                                                                                         // 121
        if (doc instanceof Array) {                                                                               // 122
          if (options.forbidArray)                                                                                // 123
            return null;                                                                                          // 124
          if (keypart === '$') {                                                                                  // 125
            if (usedArrayIndex)                                                                                   // 126
              throw MinimongoError("Too many positional (i.e. '$') elements");                                    // 127
            if (!options.arrayIndices || !options.arrayIndices.length) {                                          // 128
              throw MinimongoError("The positional operator did not find the " +                                  // 129
                "match needed from the query");                                                // 130
            }                                                                                                     // 131
            keypart = options.arrayIndices[0];                                                                    // 132
            usedArrayIndex = true;                                                                                // 133
          } else if (isNumericKey(keypart)) {                                                                     // 134
            keypart = parseInt(keypart);                                                                          // 135
          } else {                                                                                                // 136
            if (options.noCreate)                                                                                 // 137
              return undefined;                                                                                   // 138
            throw MinimongoError(                                                                                 // 139
              "can't append to array using string field name ["                                                   // 140
              + keypart + "]");                                                                         // 141
          }                                                                                                       // 142
          if (last)                                                                                               // 143
            // handle 'a.01'                                                                                      // 144
            keyparts[i] = keypart;                                                                                // 145
          if (options.noCreate && keypart >= doc.length)                                                          // 146
            return undefined;                                                                                     // 147
          while (doc.length < keypart)                                                                            // 148
            doc.push(null);                                                                                       // 149
          if (!last) {                                                                                            // 150
            if (doc.length === keypart)                                                                           // 151
              doc.push({});                                                                                       // 152
            else if (typeof doc[keypart] !== "object")                                                            // 153
              throw MinimongoError("can't modify field '" + keyparts[i + 1] +                                     // 154
                "' of list value " + JSON.stringify(doc[keypart]));                                     // 155
          }                                                                                                       // 156
        } else {                                                                                                  // 157
          if (keypart.length && keypart.substr(0, 1) === '$')                                                     // 158
            throw MinimongoError("can't set field named " + keypart);                                             // 159
          if (!(keypart in doc)) {                                                                                // 160
            if (options.noCreate)                                                                                 // 161
              return undefined;                                                                                   // 162
            if (!last)                                                                                            // 163
              doc[keypart] = {};                                                                                  // 164
          }                                                                                                       // 165
        }                                                                                                         // 166
        // 167
        if (last)                                                                                                 // 168
          return doc;                                                                                             // 169
        doc = doc[keypart];                                                                                       // 170
      }                                                                                                           // 171
      // 172
      // notreached                                                                                               // 173
    };                                                                                                            // 174
    // 175
    var NO_CREATE_MODIFIERS = {                                                                                   // 176
      $unset: true,                                                                                               // 177
      $pop: true,                                                                                                 // 178
      $rename: true,                                                                                              // 179
      $pull: true,                                                                                                // 180
      $pullAll: true                                                                                              // 181
    };                                                                                                            // 182
    // 183
    var MODIFIERS = {                                                                                             // 184
      $inc: function (target, field, arg) {                                                                       // 185
        if (typeof arg !== "number")                                                                              // 186
          throw MinimongoError("Modifier $inc allowed for numbers only");                                         // 187
        if (field in target) {                                                                                    // 188
          if (typeof target[field] !== "number")                                                                  // 189
            throw MinimongoError("Cannot apply $inc modifier to non-number");                                     // 190
          target[field] += arg;                                                                                   // 191
        } else {                                                                                                  // 192
          target[field] = arg;                                                                                    // 193
        }                                                                                                         // 194
      },                                                                                                          // 195
      $set: function (target, field, arg) {                                                                       // 196
        if (!_.isObject(target)) { // not an array or an object                                                   // 197
          var e = MinimongoError("Cannot set property on non-object field");                                      // 198
          e.setPropertyError = true;                                                                              // 199
          throw e;                                                                                                // 200
        }                                                                                                         // 201
        if (target === null) {                                                                                    // 202
          var e = MinimongoError("Cannot set property on null");                                                  // 203
          e.setPropertyError = true;                                                                              // 204
          throw e;                                                                                                // 205
        }                                                                                                         // 206
        target[field] = arg;                                                                                      // 207
      },                                                                                                          // 208
      $setOnInsert: function (target, field, arg) {                                                               // 209
        // converted to `$set` in `_modify`                                                                       // 210
      },                                                                                                          // 211
      $unset: function (target, field, arg) {                                                                     // 212
        if (target !== undefined) {                                                                               // 213
          if (target instanceof Array) {                                                                          // 214
            if (field in target)                                                                                  // 215
              target[field] = null;                                                                               // 216
          } else                                                                                                  // 217
            delete target[field];                                                                                 // 218
        }                                                                                                         // 219
      },                                                                                                          // 220
      $push: function (target, field, arg) {                                                                      // 221
        if (target[field] === undefined)                                                                          // 222
          target[field] = [];                                                                                     // 223
        if (!(target[field] instanceof Array))                                                                    // 224
          throw MinimongoError("Cannot apply $push modifier to non-array");                                       // 225
        // 226
        if (!(arg && arg.$each)) {                                                                                // 227
          // Simple mode: not $each                                                                               // 228
          target[field].push(arg);                                                                                // 229
          return;                                                                                                 // 230
        }                                                                                                         // 231
        // 232
        // Fancy mode: $each (and maybe $slice and $sort and $position)                                           // 233
        var toPush = arg.$each;                                                                                   // 234
        if (!(toPush instanceof Array))                                                                           // 235
          throw MinimongoError("$each must be an array");                                                         // 236
        // 237
        // Parse $position                                                                                        // 238
        var position = undefined;                                                                                 // 239
        if ('$position' in arg) {                                                                                 // 240
          if (typeof arg.$position !== "number")                                                                  // 241
            throw MinimongoError("$position must be a numeric value");                                            // 242
          // XXX should check to make sure integer                                                                // 243
          if (arg.$position < 0)                                                                                  // 244
            throw MinimongoError("$position in $push must be zero or positive");                                  // 245
          position = arg.$position;                                                                               // 246
        }                                                                                                         // 247
        // 248
        // Parse $slice.                                                                                          // 249
        var slice = undefined;                                                                                    // 250
        if ('$slice' in arg) {                                                                                    // 251
          if (typeof arg.$slice !== "number")                                                                     // 252
            throw MinimongoError("$slice must be a numeric value");                                               // 253
          // XXX should check to make sure integer                                                                // 254
          if (arg.$slice > 0)                                                                                     // 255
            throw MinimongoError("$slice in $push must be zero or negative");                                     // 256
          slice = arg.$slice;                                                                                     // 257
        }                                                                                                         // 258
        // 259
        // Parse $sort.                                                                                           // 260
        var sortFunction = undefined;                                                                             // 261
        if (arg.$sort) {                                                                                          // 262
          if (slice === undefined)                                                                                // 263
            throw MinimongoError("$sort requires $slice to be present");                                          // 264
          // XXX this allows us to use a $sort whose value is an array, but that's                                // 265
          // actually an extension of the Node driver, so it won't work                                           // 266
          // server-side. Could be confusing!                                                                     // 267
          // XXX is it correct that we don't do geo-stuff here?                                                   // 268
          sortFunction = new Minimongo.Sorter(arg.$sort).getComparator();                                         // 269
          for (var i = 0; i < toPush.length; i++) {                                                               // 270
            if (LocalCollection._f._type(toPush[i]) !== 3) {                                                      // 271
              throw MinimongoError("$push like modifiers using $sort " +                                          // 272
                "require all elements to be objects");                                                  // 273
            }                                                                                                     // 274
          }                                                                                                       // 275
        }                                                                                                         // 276
        // 277
        // Actually push.                                                                                         // 278
        if (position === undefined) {                                                                             // 279
          for (var j = 0; j < toPush.length; j++)                                                                 // 280
            target[field].push(toPush[j]);                                                                        // 281
        } else {                                                                                                  // 282
          var spliceArguments = [position, 0];                                                                    // 283
          for (var j = 0; j < toPush.length; j++)                                                                 // 284
            spliceArguments.push(toPush[j]);                                                                      // 285
          Array.prototype.splice.apply(target[field], spliceArguments);                                           // 286
        }                                                                                                         // 287
        // 288
        // Actually sort.                                                                                         // 289
        if (sortFunction)                                                                                         // 290
          target[field].sort(sortFunction);                                                                       // 291
        // 292
        // Actually slice.                                                                                        // 293
        if (slice !== undefined) {                                                                                // 294
          if (slice === 0)                                                                                        // 295
            target[field] = [];  // differs from Array.slice!                                                     // 296
          else                                                                                                    // 297
            target[field] = target[field].slice(slice);                                                           // 298
        }                                                                                                         // 299
      },                                                                                                          // 300
      $pushAll: function (target, field, arg) {                                                                   // 301
        if (!(typeof arg === "object" && arg instanceof Array))                                                   // 302
          throw MinimongoError("Modifier $pushAll/pullAll allowed for arrays only");                              // 303
        var x = target[field];                                                                                    // 304
        if (x === undefined)                                                                                      // 305
          target[field] = arg;                                                                                    // 306
        else if (!(x instanceof Array))                                                                           // 307
          throw MinimongoError("Cannot apply $pushAll modifier to non-array");                                    // 308
        else {                                                                                                    // 309
          for (var i = 0; i < arg.length; i++)                                                                    // 310
            x.push(arg[i]);                                                                                       // 311
        }                                                                                                         // 312
      },                                                                                                          // 313
      $addToSet: function (target, field, arg) {                                                                  // 314
        var isEach = false;                                                                                       // 315
        if (typeof arg === "object") {                                                                            // 316
          //check if first key is '$each'                                                                         // 317
          for (var k in arg) {                                                                                    // 318
            if (k === "$each")                                                                                    // 319
              isEach = true;                                                                                      // 320
            break;                                                                                                // 321
          }                                                                                                       // 322
        }                                                                                                         // 323
        var values = isEach ? arg["$each"] : [arg];                                                               // 324
        var x = target[field];                                                                                    // 325
        if (x === undefined)                                                                                      // 326
          target[field] = values;                                                                                 // 327
        else if (!(x instanceof Array))                                                                           // 328
          throw MinimongoError("Cannot apply $addToSet modifier to non-array");                                   // 329
        else {                                                                                                    // 330
          _.each(values, function (value) {                                                                       // 331
            for (var i = 0; i < x.length; i++)                                                                    // 332
              if (LocalCollection._f._equal(value, x[i]))                                                         // 333
                return;                                                                                           // 334
            x.push(value);                                                                                        // 335
          });                                                                                                     // 336
        }                                                                                                         // 337
      },                                                                                                          // 338
      $pop: function (target, field, arg) {                                                                       // 339
        if (target === undefined)                                                                                 // 340
          return;                                                                                                 // 341
        var x = target[field];                                                                                    // 342
        if (x === undefined)                                                                                      // 343
          return;                                                                                                 // 344
        else if (!(x instanceof Array))                                                                           // 345
          throw MinimongoError("Cannot apply $pop modifier to non-array");                                        // 346
        else {                                                                                                    // 347
          if (typeof arg === 'number' && arg < 0)                                                                 // 348
            x.splice(0, 1);                                                                                       // 349
          else                                                                                                    // 350
            x.pop();                                                                                              // 351
        }                                                                                                         // 352
      },                                                                                                          // 353
      $pull: function (target, field, arg) {                                                                      // 354
        if (target === undefined)                                                                                 // 355
          return;                                                                                                 // 356
        var x = target[field];                                                                                    // 357
        if (x === undefined)                                                                                      // 358
          return;                                                                                                 // 359
        else if (!(x instanceof Array))                                                                           // 360
          throw MinimongoError("Cannot apply $pull/pullAll modifier to non-array");                               // 361
        else {                                                                                                    // 362
          var out = [];                                                                                           // 363
          if (arg != null && typeof arg === "object" && !(arg instanceof Array)) {                                // 364
            // XXX would be much nicer to compile this once, rather than                                          // 365
            // for each document we modify.. but usually we're not                                                // 366
            // modifying that many documents, so we'll let it slide for                                           // 367
            // now                                                                                                // 368
            // 369
            // XXX Minimongo.Matcher isn't up for the job, because we need                                        // 370
            // to permit stuff like {$pull: {a: {$gt: 4}}}.. something                                            // 371
            // like {$gt: 4} is not normally a complete selector.                                                 // 372
            // same issue as $elemMatch possibly?                                                                 // 373
            var matcher = new Minimongo.Matcher(arg);                                                             // 374
            for (var i = 0; i < x.length; i++)                                                                    // 375
              if (!matcher.documentMatches(x[i]).result)                                                          // 376
                out.push(x[i]);                                                                                   // 377
          } else {                                                                                                // 378
            for (var i = 0; i < x.length; i++)                                                                    // 379
              if (!LocalCollection._f._equal(x[i], arg))                                                          // 380
                out.push(x[i]);                                                                                   // 381
          }                                                                                                       // 382
          target[field] = out;                                                                                    // 383
        }                                                                                                         // 384
      },                                                                                                          // 385
      $pullAll: function (target, field, arg) {                                                                   // 386
        if (!(typeof arg === "object" && arg instanceof Array))                                                   // 387
          throw MinimongoError("Modifier $pushAll/pullAll allowed for arrays only");                              // 388
        if (target === undefined)                                                                                 // 389
          return;                                                                                                 // 390
        var x = target[field];                                                                                    // 391
        if (x === undefined)                                                                                      // 392
          return;                                                                                                 // 393
        else if (!(x instanceof Array))                                                                           // 394
          throw MinimongoError("Cannot apply $pull/pullAll modifier to non-array");                               // 395
        else {                                                                                                    // 396
          var out = [];                                                                                           // 397
          for (var i = 0; i < x.length; i++) {                                                                    // 398
            var exclude = false;                                                                                  // 399
            for (var j = 0; j < arg.length; j++) {                                                                // 400
              if (LocalCollection._f._equal(x[i], arg[j])) {                                                      // 401
                exclude = true;                                                                                   // 402
                break;                                                                                            // 403
              }                                                                                                   // 404
            }                                                                                                     // 405
            if (!exclude)                                                                                         // 406
              out.push(x[i]);                                                                                     // 407
          }                                                                                                       // 408
          target[field] = out;                                                                                    // 409
        }                                                                                                         // 410
      },                                                                                                          // 411
      $rename: function (target, field, arg, keypath, doc) {                                                      // 412
        if (keypath === arg)                                                                                      // 413
          // no idea why mongo has this restriction..                                                             // 414
          throw MinimongoError("$rename source must differ from target");                                         // 415
        if (target === null)                                                                                      // 416
          throw MinimongoError("$rename source field invalid");                                                   // 417
        if (typeof arg !== "string")                                                                              // 418
          throw MinimongoError("$rename target must be a string");                                                // 419
        if (target === undefined)                                                                                 // 420
          return;                                                                                                 // 421
        var v = target[field];                                                                                    // 422
        delete target[field];                                                                                     // 423
        // 424
        var keyparts = arg.split('.');                                                                            // 425
        var target2 = findModTarget(doc, keyparts, { forbidArray: true });                                          // 426
        if (target2 === null)                                                                                     // 427
          throw MinimongoError("$rename target field invalid");                                                   // 428
        var field2 = keyparts.pop();                                                                              // 429
        target2[field2] = v;                                                                                      // 430
      },                                                                                                          // 431
      $bit: function (target, field, arg) {                                                                       // 432
        // XXX mongo only supports $bit on integers, and we only support                                          // 433
        // native javascript numbers (doubles) so far, so we can't support $bit                                   // 434
        throw MinimongoError("$bit is not supported");                                                            // 435
      }                                                                                                           // 436
    };                                                                                                            // 437
    // 438
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }).call(this);






  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                            //
    // packages/minimongo/diff.js                                                                                 //
    //                                                                                                            //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // ordered: bool.                                                                                             // 1
    // old_results and new_results: collections of documents.                                                     // 2
    //    if ordered, they are arrays.                                                                            // 3
    //    if unordered, they are IdMaps                                                                           // 4
    LocalCollection._diffQueryChanges = function (ordered, oldResults, newResults, observer, options) {           // 5
      return DiffSequence.diffQueryChanges(ordered, oldResults, newResults, observer, options);                   // 6
    };                                                                                                            // 7
    // 8
    LocalCollection._diffQueryUnorderedChanges = function (oldResults, newResults, observer, options) {           // 9
      return DiffSequence.diffQueryUnorderedChanges(oldResults, newResults, observer, options);                   // 10
    };                                                                                                            // 11
    // 12
    // 13
    LocalCollection._diffQueryOrderedChanges =                                                                    // 14
      function (oldResults, newResults, observer, options) {                                                      // 15
        return DiffSequence.diffQueryOrderedChanges(oldResults, newResults, observer, options);                     // 16
      };                                                                                                            // 17
    // 18
    LocalCollection._diffObjects = function (left, right, callbacks) {                                            // 19
      return DiffSequence.diffObjects(left, right, callbacks);                                                    // 20
    };                                                                                                            // 21
    // 22
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }).call(this);






  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                            //
    // packages/minimongo/id_map.js                                                                               //
    //                                                                                                            //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    LocalCollection._IdMap = function () {                                                                        // 1
      var self = this;                                                                                            // 2
      IdMap.call(self, MongoID.idStringify, MongoID.idParse);                                                     // 3
    };                                                                                                            // 4
    // 5
    Meteor._inherits(LocalCollection._IdMap, IdMap);                                                              // 6
    // 7
    // 8
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }).call(this);






  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                            //
    // packages/minimongo/observe.js                                                                              //
    //                                                                                                            //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // XXX maybe move these into another ObserveHelpers package or something                                      // 1
    // 2
    // _CachingChangeObserver is an object which receives observeChanges callbacks                                // 3
    // and keeps a cache of the current cursor state up to date in self.docs. Users                               // 4
    // of this class should read the docs field but not modify it. You should pass                                // 5
    // the "applyChange" field as the callbacks to the underlying observeChanges                                  // 6
    // call. Optionally, you can specify your own observeChanges callbacks which are                              // 7
    // invoked immediately before the docs field is updated; this object is made                                  // 8
    // available as `this` to those callbacks.                                                                    // 9
    LocalCollection._CachingChangeObserver = function (options) {                                                 // 10
      var self = this;                                                                                            // 11
      options = options || {};                                                                                    // 12
      // 13
      var orderedFromCallbacks = options.callbacks &&                                                             // 14
        LocalCollection._observeChangesCallbacksAreOrdered(options.callbacks);                                // 15
      if (_.has(options, 'ordered')) {                                                                            // 16
        self.ordered = options.ordered;                                                                           // 17
        if (options.callbacks && options.ordered !== orderedFromCallbacks)                                        // 18
          throw Error("ordered option doesn't match callbacks");                                                  // 19
      } else if (options.callbacks) {                                                                             // 20
        self.ordered = orderedFromCallbacks;                                                                      // 21
      } else {                                                                                                    // 22
        throw Error("must provide ordered or callbacks");                                                         // 23
      }                                                                                                           // 24
      var callbacks = options.callbacks || {};                                                                    // 25
      // 26
      if (self.ordered) {                                                                                         // 27
        self.docs = new OrderedDict(MongoID.idStringify);                                                         // 28
        self.applyChange = {                                                                                      // 29
          addedBefore: function (id, fields, before) {                                                            // 30
            var doc = EJSON.clone(fields);                                                                        // 31
            doc._id = id;                                                                                         // 32
            callbacks.addedBefore && callbacks.addedBefore.call(                                                  // 33
              self, id, fields, before);                                                                          // 34
            // This line triggers if we provide added with movedBefore.                                           // 35
            callbacks.added && callbacks.added.call(self, id, fields);                                            // 36
            // XXX could `before` be a falsy ID?  Technically                                                     // 37
            // idStringify seems to allow for them -- though                                                      // 38
            // OrderedDict won't call stringify on a falsy arg.                                                   // 39
            self.docs.putBefore(id, doc, before || null);                                                         // 40
          },                                                                                                      // 41
          movedBefore: function (id, before) {                                                                    // 42
            var doc = self.docs.get(id);                                                                          // 43
            callbacks.movedBefore && callbacks.movedBefore.call(self, id, before);                                // 44
            self.docs.moveBefore(id, before || null);                                                             // 45
          }                                                                                                       // 46
        };                                                                                                        // 47
      } else {                                                                                                    // 48
        self.docs = new LocalCollection._IdMap;                                                                   // 49
        self.applyChange = {                                                                                      // 50
          added: function (id, fields) {                                                                          // 51
            var doc = EJSON.clone(fields);                                                                        // 52
            callbacks.added && callbacks.added.call(self, id, fields);                                            // 53
            doc._id = id;                                                                                         // 54
            self.docs.set(id, doc);                                                                              // 55
          }                                                                                                       // 56
        };                                                                                                        // 57
      }                                                                                                           // 58
      // 59
      // The methods in _IdMap and OrderedDict used by these callbacks are                                        // 60
      // identical.                                                                                               // 61
      self.applyChange.changed = function (id, fields) {                                                          // 62
        var doc = self.docs.get(id);                                                                              // 63
        if (!doc)                                                                                                 // 64
          throw new Error("Unknown id for changed: " + id);                                                       // 65
        callbacks.changed && callbacks.changed.call(                                                              // 66
          self, id, EJSON.clone(fields));                                                                         // 67
        DiffSequence.applyChanges(doc, fields);                                                                   // 68
      };                                                                                                          // 69
      self.applyChange.removed = function (id) {                                                                  // 70
        callbacks.removed && callbacks.removed.call(self, id);                                                    // 71
        self.docs.remove(id);                                                                                     // 72
      };                                                                                                          // 73
    };                                                                                                            // 74
    // 75
    LocalCollection._observeFromObserveChanges = function (cursor, observeCallbacks) {                            // 76
      var transform = cursor.getTransform() || function (doc) { return doc; };                                      // 77
      var suppressed = !!observeCallbacks._suppress_initial;                                                      // 78
      // 79
      var observeChangesCallbacks;                                                                                // 80
      if (LocalCollection._observeCallbacksAreOrdered(observeCallbacks)) {                                        // 81
        // The "_no_indices" option sets all index arguments to -1 and skips the                                  // 82
        // linear scans required to generate them.  This lets observers that don't                                // 83
        // need absolute indices benefit from the other features of this API --                                   // 84
        // relative order, transforms, and applyChanges -- without the speed hit.                                 // 85
        var indices = !observeCallbacks._no_indices;                                                              // 86
        observeChangesCallbacks = {                                                                               // 87
          addedBefore: function (id, fields, before) {                                                            // 88
            var self = this;                                                                                      // 89
            if (suppressed || !(observeCallbacks.addedAt || observeCallbacks.added))                              // 90
              return;                                                                                             // 91
            var doc = transform(_.extend(fields, { _id: id }));                                                     // 92
            if (observeCallbacks.addedAt) {                                                                       // 93
              var index = indices                                                                                 // 94
                ? (before ? self.docs.indexOf(before) : self.docs.size()) : -1;                               // 95
              observeCallbacks.addedAt(doc, index, before);                                                       // 96
            } else {                                                                                              // 97
              observeCallbacks.added(doc);                                                                        // 98
            }                                                                                                     // 99
          },                                                                                                      // 100
          changed: function (id, fields) {                                                                        // 101
            var self = this;                                                                                      // 102
            if (!(observeCallbacks.changedAt || observeCallbacks.changed))                                        // 103
              return;                                                                                             // 104
            var doc = EJSON.clone(self.docs.get(id));                                                             // 105
            if (!doc)                                                                                             // 106
              throw new Error("Unknown id for changed: " + id);                                                   // 107
            var oldDoc = transform(EJSON.clone(doc));                                                             // 108
            DiffSequence.applyChanges(doc, fields);                                                               // 109
            doc = transform(doc);                                                                                 // 110
            if (observeCallbacks.changedAt) {                                                                     // 111
              var index = indices ? self.docs.indexOf(id) : -1;                                                   // 112
              observeCallbacks.changedAt(doc, oldDoc, index);                                                     // 113
            } else {                                                                                              // 114
              observeCallbacks.changed(doc, oldDoc);                                                              // 115
            }                                                                                                     // 116
          },                                                                                                      // 117
          movedBefore: function (id, before) {                                                                    // 118
            var self = this;                                                                                      // 119
            if (!observeCallbacks.movedTo)                                                                        // 120
              return;                                                                                             // 121
            var from = indices ? self.docs.indexOf(id) : -1;                                                      // 122
            // 123
            var to = indices                                                                                      // 124
              ? (before ? self.docs.indexOf(before) : self.docs.size()) : -1;                                 // 125
            // When not moving backwards, adjust for the fact that removing the                                   // 126
            // document slides everything back one slot.                                                          // 127
            if (to > from)                                                                                        // 128
              --to;                                                                                               // 129
            observeCallbacks.movedTo(transform(EJSON.clone(self.docs.get(id))),                                   // 130
              from, to, before || null);                                                   // 131
          },                                                                                                      // 132
          removed: function (id) {                                                                                // 133
            var self = this;                                                                                      // 134
            if (!(observeCallbacks.removedAt || observeCallbacks.removed))                                        // 135
              return;                                                                                             // 136
            // technically maybe there should be an EJSON.clone here, but it's about                              // 137
            // to be removed from self.docs!                                                                      // 138
            var doc = transform(self.docs.get(id));                                                               // 139
            if (observeCallbacks.removedAt) {                                                                     // 140
              var index = indices ? self.docs.indexOf(id) : -1;                                                   // 141
              observeCallbacks.removedAt(doc, index);                                                             // 142
            } else {                                                                                              // 143
              observeCallbacks.removed(doc);                                                                      // 144
            }                                                                                                     // 145
          }                                                                                                       // 146
        };                                                                                                        // 147
      } else {                                                                                                    // 148
        observeChangesCallbacks = {                                                                               // 149
          added: function (id, fields) {                                                                          // 150
            if (!suppressed && observeCallbacks.added) {                                                          // 151
              var doc = _.extend(fields, { _id: id });                                                             // 152
              observeCallbacks.added(transform(doc));                                                             // 153
            }                                                                                                     // 154
          },                                                                                                      // 155
          changed: function (id, fields) {                                                                        // 156
            var self = this;                                                                                      // 157
            if (observeCallbacks.changed) {                                                                       // 158
              var oldDoc = self.docs.get(id);                                                                     // 159
              var doc = EJSON.clone(oldDoc);                                                                      // 160
              DiffSequence.applyChanges(doc, fields);                                                             // 161
              observeCallbacks.changed(transform(doc),                                                            // 162
                transform(EJSON.clone(oldDoc)));                                           // 163
            }                                                                                                     // 164
          },                                                                                                      // 165
          removed: function (id) {                                                                                // 166
            var self = this;                                                                                      // 167
            if (observeCallbacks.removed) {                                                                       // 168
              observeCallbacks.removed(transform(self.docs.get(id)));                                             // 169
            }                                                                                                     // 170
          }                                                                                                       // 171
        };                                                                                                        // 172
      }                                                                                                           // 173
      // 174
      var changeObserver = new LocalCollection._CachingChangeObserver(                                            // 175
        { callbacks: observeChangesCallbacks });                                                                    // 176
      var handle = cursor.observeChanges(changeObserver.applyChange);                                             // 177
      suppressed = false;                                                                                         // 178
      // 179
      return handle;                                                                                              // 180
    };                                                                                                            // 181
    // 182
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }).call(this);






  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                            //
    // packages/minimongo/objectid.js                                                                             //
    //                                                                                                            //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Is this selector just shorthand for lookup by _id?                                                         // 1
    LocalCollection._selectorIsId = function (selector) {                                                         // 2
      return (typeof selector === "string") ||                                                                    // 3
        (typeof selector === "number") ||                                                                         // 4
        selector instanceof MongoID.ObjectID;                                                                     // 5
    };                                                                                                            // 6
    // 7
    // Is the selector just lookup by _id (shorthand or not)?                                                     // 8
    LocalCollection._selectorIsIdPerhapsAsObject = function (selector) {                                          // 9
      return LocalCollection._selectorIsId(selector) ||                                                           // 10
        (selector && typeof selector === "object" &&                                                              // 11
          selector._id && LocalCollection._selectorIsId(selector._id) &&                                           // 12
          _.size(selector) === 1);                                                                                 // 13
    };                                                                                                            // 14
    // 15
    // If this is a selector which explicitly constrains the match by ID to a finite                              // 16
    // number of documents, returns a list of their IDs.  Otherwise returns                                       // 17
    // null. Note that the selector may have other restrictions so it may not even                                // 18
    // match those document!  We care about $in and $and since those are generated                                // 19
    // access-controlled update and remove.                                                                       // 20
    LocalCollection._idsMatchedBySelector = function (selector) {                                                 // 21
      // Is the selector just an ID?                                                                              // 22
      if (LocalCollection._selectorIsId(selector))                                                                // 23
        return [selector];                                                                                        // 24
      if (!selector)                                                                                              // 25
        return null;                                                                                              // 26
      // 27
      // Do we have an _id clause?                                                                                // 28
      if (_.has(selector, '_id')) {                                                                               // 29
        // Is the _id clause just an ID?                                                                          // 30
        if (LocalCollection._selectorIsId(selector._id))                                                          // 31
          return [selector._id];                                                                                  // 32
        // Is the _id clause {_id: {$in: ["x", "y", "z"]}}?                                                       // 33
        if (selector._id && selector._id.$in                                                                      // 34
          && _.isArray(selector._id.$in)                                                                        // 35
          && !_.isEmpty(selector._id.$in)                                                                       // 36
          && _.all(selector._id.$in, LocalCollection._selectorIsId)) {                                          // 37
          return selector._id.$in;                                                                                // 38
        }                                                                                                         // 39
        return null;                                                                                              // 40
      }                                                                                                           // 41
      // 42
      // If this is a top-level $and, and any of the clauses constrain their                                      // 43
      // documents, then the whole selector is constrained by any one clause's                                    // 44
      // constraint. (Well, by their intersection, but that seems unlikely.)                                      // 45
      if (selector.$and && _.isArray(selector.$and)) {                                                            // 46
        for (var i = 0; i < selector.$and.length; ++i) {                                                          // 47
          var subIds = LocalCollection._idsMatchedBySelector(selector.$and[i]);                                   // 48
          if (subIds)                                                                                             // 49
            return subIds;                                                                                        // 50
        }                                                                                                         // 51
      }                                                                                                           // 52
      // 53
      return null;                                                                                                // 54
    };                                                                                                            // 55
    // 56
    // 57
    // 58
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }).call(this);


  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols)
      (s in pkg) || (pkg[s] = symbols[s]);
  })(Package.minimongo = {}, {
    LocalCollection: LocalCollection,
    Minimongo: Minimongo,
    MinimongoTest: MinimongoTest
  });

})();
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var check = Package.check.check;
  var Match = Package.check.Match;
  var Random = Package.random.Random;
  var EJSON = Package.ejson.EJSON;
  var _ = Package.underscore._;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;
  var Retry = Package.retry.Retry;

  /* Package-scope variables */
  var DDPCommon;

  (function () {

    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                   //
    // packages/ddp-common/namespace.js                                                                  //
    //                                                                                                   //
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    /**                                                                                                  // 1
     * @namespace DDPCommon                                                                              // 2
     * @summary Namespace for DDPCommon-related methods/classes. Shared between                          // 3
     * `ddp-client` and `ddp-server`, where the ddp-client is the implementation                         // 4
     * of a ddp client for both client AND server; and the ddp server is the                             // 5
     * implementation of the livedata server and stream server. Common                                   // 6
     * functionality shared between both can be shared under this namespace                              // 7
     */                                                                                                  // 8
    DDPCommon = {};                                                                                      // 9
    // 10
    ///////////////////////////////////////////////////////////////////////////////////////////////////////

  }).call(this);






  (function () {

    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                   //
    // packages/ddp-common/heartbeat.js                                                                  //
    //                                                                                                   //
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Heartbeat options:                                                                                // 1
    //   heartbeatInterval: interval to send pings, in milliseconds.                                     // 2
    //   heartbeatTimeout: timeout to close the connection if a reply isn't                              // 3
    //     received, in milliseconds.                                                                    // 4
    //   sendPing: function to call to send a ping on the connection.                                    // 5
    //   onTimeout: function to call to close the connection.                                            // 6
    // 7
    DDPCommon.Heartbeat = function (options) {                                                           // 8
      var self = this;                                                                                   // 9
      // 10
      self.heartbeatInterval = options.heartbeatInterval;                                                // 11
      self.heartbeatTimeout = options.heartbeatTimeout;                                                  // 12
      self._sendPing = options.sendPing;                                                                 // 13
      self._onTimeout = options.onTimeout;                                                               // 14
      self._seenPacket = false;                                                                          // 15
      // 16
      self._heartbeatIntervalHandle = null;                                                              // 17
      self._heartbeatTimeoutHandle = null;                                                               // 18
    };                                                                                                   // 19
    // 20
    _.extend(DDPCommon.Heartbeat.prototype, {                                                            // 21
      stop: function () {                                                                                // 22
        var self = this;                                                                                 // 23
        self._clearHeartbeatIntervalTimer();                                                             // 24
        self._clearHeartbeatTimeoutTimer();                                                              // 25
      },                                                                                                 // 26
      // 27
      start: function () {                                                                               // 28
        var self = this;                                                                                 // 29
        self.stop();                                                                                     // 30
        self._startHeartbeatIntervalTimer();                                                             // 31
      },                                                                                                 // 32
      // 33
      _startHeartbeatIntervalTimer: function () {                                                        // 34
        var self = this;                                                                                 // 35
        self._heartbeatIntervalHandle = Meteor.setInterval(                                              // 36
          _.bind(self._heartbeatIntervalFired, self),                                                    // 37
          self.heartbeatInterval                                                                         // 38
        );                                                                                               // 39
      },                                                                                                 // 40
      // 41
      _startHeartbeatTimeoutTimer: function () {                                                         // 42
        var self = this;                                                                                 // 43
        self._heartbeatTimeoutHandle = Meteor.setTimeout(                                                // 44
          _.bind(self._heartbeatTimeoutFired, self),                                                     // 45
          self.heartbeatTimeout                                                                          // 46
        );                                                                                               // 47
      },                                                                                                 // 48
      // 49
      _clearHeartbeatIntervalTimer: function () {                                                        // 50
        var self = this;                                                                                 // 51
        if (self._heartbeatIntervalHandle) {                                                             // 52
          Meteor.clearInterval(self._heartbeatIntervalHandle);                                           // 53
          self._heartbeatIntervalHandle = null;                                                          // 54
        }                                                                                                // 55
      },                                                                                                 // 56
      // 57
      _clearHeartbeatTimeoutTimer: function () {                                                         // 58
        var self = this;                                                                                 // 59
        if (self._heartbeatTimeoutHandle) {                                                              // 60
          Meteor.clearTimeout(self._heartbeatTimeoutHandle);                                             // 61
          self._heartbeatTimeoutHandle = null;                                                           // 62
        }                                                                                                // 63
      },                                                                                                 // 64
      // 65
      // The heartbeat interval timer is fired when we should send a ping.                               // 66
      _heartbeatIntervalFired: function () {                                                             // 67
        var self = this;                                                                                 // 68
        // don't send ping if we've seen a packet since we last checked,                                 // 69
        // *or* if we have already sent a ping and are awaiting a timeout.                               // 70
        // That shouldn't happen, but it's possible if                                                   // 71
        // `self.heartbeatInterval` is smaller than                                                      // 72
        // `self.heartbeatTimeout`.                                                                      // 73
        if (!self._seenPacket && !self._heartbeatTimeoutHandle) {                                      // 74
          self._sendPing();                                                                              // 75
          // Set up timeout, in case a pong doesn't arrive in time.                                      // 76
          self._startHeartbeatTimeoutTimer();                                                            // 77
        }                                                                                                // 78
        self._seenPacket = false;                                                                        // 79
      },                                                                                                 // 80
      // 81
      // The heartbeat timeout timer is fired when we sent a ping, but we                                // 82
      // timed out waiting for the pong.                                                                 // 83
      _heartbeatTimeoutFired: function () {                                                              // 84
        var self = this;                                                                                 // 85
        self._heartbeatTimeoutHandle = null;                                                             // 86
        self._onTimeout();                                                                               // 87
      },                                                                                                 // 88
      // 89
      messageReceived: function () {                                                                     // 90
        var self = this;                                                                                 // 91
        // Tell periodic checkin that we have seen a packet, and thus it                                 // 92
        // does not need to send a ping this cycle.                                                      // 93
        self._seenPacket = true;                                                                         // 94
        // If we were waiting for a pong, we got it.                                                     // 95
        if (self._heartbeatTimeoutHandle) {                                                              // 96
          self._clearHeartbeatTimeoutTimer();                                                            // 97
        }                                                                                                // 98
      }                                                                                                  // 99
    });                                                                                                  // 100
    // 101
    ///////////////////////////////////////////////////////////////////////////////////////////////////////

  }).call(this);






  (function () {

    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                   //
    // packages/ddp-common/utils.js                                                                      //
    //                                                                                                   //
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    DDPCommon.SUPPORTED_DDP_VERSIONS = ['1', 'pre2', 'pre1'];                                          // 1
    // 2
    DDPCommon.parseDDP = function (stringMessage) {                                                      // 3
      try {                                                                                              // 4
        var msg = JSON.parse(stringMessage);                                                             // 5
      } catch (e) {                                                                                      // 6
        Meteor._debug("Discarding message with invalid JSON", stringMessage);                            // 7
        return null;                                                                                     // 8
      }                                                                                                  // 9
      // DDP messages must be objects.                                                                   // 10
      if (msg === null || typeof msg !== 'object') {                                                     // 11
        Meteor._debug("Discarding non-object DDP message", stringMessage);                               // 12
        return null;                                                                                     // 13
      }                                                                                                  // 14
      // 15
      // massage msg to get it into "abstract ddp" rather than "wire ddp" format.                        // 16
      // 17
      // switch between "cleared" rep of unsetting fields and "undefined"                                // 18
      // rep of same                                                                                     // 19
      if (_.has(msg, 'cleared')) {                                                                       // 20
        if (!_.has(msg, 'fields'))                                                                       // 21
          msg.fields = {};                                                                               // 22
        _.each(msg.cleared, function (clearKey) {                                                        // 23
          msg.fields[clearKey] = undefined;                                                              // 24
        });                                                                                              // 25
        delete msg.cleared;                                                                              // 26
      }                                                                                                  // 27
      // 28
      _.each(['fields', 'params', 'result'], function (field) {                                          // 29
        if (_.has(msg, field))                                                                           // 30
          msg[field] = EJSON._adjustTypesFromJSONValue(msg[field]);                                      // 31
      });                                                                                                // 32
      // 33
      return msg;                                                                                        // 34
    };                                                                                                   // 35
    // 36
    DDPCommon.stringifyDDP = function (msg) {                                                            // 37
      var copy = EJSON.clone(msg);                                                                       // 38
      // swizzle 'changed' messages from 'fields undefined' rep to 'fields                               // 39
      // and cleared' rep                                                                                // 40
      if (_.has(msg, 'fields')) {                                                                        // 41
        var cleared = [];                                                                                // 42
        _.each(msg.fields, function (value, key) {                                                       // 43
          if (value === undefined) {                                                                     // 44
            cleared.push(key);                                                                           // 45
            delete copy.fields[key];                                                                     // 46
          }                                                                                              // 47
        });                                                                                              // 48
        if (!_.isEmpty(cleared))                                                                         // 49
          copy.cleared = cleared;                                                                        // 50
        if (_.isEmpty(copy.fields))                                                                      // 51
          delete copy.fields;                                                                            // 52
      }                                                                                                  // 53
      // adjust types to basic                                                                           // 54
      _.each(['fields', 'params', 'result'], function (field) {                                          // 55
        if (_.has(copy, field))                                                                          // 56
          copy[field] = EJSON._adjustTypesToJSONValue(copy[field]);                                      // 57
      });                                                                                                // 58
      if (msg.id && typeof msg.id !== 'string') {                                                        // 59
        throw new Error("Message id is not a string");                                                   // 60
      }                                                                                                  // 61
      return JSON.stringify(copy);                                                                       // 62
    };                                                                                                   // 63
    // 64
    // 65
    ///////////////////////////////////////////////////////////////////////////////////////////////////////

  }).call(this);






  (function () {

    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                   //
    // packages/ddp-common/method_invocation.js                                                          //
    //                                                                                                   //
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Instance name is this because it is usually referred to as this inside a                          // 1
    // method definition                                                                                 // 2
    /**                                                                                                  // 3
     * @summary The state for a single invocation of a method, referenced by this                        // 4
     * inside a method definition.                                                                       // 5
     * @param {Object} options                                                                           // 6
     * @instanceName this                                                                                // 7
     */                                                                                                  // 8
    DDPCommon.MethodInvocation = function (options) {                                                    // 9
      var self = this;                                                                                   // 10
      // 11
      // true if we're running not the actual method, but a stub (that is,                               // 12
      // if we're on a client (which may be a browser, or in the future a                                // 13
      // server connecting to another server) and presently running a                                    // 14
      // simulation of a server-side method for latency compensation                                     // 15
      // purposes). not currently true except in a client such as a browser,                             // 16
      // since there's usually no point in running stubs unless you have a                               // 17
      // zero-latency connection to the user.                                                            // 18
      // 19
      /**                                                                                                // 20
       * @summary Access inside a method invocation.  Boolean value, true if this invocation is a stub.  // 21
       * @locus Anywhere                                                                                 // 22
       * @name  isSimulation                                                                             // 23
       * @memberOf DDPCommon.MethodInvocation                                                            // 24
       * @instance                                                                                       // 25
       * @type {Boolean}                                                                                 // 26
       */                                                                                                // 27
      this.isSimulation = options.isSimulation;                                                          // 28
      // 29
      // call this function to allow other method invocations (from the                                  // 30
      // same client) to continue running without waiting for this one to                                // 31
      // complete.                                                                                       // 32
      this._unblock = options.unblock || function () { };                                                 // 33
      this._calledUnblock = false;                                                                       // 34
      // 35
      // current user id                                                                                 // 36
      // 37
      /**                                                                                                // 38
       * @summary The id of the user that made this method call, or `null` if no user was logged in.     // 39
       * @locus Anywhere                                                                                 // 40
       * @name  userId                                                                                   // 41
       * @memberOf DDPCommon.MethodInvocation                                                            // 42
       * @instance                                                                                       // 43
       */                                                                                                // 44
      this.userId = options.userId;                                                                      // 45
      // 46
      // sets current user id in all appropriate server contexts and                                     // 47
      // reruns subscriptions                                                                            // 48
      this._setUserId = options.setUserId || function () { };                                             // 49
      // 50
      // On the server, the connection this method call came in on.                                      // 51
      // 52
      /**                                                                                                // 53
       * @summary Access inside a method invocation. The [connection](#meteor_onconnection) that this method was received on. `null` if the method is not associated with a connection, eg. a server initiated method call. Calls to methods made from a server method which was in turn initiated from the client share the same `connection`.
       * @locus Server                                                                                   // 55
       * @name  connection                                                                               // 56
       * @memberOf DDPCommon.MethodInvocation                                                            // 57
       * @instance                                                                                       // 58
       */                                                                                                // 59
      this.connection = options.connection;                                                              // 60
      // 61
      // The seed for randomStream value generation                                                      // 62
      this.randomSeed = options.randomSeed;                                                              // 63
      // 64
      // This is set by RandomStream.get; and holds the random stream state                              // 65
      this.randomStream = null;                                                                          // 66
    };                                                                                                   // 67
    // 68
    _.extend(DDPCommon.MethodInvocation.prototype, {                                                     // 69
      /**                                                                                                // 70
       * @summary Call inside a method invocation.  Allow subsequent method from this client to begin running in a new fiber.
       * @locus Server                                                                                   // 72
       * @memberOf DDPCommon.MethodInvocation                                                            // 73
       * @instance                                                                                       // 74
       */                                                                                                // 75
      unblock: function () {                                                                             // 76
        var self = this;                                                                                 // 77
        self._calledUnblock = true;                                                                      // 78
        self._unblock();                                                                                 // 79
      },                                                                                                 // 80
      // 81
      /**                                                                                                // 82
       * @summary Set the logged in user.                                                                // 83
       * @locus Server                                                                                   // 84
       * @memberOf DDPCommon.MethodInvocation                                                            // 85
       * @instance                                                                                       // 86
       * @param {String | null} userId The value that should be returned by `userId` on this connection.
       */                                                                                                // 88
      setUserId: function (userId) {                                                                      // 89
        var self = this;                                                                                 // 90
        if (self._calledUnblock)                                                                         // 91
          throw new Error("Can't call setUserId in a method after calling unblock");                     // 92
        self.userId = userId;                                                                            // 93
        self._setUserId(userId);                                                                         // 94
      }                                                                                                  // 95
    });                                                                                                  // 96
    // 97
    // 98
    ///////////////////////////////////////////////////////////////////////////////////////////////////////

  }).call(this);






  (function () {

    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                   //
    // packages/ddp-common/random_stream.js                                                              //
    //                                                                                                   //
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // RandomStream allows for generation of pseudo-random values, from a seed.                          // 1
    //                                                                                                   // 2
    // We use this for consistent 'random' numbers across the client and server.                         // 3
    // We want to generate probably-unique IDs on the client, and we ideally want                        // 4
    // the server to generate the same IDs when it executes the method.                                  // 5
    //                                                                                                   // 6
    // For generated values to be the same, we must seed ourselves the same way,                         // 7
    // and we must keep track of the current state of our pseudo-random generators.                      // 8
    // We call this state the scope. By default, we use the current DDP method                           // 9
    // invocation as our scope.  DDP now allows the client to specify a randomSeed.                      // 10
    // If a randomSeed is provided it will be used to seed our random sequences.                         // 11
    // In this way, client and server method calls will generate the same values.                        // 12
    //                                                                                                   // 13
    // We expose multiple named streams; each stream is independent                                      // 14
    // and is seeded differently (but predictably from the name).                                        // 15
    // By using multiple streams, we support reordering of requests,                                     // 16
    // as long as they occur on different streams.                                                       // 17
    //                                                                                                   // 18
    // @param options {Optional Object}                                                                  // 19
    //   seed: Array or value - Seed value(s) for the generator.                                         // 20
    //                          If an array, will be used as-is                                          // 21
    //                          If a value, will be converted to a single-value array                    // 22
    //                          If omitted, a random array will be used as the seed.                     // 23
    DDPCommon.RandomStream = function (options) {                                                        // 24
      var self = this;                                                                                   // 25
      // 26
      this.seed = [].concat(options.seed || randomToken());                                              // 27
      // 28
      this.sequences = {};                                                                               // 29
    };                                                                                                   // 30
    // 31
    // Returns a random string of sufficient length for a random seed.                                   // 32
    // This is a placeholder function; a similar function is planned                                     // 33
    // for Random itself; when that is added we should remove this function,                             // 34
    // and call Random's randomToken instead.                                                            // 35
    function randomToken() {                                                                             // 36
      return Random.hexString(20);                                                                       // 37
    };                                                                                                   // 38
    // 39
    // Returns the random stream with the specified name, in the specified                               // 40
    // scope. If a scope is passed, then we use that to seed a (not                                      // 41
    // cryptographically secure) PRNG using the fast Alea algorithm.  If                                 // 42
    // scope is null (or otherwise falsey) then we use a generated seed.                                 // 43
    //                                                                                                   // 44
    // However, scope will normally be the current DDP method invocation,                                // 45
    // so we'll use the stream with the specified name, and we should get                                // 46
    // consistent values on the client and server sides of a method call.                                // 47
    DDPCommon.RandomStream.get = function (scope, name) {                                                // 48
      if (!name) {                                                                                       // 49
        name = "default";                                                                                // 50
      }                                                                                                  // 51
      if (!scope) {                                                                                      // 52
        // There was no scope passed in; the sequence won't actually be                                  // 53
        // reproducible. but make it fast (and not cryptographically                                     // 54
        // secure) anyways, so that the behavior is similar to what you'd                                // 55
        // get by passing in a scope.                                                                    // 56
        return Random.insecure;                                                                          // 57
      }                                                                                                  // 58
      var randomStream = scope.randomStream;                                                             // 59
      if (!randomStream) {                                                                               // 60
        scope.randomStream = randomStream = new DDPCommon.RandomStream({                                 // 61
          seed: scope.randomSeed                                                                         // 62
        });                                                                                              // 63
      }                                                                                                  // 64
      return randomStream._sequence(name);                                                               // 65
    };                                                                                                   // 66
    // 67
    // 68
    // Creates a randomSeed for passing to a method call.                                                // 69
    // Note that we take enclosing as an argument,                                                       // 70
    // though we expect it to be DDP._CurrentInvocation.get()                                            // 71
    // However, we often evaluate makeRpcSeed lazily, and thus the relevant                              // 72
    // invocation may not be the one currently in scope.                                                 // 73
    // If enclosing is null, we'll use Random and values won't be repeatable.                            // 74
    DDPCommon.makeRpcSeed = function (enclosing, methodName) {                                           // 75
      var stream = DDPCommon.RandomStream.get(enclosing, '/rpc/' + methodName);                          // 76
      return stream.hexString(20);                                                                       // 77
    };                                                                                                   // 78
    // 79
    _.extend(DDPCommon.RandomStream.prototype, {                                                         // 80
      // Get a random sequence with the specified name, creating it if does not exist.                   // 81
      // New sequences are seeded with the seed concatenated with the name.                              // 82
      // By passing a seed into Random.create, we use the Alea generator.                                // 83
      _sequence: function (name) {                                                                       // 84
        var self = this;                                                                                 // 85
        // 86
        var sequence = self.sequences[name] || null;                                                     // 87
        if (sequence === null) {                                                                         // 88
          var sequenceSeed = self.seed.concat(name);                                                     // 89
          for (var i = 0; i < sequenceSeed.length; i++) {                                                // 90
            if (_.isFunction(sequenceSeed[i])) {                                                         // 91
              sequenceSeed[i] = sequenceSeed[i]();                                                       // 92
            }                                                                                            // 93
          }                                                                                              // 94
          self.sequences[name] = sequence = Random.createWithSeeds.apply(null, sequenceSeed);            // 95
        }                                                                                                // 96
        return sequence;                                                                                 // 97
      }                                                                                                  // 98
    });                                                                                                  // 99
    // 100
    ///////////////////////////////////////////////////////////////////////////////////////////////////////

  }).call(this);


  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols)
      (s in pkg) || (pkg[s] = symbols[s]);
  })(Package['ddp-common'] = {}, {
    DDPCommon: DDPCommon
  });

})();
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var check = Package.check.check;
  var Match = Package.check.Match;
  var Random = Package.random.Random;
  var EJSON = Package.ejson.EJSON;
  var _ = Package.underscore._;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;
  var Retry = Package.retry.Retry;
  var IdMap = Package['id-map'].IdMap;
  var DDPCommon = Package['ddp-common'].DDPCommon;
  var DiffSequence = Package['diff-sequence'].DiffSequence;
  var MongoID = Package['mongo-id'].MongoID;

  /* Package-scope variables */
  var DDP, LivedataTest, MongoIDMap, SockJS, toSockjsUrl, toWebsocketUrl, allConnections;

  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                //
    // packages/ddp-client/namespace.js                                                                               //
    //                                                                                                                //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    /**                                                                                                               // 1
     * @namespace DDP                                                                                                 // 2
     * @summary Namespace for DDP-related methods/classes.                                                            // 3
     */                                                                                                               // 4
    DDP = {};                                                                                                // 5
    LivedataTest = {};                                                                                                // 6
    // 7
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }).call(this);






  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                //
    // packages/ddp-client/id_map.js                                                                                  //
    //                                                                                                                //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    MongoIDMap = function () {                                                                                        // 1
      var self = this;                                                                                                // 2
      IdMap.call(self, MongoID.idStringify, MongoID.idParse);                                                         // 3
    };                                                                                                                // 4
    // 5
    Meteor._inherits(MongoIDMap, IdMap);                                                                              // 6
    // 7
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }).call(this);






  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                //
    // packages/ddp-client/sockjs-0.3.4.js                                                                            //
    //                                                                                                                //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // XXX METEOR changes in <METEOR>                                                                                 // 1
    // 2
    /* SockJS client, version 0.3.4, http://sockjs.org, MIT License                                                   // 3
                                                                                                                      // 4
    Copyright (c) 2011-2012 VMware, Inc.                                                                              // 5
                                                                                                                      // 6
    Permission is hereby granted, free of charge, to any person obtaining a copy                                      // 7
    of this software and associated documentation files (the "Software"), to deal                                     // 8
    in the Software without restriction, including without limitation the rights                                      // 9
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell                                         // 10
    copies of the Software, and to permit persons to whom the Software is                                             // 11
    furnished to do so, subject to the following conditions:                                                          // 12
                                                                                                                      // 13
    The above copyright notice and this permission notice shall be included in                                        // 14
    all copies or substantial portions of the Software.                                                               // 15
                                                                                                                      // 16
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR                                        // 17
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,                                          // 18
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE                                       // 19
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER                                            // 20
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,                                     // 21
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN                                         // 22
    THE SOFTWARE.                                                                                                     // 23
    */                                                                                                                // 24
    // 25
    // <METEOR> Commented out JSO implementation (use json package instead).                                          // 26
    // JSON2 by Douglas Crockford (minified).                                                                         // 27
    // var JSON;JSON||(JSON={}),function(){function str(a,b){var c,d,e,f,g=gap,h,i=b[a];i&&typeof i=="object"&&typeof i.toJSON=="function"&&(i=i.toJSON(a)),typeof rep=="function"&&(i=rep.call(b,a,i));switch(typeof i){case"string":return quote(i);case"number":return isFinite(i)?String(i):"null";case"boolean":case"null":return String(i);case"object":if(!i)return"null";gap+=indent,h=[];if(Object.prototype.toString.apply(i)==="[object Array]"){f=i.length;for(c=0;c<f;c+=1)h[c]=str(c,i)||"null";e=h.length===0?"[]":gap?"[\n"+gap+h.join(",\n"+gap)+"\n"+g+"]":"["+h.join(",")+"]",gap=g;return e}if(rep&&typeof rep=="object"){f=rep.length;for(c=0;c<f;c+=1)typeof rep[c]=="string"&&(d=rep[c],e=str(d,i),e&&h.push(quote(d)+(gap?": ":":")+e))}else for(d in i)Object.prototype.hasOwnProperty.call(i,d)&&(e=str(d,i),e&&h.push(quote(d)+(gap?": ":":")+e));e=h.length===0?"{}":gap?"{\n"+gap+h.join(",\n"+gap)+"\n"+g+"}":"{"+h.join(",")+"}",gap=g;return e}}function quote(a){escapable.lastIndex=0;return escapable.test(a)?'"'+a.replace(escapable,function(a){var b=meta[a];return typeof b=="string"?b:"\\u"+("0000"+a.charCodeAt(0).toString(16)).slice(-4)})+'"':'"'+a+'"'}function f(a){return a<10?"0"+a:a}"use strict",typeof Date.prototype.toJSON!="function"&&(Date.prototype.toJSON=function(a){return isFinite(this.valueOf())?this.getUTCFullYear()+"-"+f(this.getUTCMonth()+1)+"-"+f(this.getUTCDate())+"T"+f(this.getUTCHours())+":"+f(this.getUTCMinutes())+":"+f(this.getUTCSeconds())+"Z":null},String.prototype.toJSON=Number.prototype.toJSON=Boolean.prototype.toJSON=function(a){return this.valueOf()});var cx=/[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,escapable=/[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,gap,indent,meta={"\b":"\\b","\t":"\\t","\n":"\\n","\f":"\\f","\r":"\\r",'"':'\\"',"\\":"\\\\"},rep;typeof JSON.stringify!="function"&&(JSON.stringify=function(a,b,c){var d;gap="",indent="";if(typeof c=="number")for(d=0;d<c;d+=1)indent+=" ";else typeof c=="string"&&(indent=c);rep=b;if(!b||typeof b=="function"||typeof b=="object"&&typeof b.length=="number")return str("",{"":a});throw new Error("JSON.stringify")}),typeof JSON.parse!="function"&&(JSON.parse=function(text,reviver){function walk(a,b){var c,d,e=a[b];if(e&&typeof e=="object")for(c in e)Object.prototype.hasOwnProperty.call(e,c)&&(d=walk(e,c),d!==undefined?e[c]=d:delete e[c]);return reviver.call(a,b,e)}var j;text=String(text),cx.lastIndex=0,cx.test(text)&&(text=text.replace(cx,function(a){return"\\u"+("0000"+a.charCodeAt(0).toString(16)).slice(-4)}));if(/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,"@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,"]").replace(/(?:^|:|,)(?:\s*\[)+/g,""))){j=eval("("+text+")");return typeof reviver=="function"?walk({"":j},""):j}throw new SyntaxError("JSON.parse")})}()
    // </METEOR>                                                                                                      // 29
    // 30
    //     [*] Including lib/index.js                                                                                 // 31
    // Public object                                                                                                  // 32
    SockJS = (function () {                                                                                             // 33
      var _document = document;                                                                           // 34
      var _window = window;                                                                               // 35
      var utils = {};                                                                                     // 36
      // 37
      // 38
      //         [*] Including lib/reventtarget.js                                                                      // 39
      /*                                                                                                                // 40
       * ***** BEGIN LICENSE BLOCK *****                                                                                // 41
       * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 42
       *                                                                                                                // 43
       * For the license see COPYING.                                                                                   // 44
       * ***** END LICENSE BLOCK *****                                                                                  // 45
       */                                                                                                               // 46
      // 47
      /* Simplified implementation of DOM2 EventTarget.                                                                 // 48
       *   http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget                                       // 49
       */                                                                                                               // 50
      var REventTarget = function () { };                                                                                 // 51
      REventTarget.prototype.addEventListener = function (eventType, listener) {                                        // 52
        if (!this._listeners) {                                                                                        // 53
          this._listeners = {};                                                                                    // 54
        }                                                                                                             // 55
        if (!(eventType in this._listeners)) {                                                                         // 56
          this._listeners[eventType] = [];                                                                          // 57
        }                                                                                                             // 58
        var arr = this._listeners[eventType];                                                                         // 59
        if (utils.arrIndexOf(arr, listener) === -1) {                                                                  // 60
          arr.push(listener);                                                                                       // 61
        }                                                                                                             // 62
        return;                                                                                                       // 63
      };                                                                                                                // 64
      // 65
      REventTarget.prototype.removeEventListener = function (eventType, listener) {                                     // 66
        if (!(this._listeners && (eventType in this._listeners))) {                                                    // 67
          return;                                                                                                   // 68
        }                                                                                                             // 69
        var arr = this._listeners[eventType];                                                                         // 70
        var idx = utils.arrIndexOf(arr, listener);                                                                    // 71
        if (idx !== -1) {                                                                                             // 72
          if (arr.length > 1) {                                                                                      // 73
            this._listeners[eventType] = arr.slice(0, idx).concat(arr.slice(idx + 1));                            // 74
          } else {                                                                                                  // 75
            delete this._listeners[eventType];                                                                    // 76
          }                                                                                                         // 77
          return;                                                                                                   // 78
        }                                                                                                             // 79
        return;                                                                                                       // 80
      };                                                                                                                // 81
      // 82
      REventTarget.prototype.dispatchEvent = function (event) {                                                         // 83
        var t = event.type;                                                                                           // 84
        var args = Array.prototype.slice.call(arguments, 0);                                                          // 85
        if (this['on' + t]) {                                                                                           // 86
          this['on' + t].apply(this, args);                                                                           // 87
        }                                                                                                             // 88
        if (this._listeners && t in this._listeners) {                                                                // 89
          for (var i = 0; i < this._listeners[t].length; i++) {                                                        // 90
            this._listeners[t][i].apply(this, args);                                                              // 91
          }                                                                                                         // 92
        }                                                                                                             // 93
      };                                                                                                                // 94
      //         [*] End of lib/reventtarget.js                                                                         // 95
      // 96
      // 97
      //         [*] Including lib/simpleevent.js                                                                       // 98
      /*                                                                                                                // 99
       * ***** BEGIN LICENSE BLOCK *****                                                                                // 100
       * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 101
       *                                                                                                                // 102
       * For the license see COPYING.                                                                                   // 103
       * ***** END LICENSE BLOCK *****                                                                                  // 104
       */                                                                                                               // 105
      // 106
      var SimpleEvent = function (type, obj) {                                                                           // 107
        this.type = type;                                                                                             // 108
        if (typeof obj !== 'undefined') {                                                                             // 109
          for (var k in obj) {                                                                                       // 110
            if (!obj.hasOwnProperty(k)) continue;                                                                 // 111
            this[k] = obj[k];                                                                                     // 112
          }                                                                                                         // 113
        }                                                                                                             // 114
      };                                                                                                                // 115
      // 116
      SimpleEvent.prototype.toString = function () {                                                                     // 117
        var r = [];                                                                                                   // 118
        for (var k in this) {                                                                                          // 119
          if (!this.hasOwnProperty(k)) continue;                                                                    // 120
          var v = this[k];                                                                                          // 121
          if (typeof v === 'function') v = '[function]';                                                            // 122
          r.push(k + '=' + v);                                                                                      // 123
        }                                                                                                             // 124
        return 'SimpleEvent(' + r.join(', ') + ')';                                                                   // 125
      };                                                                                                                // 126
      //         [*] End of lib/simpleevent.js                                                                          // 127
      // 128
      // 129
      //         [*] Including lib/eventemitter.js                                                                      // 130
      /*                                                                                                                // 131
       * ***** BEGIN LICENSE BLOCK *****                                                                                // 132
       * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 133
       *                                                                                                                // 134
       * For the license see COPYING.                                                                                   // 135
       * ***** END LICENSE BLOCK *****                                                                                  // 136
       */                                                                                                               // 137
      // 138
      var EventEmitter = function (events) {                                                                             // 139
        var that = this;                                                                                              // 140
        that._events = events || [];                                                                                  // 141
        that._listeners = {};                                                                                         // 142
      };                                                                                                                // 143
      EventEmitter.prototype.emit = function (type) {                                                                    // 144
        var that = this;                                                                                              // 145
        that._verifyType(type);                                                                                       // 146
        if (that._nuked) return;                                                                                      // 147
        // 148
        var args = Array.prototype.slice.call(arguments, 1);                                                          // 149
        if (that['on' + type]) {                                                                                        // 150
          that['on' + type].apply(that, args);                                                                        // 151
        }                                                                                                             // 152
        if (type in that._listeners) {                                                                                // 153
          for (var i = 0; i < that._listeners[type].length; i++) {                                                   // 154
            that._listeners[type][i].apply(that, args);                                                           // 155
          }                                                                                                         // 156
        }                                                                                                             // 157
      };                                                                                                                // 158
      // 159
      EventEmitter.prototype.on = function (type, callback) {                                                            // 160
        var that = this;                                                                                              // 161
        that._verifyType(type);                                                                                       // 162
        if (that._nuked) return;                                                                                      // 163
        // 164
        if (!(type in that._listeners)) {                                                                             // 165
          that._listeners[type] = [];                                                                               // 166
        }                                                                                                             // 167
        that._listeners[type].push(callback);                                                                         // 168
      };                                                                                                                // 169
      // 170
      EventEmitter.prototype._verifyType = function (type) {                                                             // 171
        var that = this;                                                                                              // 172
        if (utils.arrIndexOf(that._events, type) === -1) {                                                            // 173
          utils.log('Event ' + JSON.stringify(type) +                                                               // 174
            ' not listed ' + JSON.stringify(that._events) +                                                 // 175
            ' in ' + that);                                                                                 // 176
        }                                                                                                             // 177
      };                                                                                                                // 178
      // 179
      EventEmitter.prototype.nuke = function () {                                                                        // 180
        var that = this;                                                                                              // 181
        that._nuked = true;                                                                                           // 182
        for (var i = 0; i < that._events.length; i++) {                                                                    // 183
          delete that[that._events[i]];                                                                             // 184
        }                                                                                                             // 185
        that._listeners = {};                                                                                         // 186
      };                                                                                                                // 187
      //         [*] End of lib/eventemitter.js                                                                         // 188
      // 189
      // 190
      //         [*] Including lib/utils.js                                                                             // 191
      /*                                                                                                                // 192
       * ***** BEGIN LICENSE BLOCK *****                                                                                // 193
       * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 194
       *                                                                                                                // 195
       * For the license see COPYING.                                                                                   // 196
       * ***** END LICENSE BLOCK *****                                                                                  // 197
       */                                                                                                               // 198
      // 199
      var random_string_chars = 'abcdefghijklmnopqrstuvwxyz0123456789_';                                                // 200
      utils.random_string = function (length, max) {                                                                     // 201
        max = max || random_string_chars.length;                                                                      // 202
        var i, ret = [];                                                                                              // 203
        for (i = 0; i < length; i++) {                                                                                   // 204
          ret.push(random_string_chars.substr(Math.floor(Math.random() * max), 1));                                // 205
        }                                                                                                             // 206
        return ret.join('');                                                                                          // 207
      };                                                                                                                // 208
      utils.random_number = function (max) {                                                                             // 209
        return Math.floor(Math.random() * max);                                                                       // 210
      };                                                                                                                // 211
      utils.random_number_string = function (max) {                                                                      // 212
        var t = ('' + (max - 1)).length;                                                                                // 213
        var p = Array(t + 1).join('0');                                                                                 // 214
        return (p + utils.random_number(max)).slice(-t);                                                              // 215
      };                                                                                                                // 216
      // 217
      // Assuming that url looks like: http://asdasd:111/asd                                                            // 218
      utils.getOrigin = function (url) {                                                                                 // 219
        url += '/';                                                                                                   // 220
        var parts = url.split('/').slice(0, 3);                                                                       // 221
        return parts.join('/');                                                                                       // 222
      };                                                                                                                // 223
      // 224
      utils.isSameOriginUrl = function (url_a, url_b) {                                                                  // 225
        // location.origin would do, but it's not always available.                                                   // 226
        if (!url_b) url_b = _window.location.href;                                                                    // 227
        // 228
        return (url_a.split('/').slice(0, 3).join('/')                                                                 // 229
          ===                                                                                               // 230
          url_b.split('/').slice(0, 3).join('/'));                                                               // 231
      };                                                                                                                // 232
      // 233
      // <METEOR>                                                                                                       // 234
      // https://github.com/sockjs/sockjs-client/issues/79                                                              // 235
      utils.isSameOriginScheme = function (url_a, url_b) {                                                               // 236
        if (!url_b) url_b = _window.location.href;                                                                    // 237
        // 238
        return (url_a.split(':')[0]                                                                                   // 239
          ===                                                                                               // 240
          url_b.split(':')[0]);                                                                                 // 241
      };                                                                                                                // 242
      // </METEOR>                                                                                                      // 243
      // 244
      // 245
      utils.getParentDomain = function (url) {                                                                           // 246
        // ipv4 ip address                                                                                            // 247
        if (/^[0-9.]*$/.test(url)) return url;                                                                        // 248
        // ipv6 ip address                                                                                            // 249
        if (/^\[/.test(url)) return url;                                                                              // 250
        // no dots                                                                                                    // 251
        if (!(/[.]/.test(url))) return url;                                                                           // 252
        // 253
        var parts = url.split('.').slice(1);                                                                          // 254
        return parts.join('.');                                                                                       // 255
      };                                                                                                                // 256
      // 257
      utils.objectExtend = function (dst, src) {                                                                         // 258
        for (var k in src) {                                                                                           // 259
          if (src.hasOwnProperty(k)) {                                                                              // 260
            dst[k] = src[k];                                                                                      // 261
          }                                                                                                         // 262
        }                                                                                                             // 263
        return dst;                                                                                                   // 264
      };                                                                                                                // 265
      // 266
      var WPrefix = '_jp';                                                                                              // 267
      // 268
      utils.polluteGlobalNamespace = function () {                                                                       // 269
        if (!(WPrefix in _window)) {                                                                                  // 270
          _window[WPrefix] = {};                                                                                    // 271
        }                                                                                                             // 272
      };                                                                                                                // 273
      // 274
      utils.closeFrame = function (code, reason) {                                                                      // 275
        return 'c' + JSON.stringify([code, reason]);                                                                    // 276
      };                                                                                                                // 277
      // 278
      utils.userSetCode = function (code) {                                                                             // 279
        return code === 1000 || (code >= 3000 && code <= 4999);                                                       // 280
      };                                                                                                                // 281
      // 282
      // See: http://www.erg.abdn.ac.uk/~gerrit/dccp/notes/ccid2/rto_estimator/                                         // 283
      // and RFC 2988.                                                                                                  // 284
      utils.countRTO = function (rtt) {                                                                                 // 285
        var rto;                                                                                                      // 286
        if (rtt > 100) {                                                                                              // 287
          rto = 3 * rtt; // rto > 300msec                                                                           // 288
        } else {                                                                                                      // 289
          rto = rtt + 200; // 200msec < rto <= 300msec                                                              // 290
        }                                                                                                             // 291
        return rto;                                                                                                   // 292
      }                                                                                                                 // 293
      // 294
      utils.log = function () {                                                                                          // 295
        if (_window.console && console.log && console.log.apply) {                                                    // 296
          console.log.apply(console, arguments);                                                                    // 297
        }                                                                                                             // 298
      };                                                                                                                // 299
      // 300
      utils.bind = function (fun, that) {                                                                                // 301
        if (fun.bind) {                                                                                               // 302
          return fun.bind(that);                                                                                    // 303
        } else {                                                                                                      // 304
          return function () {                                                                                       // 305
            return fun.apply(that, arguments);                                                                    // 306
          };                                                                                                        // 307
        }                                                                                                             // 308
      };                                                                                                                // 309
      // 310
      utils.flatUrl = function (url) {                                                                                   // 311
        return url.indexOf('?') === -1 && url.indexOf('#') === -1;                                                    // 312
      };                                                                                                                // 313
      // 314
      // `relativeTo` is an optional absolute URL. If provided, `url` will be                                           // 315
      // interpreted relative to `relativeTo`. Defaults to `document.location`.                                         // 316
      // <METEOR>                                                                                                       // 317
      utils.amendUrl = function (url, relativeTo) {                                                                      // 318
        var baseUrl;                                                                                                  // 319
        if (relativeTo === undefined) {                                                                               // 320
          baseUrl = _document.location;                                                                               // 321
        } else {                                                                                                      // 322
          var protocolMatch = /^([a-z0-9.+-]+:)/i.exec(relativeTo);                                                   // 323
          if (protocolMatch) {                                                                                        // 324
            var protocol = protocolMatch[0].toLowerCase();                                                            // 325
            var rest = relativeTo.substring(protocol.length);                                                         // 326
            var hostMatch = /[a-z0-9\.-]+(:[0-9]+)?/.exec(rest);                                                      // 327
            if (hostMatch)                                                                                            // 328
              var host = hostMatch[0];                                                                                // 329
          }                                                                                                           // 330
          if (!protocol || !host)                                                                                   // 331
            throw new Error("relativeTo must be an absolute url");                                                    // 332
          baseUrl = {                                                                                                 // 333
            protocol: protocol,                                                                                       // 334
            host: host                                                                                                // 335
          };                                                                                                          // 336
        }                                                                                                             // 337
        if (!url) {                                                                                                   // 338
          throw new Error('Wrong url for SockJS');                                                                  // 339
        }                                                                                                             // 340
        if (!utils.flatUrl(url)) {                                                                                    // 341
          throw new Error('Only basic urls are supported in SockJS');                                               // 342
        }                                                                                                             // 343
        // 344
        //  '//abc' --> 'http://abc'                                                                                  // 345
        if (url.indexOf('//') === 0) {                                                                                // 346
          url = baseUrl.protocol + url;                                                                             // 347
        }                                                                                                             // 348
        // '/abc' --> 'http://localhost:1234/abc'                                                                     // 349
        if (url.indexOf('/') === 0) {                                                                                 // 350
          url = baseUrl.protocol + '//' + baseUrl.host + url;                                                       // 351
        }                                                                                                             // 352
        // </METEOR>                                                                                                  // 353
        // strip trailing slashes                                                                                     // 354
        url = url.replace(/[/]+$/, '');                                                                                // 355
        // 356
        // We have a full url here, with proto and host. For some browsers                                            // 357
        // http://localhost:80/ is not in the same origin as http://localhost/                                        // 358
        // Remove explicit :80 or :443 in such cases. See #74                                                            // 359
        var parts = url.split("/");                                                                                   // 360
        if ((parts[0] === "http:" && /:80$/.test(parts[2])) ||                                                        // 361
          (parts[0] === "https:" && /:443$/.test(parts[2]))) {                                                         // 362
          parts[2] = parts[2].replace(/:(80|443)$/, "");                                                                  // 363
        }                                                                                                                // 364
        url = parts.join("/");                                                                                        // 365
        return url;                                                                                                   // 366
      };                                                                                                                // 367
      // 368
      // IE doesn't support [].indexOf.                                                                                 // 369
      utils.arrIndexOf = function (arr, obj) {                                                                            // 370
        for (var i = 0; i < arr.length; i++) {                                                                            // 371
          if (arr[i] === obj) {                                                                                       // 372
            return i;                                                                                             // 373
          }                                                                                                         // 374
        }                                                                                                             // 375
        return -1;                                                                                                    // 376
      };                                                                                                                // 377
      // 378
      utils.arrSkip = function (arr, obj) {                                                                              // 379
        var idx = utils.arrIndexOf(arr, obj);                                                                         // 380
        if (idx === -1) {                                                                                             // 381
          return arr.slice();                                                                                       // 382
        } else {                                                                                                      // 383
          var dst = arr.slice(0, idx);                                                                              // 384
          return dst.concat(arr.slice(idx + 1));                                                                      // 385
        }                                                                                                             // 386
      };                                                                                                                // 387
      // 388
      // Via: https://gist.github.com/1133122/2121c601c5549155483f50be3da5305e83b8c5df                                  // 389
      utils.isArray = Array.isArray || function (value) {                                                                // 390
        return {}.toString.call(value).indexOf('Array') >= 0                                                          // 391
      };                                                                                                                // 392
      // 393
      utils.delay = function (t, fun) {                                                                                  // 394
        if (typeof t === 'function') {                                                                                 // 395
          fun = t;                                                                                                  // 396
          t = 0;                                                                                                    // 397
        }                                                                                                             // 398
        return setTimeout(fun, t);                                                                                    // 399
      };                                                                                                                // 400
      // 401
      // 402
      // Chars worth escaping, as defined by Douglas Crockford:                                                         // 403
      //   https://github.com/douglascrockford/JSON-js/blob/47a9882cddeb1e8529e07af9736218075372b8ac/json2.js#L196      // 404
      var json_escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        json_lookup = {                                                                                               // 406
          "\u0000": "\\u0000", "\u0001": "\\u0001", "\u0002": "\\u0002", "\u0003": "\\u0003",                                      // 407
          "\u0004": "\\u0004", "\u0005": "\\u0005", "\u0006": "\\u0006", "\u0007": "\\u0007",                                      // 408
          "\b": "\\b", "\t": "\\t", "\n": "\\n", "\u000b": "\\u000b", "\f": "\\f", "\r": "\\r",                                        // 409
          "\u000e": "\\u000e", "\u000f": "\\u000f", "\u0010": "\\u0010", "\u0011": "\\u0011",                                      // 410
          "\u0012": "\\u0012", "\u0013": "\\u0013", "\u0014": "\\u0014", "\u0015": "\\u0015",                                      // 411
          "\u0016": "\\u0016", "\u0017": "\\u0017", "\u0018": "\\u0018", "\u0019": "\\u0019",                                      // 412
          "\u001a": "\\u001a", "\u001b": "\\u001b", "\u001c": "\\u001c", "\u001d": "\\u001d",                                      // 413
          "\u001e": "\\u001e", "\u001f": "\\u001f", "\"": "\\\"", "\\": "\\\\",                                                    // 414
          "\u007f": "\\u007f", "\u0080": "\\u0080", "\u0081": "\\u0081", "\u0082": "\\u0082",                                      // 415
          "\u0083": "\\u0083", "\u0084": "\\u0084", "\u0085": "\\u0085", "\u0086": "\\u0086",                                      // 416
          "\u0087": "\\u0087", "\u0088": "\\u0088", "\u0089": "\\u0089", "\u008a": "\\u008a",                                      // 417
          "\u008b": "\\u008b", "\u008c": "\\u008c", "\u008d": "\\u008d", "\u008e": "\\u008e",                                      // 418
          "\u008f": "\\u008f", "\u0090": "\\u0090", "\u0091": "\\u0091", "\u0092": "\\u0092",                                      // 419
          "\u0093": "\\u0093", "\u0094": "\\u0094", "\u0095": "\\u0095", "\u0096": "\\u0096",                                      // 420
          "\u0097": "\\u0097", "\u0098": "\\u0098", "\u0099": "\\u0099", "\u009a": "\\u009a",                                      // 421
          "\u009b": "\\u009b", "\u009c": "\\u009c", "\u009d": "\\u009d", "\u009e": "\\u009e",                                      // 422
          "\u009f": "\\u009f", "\u00ad": "\\u00ad", "\u0600": "\\u0600", "\u0601": "\\u0601",                                      // 423
          "\u0602": "\\u0602", "\u0603": "\\u0603", "\u0604": "\\u0604", "\u070f": "\\u070f",                                      // 424
          "\u17b4": "\\u17b4", "\u17b5": "\\u17b5", "\u200c": "\\u200c", "\u200d": "\\u200d",                                      // 425
          "\u200e": "\\u200e", "\u200f": "\\u200f", "\u2028": "\\u2028", "\u2029": "\\u2029",                                      // 426
          "\u202a": "\\u202a", "\u202b": "\\u202b", "\u202c": "\\u202c", "\u202d": "\\u202d",                                      // 427
          "\u202e": "\\u202e", "\u202f": "\\u202f", "\u2060": "\\u2060", "\u2061": "\\u2061",                                      // 428
          "\u2062": "\\u2062", "\u2063": "\\u2063", "\u2064": "\\u2064", "\u2065": "\\u2065",                                      // 429
          "\u2066": "\\u2066", "\u2067": "\\u2067", "\u2068": "\\u2068", "\u2069": "\\u2069",                                      // 430
          "\u206a": "\\u206a", "\u206b": "\\u206b", "\u206c": "\\u206c", "\u206d": "\\u206d",                                      // 431
          "\u206e": "\\u206e", "\u206f": "\\u206f", "\ufeff": "\\ufeff", "\ufff0": "\\ufff0",                                      // 432
          "\ufff1": "\\ufff1", "\ufff2": "\\ufff2", "\ufff3": "\\ufff3", "\ufff4": "\\ufff4",                                      // 433
          "\ufff5": "\\ufff5", "\ufff6": "\\ufff6", "\ufff7": "\\ufff7", "\ufff8": "\\ufff8",                                      // 434
          "\ufff9": "\\ufff9", "\ufffa": "\\ufffa", "\ufffb": "\\ufffb", "\ufffc": "\\ufffc",                                      // 435
          "\ufffd": "\\ufffd", "\ufffe": "\\ufffe", "\uffff": "\\uffff"
        };                                                        // 436
      // 437
      // Some extra characters that Chrome gets wrong, and substitutes with                                             // 438
      // something else on the wire.                                                                                    // 439
      var extra_escapable = /[\x00-\x1f\ud800-\udfff\ufffe\uffff\u0300-\u0333\u033d-\u0346\u034a-\u034c\u0350-\u0352\u0357-\u0358\u035c-\u0362\u0374\u037e\u0387\u0591-\u05af\u05c4\u0610-\u0617\u0653-\u0654\u0657-\u065b\u065d-\u065e\u06df-\u06e2\u06eb-\u06ec\u0730\u0732-\u0733\u0735-\u0736\u073a\u073d\u073f-\u0741\u0743\u0745\u0747\u07eb-\u07f1\u0951\u0958-\u095f\u09dc-\u09dd\u09df\u0a33\u0a36\u0a59-\u0a5b\u0a5e\u0b5c-\u0b5d\u0e38-\u0e39\u0f43\u0f4d\u0f52\u0f57\u0f5c\u0f69\u0f72-\u0f76\u0f78\u0f80-\u0f83\u0f93\u0f9d\u0fa2\u0fa7\u0fac\u0fb9\u1939-\u193a\u1a17\u1b6b\u1cda-\u1cdb\u1dc0-\u1dcf\u1dfc\u1dfe\u1f71\u1f73\u1f75\u1f77\u1f79\u1f7b\u1f7d\u1fbb\u1fbe\u1fc9\u1fcb\u1fd3\u1fdb\u1fe3\u1feb\u1fee-\u1fef\u1ff9\u1ffb\u1ffd\u2000-\u2001\u20d0-\u20d1\u20d4-\u20d7\u20e7-\u20e9\u2126\u212a-\u212b\u2329-\u232a\u2adc\u302b-\u302c\uaab2-\uaab3\uf900-\ufa0d\ufa10\ufa12\ufa15-\ufa1e\ufa20\ufa22\ufa25-\ufa26\ufa2a-\ufa2d\ufa30-\ufa6d\ufa70-\ufad9\ufb1d\ufb1f\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufb4e\ufff0-\uffff]/g,
        extra_lookup;                                                                                                 // 441
      // 442
      // JSON Quote string. Use native implementation when possible.                                                    // 443
      var JSONQuote = (JSON && JSON.stringify) || function (string) {                                                    // 444
        json_escapable.lastIndex = 0;                                                                                 // 445
        if (json_escapable.test(string)) {                                                                            // 446
          string = string.replace(json_escapable, function (a) {                                                     // 447
            return json_lookup[a];                                                                                // 448
          });                                                                                                       // 449
        }                                                                                                             // 450
        return '"' + string + '"';                                                                                    // 451
      };                                                                                                                // 452
      // 453
      // This may be quite slow, so let's delay until user actually uses bad                                            // 454
      // characters.                                                                                                    // 455
      var unroll_lookup = function (escapable) {                                                                         // 456
        var i;                                                                                                        // 457
        var unrolled = {}                                                                                             // 458
        var c = []                                                                                                    // 459
        for (i = 0; i < 65536; i++) {                                                                                      // 460
          c.push(String.fromCharCode(i));                                                                         // 461
        }                                                                                                             // 462
        escapable.lastIndex = 0;                                                                                      // 463
        c.join('').replace(escapable, function (a) {                                                                  // 464
          unrolled[a] = '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);                                // 465
          return '';                                                                                                // 466
        });                                                                                                           // 467
        escapable.lastIndex = 0;                                                                                      // 468
        return unrolled;                                                                                              // 469
      };                                                                                                                // 470
      // 471
      // Quote string, also taking care of unicode characters that browsers                                             // 472
      // often break. Especially, take care of unicode surrogates:                                                      // 473
      //    http://en.wikipedia.org/wiki/Mapping_of_Unicode_characters#Surrogates                                       // 474
      utils.quote = function (string) {                                                                                  // 475
        var quoted = JSONQuote(string);                                                                               // 476
        // 477
        // In most cases this should be very fast and good enough.                                                    // 478
        extra_escapable.lastIndex = 0;                                                                                // 479
        if (!extra_escapable.test(quoted)) {                                                                           // 480
          return quoted;                                                                                            // 481
        }                                                                                                             // 482
        // 483
        if (!extra_lookup) extra_lookup = unroll_lookup(extra_escapable);                                              // 484
        // 485
        return quoted.replace(extra_escapable, function (a) {                                                          // 486
          return extra_lookup[a];                                                                                   // 487
        });                                                                                                           // 488
      }                                                                                                                 // 489
      // 490
      var _all_protocols = ['websocket',                                                                                // 491
        'xdr-streaming',                                                                            // 492
        'xhr-streaming',                                                                            // 493
        'iframe-eventsource',                                                                       // 494
        'iframe-htmlfile',                                                                          // 495
        'xdr-polling',                                                                              // 496
        'xhr-polling',                                                                              // 497
        'iframe-xhr-polling',                                                                       // 498
        'jsonp-polling'];                                                                           // 499
      // 500
      utils.probeProtocols = function () {                                                                               // 501
        var probed = {};                                                                                              // 502
        for (var i = 0; i < _all_protocols.length; i++) {                                                                  // 503
          var protocol = _all_protocols[i];                                                                         // 504
          // User can have a typo in protocol name.                                                                 // 505
          probed[protocol] = SockJS[protocol] &&                                                                    // 506
            SockJS[protocol].enabled();                                                            // 507
        }                                                                                                             // 508
        return probed;                                                                                                // 509
      };                                                                                                                // 510
      // 511
      utils.detectProtocols = function (probed, protocols_whitelist, info) {                                             // 512
        var pe = {},                                                                                                  // 513
          protocols = [];                                                                                           // 514
        if (!protocols_whitelist) protocols_whitelist = _all_protocols;                                               // 515
        for (var i = 0; i < protocols_whitelist.length; i++) {                                                             // 516
          var protocol = protocols_whitelist[i];                                                                    // 517
          pe[protocol] = probed[protocol];                                                                          // 518
        }                                                                                                             // 519
        var maybe_push = function (protos) {                                                                           // 520
          var proto = protos.shift();                                                                               // 521
          if (pe[proto]) {                                                                                          // 522
            protocols.push(proto);                                                                                // 523
          } else {                                                                                                  // 524
            if (protos.length > 0) {                                                                              // 525
              maybe_push(protos);                                                                               // 526
            }                                                                                                     // 527
          }                                                                                                         // 528
        }                                                                                                             // 529
        // 530
        // 1. Websocket                                                                                               // 531
        if (info.websocket !== false) {                                                                               // 532
          maybe_push(['websocket']);                                                                                // 533
        }                                                                                                             // 534
        // 535
        // 2. Streaming                                                                                               // 536
        if (pe['xhr-streaming'] && !info.null_origin) {                                                               // 537
          protocols.push('xhr-streaming');                                                                          // 538
        } else {                                                                                                      // 539
          if (pe['xdr-streaming'] && !info.cookie_needed && !info.null_origin) {                                    // 540
            protocols.push('xdr-streaming');                                                                      // 541
          } else {                                                                                                  // 542
            maybe_push(['iframe-eventsource',                                                                     // 543
              'iframe-htmlfile']);                                                                      // 544
          }                                                                                                         // 545
        }                                                                                                             // 546
        // 547
        // 3. Polling                                                                                                 // 548
        if (pe['xhr-polling'] && !info.null_origin) {                                                                 // 549
          protocols.push('xhr-polling');                                                                            // 550
        } else {                                                                                                      // 551
          if (pe['xdr-polling'] && !info.cookie_needed && !info.null_origin) {                                      // 552
            protocols.push('xdr-polling');                                                                        // 553
          } else {                                                                                                  // 554
            maybe_push(['iframe-xhr-polling',                                                                     // 555
              'jsonp-polling']);                                                                        // 556
          }                                                                                                         // 557
        }                                                                                                             // 558
        return protocols;                                                                                             // 559
      }                                                                                                                 // 560
      //         [*] End of lib/utils.js                                                                                // 561
      // 562
      // 563
      //         [*] Including lib/dom.js                                                                               // 564
      /*                                                                                                                // 565
       * ***** BEGIN LICENSE BLOCK *****                                                                                // 566
       * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 567
       *                                                                                                                // 568
       * For the license see COPYING.                                                                                   // 569
       * ***** END LICENSE BLOCK *****                                                                                  // 570
       */                                                                                                               // 571
      // 572
      // May be used by htmlfile jsonp and transports.                                                                  // 573
      var MPrefix = '_sockjs_global';                                                                                   // 574
      utils.createHook = function () {                                                                                   // 575
        var window_id = 'a' + utils.random_string(8);                                                                 // 576
        if (!(MPrefix in _window)) {                                                                                  // 577
          var map = {};                                                                                             // 578
          _window[MPrefix] = function (window_id) {                                                                  // 579
            if (!(window_id in map)) {                                                                            // 580
              map[window_id] = {                                                                                // 581
                id: window_id,                                                                                // 582
                del: function () { delete map[window_id]; }                                                      // 583
              };                                                                                                // 584
            }                                                                                                     // 585
            return map[window_id];                                                                                // 586
          }                                                                                                         // 587
        }                                                                                                             // 588
        return _window[MPrefix](window_id);                                                                           // 589
      };                                                                                                                // 590
      // 591
      // 592
      // 593
      utils.attachMessage = function (listener) {                                                                        // 594
        utils.attachEvent('message', listener);                                                                       // 595
      };                                                                                                                // 596
      utils.attachEvent = function (event, listener) {                                                                   // 597
        if (typeof _window.addEventListener !== 'undefined') {                                                        // 598
          _window.addEventListener(event, listener, false);                                                         // 599
        } else {                                                                                                      // 600
          // IE quirks.                                                                                             // 601
          // According to: http://stevesouders.com/misc/test-postmessage.php                                        // 602
          // the message gets delivered only to 'document', not 'window'.                                           // 603
          _document.attachEvent("on" + event, listener);                                                            // 604
          // I get 'window' for ie8.                                                                                // 605
          _window.attachEvent("on" + event, listener);                                                              // 606
        }                                                                                                             // 607
      };                                                                                                                // 608
      // 609
      utils.detachMessage = function (listener) {                                                                        // 610
        utils.detachEvent('message', listener);                                                                       // 611
      };                                                                                                                // 612
      utils.detachEvent = function (event, listener) {                                                                   // 613
        if (typeof _window.addEventListener !== 'undefined') {                                                        // 614
          _window.removeEventListener(event, listener, false);                                                      // 615
        } else {                                                                                                      // 616
          _document.detachEvent("on" + event, listener);                                                            // 617
          _window.detachEvent("on" + event, listener);                                                              // 618
        }                                                                                                             // 619
      };                                                                                                                // 620
      // 621
      // 622
      var on_unload = {};                                                                                               // 623
      // Things registered after beforeunload are to be called immediately.                                             // 624
      var after_unload = false;                                                                                         // 625
      // 626
      var trigger_unload_callbacks = function () {                                                                       // 627
        for (var ref in on_unload) {                                                                                   // 628
          on_unload[ref]();                                                                                         // 629
          delete on_unload[ref];                                                                                    // 630
        };                                                                                                            // 631
      };                                                                                                                // 632
      // 633
      var unload_triggered = function () {                                                                               // 634
        if (after_unload) return;                                                                                      // 635
        after_unload = true;                                                                                          // 636
        trigger_unload_callbacks();                                                                                   // 637
      };                                                                                                                // 638
      // 639
      // 'unload' alone is not reliable in opera within an iframe, but we                                               // 640
      // can't use `beforeunload` as IE fires it on javascript: links.                                                  // 641
      utils.attachEvent('unload', unload_triggered);                                                                    // 642
      // 643
      utils.unload_add = function (listener) {                                                                           // 644
        var ref = utils.random_string(8);                                                                             // 645
        on_unload[ref] = listener;                                                                                    // 646
        if (after_unload) {                                                                                           // 647
          utils.delay(trigger_unload_callbacks);                                                                    // 648
        }                                                                                                             // 649
        return ref;                                                                                                   // 650
      };                                                                                                                // 651
      utils.unload_del = function (ref) {                                                                                // 652
        if (ref in on_unload)                                                                                         // 653
          delete on_unload[ref];                                                                                    // 654
      };                                                                                                                // 655
      // 656
      // 657
      utils.createIframe = function (iframe_url, error_callback) {                                                      // 658
        var iframe = _document.createElement('iframe');                                                               // 659
        var tref, unload_ref;                                                                                         // 660
        var unattach = function () {                                                                                   // 661
          clearTimeout(tref);                                                                                       // 662
          // Explorer had problems with that.                                                                       // 663
          try { iframe.onload = null; } catch (x) { }                                                                  // 664
          iframe.onerror = null;                                                                                    // 665
        };                                                                                                            // 666
        var cleanup = function () {                                                                                    // 667
          if (iframe) {                                                                                             // 668
            unattach();                                                                                           // 669
            // This timeout makes chrome fire onbeforeunload event                                                // 670
            // within iframe. Without the timeout it goes straight to                                             // 671
            // onunload.                                                                                          // 672
            setTimeout(function () {                                                                               // 673
              if (iframe) {                                                                                      // 674
                iframe.parentNode.removeChild(iframe);                                                        // 675
              }                                                                                                 // 676
              iframe = null;                                                                                    // 677
            }, 0);                                                                                                // 678
            utils.unload_del(unload_ref);                                                                         // 679
          }                                                                                                         // 680
        };                                                                                                            // 681
        var onerror = function (r) {                                                                                   // 682
          if (iframe) {                                                                                             // 683
            cleanup();                                                                                            // 684
            error_callback(r);                                                                                    // 685
          }                                                                                                         // 686
        };                                                                                                            // 687
        var post = function (msg, origin) {                                                                            // 688
          try {                                                                                                     // 689
            // When the iframe is not loaded, IE raises an exception                                              // 690
            // on 'contentWindow'.                                                                                // 691
            if (iframe && iframe.contentWindow) {                                                                 // 692
              iframe.contentWindow.postMessage(msg, origin);                                                    // 693
            }                                                                                                     // 694
          } catch (x) { };                                                                                           // 695
        };                                                                                                            // 696
        // 697
        iframe.src = iframe_url;                                                                                      // 698
        iframe.style.display = 'none';                                                                                // 699
        iframe.style.position = 'absolute';                                                                           // 700
        iframe.onerror = function () { onerror('onerror'); };                                                             // 701
        iframe.onload = function () {                                                                                  // 702
          // `onload` is triggered before scripts on the iframe are                                                 // 703
          // executed. Give it few seconds to actually load stuff.                                                  // 704
          clearTimeout(tref);                                                                                       // 705
          tref = setTimeout(function () { onerror('onload timeout'); }, 2000);                                          // 706
        };                                                                                                            // 707
        _document.body.appendChild(iframe);                                                                           // 708
        tref = setTimeout(function () { onerror('timeout'); }, 15000);                                                    // 709
        unload_ref = utils.unload_add(cleanup);                                                                       // 710
        return {                                                                                                      // 711
          post: post,                                                                                               // 712
          cleanup: cleanup,                                                                                         // 713
          loaded: unattach                                                                                          // 714
        };                                                                                                            // 715
      };                                                                                                                // 716
      // 717
      utils.createHtmlfile = function (iframe_url, error_callback) {                                                    // 718
        var doc = new ActiveXObject('htmlfile');                                                                      // 719
        var tref, unload_ref;                                                                                         // 720
        var iframe;                                                                                                   // 721
        var unattach = function () {                                                                                   // 722
          clearTimeout(tref);                                                                                       // 723
        };                                                                                                            // 724
        var cleanup = function () {                                                                                    // 725
          if (doc) {                                                                                                // 726
            unattach();                                                                                           // 727
            utils.unload_del(unload_ref);                                                                         // 728
            iframe.parentNode.removeChild(iframe);                                                                // 729
            iframe = doc = null;                                                                                  // 730
            CollectGarbage();                                                                                     // 731
          }                                                                                                         // 732
        };                                                                                                            // 733
        var onerror = function (r) {                                                                                  // 734
          if (doc) {                                                                                                // 735
            cleanup();                                                                                            // 736
            error_callback(r);                                                                                    // 737
          }                                                                                                         // 738
        };                                                                                                            // 739
        var post = function (msg, origin) {                                                                            // 740
          try {                                                                                                     // 741
            // When the iframe is not loaded, IE raises an exception                                              // 742
            // on 'contentWindow'.                                                                                // 743
            if (iframe && iframe.contentWindow) {                                                                 // 744
              iframe.contentWindow.postMessage(msg, origin);                                                    // 745
            }                                                                                                     // 746
          } catch (x) { };                                                                                           // 747
        };                                                                                                            // 748
        // 749
        doc.open();                                                                                                   // 750
        doc.write('<html><s' + 'cript>' +                                                                             // 751
          'document.domain="' + document.domain + '";' +                                                      // 752
          '</s' + 'cript></html>');                                                                           // 753
        doc.close();                                                                                                  // 754
        doc.parentWindow[WPrefix] = _window[WPrefix];                                                                 // 755
        var c = doc.createElement('div');                                                                             // 756
        doc.body.appendChild(c);                                                                                      // 757
        iframe = doc.createElement('iframe');                                                                         // 758
        c.appendChild(iframe);                                                                                        // 759
        iframe.src = iframe_url;                                                                                      // 760
        tref = setTimeout(function () { onerror('timeout'); }, 15000);                                                    // 761
        unload_ref = utils.unload_add(cleanup);                                                                       // 762
        return {                                                                                                      // 763
          post: post,                                                                                               // 764
          cleanup: cleanup,                                                                                         // 765
          loaded: unattach                                                                                          // 766
        };                                                                                                            // 767
      };                                                                                                                // 768
      //         [*] End of lib/dom.js                                                                                  // 769
      // 770
      // 771
      //         [*] Including lib/dom2.js                                                                              // 772
      /*                                                                                                                // 773
       * ***** BEGIN LICENSE BLOCK *****                                                                                // 774
       * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 775
       *                                                                                                                // 776
       * For the license see COPYING.                                                                                   // 777
       * ***** END LICENSE BLOCK *****                                                                                  // 778
       */                                                                                                               // 779
      // 780
      var AbstractXHRObject = function () { };                                                                             // 781
      AbstractXHRObject.prototype = new EventEmitter(['chunk', 'finish']);                                              // 782
      // 783
      AbstractXHRObject.prototype._start = function (method, url, payload, opts) {                                       // 784
        var that = this;                                                                                              // 785
        // 786
        try {                                                                                                         // 787
          that.xhr = new XMLHttpRequest();                                                                          // 788
        } catch (x) { };                                                                                                // 789
        // 790
        if (!that.xhr) {                                                                                              // 791
          try {                                                                                                     // 792
            that.xhr = new _window.ActiveXObject('Microsoft.XMLHTTP');                                            // 793
          } catch (x) { };                                                                                            // 794
        }                                                                                                             // 795
        if (_window.ActiveXObject || _window.XDomainRequest) {                                                        // 796
          // IE8 caches even POSTs                                                                                  // 797
          url += ((url.indexOf('?') === -1) ? '?' : '&') + 't=' + (+new Date);                                        // 798
        }                                                                                                             // 799
        // 800
        // Explorer tends to keep connection open, even after the                                                     // 801
        // tab gets closed: http://bugs.jquery.com/ticket/5280                                                        // 802
        that.unload_ref = utils.unload_add(function () { that._cleanup(true); });                                         // 803
        try {                                                                                                         // 804
          that.xhr.open(method, url, true);                                                                         // 805
        } catch (e) {                                                                                                  // 806
          // IE raises an exception on wrong port.                                                                  // 807
          that.emit('finish', 0, '');                                                                               // 808
          that._cleanup();                                                                                          // 809
          return;                                                                                                   // 810
        };                                                                                                            // 811
        // 812
        if (!opts || !opts.no_credentials) {                                                                          // 813
          // Mozilla docs says https://developer.mozilla.org/en/XMLHttpRequest :                                    // 814
          // "This never affects same-site requests."                                                               // 815
          that.xhr.withCredentials = 'true';                                                                        // 816
        }                                                                                                             // 817
        if (opts && opts.headers) {                                                                                   // 818
          for (var key in opts.headers) {                                                                            // 819
            that.xhr.setRequestHeader(key, opts.headers[key]);                                                    // 820
          }                                                                                                         // 821
        }                                                                                                             // 822
        // 823
        that.xhr.onreadystatechange = function () {                                                                    // 824
          if (that.xhr) {                                                                                           // 825
            var x = that.xhr;                                                                                     // 826
            switch (x.readyState) {                                                                               // 827
              case 3:                                                                                               // 828
                // IE doesn't like peeking into responseText or status                                            // 829
                // on Microsoft.XMLHTTP and readystate=3                                                          // 830
                try {                                                                                             // 831
                  var status = x.status;                                                                        // 832
                  var text = x.responseText;                                                                    // 833
                } catch (x) { };                                                                                   // 834
                // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450                                    // 835
                if (status === 1223) status = 204;                                                                // 836
                // 837
                // IE does return readystate == 3 for 404 answers.                                                // 838
                if (text && text.length > 0) {                                                                    // 839
                  that.emit('chunk', status, text);                                                             // 840
                }                                                                                                 // 841
                break;                                                                                            // 842
              case 4:                                                                                               // 843
                var status = x.status;                                                                            // 844
                // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450                                    // 845
                if (status === 1223) status = 204;                                                                // 846
                // 847
                that.emit('finish', status, x.responseText);                                                      // 848
                that._cleanup(false);                                                                             // 849
                break;                                                                                            // 850
            }                                                                                                     // 851
          }                                                                                                         // 852
        };                                                                                                            // 853
        that.xhr.send(payload);                                                                                       // 854
      };                                                                                                                // 855
      // 856
      AbstractXHRObject.prototype._cleanup = function (abort) {                                                          // 857
        var that = this;                                                                                              // 858
        if (!that.xhr) return;                                                                                        // 859
        utils.unload_del(that.unload_ref);                                                                            // 860
        // 861
        // IE needs this field to be a function                                                                       // 862
        that.xhr.onreadystatechange = function () { };                                                                   // 863
        // 864
        if (abort) {                                                                                                  // 865
          try {                                                                                                     // 866
            that.xhr.abort();                                                                                     // 867
          } catch (x) { };                                                                                            // 868
        }                                                                                                             // 869
        that.unload_ref = that.xhr = null;                                                                            // 870
      };                                                                                                                // 871
      // 872
      AbstractXHRObject.prototype.close = function () {                                                                  // 873
        var that = this;                                                                                              // 874
        that.nuke();                                                                                                  // 875
        that._cleanup(true);                                                                                          // 876
      };                                                                                                                // 877
      // 878
      var XHRCorsObject = utils.XHRCorsObject = function () {                                                            // 879
        var that = this, args = arguments;                                                                            // 880
        utils.delay(function () { that._start.apply(that, args); });                                                      // 881
      };                                                                                                                // 882
      XHRCorsObject.prototype = new AbstractXHRObject();                                                                // 883
      // 884
      var XHRLocalObject = utils.XHRLocalObject = function (method, url, payload) {                                      // 885
        var that = this;                                                                                              // 886
        utils.delay(function () {                                                                                       // 887
          that._start(method, url, payload, {                                                                       // 888
            no_credentials: true                                                                                  // 889
          });                                                                                                       // 890
        });                                                                                                           // 891
      };                                                                                                                // 892
      XHRLocalObject.prototype = new AbstractXHRObject();                                                               // 893
      // 894
      // 895
      // 896
      // References:                                                                                                    // 897
      //   http://ajaxian.com/archives/100-line-ajax-wrapper                                                            // 898
      //   http://msdn.microsoft.com/en-us/library/cc288060(v=VS.85).aspx                                               // 899
      var XDRObject = utils.XDRObject = function (method, url, payload) {                                                // 900
        var that = this;                                                                                              // 901
        utils.delay(function () { that._start(method, url, payload); });                                                  // 902
      };                                                                                                                // 903
      XDRObject.prototype = new EventEmitter(['chunk', 'finish']);                                                      // 904
      XDRObject.prototype._start = function (method, url, payload) {                                                     // 905
        var that = this;                                                                                              // 906
        var xdr = new XDomainRequest();                                                                               // 907
        // IE caches even POSTs                                                                                       // 908
        url += ((url.indexOf('?') === -1) ? '?' : '&') + 't=' + (+new Date);                                            // 909
        // 910
        var onerror = xdr.ontimeout = xdr.onerror = function () {                                                      // 911
          that.emit('finish', 0, '');                                                                               // 912
          that._cleanup(false);                                                                                     // 913
        };                                                                                                            // 914
        xdr.onprogress = function () {                                                                                 // 915
          that.emit('chunk', 200, xdr.responseText);                                                                // 916
        };                                                                                                            // 917
        xdr.onload = function () {                                                                                     // 918
          that.emit('finish', 200, xdr.responseText);                                                               // 919
          that._cleanup(false);                                                                                     // 920
        };                                                                                                            // 921
        that.xdr = xdr;                                                                                               // 922
        that.unload_ref = utils.unload_add(function () { that._cleanup(true); });                                         // 923
        try {                                                                                                         // 924
          // Fails with AccessDenied if port number is bogus                                                        // 925
          that.xdr.open(method, url);                                                                               // 926
          that.xdr.send(payload);                                                                                   // 927
        } catch (x) {                                                                                                  // 928
          onerror();                                                                                                // 929
        }                                                                                                             // 930
      };                                                                                                                // 931
      // 932
      XDRObject.prototype._cleanup = function (abort) {                                                                  // 933
        var that = this;                                                                                              // 934
        if (!that.xdr) return;                                                                                        // 935
        utils.unload_del(that.unload_ref);                                                                            // 936
        // 937
        that.xdr.ontimeout = that.xdr.onerror = that.xdr.onprogress =                                                 // 938
          that.xdr.onload = null;                                                                                   // 939
        if (abort) {                                                                                                  // 940
          try {                                                                                                     // 941
            that.xdr.abort();                                                                                     // 942
          } catch (x) { };                                                                                            // 943
        }                                                                                                             // 944
        that.unload_ref = that.xdr = null;                                                                            // 945
      };                                                                                                                // 946
      // 947
      XDRObject.prototype.close = function () {                                                                          // 948
        var that = this;                                                                                              // 949
        that.nuke();                                                                                                  // 950
        that._cleanup(true);                                                                                          // 951
      };                                                                                                                // 952
      // 953
      // 1. Is natively via XHR                                                                                         // 954
      // 2. Is natively via XDR                                                                                         // 955
      // 3. Nope, but postMessage is there so it should work via the Iframe.                                            // 956
      // 4. Nope, sorry.                                                                                                // 957
      utils.isXHRCorsCapable = function () {                                                                             // 958
        if (_window.XMLHttpRequest && 'withCredentials' in new XMLHttpRequest()) {                                    // 959
          return 1;                                                                                                 // 960
        }                                                                                                             // 961
        // XDomainRequest doesn't work if page is served from file://                                                 // 962
        if (_window.XDomainRequest && _document.domain) {                                                             // 963
          return 2;                                                                                                 // 964
        }                                                                                                             // 965
        if (IframeTransport.enabled()) {                                                                              // 966
          return 3;                                                                                                 // 967
        }                                                                                                             // 968
        return 4;                                                                                                     // 969
      };                                                                                                                // 970
      //         [*] End of lib/dom2.js                                                                                 // 971
      // 972
      // 973
      //         [*] Including lib/sockjs.js                                                                            // 974
      /*                                                                                                                // 975
       * ***** BEGIN LICENSE BLOCK *****                                                                                // 976
       * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 977
       *                                                                                                                // 978
       * For the license see COPYING.                                                                                   // 979
       * ***** END LICENSE BLOCK *****                                                                                  // 980
       */                                                                                                               // 981
      // 982
      var SockJS = function (url, dep_protocols_whitelist, options) {                                                    // 983
        if (!(this instanceof SockJS)) {                                                                              // 984
          // makes `new` optional                                                                                   // 985
          return new SockJS(url, dep_protocols_whitelist, options);                                                 // 986
        }                                                                                                             // 987
        // 988
        var that = this, protocols_whitelist;                                                                         // 989
        that._options = {
          devel: false, debug: false, protocols_whitelist: [],                                         // 990
          info: undefined, rtt: undefined
        };                                                            // 991
        if (options) {                                                                                                // 992
          utils.objectExtend(that._options, options);                                                               // 993
        }                                                                                                             // 994
        that._base_url = utils.amendUrl(url);                                                                         // 995
        that._server = that._options.server || utils.random_number_string(1000);                                      // 996
        if (that._options.protocols_whitelist &&                                                                      // 997
          that._options.protocols_whitelist.length) {                                                               // 998
          protocols_whitelist = that._options.protocols_whitelist;                                                  // 999
        } else {                                                                                                      // 1000
          // Deprecated API                                                                                         // 1001
          if (typeof dep_protocols_whitelist === 'string' &&                                                        // 1002
            dep_protocols_whitelist.length > 0) {                                                                 // 1003
            protocols_whitelist = [dep_protocols_whitelist];                                                      // 1004
          } else if (utils.isArray(dep_protocols_whitelist)) {                                                      // 1005
            protocols_whitelist = dep_protocols_whitelist                                                         // 1006
          } else {                                                                                                  // 1007
            protocols_whitelist = null;                                                                           // 1008
          }                                                                                                         // 1009
          if (protocols_whitelist) {                                                                                // 1010
            that._debug('Deprecated API: Use "protocols_whitelist" option ' +                                     // 1011
              'instead of supplying protocol list as a second ' +                                       // 1012
              'parameter to SockJS constructor.');                                                      // 1013
          }                                                                                                         // 1014
        }                                                                                                             // 1015
        that._protocols = [];                                                                                         // 1016
        that.protocol = null;                                                                                         // 1017
        that.readyState = SockJS.CONNECTING;                                                                          // 1018
        that._ir = createInfoReceiver(that._base_url);                                                                // 1019
        that._ir.onfinish = function (info, rtt) {                                                                     // 1020
          that._ir = null;                                                                                          // 1021
          if (info) {                                                                                               // 1022
            if (that._options.info) {                                                                             // 1023
              // Override if user supplies the option                                                           // 1024
              info = utils.objectExtend(info, that._options.info);                                              // 1025
            }                                                                                                     // 1026
            if (that._options.rtt) {                                                                              // 1027
              rtt = that._options.rtt;                                                                          // 1028
            }                                                                                                     // 1029
            that._applyInfo(info, rtt, protocols_whitelist);                                                      // 1030
            that._didClose();                                                                                     // 1031
          } else {                                                                                                  // 1032
            that._didClose(1002, 'Can\'t connect to server', true);                                               // 1033
          }                                                                                                         // 1034
        };                                                                                                            // 1035
      };                                                                                                                // 1036
      // Inheritance                                                                                                    // 1037
      SockJS.prototype = new REventTarget();                                                                            // 1038
      // 1039
      SockJS.version = "0.3.4";                                                                                         // 1040
      // 1041
      SockJS.CONNECTING = 0;                                                                                            // 1042
      SockJS.OPEN = 1;                                                                                                  // 1043
      SockJS.CLOSING = 2;                                                                                               // 1044
      SockJS.CLOSED = 3;                                                                                                // 1045
      // 1046
      SockJS.prototype._debug = function () {                                                                            // 1047
        if (this._options.debug)                                                                                      // 1048
          utils.log.apply(utils, arguments);                                                                        // 1049
      };                                                                                                                // 1050
      // 1051
      SockJS.prototype._dispatchOpen = function () {                                                                     // 1052
        var that = this;                                                                                              // 1053
        if (that.readyState === SockJS.CONNECTING) {                                                                  // 1054
          if (that._transport_tref) {                                                                               // 1055
            clearTimeout(that._transport_tref);                                                                   // 1056
            that._transport_tref = null;                                                                          // 1057
          }                                                                                                         // 1058
          that.readyState = SockJS.OPEN;                                                                            // 1059
          that.dispatchEvent(new SimpleEvent("open"));                                                              // 1060
        } else {                                                                                                      // 1061
          // The server might have been restarted, and lost track of our                                            // 1062
          // connection.                                                                                            // 1063
          that._didClose(1006, "Server lost session");                                                              // 1064
        }                                                                                                             // 1065
      };                                                                                                                // 1066
      // 1067
      SockJS.prototype._dispatchMessage = function (data) {                                                              // 1068
        var that = this;                                                                                              // 1069
        if (that.readyState !== SockJS.OPEN)                                                                          // 1070
          return;                                                                                               // 1071
        that.dispatchEvent(new SimpleEvent("message", { data: data }));                                                 // 1072
      };                                                                                                                // 1073
      // 1074
      SockJS.prototype._dispatchHeartbeat = function (data) {                                                            // 1075
        var that = this;                                                                                              // 1076
        if (that.readyState !== SockJS.OPEN)                                                                          // 1077
          return;                                                                                                   // 1078
        that.dispatchEvent(new SimpleEvent('heartbeat', {}));                                                         // 1079
      };                                                                                                                // 1080
      // 1081
      SockJS.prototype._didClose = function (code, reason, force) {                                                      // 1082
        var that = this;                                                                                              // 1083
        if (that.readyState !== SockJS.CONNECTING &&                                                                  // 1084
          that.readyState !== SockJS.OPEN &&                                                                        // 1085
          that.readyState !== SockJS.CLOSING)                                                                       // 1086
          throw new Error('INVALID_STATE_ERR');                                                                 // 1087
        if (that._ir) {                                                                                               // 1088
          that._ir.nuke();                                                                                          // 1089
          that._ir = null;                                                                                          // 1090
        }                                                                                                             // 1091
        // 1092
        if (that._transport) {                                                                                        // 1093
          that._transport.doCleanup();                                                                              // 1094
          that._transport = null;                                                                                   // 1095
        }                                                                                                             // 1096
        // 1097
        var close_event = new SimpleEvent("close", {                                                                  // 1098
          code: code,                                                                                               // 1099
          reason: reason,                                                                                           // 1100
          wasClean: utils.userSetCode(code)
        });                                                                      // 1101
        // 1102
        if (!utils.userSetCode(code) &&                                                                               // 1103
          that.readyState === SockJS.CONNECTING && !force) {                                                        // 1104
          if (that._try_next_protocol(close_event)) {                                                               // 1105
            return;                                                                                               // 1106
          }                                                                                                         // 1107
          close_event = new SimpleEvent("close", {
            code: 2000,                                                       // 1108
            reason: "All transports failed",                                  // 1109
            wasClean: false,                                                  // 1110
            last_event: close_event
          });                                        // 1111
        }                                                                                                             // 1112
        that.readyState = SockJS.CLOSED;                                                                              // 1113
        // 1114
        utils.delay(function () {                                                                                      // 1115
          that.dispatchEvent(close_event);                                                               // 1116
        });                                                                                               // 1117
      };                                                                                                                // 1118
      // 1119
      SockJS.prototype._didMessage = function (data) {                                                                   // 1120
        var that = this;                                                                                              // 1121
        var type = data.slice(0, 1);                                                                                  // 1122
        switch (type) {                                                                                                // 1123
          case 'o':                                                                                                     // 1124
            that._dispatchOpen();                                                                                     // 1125
            break;                                                                                                    // 1126
          case 'a':                                                                                                     // 1127
            var payload = JSON.parse(data.slice(1) || '[]');                                                          // 1128
            for (var i = 0; i < payload.length; i++) {                                                                    // 1129
              that._dispatchMessage(payload[i]);                                                                    // 1130
            }                                                                                                         // 1131
            break;                                                                                                    // 1132
          case 'm':                                                                                                     // 1133
            var payload = JSON.parse(data.slice(1) || 'null');                                                        // 1134
            that._dispatchMessage(payload);                                                                           // 1135
            break;                                                                                                    // 1136
          case 'c':                                                                                                     // 1137
            var payload = JSON.parse(data.slice(1) || '[]');                                                          // 1138
            that._didClose(payload[0], payload[1]);                                                                   // 1139
            break;                                                                                                    // 1140
          case 'h':                                                                                                     // 1141
            that._dispatchHeartbeat();                                                                                // 1142
            break;                                                                                                    // 1143
        }                                                                                                             // 1144
      };                                                                                                                // 1145
      // 1146
      SockJS.prototype._try_next_protocol = function (close_event) {                                                     // 1147
        var that = this;                                                                                              // 1148
        if (that.protocol) {                                                                                          // 1149
          that._debug('Closed transport:', that.protocol, '' + close_event);                                          // 1150
          that.protocol = null;                                                                                     // 1151
        }                                                                                                             // 1152
        if (that._transport_tref) {                                                                                   // 1153
          clearTimeout(that._transport_tref);                                                                       // 1154
          that._transport_tref = null;                                                                              // 1155
        }                                                                                                             // 1156
        // 1157
        while (1) {                                                                                                    // 1158
          var protocol = that.protocol = that._protocols.shift();                                                   // 1159
          if (!protocol) {                                                                                          // 1160
            return false;                                                                                         // 1161
          }                                                                                                         // 1162
          // Some protocols require access to `body`, what if were in                                               // 1163
          // the `head`?                                                                                            // 1164
          if (SockJS[protocol] &&                                                                                   // 1165
            SockJS[protocol].need_body === true &&                                                                // 1166
            (!_document.body ||                                                                                   // 1167
              (typeof _document.readyState !== 'undefined'                                                         // 1168
                && _document.readyState !== 'complete'))) {                                                         // 1169
            that._protocols.unshift(protocol);                                                                    // 1170
            that.protocol = 'waiting-for-load';                                                                   // 1171
            utils.attachEvent('load', function () {                                                                 // 1172
              that._try_next_protocol();                                                                        // 1173
            });                                                                                                   // 1174
            return true;                                                                                          // 1175
          }                                                                                                         // 1176
          // 1177
          if (!SockJS[protocol] ||                                                                                  // 1178
            !SockJS[protocol].enabled(that._options)) {                                                         // 1179
            that._debug('Skipping transport:', protocol);                                                         // 1180
          } else {                                                                                                  // 1181
            var roundTrips = SockJS[protocol].roundTrips || 1;                                                    // 1182
            var to = ((that._options.rto || 0) * roundTrips) || 5000;                                             // 1183
            that._transport_tref = utils.delay(to, function () {                                                   // 1184
              if (that.readyState === SockJS.CONNECTING) {                                                      // 1185
                // I can't understand how it is possible to run                                               // 1186
                // this timer, when the state is CLOSED, but                                                  // 1187
                // apparently in IE everythin is possible.                                                    // 1188
                that._didClose(2007, "Transport timeouted");                                                  // 1189
              }                                                                                                 // 1190
            });                                                                                                   // 1191
            // 1192
            var connid = utils.random_string(8);                                                                  // 1193
            var trans_url = that._base_url + '/' + that._server + '/' + connid;                                   // 1194
            that._debug('Opening transport:', protocol, ' url:' + trans_url,                                        // 1195
              ' RTO:' + that._options.rto);                                                               // 1196
            that._transport = new SockJS[protocol](that, trans_url,                                               // 1197
              that._base_url);                                               // 1198
            return true;                                                                                          // 1199
          }                                                                                                         // 1200
        }                                                                                                             // 1201
      };                                                                                                                // 1202
      // 1203
      SockJS.prototype.close = function (code, reason) {                                                                 // 1204
        var that = this;                                                                                              // 1205
        if (code && !utils.userSetCode(code))                                                                         // 1206
          throw new Error("INVALID_ACCESS_ERR");                                                                    // 1207
        if (that.readyState !== SockJS.CONNECTING &&                                                                   // 1208
          that.readyState !== SockJS.OPEN) {                                                                         // 1209
          return false;                                                                                             // 1210
        }                                                                                                             // 1211
        that.readyState = SockJS.CLOSING;                                                                             // 1212
        that._didClose(code || 1000, reason || "Normal closure");                                                     // 1213
        return true;                                                                                                  // 1214
      };                                                                                                                // 1215
      // 1216
      SockJS.prototype.send = function (data) {                                                                          // 1217
        var that = this;                                                                                              // 1218
        if (that.readyState === SockJS.CONNECTING)                                                                    // 1219
          throw new Error('INVALID_STATE_ERR');                                                                     // 1220
        if (that.readyState === SockJS.OPEN) {                                                                        // 1221
          that._transport.doSend(utils.quote('' + data));                                                           // 1222
        }                                                                                                             // 1223
        return true;                                                                                                  // 1224
      };                                                                                                                // 1225
      // 1226
      SockJS.prototype._applyInfo = function (info, rtt, protocols_whitelist) {                                          // 1227
        var that = this;                                                                                              // 1228
        that._options.info = info;                                                                                    // 1229
        that._options.rtt = rtt;                                                                                      // 1230
        that._options.rto = utils.countRTO(rtt);                                                                      // 1231
        that._options.info.null_origin = !_document.domain;                                                           // 1232
        // Servers can override base_url, eg to provide a randomized domain name and                                  // 1233
        // avoid browser per-domain connection limits.                                                                // 1234
        if (info.base_url)                                                                                            // 1235
          // <METEOR>                                                                                                 // 1236
          that._base_url = utils.amendUrl(info.base_url, that._base_url);                                             // 1237
        // </METEOR>                                                                                                // 1238
        var probed = utils.probeProtocols();                                                                          // 1239
        that._protocols = utils.detectProtocols(probed, protocols_whitelist, info);                                   // 1240
        // <METEOR>                                                                                                       // 1241
        // https://github.com/sockjs/sockjs-client/issues/79                                                              // 1242
        // Hack to avoid XDR when using different protocols                                                           // 1243
        // We're on IE trying to do cross-protocol. jsonp only.                                                       // 1244
        if (!utils.isSameOriginScheme(that._base_url) &&                                                              // 1245
          2 === utils.isXHRCorsCapable()) {                                                                         // 1246
          that._protocols = ['jsonp-polling'];                                                                      // 1247
        }                                                                                                             // 1248
        // </METEOR>                                                                                                      // 1249
      };                                                                                                                // 1250
      //         [*] End of lib/sockjs.js                                                                               // 1251
      // 1252
      // 1253
      //         [*] Including lib/trans-websocket.js                                                                   // 1254
      /*                                                                                                                // 1255
       * ***** BEGIN LICENSE BLOCK *****                                                                                // 1256
       * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 1257
       *                                                                                                                // 1258
       * For the license see COPYING.                                                                                   // 1259
       * ***** END LICENSE BLOCK *****                                                                                  // 1260
       */                                                                                                               // 1261
      // 1262
      var WebSocketTransport = SockJS.websocket = function (ri, trans_url) {                                             // 1263
        var that = this;                                                                                              // 1264
        var url = trans_url + '/websocket';                                                                           // 1265
        if (url.slice(0, 5) === 'https') {                                                                            // 1266
          url = 'wss' + url.slice(5);                                                                               // 1267
        } else {                                                                                                      // 1268
          url = 'ws' + url.slice(4);                                                                                // 1269
        }                                                                                                             // 1270
        that.ri = ri;                                                                                                 // 1271
        that.url = url;                                                                                               // 1272
        var Constructor = _window.WebSocket || _window.MozWebSocket;                                                  // 1273
        // 1274
        that.ws = new Constructor(that.url);                                                                          // 1275
        that.ws.onmessage = function (e) {                                                                             // 1276
          that.ri._didMessage(e.data);                                                                              // 1277
        };                                                                                                            // 1278
        // Firefox has an interesting bug. If a websocket connection is                                               // 1279
        // created after onunload, it stays alive even when user                                                      // 1280
        // navigates away from the page. In such situation let's lie -                                                // 1281
        // let's not open the ws connection at all. See:                                                              // 1282
        // https://github.com/sockjs/sockjs-client/issues/28                                                          // 1283
        // https://bugzilla.mozilla.org/show_bug.cgi?id=696085                                                        // 1284
        that.unload_ref = utils.unload_add(function () { that.ws.close() });                                              // 1285
        that.ws.onclose = function () {                                                                                // 1286
          that.ri._didMessage(utils.closeFrame(1006, "WebSocket connection broken"));                               // 1287
        };                                                                                                            // 1288
      };                                                                                                                // 1289
      // 1290
      WebSocketTransport.prototype.doSend = function (data) {                                                            // 1291
        this.ws.send('[' + data + ']');                                                                               // 1292
      };                                                                                                                // 1293
      // 1294
      WebSocketTransport.prototype.doCleanup = function () {                                                             // 1295
        var that = this;                                                                                              // 1296
        var ws = that.ws;                                                                                             // 1297
        if (ws) {                                                                                                     // 1298
          ws.onmessage = ws.onclose = null;                                                                         // 1299
          ws.close();                                                                                               // 1300
          utils.unload_del(that.unload_ref);                                                                        // 1301
          that.unload_ref = that.ri = that.ws = null;                                                               // 1302
        }                                                                                                             // 1303
      };                                                                                                                // 1304
      // 1305
      WebSocketTransport.enabled = function () {                                                                         // 1306
        return !!(_window.WebSocket || _window.MozWebSocket);                                                         // 1307
      };                                                                                                                // 1308
      // 1309
      // In theory, ws should require 1 round trip. But in chrome, this is                                              // 1310
      // not very stable over SSL. Most likely a ws connection requires a                                               // 1311
      // separate SSL connection, in which case 2 round trips are an                                                    // 1312
      // absolute minumum.                                                                                              // 1313
      WebSocketTransport.roundTrips = 2;                                                                                // 1314
      //         [*] End of lib/trans-websocket.js                                                                      // 1315
      // 1316
      // 1317
      //         [*] Including lib/trans-sender.js                                                                      // 1318
      /*                                                                                                                // 1319
       * ***** BEGIN LICENSE BLOCK *****                                                                                // 1320
       * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 1321
       *                                                                                                                // 1322
       * For the license see COPYING.                                                                                   // 1323
       * ***** END LICENSE BLOCK *****                                                                                  // 1324
       */                                                                                                               // 1325
      // 1326
      var BufferedSender = function () { };                                                                               // 1327
      BufferedSender.prototype.send_constructor = function (sender) {                                                    // 1328
        var that = this;                                                                                              // 1329
        that.send_buffer = [];                                                                                        // 1330
        that.sender = sender;                                                                                         // 1331
      };                                                                                                                // 1332
      BufferedSender.prototype.doSend = function (message) {                                                             // 1333
        var that = this;                                                                                              // 1334
        that.send_buffer.push(message);                                                                               // 1335
        if (!that.send_stop) {                                                                                        // 1336
          that.send_schedule();                                                                                     // 1337
        }                                                                                                             // 1338
      };                                                                                                                // 1339
      // 1340
      // For polling transports in a situation when in the message callback,                                            // 1341
      // new message is being send. If the sending connection was started                                               // 1342
      // before receiving one, it is possible to saturate the network and                                               // 1343
      // timeout due to the lack of receiving socket. To avoid that we delay                                            // 1344
      // sending messages by some small time, in order to let receiving                                                 // 1345
      // connection be started beforehand. This is only a halfmeasure and                                               // 1346
      // does not fix the big problem, but it does make the tests go more                                               // 1347
      // stable on slow networks.                                                                                       // 1348
      BufferedSender.prototype.send_schedule_wait = function () {                                                        // 1349
        var that = this;                                                                                              // 1350
        var tref;                                                                                                     // 1351
        that.send_stop = function () {                                                                                 // 1352
          that.send_stop = null;                                                                                    // 1353
          clearTimeout(tref);                                                                                       // 1354
        };                                                                                                            // 1355
        tref = utils.delay(25, function () {                                                                           // 1356
          that.send_stop = null;                                                                                    // 1357
          that.send_schedule();                                                                                     // 1358
        });                                                                                                           // 1359
      };                                                                                                                // 1360
      // 1361
      BufferedSender.prototype.send_schedule = function () {                                                             // 1362
        var that = this;                                                                                              // 1363
        if (that.send_buffer.length > 0) {                                                                            // 1364
          var payload = '[' + that.send_buffer.join(',') + ']';                                                     // 1365
          that.send_stop = that.sender(that.trans_url, payload, function (success, abort_reason) {                   // 1366
            that.send_stop = null;                                                                                // 1367
            if (success === false) {                                                                              // 1368
              that.ri._didClose(1006, 'Sending error ' + abort_reason);                                         // 1369
            } else {                                                                                              // 1370
              that.send_schedule_wait();                                                                        // 1371
            }                                                                                                     // 1372
          });                                                                                                       // 1373
          that.send_buffer = [];                                                                                    // 1374
        }                                                                                                             // 1375
      };                                                                                                                // 1376
      // 1377
      BufferedSender.prototype.send_destructor = function () {                                                           // 1378
        var that = this;                                                                                              // 1379
        if (that._send_stop) {                                                                                        // 1380
          that._send_stop();                                                                                        // 1381
        }                                                                                                             // 1382
        that._send_stop = null;                                                                                       // 1383
      };                                                                                                                // 1384
      // 1385
      var jsonPGenericSender = function (url, payload, callback) {                                                       // 1386
        var that = this;                                                                                              // 1387
        // 1388
        if (!('_send_form' in that)) {                                                                                // 1389
          var form = that._send_form = _document.createElement('form');                                             // 1390
          var area = that._send_area = _document.createElement('textarea');                                         // 1391
          area.name = 'd';                                                                                          // 1392
          form.style.display = 'none';                                                                              // 1393
          form.style.position = 'absolute';                                                                         // 1394
          form.method = 'POST';                                                                                     // 1395
          form.enctype = 'application/x-www-form-urlencoded';                                                       // 1396
          form.acceptCharset = "UTF-8";                                                                             // 1397
          form.appendChild(area);                                                                                   // 1398
          _document.body.appendChild(form);                                                                         // 1399
        }                                                                                                             // 1400
        var form = that._send_form;                                                                                   // 1401
        var area = that._send_area;                                                                                   // 1402
        var id = 'a' + utils.random_string(8);                                                                        // 1403
        form.target = id;                                                                                             // 1404
        form.action = url + '/jsonp_send?i=' + id;                                                                    // 1405
        // 1406
        var iframe;                                                                                                   // 1407
        try {                                                                                                         // 1408
          // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)                                    // 1409
          iframe = _document.createElement('<iframe name="' + id + '">');                                             // 1410
        } catch (x) {                                                                                                  // 1411
          iframe = _document.createElement('iframe');                                                               // 1412
          iframe.name = id;                                                                                         // 1413
        }                                                                                                             // 1414
        iframe.id = id;                                                                                               // 1415
        form.appendChild(iframe);                                                                                     // 1416
        iframe.style.display = 'none';                                                                                // 1417
        // 1418
        try {                                                                                                         // 1419
          area.value = payload;                                                                                     // 1420
        } catch (e) {                                                                                                  // 1421
          utils.log('Your browser is seriously broken. Go home! ' + e.message);                                     // 1422
        }                                                                                                             // 1423
        form.submit();                                                                                                // 1424
        // 1425
        var completed = function (e) {                                                                                 // 1426
          if (!iframe.onerror) return;                                                                              // 1427
          iframe.onreadystatechange = iframe.onerror = iframe.onload = null;                                        // 1428
          // Opera mini doesn't like if we GC iframe                                                                // 1429
          // immediately, thus this timeout.                                                                        // 1430
          utils.delay(500, function () {                                                                             // 1431
            iframe.parentNode.removeChild(iframe);                                                     // 1432
            iframe = null;                                                                             // 1433
          });                                                                                            // 1434
          area.value = '';                                                                                          // 1435
          // It is not possible to detect if the iframe succeeded or                                                // 1436
          // failed to submit our form.                                                                             // 1437
          callback(true);                                                                                           // 1438
        };                                                                                                            // 1439
        iframe.onerror = iframe.onload = completed;                                                                   // 1440
        iframe.onreadystatechange = function (e) {                                                                     // 1441
          if (iframe.readyState == 'complete') completed();                                                         // 1442
        };                                                                                                            // 1443
        return completed;                                                                                             // 1444
      };                                                                                                                // 1445
      // 1446
      var createAjaxSender = function (AjaxObject) {                                                                     // 1447
        return function (url, payload, callback) {                                                                     // 1448
          var xo = new AjaxObject('POST', url + '/xhr_send', payload);                                              // 1449
          xo.onfinish = function (status, text) {                                                                    // 1450
            callback(status === 200 || status === 204,                                                            // 1451
              'http status ' + status);                                                                    // 1452
          };                                                                                                        // 1453
          return function (abort_reason) {                                                                           // 1454
            callback(false, abort_reason);                                                                        // 1455
          };                                                                                                        // 1456
        };                                                                                                            // 1457
      };                                                                                                                // 1458
      //         [*] End of lib/trans-sender.js                                                                         // 1459
      // 1460
      // 1461
      //         [*] Including lib/trans-jsonp-receiver.js                                                              // 1462
      /*                                                                                                                // 1463
       * ***** BEGIN LICENSE BLOCK *****                                                                                // 1464
       * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 1465
       *                                                                                                                // 1466
       * For the license see COPYING.                                                                                   // 1467
       * ***** END LICENSE BLOCK *****                                                                                  // 1468
       */                                                                                                               // 1469
      // 1470
      // Parts derived from Socket.io:                                                                                  // 1471
      //    https://github.com/LearnBoost/socket.io/blob/0.6.17/lib/socket.io/transports/jsonp-polling.js               // 1472
      // and jQuery-JSONP:                                                                                              // 1473
      //    https://code.google.com/p/jquery-jsonp/source/browse/trunk/core/jquery.jsonp.js                             // 1474
      var jsonPGenericReceiver = function (url, callback) {                                                              // 1475
        var tref;                                                                                                     // 1476
        var script = _document.createElement('script');                                                               // 1477
        var script2;  // Opera synchronous load trick.                                                                // 1478
        var close_script = function (frame) {                                                                          // 1479
          if (script2) {                                                                                            // 1480
            script2.parentNode.removeChild(script2);                                                              // 1481
            script2 = null;                                                                                       // 1482
          }                                                                                                         // 1483
          if (script) {                                                                                             // 1484
            clearTimeout(tref);                                                                                   // 1485
            // Unfortunately, you can't really abort script loading of                                            // 1486
            // the script.                                                                                        // 1487
            script.parentNode.removeChild(script);                                                                // 1488
            script.onreadystatechange = script.onerror =                                                          // 1489
              script.onload = script.onclick = null;                                                            // 1490
            script = null;                                                                                        // 1491
            callback(frame);                                                                                      // 1492
            callback = null;                                                                                      // 1493
          }                                                                                                         // 1494
        };                                                                                                            // 1495
        // 1496
        // IE9 fires 'error' event after orsc or before, in random order.                                             // 1497
        var loaded_okay = false;                                                                                      // 1498
        var error_timer = null;                                                                                       // 1499
        // 1500
        script.id = 'a' + utils.random_string(8);                                                                     // 1501
        script.src = url;                                                                                             // 1502
        script.type = 'text/javascript';                                                                              // 1503
        script.charset = 'UTF-8';                                                                                     // 1504
        script.onerror = function (e) {                                                                                // 1505
          if (!error_timer) {                                                                                       // 1506
            // Delay firing close_script.                                                                         // 1507
            error_timer = setTimeout(function () {                                                                 // 1508
              if (!loaded_okay) {                                                                               // 1509
                close_script(utils.closeFrame(                                                                // 1510
                  1006,                                                                                     // 1511
                  "JSONP script loaded abnormally (onerror)"));                                             // 1512
              }                                                                                                 // 1513
            }, 1000);                                                                                             // 1514
          }                                                                                                         // 1515
        };                                                                                                            // 1516
        script.onload = function (e) {                                                                                 // 1517
          close_script(utils.closeFrame(1006, "JSONP script loaded abnormally (onload)"));                          // 1518
        };                                                                                                            // 1519
        // 1520
        script.onreadystatechange = function (e) {                                                                     // 1521
          if (/loaded|closed/.test(script.readyState)) {                                                            // 1522
            if (script && script.htmlFor && script.onclick) {                                                     // 1523
              loaded_okay = true;                                                                               // 1524
              try {                                                                                             // 1525
                // In IE, actually execute the script.                                                        // 1526
                script.onclick();                                                                             // 1527
              } catch (x) { }                                                                                    // 1528
            }                                                                                                     // 1529
            if (script) {                                                                                         // 1530
              close_script(utils.closeFrame(1006, "JSONP script loaded abnormally (onreadystatechange)"));      // 1531
            }                                                                                                     // 1532
          }                                                                                                         // 1533
        };                                                                                                            // 1534
        // IE: event/htmlFor/onclick trick.                                                                           // 1535
        // One can't rely on proper order for onreadystatechange. In order to                                         // 1536
        // make sure, set a 'htmlFor' and 'event' properties, so that                                                 // 1537
        // script code will be installed as 'onclick' handler for the                                                 // 1538
        // script object. Later, onreadystatechange, manually execute this                                            // 1539
        // code. FF and Chrome doesn't work with 'event' and 'htmlFor'                                                // 1540
        // set. For reference see:                                                                                    // 1541
        //   http://jaubourg.net/2010/07/loading-script-as-onclick-handler-of.html                                    // 1542
        // Also, read on that about script ordering:                                                                  // 1543
        //   http://wiki.whatwg.org/wiki/Dynamic_Script_Execution_Order                                               // 1544
        if (typeof script.async === 'undefined' && _document.attachEvent) {                                           // 1545
          // According to mozilla docs, in recent browsers script.async defaults                                    // 1546
          // to 'true', so we may use it to detect a good browser:                                                  // 1547
          // https://developer.mozilla.org/en/HTML/Element/script                                                   // 1548
          if (!/opera/i.test(navigator.userAgent)) {                                                                // 1549
            // Naively assume we're in IE                                                                         // 1550
            try {                                                                                                 // 1551
              script.htmlFor = script.id;                                                                       // 1552
              script.event = "onclick";                                                                         // 1553
            } catch (x) { }                                                                                        // 1554
            script.async = true;                                                                                  // 1555
          } else {                                                                                                  // 1556
            // Opera, second sync script hack                                                                     // 1557
            script2 = _document.createElement('script');                                                          // 1558
            script2.text = "try{var a = document.getElementById('" + script.id + "'); if(a)a.onerror();}catch(x){};";
            script.async = script2.async = false;                                                                 // 1560
          }                                                                                                         // 1561
        }                                                                                                             // 1562
        if (typeof script.async !== 'undefined') {                                                                    // 1563
          script.async = true;                                                                                      // 1564
        }                                                                                                             // 1565
        // 1566
        // Fallback mostly for Konqueror - stupid timer, 35 seconds shall be plenty.                                  // 1567
        tref = setTimeout(function () {                                                                                // 1568
          close_script(utils.closeFrame(1006, "JSONP script loaded abnormally (timeout)"));       // 1569
        }, 35000);                                                                                  // 1570
        // 1571
        var head = _document.getElementsByTagName('head')[0];                                                         // 1572
        head.insertBefore(script, head.firstChild);                                                                   // 1573
        if (script2) {                                                                                                // 1574
          head.insertBefore(script2, head.firstChild);                                                              // 1575
        }                                                                                                             // 1576
        return close_script;                                                                                          // 1577
      };                                                                                                                // 1578
      //         [*] End of lib/trans-jsonp-receiver.js                                                                 // 1579
      // 1580
      // 1581
      //         [*] Including lib/trans-jsonp-polling.js                                                               // 1582
      /*                                                                                                                // 1583
       * ***** BEGIN LICENSE BLOCK *****                                                                                // 1584
       * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 1585
       *                                                                                                                // 1586
       * For the license see COPYING.                                                                                   // 1587
       * ***** END LICENSE BLOCK *****                                                                                  // 1588
       */                                                                                                               // 1589
      // 1590
      // The simplest and most robust transport, using the well-know cross                                              // 1591
      // domain hack - JSONP. This transport is quite inefficient - one                                                 // 1592
      // mssage could use up to one http request. But at least it works almost                                          // 1593
      // everywhere.                                                                                                    // 1594
      // Known limitations:                                                                                             // 1595
      //   o you will get a spinning cursor                                                                             // 1596
      //   o for Konqueror a dumb timer is needed to detect errors                                                      // 1597
      // 1598
      // 1599
      var JsonPTransport = SockJS['jsonp-polling'] = function (ri, trans_url) {                                          // 1600
        utils.polluteGlobalNamespace();                                                                               // 1601
        var that = this;                                                                                              // 1602
        that.ri = ri;                                                                                                 // 1603
        that.trans_url = trans_url;                                                                                   // 1604
        that.send_constructor(jsonPGenericSender);                                                                    // 1605
        that._schedule_recv();                                                                                        // 1606
      };                                                                                                                // 1607
      // 1608
      // Inheritnace                                                                                                    // 1609
      JsonPTransport.prototype = new BufferedSender();                                                                  // 1610
      // 1611
      JsonPTransport.prototype._schedule_recv = function () {                                                            // 1612
        var that = this;                                                                                              // 1613
        var callback = function (data) {                                                                               // 1614
          that._recv_stop = null;                                                                                   // 1615
          if (data) {                                                                                               // 1616
            // no data - heartbeat;                                                                               // 1617
            if (!that._is_closing) {                                                                              // 1618
              that.ri._didMessage(data);                                                                        // 1619
            }                                                                                                     // 1620
          }                                                                                                         // 1621
          // The message can be a close message, and change is_closing state.                                       // 1622
          if (!that._is_closing) {                                                                                  // 1623
            that._schedule_recv();                                                                                // 1624
          }                                                                                                         // 1625
        };                                                                                                            // 1626
        that._recv_stop = jsonPReceiverWrapper(that.trans_url + '/jsonp',                                             // 1627
          jsonPGenericReceiver, callback);                                       // 1628
      };                                                                                                                // 1629
      // 1630
      JsonPTransport.enabled = function () {                                                                             // 1631
        return true;                                                                                                  // 1632
      };                                                                                                                // 1633
      // 1634
      JsonPTransport.need_body = true;                                                                                  // 1635
      // 1636
      // 1637
      JsonPTransport.prototype.doCleanup = function () {                                                                 // 1638
        var that = this;                                                                                              // 1639
        that._is_closing = true;                                                                                      // 1640
        if (that._recv_stop) {                                                                                        // 1641
          that._recv_stop();                                                                                        // 1642
        }                                                                                                             // 1643
        that.ri = that._recv_stop = null;                                                                             // 1644
        that.send_destructor();                                                                                       // 1645
      };                                                                                                                // 1646
      // 1647
      // 1648
      // Abstract away code that handles global namespace pollution.                                                    // 1649
      var jsonPReceiverWrapper = function (url, constructReceiver, user_callback) {                                      // 1650
        var id = 'a' + utils.random_string(6);                                                                        // 1651
        var url_id = url + '?c=' + escape(WPrefix + '.' + id);                                                        // 1652
        // 1653
        // Unfortunately it is not possible to abort loading of the                                                   // 1654
        // script. We need to keep track of frake close frames.                                                       // 1655
        var aborting = 0;                                                                                             // 1656
        // 1657
        // Callback will be called exactly once.                                                                      // 1658
        var callback = function (frame) {                                                                              // 1659
          switch (aborting) {                                                                                        // 1660
            case 0:                                                                                                   // 1661
              // Normal behaviour - delete hook _and_ emit message.                                                 // 1662
              delete _window[WPrefix][id];                                                                          // 1663
              user_callback(frame);                                                                                 // 1664
              break;                                                                                                // 1665
            case 1:                                                                                                   // 1666
              // Fake close frame - emit but don't delete hook.                                                     // 1667
              user_callback(frame);                                                                                 // 1668
              aborting = 2;                                                                                         // 1669
              break;                                                                                                // 1670
            case 2:                                                                                                   // 1671
              // Got frame after connection was closed, delete hook, don't emit.                                    // 1672
              delete _window[WPrefix][id];                                                                          // 1673
              break;                                                                                                // 1674
          }                                                                                                         // 1675
        };                                                                                                            // 1676
        // 1677
        var close_script = constructReceiver(url_id, callback);                                                       // 1678
        _window[WPrefix][id] = close_script;                                                                          // 1679
        var stop = function () {                                                                                       // 1680
          if (_window[WPrefix][id]) {                                                                               // 1681
            aborting = 1;                                                                                         // 1682
            _window[WPrefix][id](utils.closeFrame(1000, "JSONP user aborted read"));                              // 1683
          }                                                                                                         // 1684
        };                                                                                                            // 1685
        return stop;                                                                                                  // 1686
      };                                                                                                                // 1687
      //         [*] End of lib/trans-jsonp-polling.js                                                                  // 1688
      // 1689
      // 1690
      //         [*] Including lib/trans-xhr.js                                                                         // 1691
      /*                                                                                                                // 1692
       * ***** BEGIN LICENSE BLOCK *****                                                                                // 1693
       * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 1694
       *                                                                                                                // 1695
       * For the license see COPYING.                                                                                   // 1696
       * ***** END LICENSE BLOCK *****                                                                                  // 1697
       */                                                                                                               // 1698
      // 1699
      var AjaxBasedTransport = function () { };                                                                           // 1700
      AjaxBasedTransport.prototype = new BufferedSender();                                                              // 1701
      // 1702
      AjaxBasedTransport.prototype.run = function (ri, trans_url,                                                        // 1703
        url_suffix, Receiver, AjaxObject) {                                   // 1704
        var that = this;                                                                                              // 1705
        that.ri = ri;                                                                                                 // 1706
        that.trans_url = trans_url;                                                                                   // 1707
        that.send_constructor(createAjaxSender(AjaxObject));                                                          // 1708
        that.poll = new Polling(ri, Receiver,                                                                         // 1709
          trans_url + url_suffix, AjaxObject);                                                  // 1710
      };                                                                                                                // 1711
      // 1712
      AjaxBasedTransport.prototype.doCleanup = function () {                                                             // 1713
        var that = this;                                                                                              // 1714
        if (that.poll) {                                                                                              // 1715
          that.poll.abort();                                                                                        // 1716
          that.poll = null;                                                                                         // 1717
        }                                                                                                             // 1718
      };                                                                                                                // 1719
      // 1720
      // xhr-streaming                                                                                                  // 1721
      var XhrStreamingTransport = SockJS['xhr-streaming'] = function (ri, trans_url) {                                   // 1722
        this.run(ri, trans_url, '/xhr_streaming', XhrReceiver, utils.XHRCorsObject);                                  // 1723
      };                                                                                                                // 1724
      // 1725
      XhrStreamingTransport.prototype = new AjaxBasedTransport();                                                       // 1726
      // 1727
      XhrStreamingTransport.enabled = function () {                                                                      // 1728
        // Support for CORS Ajax aka Ajax2? Opera 12 claims CORS but                                                  // 1729
        // doesn't do streaming.                                                                                      // 1730
        return (_window.XMLHttpRequest &&                                                                             // 1731
          'withCredentials' in new XMLHttpRequest() &&                                                          // 1732
          (!/opera/i.test(navigator.userAgent)));                                                               // 1733
      };                                                                                                                // 1734
      XhrStreamingTransport.roundTrips = 2; // preflight, ajax                                                          // 1735
      // 1736
      // Safari gets confused when a streaming ajax request is started                                                  // 1737
      // before onload. This causes the load indicator to spin indefinetely.                                            // 1738
      XhrStreamingTransport.need_body = true;                                                                           // 1739
      // 1740
      // 1741
      // According to:                                                                                                  // 1742
      //   http://stackoverflow.com/questions/1641507/detect-browser-support-for-cross-domain-xmlhttprequests           // 1743
      //   http://hacks.mozilla.org/2009/07/cross-site-xmlhttprequest-with-cors/                                        // 1744
      // 1745
      // 1746
      // xdr-streaming                                                                                                  // 1747
      var XdrStreamingTransport = SockJS['xdr-streaming'] = function (ri, trans_url) {                                   // 1748
        this.run(ri, trans_url, '/xhr_streaming', XhrReceiver, utils.XDRObject);                                      // 1749
      };                                                                                                                // 1750
      // 1751
      XdrStreamingTransport.prototype = new AjaxBasedTransport();                                                       // 1752
      // 1753
      XdrStreamingTransport.enabled = function () {                                                                      // 1754
        return !!_window.XDomainRequest;                                                                              // 1755
      };                                                                                                                // 1756
      XdrStreamingTransport.roundTrips = 2; // preflight, ajax                                                          // 1757
      // 1758
      // 1759
      // 1760
      // xhr-polling                                                                                                    // 1761
      var XhrPollingTransport = SockJS['xhr-polling'] = function (ri, trans_url) {                                       // 1762
        this.run(ri, trans_url, '/xhr', XhrReceiver, utils.XHRCorsObject);                                            // 1763
      };                                                                                                                // 1764
      // 1765
      XhrPollingTransport.prototype = new AjaxBasedTransport();                                                         // 1766
      // 1767
      XhrPollingTransport.enabled = XhrStreamingTransport.enabled;                                                      // 1768
      XhrPollingTransport.roundTrips = 2; // preflight, ajax                                                            // 1769
      // 1770
      // 1771
      // xdr-polling                                                                                                    // 1772
      var XdrPollingTransport = SockJS['xdr-polling'] = function (ri, trans_url) {                                       // 1773
        this.run(ri, trans_url, '/xhr', XhrReceiver, utils.XDRObject);                                                // 1774
      };                                                                                                                // 1775
      // 1776
      XdrPollingTransport.prototype = new AjaxBasedTransport();                                                         // 1777
      // 1778
      XdrPollingTransport.enabled = XdrStreamingTransport.enabled;                                                      // 1779
      XdrPollingTransport.roundTrips = 2; // preflight, ajax                                                            // 1780
      //         [*] End of lib/trans-xhr.js                                                                            // 1781
      // 1782
      // 1783
      //         [*] Including lib/trans-iframe.js                                                                      // 1784
      /*                                                                                                                // 1785
       * ***** BEGIN LICENSE BLOCK *****                                                                                // 1786
       * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 1787
       *                                                                                                                // 1788
       * For the license see COPYING.                                                                                   // 1789
       * ***** END LICENSE BLOCK *****                                                                                  // 1790
       */                                                                                                               // 1791
      // 1792
      // Few cool transports do work only for same-origin. In order to make                                             // 1793
      // them working cross-domain we shall use iframe, served form the                                                 // 1794
      // remote domain. New browsers, have capabilities to communicate with                                             // 1795
      // cross domain iframe, using postMessage(). In IE it was implemented                                             // 1796
      // from IE 8+, but of course, IE got some details wrong:                                                          // 1797
      //    http://msdn.microsoft.com/en-us/library/cc197015(v=VS.85).aspx                                              // 1798
      //    http://stevesouders.com/misc/test-postmessage.php                                                           // 1799
      // 1800
      var IframeTransport = function () { };                                                                              // 1801
      // 1802
      IframeTransport.prototype.i_constructor = function (ri, trans_url, base_url) {                                     // 1803
        var that = this;                                                                                              // 1804
        that.ri = ri;                                                                                                 // 1805
        that.origin = utils.getOrigin(base_url);                                                                      // 1806
        that.base_url = base_url;                                                                                     // 1807
        that.trans_url = trans_url;                                                                                   // 1808
        // 1809
        var iframe_url = base_url + '/iframe.html';                                                                   // 1810
        if (that.ri._options.devel) {                                                                                 // 1811
          iframe_url += '?t=' + (+new Date);                                                                        // 1812
        }                                                                                                             // 1813
        that.window_id = utils.random_string(8);                                                                      // 1814
        iframe_url += '#' + that.window_id;                                                                           // 1815
        // 1816
        that.iframeObj = utils.createIframe(iframe_url, function (r) {                                                 // 1817
          that.ri._didClose(1006, "Unable to load an iframe (" + r + ")");      // 1818
        });                                                                       // 1819
        // 1820
        that.onmessage_cb = utils.bind(that.onmessage, that);                                                         // 1821
        utils.attachMessage(that.onmessage_cb);                                                                       // 1822
      };                                                                                                                // 1823
      // 1824
      IframeTransport.prototype.doCleanup = function () {                                                                // 1825
        var that = this;                                                                                              // 1826
        if (that.iframeObj) {                                                                                         // 1827
          utils.detachMessage(that.onmessage_cb);                                                                   // 1828
          try {                                                                                                     // 1829
            // When the iframe is not loaded, IE raises an exception                                              // 1830
            // on 'contentWindow'.                                                                                // 1831
            if (that.iframeObj.iframe.contentWindow) {                                                            // 1832
              that.postMessage('c');                                                                            // 1833
            }                                                                                                     // 1834
          } catch (x) { }                                                                                            // 1835
          that.iframeObj.cleanup();                                                                                 // 1836
          that.iframeObj = null;                                                                                    // 1837
          that.onmessage_cb = that.iframeObj = null;                                                                // 1838
        }                                                                                                             // 1839
      };                                                                                                                // 1840
      // 1841
      IframeTransport.prototype.onmessage = function (e) {                                                               // 1842
        var that = this;                                                                                              // 1843
        if (e.origin !== that.origin) return;                                                                         // 1844
        var window_id = e.data.slice(0, 8);                                                                           // 1845
        var type = e.data.slice(8, 9);                                                                                // 1846
        var data = e.data.slice(9);                                                                                   // 1847
        // 1848
        if (window_id !== that.window_id) return;                                                                     // 1849
        // 1850
        switch (type) {                                                                                                // 1851
          case 's':                                                                                                     // 1852
            that.iframeObj.loaded();                                                                                  // 1853
            that.postMessage('s', JSON.stringify([SockJS.version, that.protocol, that.trans_url, that.base_url]));    // 1854
            break;                                                                                                    // 1855
          case 't':                                                                                                     // 1856
            that.ri._didMessage(data);                                                                                // 1857
            break;                                                                                                    // 1858
        }                                                                                                             // 1859
      };                                                                                                                // 1860
      // 1861
      IframeTransport.prototype.postMessage = function (type, data) {                                                    // 1862
        var that = this;                                                                                              // 1863
        that.iframeObj.post(that.window_id + type + (data || ''), that.origin);                                       // 1864
      };                                                                                                                // 1865
      // 1866
      IframeTransport.prototype.doSend = function (message) {                                                           // 1867
        this.postMessage('m', message);                                                                               // 1868
      };                                                                                                                // 1869
      // 1870
      IframeTransport.enabled = function () {                                                                            // 1871
        // postMessage misbehaves in konqueror 4.6.5 - the messages are delivered with                                // 1872
        // huge delay, or not at all.                                                                                 // 1873
        var konqueror = navigator && navigator.userAgent && navigator.userAgent.indexOf('Konqueror') !== -1;          // 1874
        return ((typeof _window.postMessage === 'function' ||                                                         // 1875
          typeof _window.postMessage === 'object') && (!konqueror));                                            // 1876
      };                                                                                                                // 1877
      //         [*] End of lib/trans-iframe.js                                                                         // 1878
      // 1879
      // 1880
      //         [*] Including lib/trans-iframe-within.js                                                               // 1881
      /*                                                                                                                // 1882
       * ***** BEGIN LICENSE BLOCK *****                                                                                // 1883
       * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 1884
       *                                                                                                                // 1885
       * For the license see COPYING.                                                                                   // 1886
       * ***** END LICENSE BLOCK *****                                                                                  // 1887
       */                                                                                                               // 1888
      // 1889
      var curr_window_id;                                                                                               // 1890
      // 1891
      var postMessage = function (type, data) {                                                                         // 1892
        if (parent !== _window) {                                                                                      // 1893
          parent.postMessage(curr_window_id + type + (data || ''), '*');                                            // 1894
        } else {                                                                                                      // 1895
          utils.log("Can't postMessage, no parent window.", type, data);                                            // 1896
        }                                                                                                             // 1897
      };                                                                                                                // 1898
      // 1899
      var FacadeJS = function () { };                                                                                     // 1900
      FacadeJS.prototype._didClose = function (code, reason) {                                                          // 1901
        postMessage('t', utils.closeFrame(code, reason));                                                             // 1902
      };                                                                                                                // 1903
      FacadeJS.prototype._didMessage = function (frame) {                                                               // 1904
        postMessage('t', frame);                                                                                      // 1905
      };                                                                                                                // 1906
      FacadeJS.prototype._doSend = function (data) {                                                                    // 1907
        this._transport.doSend(data);                                                                                 // 1908
      };                                                                                                                // 1909
      FacadeJS.prototype._doCleanup = function () {                                                                     // 1910
        this._transport.doCleanup();                                                                                  // 1911
      };                                                                                                                // 1912
      // 1913
      utils.parent_origin = undefined;                                                                                  // 1914
      // 1915
      SockJS.bootstrap_iframe = function () {                                                                            // 1916
        var facade;                                                                                                   // 1917
        curr_window_id = _document.location.hash.slice(1);                                                            // 1918
        var onMessage = function (e) {                                                                                 // 1919
          if (e.source !== parent) return;                                                                           // 1920
          if (typeof utils.parent_origin === 'undefined')                                                            // 1921
            utils.parent_origin = e.origin;                                                                       // 1922
          if (e.origin !== utils.parent_origin) return;                                                             // 1923
          // 1924
          var window_id = e.data.slice(0, 8);                                                                       // 1925
          var type = e.data.slice(8, 9);                                                                            // 1926
          var data = e.data.slice(9);                                                                               // 1927
          if (window_id !== curr_window_id) return;                                                                 // 1928
          switch (type) {                                                                                            // 1929
            case 's':                                                                                                 // 1930
              var p = JSON.parse(data);                                                                             // 1931
              var version = p[0];                                                                                   // 1932
              var protocol = p[1];                                                                                  // 1933
              var trans_url = p[2];                                                                                 // 1934
              var base_url = p[3];                                                                                  // 1935
              if (version !== SockJS.version) {                                                                     // 1936
                utils.log("Incompatibile SockJS! Main site uses:" +                                               // 1937
                  " \"" + version + "\", the iframe:" +                                                   // 1938
                  " \"" + SockJS.version + "\".");                                                        // 1939
              }                                                                                                     // 1940
              if (!utils.flatUrl(trans_url) || !utils.flatUrl(base_url)) {                                          // 1941
                utils.log("Only basic urls are supported in SockJS");                                             // 1942
                return;                                                                                           // 1943
              }                                                                                                     // 1944
              // 1945
              if (!utils.isSameOriginUrl(trans_url) ||                                                              // 1946
                !utils.isSameOriginUrl(base_url)) {                                                               // 1947
                utils.log("Can't connect to different domain from within an " +                                   // 1948
                  "iframe. (" + JSON.stringify([_window.location.href, trans_url, base_url]) +            // 1949
                  ")");                                                                                   // 1950
                return;                                                                                           // 1951
              }                                                                                                     // 1952
              facade = new FacadeJS();                                                                              // 1953
              facade._transport = new FacadeJS[protocol](facade, trans_url, base_url);                              // 1954
              break;                                                                                                // 1955
            case 'm':                                                                                                 // 1956
              facade._doSend(data);                                                                                 // 1957
              break;                                                                                                // 1958
            case 'c':                                                                                                 // 1959
              if (facade)                                                                                           // 1960
                facade._doCleanup();                                                                              // 1961
              facade = null;                                                                                        // 1962
              break;                                                                                                // 1963
          }                                                                                                         // 1964
        };                                                                                                            // 1965
        // 1966
        // alert('test ticker');                                                                                      // 1967
        // facade = new FacadeJS();                                                                                   // 1968
        // facade._transport = new FacadeJS['w-iframe-xhr-polling'](facade, 'http://host.com:9999/ticker/12/basd');   // 1969
        // 1970
        utils.attachMessage(onMessage);                                                                               // 1971
        // 1972
        // Start                                                                                                      // 1973
        postMessage('s');                                                                                             // 1974
      };                                                                                                                // 1975
      //         [*] End of lib/trans-iframe-within.js                                                                  // 1976
      // 1977
      // 1978
      //         [*] Including lib/info.js                                                                              // 1979
      /*                                                                                                                // 1980
       * ***** BEGIN LICENSE BLOCK *****                                                                                // 1981
       * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 1982
       *                                                                                                                // 1983
       * For the license see COPYING.                                                                                   // 1984
       * ***** END LICENSE BLOCK *****                                                                                  // 1985
       */                                                                                                               // 1986
      // 1987
      var InfoReceiver = function (base_url, AjaxObject) {                                                               // 1988
        var that = this;                                                                                              // 1989
        utils.delay(function () { that.doXhr(base_url, AjaxObject); });                                                   // 1990
      };                                                                                                                // 1991
      // 1992
      InfoReceiver.prototype = new EventEmitter(['finish']);                                                            // 1993
      // 1994
      InfoReceiver.prototype.doXhr = function (base_url, AjaxObject) {                                                   // 1995
        var that = this;                                                                                              // 1996
        var t0 = (new Date()).getTime();                                                                              // 1997
        // 1998
        // <METEOR>                                                                                                       // 1999
        // https://github.com/sockjs/sockjs-client/pull/129                                                             // 2000
        // var xo = new AjaxObject('GET', base_url + '/info');                                                          // 2001
        // 2002
        var xo = new AjaxObject(                                                                                      // 2003
          // add cachebusting parameter to url to work around a chrome bug:                                           // 2004
          // https://code.google.com/p/chromium/issues/detail?id=263981                                               // 2005
          // or misbehaving proxies.                                                                                  // 2006
          'GET', base_url + '/info?cb=' + utils.random_string(10))                                                    // 2007
        // </METEOR>                                                                                                      // 2008
        // 2009
        var tref = utils.delay(8000,                                                                                  // 2010
          function () { xo.ontimeout(); });                                                          // 2011
        // 2012
        xo.onfinish = function (status, text) {                                                                        // 2013
          clearTimeout(tref);                                                                                       // 2014
          tref = null;                                                                                              // 2015
          if (status === 200) {                                                                                     // 2016
            var rtt = (new Date()).getTime() - t0;                                                                // 2017
            var info = JSON.parse(text);                                                                          // 2018
            if (typeof info !== 'object') info = {};                                                              // 2019
            that.emit('finish', info, rtt);                                                                       // 2020
          } else {                                                                                                  // 2021
            that.emit('finish');                                                                                  // 2022
          }                                                                                                         // 2023
        };                                                                                                            // 2024
        xo.ontimeout = function () {                                                                                   // 2025
          xo.close();                                                                                               // 2026
          that.emit('finish');                                                                                      // 2027
        };                                                                                                            // 2028
      };                                                                                                                // 2029
      // 2030
      var InfoReceiverIframe = function (base_url) {                                                                     // 2031
        var that = this;                                                                                              // 2032
        var go = function () {                                                                                         // 2033
          var ifr = new IframeTransport();                                                                          // 2034
          ifr.protocol = 'w-iframe-info-receiver';                                                                  // 2035
          var fun = function (r) {                                                                                   // 2036
            if (typeof r === 'string' && r.substr(0, 1) === 'm') {                                                 // 2037
              var d = JSON.parse(r.substr(1));                                                                  // 2038
              var info = d[0], rtt = d[1];                                                                      // 2039
              that.emit('finish', info, rtt);                                                                   // 2040
            } else {                                                                                              // 2041
              that.emit('finish');                                                                              // 2042
            }                                                                                                     // 2043
            ifr.doCleanup();                                                                                      // 2044
            ifr = null;                                                                                           // 2045
          };                                                                                                        // 2046
          var mock_ri = {                                                                                           // 2047
            _options: {},                                                                                         // 2048
            _didClose: fun,                                                                                       // 2049
            _didMessage: fun                                                                                      // 2050
          };                                                                                                        // 2051
          ifr.i_constructor(mock_ri, base_url, base_url);                                                           // 2052
        }                                                                                                             // 2053
        if (!_document.body) {                                                                                         // 2054
          utils.attachEvent('load', go);                                                                            // 2055
        } else {                                                                                                      // 2056
          go();                                                                                                     // 2057
        }                                                                                                             // 2058
      };                                                                                                                // 2059
      InfoReceiverIframe.prototype = new EventEmitter(['finish']);                                                      // 2060
      // 2061
      // 2062
      var InfoReceiverFake = function () {                                                                               // 2063
        // It may not be possible to do cross domain AJAX to get the info                                             // 2064
        // data, for example for IE7. But we want to run JSONP, so let's                                              // 2065
        // fake the response, with rtt=2s (rto=6s).                                                                   // 2066
        var that = this;                                                                                              // 2067
        utils.delay(function () {                                                                                      // 2068
          that.emit('finish', {}, 2000);                                                                            // 2069
        });                                                                                                           // 2070
      };                                                                                                                // 2071
      InfoReceiverFake.prototype = new EventEmitter(['finish']);                                                        // 2072
      // 2073
      var createInfoReceiver = function (base_url) {                                                                     // 2074
        if (utils.isSameOriginUrl(base_url)) {                                                                        // 2075
          // If, for some reason, we have SockJS locally - there's no                                               // 2076
          // need to start up the complex machinery. Just use ajax.                                                 // 2077
          return new InfoReceiver(base_url, utils.XHRLocalObject);                                                  // 2078
        }                                                                                                             // 2079
        switch (utils.isXHRCorsCapable()) {                                                                           // 2080
          case 1:                                                                                                       // 2081
            // XHRLocalObject -> no_credentials=true                                                                  // 2082
            return new InfoReceiver(base_url, utils.XHRLocalObject);                                                  // 2083
          case 2:                                                                                                       // 2084
            // <METEOR>                                                                                                       // 2085
            // https://github.com/sockjs/sockjs-client/issues/79                                                              // 2086
            // XDR doesn't work across different schemes                                                              // 2087
            // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx
            if (utils.isSameOriginScheme(base_url))                                                                   // 2089
              return new InfoReceiver(base_url, utils.XDRObject);                                                   // 2090
            else                                                                                                      // 2091
              return new InfoReceiverFake();                                                                        // 2092
          // </METEOR>                                                                                                      // 2093
          case 3:                                                                                                       // 2094
            // Opera                                                                                                  // 2095
            return new InfoReceiverIframe(base_url);                                                                  // 2096
          default:                                                                                                      // 2097
            // IE 7                                                                                                   // 2098
            return new InfoReceiverFake();                                                                            // 2099
        };                                                                                                            // 2100
      };                                                                                                                // 2101
      // 2102
      // 2103
      var WInfoReceiverIframe = FacadeJS['w-iframe-info-receiver'] = function (ri, _trans_url, base_url) {               // 2104
        var ir = new InfoReceiver(base_url, utils.XHRLocalObject);                                                    // 2105
        ir.onfinish = function (info, rtt) {                                                                           // 2106
          ri._didMessage('m' + JSON.stringify([info, rtt]));                                                          // 2107
          ri._didClose();                                                                                           // 2108
        }                                                                                                             // 2109
      };                                                                                                                // 2110
      WInfoReceiverIframe.prototype.doCleanup = function () { };                                                          // 2111
      //         [*] End of lib/info.js                                                                                 // 2112
      // 2113
      // 2114
      //         [*] Including lib/trans-iframe-eventsource.js                                                          // 2115
      /*                                                                                                                // 2116
       * ***** BEGIN LICENSE BLOCK *****                                                                                // 2117
       * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 2118
       *                                                                                                                // 2119
       * For the license see COPYING.                                                                                   // 2120
       * ***** END LICENSE BLOCK *****                                                                                  // 2121
       */                                                                                                               // 2122
      // 2123
      var EventSourceIframeTransport = SockJS['iframe-eventsource'] = function () {                                     // 2124
        var that = this;                                                                                              // 2125
        that.protocol = 'w-iframe-eventsource';                                                                       // 2126
        that.i_constructor.apply(that, arguments);                                                                    // 2127
      };                                                                                                                // 2128
      // 2129
      EventSourceIframeTransport.prototype = new IframeTransport();                                                     // 2130
      // 2131
      EventSourceIframeTransport.enabled = function () {                                                                // 2132
        return ('EventSource' in _window) && IframeTransport.enabled();                                               // 2133
      };                                                                                                                // 2134
      // 2135
      EventSourceIframeTransport.need_body = true;                                                                      // 2136
      EventSourceIframeTransport.roundTrips = 3; // html, javascript, eventsource                                       // 2137
      // 2138
      // 2139
      // w-iframe-eventsource                                                                                           // 2140
      var EventSourceTransport = FacadeJS['w-iframe-eventsource'] = function (ri, trans_url) {                           // 2141
        this.run(ri, trans_url, '/eventsource', EventSourceReceiver, utils.XHRLocalObject);                           // 2142
      }                                                                                                                 // 2143
      EventSourceTransport.prototype = new AjaxBasedTransport();                                                        // 2144
      //         [*] End of lib/trans-iframe-eventsource.js                                                             // 2145
      // 2146
      // 2147
      //         [*] Including lib/trans-iframe-xhr-polling.js                                                          // 2148
      /*                                                                                                                // 2149
       * ***** BEGIN LICENSE BLOCK *****                                                                                // 2150
       * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 2151
       *                                                                                                                // 2152
       * For the license see COPYING.                                                                                   // 2153
       * ***** END LICENSE BLOCK *****                                                                                  // 2154
       */                                                                                                               // 2155
      // 2156
      var XhrPollingIframeTransport = SockJS['iframe-xhr-polling'] = function () {                                      // 2157
        var that = this;                                                                                              // 2158
        that.protocol = 'w-iframe-xhr-polling';                                                                       // 2159
        that.i_constructor.apply(that, arguments);                                                                    // 2160
      };                                                                                                                // 2161
      // 2162
      XhrPollingIframeTransport.prototype = new IframeTransport();                                                      // 2163
      // 2164
      XhrPollingIframeTransport.enabled = function () {                                                                 // 2165
        return _window.XMLHttpRequest && IframeTransport.enabled();                                                   // 2166
      };                                                                                                                // 2167
      // 2168
      XhrPollingIframeTransport.need_body = true;                                                                       // 2169
      XhrPollingIframeTransport.roundTrips = 3; // html, javascript, xhr                                                // 2170
      // 2171
      // 2172
      // w-iframe-xhr-polling                                                                                           // 2173
      var XhrPollingITransport = FacadeJS['w-iframe-xhr-polling'] = function (ri, trans_url) {                           // 2174
        this.run(ri, trans_url, '/xhr', XhrReceiver, utils.XHRLocalObject);                                           // 2175
      };                                                                                                                // 2176
      // 2177
      XhrPollingITransport.prototype = new AjaxBasedTransport();                                                        // 2178
      //         [*] End of lib/trans-iframe-xhr-polling.js                                                             // 2179
      // 2180
      // 2181
      //         [*] Including lib/trans-iframe-htmlfile.js                                                             // 2182
      /*                                                                                                                // 2183
       * ***** BEGIN LICENSE BLOCK *****                                                                                // 2184
       * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 2185
       *                                                                                                                // 2186
       * For the license see COPYING.                                                                                   // 2187
       * ***** END LICENSE BLOCK *****                                                                                  // 2188
       */                                                                                                               // 2189
      // 2190
      // This transport generally works in any browser, but will cause a                                                // 2191
      // spinning cursor to appear in any browser other than IE.                                                        // 2192
      // We may test this transport in all browsers - why not, but in                                                   // 2193
      // production it should be only run in IE.                                                                        // 2194
      // 2195
      var HtmlFileIframeTransport = SockJS['iframe-htmlfile'] = function () {                                           // 2196
        var that = this;                                                                                              // 2197
        that.protocol = 'w-iframe-htmlfile';                                                                          // 2198
        that.i_constructor.apply(that, arguments);                                                                    // 2199
      };                                                                                                                // 2200
      // 2201
      // Inheritance.                                                                                                   // 2202
      HtmlFileIframeTransport.prototype = new IframeTransport();                                                        // 2203
      // 2204
      HtmlFileIframeTransport.enabled = function () {                                                                    // 2205
        return IframeTransport.enabled();                                                                             // 2206
      };                                                                                                                // 2207
      // 2208
      HtmlFileIframeTransport.need_body = true;                                                                         // 2209
      HtmlFileIframeTransport.roundTrips = 3; // html, javascript, htmlfile                                             // 2210
      // 2211
      // 2212
      // w-iframe-htmlfile                                                                                              // 2213
      var HtmlFileTransport = FacadeJS['w-iframe-htmlfile'] = function (ri, trans_url) {                                 // 2214
        this.run(ri, trans_url, '/htmlfile', HtmlfileReceiver, utils.XHRLocalObject);                                 // 2215
      };                                                                                                                // 2216
      HtmlFileTransport.prototype = new AjaxBasedTransport();                                                           // 2217
      //         [*] End of lib/trans-iframe-htmlfile.js                                                                // 2218
      // 2219
      // 2220
      //         [*] Including lib/trans-polling.js                                                                     // 2221
      /*                                                                                                                // 2222
       * ***** BEGIN LICENSE BLOCK *****                                                                                // 2223
       * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 2224
       *                                                                                                                // 2225
       * For the license see COPYING.                                                                                   // 2226
       * ***** END LICENSE BLOCK *****                                                                                  // 2227
       */                                                                                                               // 2228
      // 2229
      var Polling = function (ri, Receiver, recv_url, AjaxObject) {                                                      // 2230
        var that = this;                                                                                              // 2231
        that.ri = ri;                                                                                                 // 2232
        that.Receiver = Receiver;                                                                                     // 2233
        that.recv_url = recv_url;                                                                                     // 2234
        that.AjaxObject = AjaxObject;                                                                                 // 2235
        that._scheduleRecv();                                                                                         // 2236
      };                                                                                                                // 2237
      // 2238
      Polling.prototype._scheduleRecv = function () {                                                                    // 2239
        var that = this;                                                                                              // 2240
        var poll = that.poll = new that.Receiver(that.recv_url, that.AjaxObject);                                     // 2241
        var msg_counter = 0;                                                                                          // 2242
        poll.onmessage = function (e) {                                                                                // 2243
          msg_counter += 1;                                                                                         // 2244
          that.ri._didMessage(e.data);                                                                              // 2245
        };                                                                                                            // 2246
        poll.onclose = function (e) {                                                                                  // 2247
          that.poll = poll = poll.onmessage = poll.onclose = null;                                                  // 2248
          if (!that.poll_is_closing) {                                                                              // 2249
            if (e.reason === 'permanent') {                                                                       // 2250
              that.ri._didClose(1006, 'Polling error (' + e.reason + ')');                                      // 2251
            } else {                                                                                              // 2252
              that._scheduleRecv();                                                                             // 2253
            }                                                                                                     // 2254
          }                                                                                                         // 2255
        };                                                                                                            // 2256
      };                                                                                                                // 2257
      // 2258
      Polling.prototype.abort = function () {                                                                            // 2259
        var that = this;                                                                                              // 2260
        that.poll_is_closing = true;                                                                                  // 2261
        if (that.poll) {                                                                                              // 2262
          that.poll.abort();                                                                                        // 2263
        }                                                                                                             // 2264
      };                                                                                                                // 2265
      //         [*] End of lib/trans-polling.js                                                                        // 2266
      // 2267
      // 2268
      //         [*] Including lib/trans-receiver-eventsource.js                                                        // 2269
      /*                                                                                                                // 2270
       * ***** BEGIN LICENSE BLOCK *****                                                                                // 2271
       * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 2272
       *                                                                                                                // 2273
       * For the license see COPYING.                                                                                   // 2274
       * ***** END LICENSE BLOCK *****                                                                                  // 2275
       */                                                                                                               // 2276
      // 2277
      var EventSourceReceiver = function (url) {                                                                         // 2278
        var that = this;                                                                                              // 2279
        var es = new EventSource(url);                                                                                // 2280
        es.onmessage = function (e) {                                                                                  // 2281
          that.dispatchEvent(new SimpleEvent('message',                                                             // 2282
            { 'data': unescape(e.data) }));                                          // 2283
        };                                                                                                            // 2284
        that.es_close = es.onerror = function (e, abort_reason) {                                                      // 2285
          // ES on reconnection has readyState = 0 or 1.                                                            // 2286
          // on network error it's CLOSED = 2                                                                       // 2287
          var reason = abort_reason ? 'user' :                                                                      // 2288
            (es.readyState !== 2 ? 'network' : 'permanent');                                                      // 2289
          that.es_close = es.onmessage = es.onerror = null;                                                         // 2290
          // EventSource reconnects automatically.                                                                  // 2291
          es.close();                                                                                               // 2292
          es = null;                                                                                                // 2293
          // Safari and chrome < 15 crash if we close window before                                                 // 2294
          // waiting for ES cleanup. See:                                                                           // 2295
          //   https://code.google.com/p/chromium/issues/detail?id=89155                                            // 2296
          utils.delay(200, function () {                                                                             // 2297
            that.dispatchEvent(new SimpleEvent('close', { reason: reason }));                           // 2298
          });                                                                                           // 2299
        };                                                                                                            // 2300
      };                                                                                                                // 2301
      // 2302
      EventSourceReceiver.prototype = new REventTarget();                                                               // 2303
      // 2304
      EventSourceReceiver.prototype.abort = function () {                                                                // 2305
        var that = this;                                                                                              // 2306
        if (that.es_close) {                                                                                          // 2307
          that.es_close({}, true);                                                                                  // 2308
        }                                                                                                             // 2309
      };                                                                                                                // 2310
      //         [*] End of lib/trans-receiver-eventsource.js                                                           // 2311
      // 2312
      // 2313
      //         [*] Including lib/trans-receiver-htmlfile.js                                                           // 2314
      /*                                                                                                                // 2315
       * ***** BEGIN LICENSE BLOCK *****                                                                                // 2316
       * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 2317
       *                                                                                                                // 2318
       * For the license see COPYING.                                                                                   // 2319
       * ***** END LICENSE BLOCK *****                                                                                  // 2320
       */                                                                                                               // 2321
      // 2322
      var _is_ie_htmlfile_capable;                                                                                      // 2323
      var isIeHtmlfileCapable = function () {                                                                            // 2324
        if (_is_ie_htmlfile_capable === undefined) {                                                                  // 2325
          if ('ActiveXObject' in _window) {                                                                         // 2326
            try {                                                                                                 // 2327
              _is_ie_htmlfile_capable = !!new ActiveXObject('htmlfile');                                        // 2328
            } catch (x) { }                                                                                        // 2329
          } else {                                                                                                  // 2330
            _is_ie_htmlfile_capable = false;                                                                      // 2331
          }                                                                                                         // 2332
        }                                                                                                             // 2333
        return _is_ie_htmlfile_capable;                                                                               // 2334
      };                                                                                                                // 2335
      // 2336
      // 2337
      var HtmlfileReceiver = function (url) {                                                                            // 2338
        var that = this;                                                                                              // 2339
        utils.polluteGlobalNamespace();                                                                               // 2340
        // 2341
        that.id = 'a' + utils.random_string(6, 26);                                                                   // 2342
        url += ((url.indexOf('?') === -1) ? '?' : '&') +                                                              // 2343
          'c=' + escape(WPrefix + '.' + that.id);                                                                   // 2344
        // 2345
        var constructor = isIeHtmlfileCapable() ?                                                                     // 2346
          utils.createHtmlfile : utils.createIframe;                                                                // 2347
        // 2348
        var iframeObj;                                                                                                // 2349
        _window[WPrefix][that.id] = {                                                                                 // 2350
          start: function () {                                                                                      // 2351
            iframeObj.loaded();                                                                                   // 2352
          },                                                                                                        // 2353
          message: function (data) {                                                                                // 2354
            that.dispatchEvent(new SimpleEvent('message', { 'data': data }));                                       // 2355
          },                                                                                                        // 2356
          stop: function () {                                                                                       // 2357
            that.iframe_close({}, 'network');                                                                     // 2358
          }                                                                                                         // 2359
        };                                                                                                            // 2360
        that.iframe_close = function (e, abort_reason) {                                                               // 2361
          iframeObj.cleanup();                                                                                      // 2362
          that.iframe_close = iframeObj = null;                                                                     // 2363
          delete _window[WPrefix][that.id];                                                                         // 2364
          that.dispatchEvent(new SimpleEvent('close', { reason: abort_reason }));                                     // 2365
        };                                                                                                            // 2366
        iframeObj = constructor(url, function (e) {                                                                    // 2367
          that.iframe_close({}, 'permanent');                                               // 2368
        });                                                                                   // 2369
      };                                                                                                                // 2370
      // 2371
      HtmlfileReceiver.prototype = new REventTarget();                                                                  // 2372
      // 2373
      HtmlfileReceiver.prototype.abort = function () {                                                                   // 2374
        var that = this;                                                                                              // 2375
        if (that.iframe_close) {                                                                                      // 2376
          that.iframe_close({}, 'user');                                                                            // 2377
        }                                                                                                             // 2378
      };                                                                                                                // 2379
      //         [*] End of lib/trans-receiver-htmlfile.js                                                              // 2380
      // 2381
      // 2382
      //         [*] Including lib/trans-receiver-xhr.js                                                                // 2383
      /*                                                                                                                // 2384
       * ***** BEGIN LICENSE BLOCK *****                                                                                // 2385
       * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 2386
       *                                                                                                                // 2387
       * For the license see COPYING.                                                                                   // 2388
       * ***** END LICENSE BLOCK *****                                                                                  // 2389
       */                                                                                                               // 2390
      // 2391
      var XhrReceiver = function (url, AjaxObject) {                                                                     // 2392
        var that = this;                                                                                              // 2393
        var buf_pos = 0;                                                                                              // 2394
        // 2395
        that.xo = new AjaxObject('POST', url, null);                                                                  // 2396
        that.xo.onchunk = function (status, text) {                                                                    // 2397
          if (status !== 200) return;                                                                               // 2398
          while (1) {                                                                                               // 2399
            var buf = text.slice(buf_pos);                                                                        // 2400
            var p = buf.indexOf('\n');                                                                            // 2401
            if (p === -1) break;                                                                                  // 2402
            buf_pos += p + 1;                                                                                       // 2403
            var msg = buf.slice(0, p);                                                                            // 2404
            that.dispatchEvent(new SimpleEvent('message', { data: msg }));                                          // 2405
          }                                                                                                         // 2406
        };                                                                                                            // 2407
        that.xo.onfinish = function (status, text) {                                                                   // 2408
          that.xo.onchunk(status, text);                                                                            // 2409
          that.xo = null;                                                                                           // 2410
          var reason = status === 200 ? 'network' : 'permanent';                                                    // 2411
          that.dispatchEvent(new SimpleEvent('close', { reason: reason }));                                           // 2412
        }                                                                                                             // 2413
      };                                                                                                                // 2414
      // 2415
      XhrReceiver.prototype = new REventTarget();                                                                       // 2416
      // 2417
      XhrReceiver.prototype.abort = function () {                                                                        // 2418
        var that = this;                                                                                              // 2419
        if (that.xo) {                                                                                                // 2420
          that.xo.close();                                                                                          // 2421
          that.dispatchEvent(new SimpleEvent('close', { reason: 'user' }));                                           // 2422
          that.xo = null;                                                                                           // 2423
        }                                                                                                             // 2424
      };                                                                                                                // 2425
      //         [*] End of lib/trans-receiver-xhr.js                                                                   // 2426
      // 2427
      // 2428
      //         [*] Including lib/test-hooks.js                                                                        // 2429
      /*                                                                                                                // 2430
       * ***** BEGIN LICENSE BLOCK *****                                                                                // 2431
       * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 2432
       *                                                                                                                // 2433
       * For the license see COPYING.                                                                                   // 2434
       * ***** END LICENSE BLOCK *****                                                                                  // 2435
       */                                                                                                               // 2436
      // 2437
      // For testing                                                                                                    // 2438
      SockJS.getUtils = function () {                                                                                     // 2439
        return utils;                                                                                                 // 2440
      };                                                                                                                // 2441
      // 2442
      SockJS.getIframeTransport = function () {                                                                           // 2443
        return IframeTransport;                                                                                       // 2444
      };                                                                                                                // 2445
      //         [*] End of lib/test-hooks.js                                                                           // 2446
      // 2447
      return SockJS;                                                                                  // 2448
    })();                                                                                                   // 2449
    if ('_sockjs_onload' in window) setTimeout(_sockjs_onload, 1);                                                    // 2450
    // 2451
    // AMD compliance                                                                                                 // 2452
    if (typeof define === 'function' && define.amd) {                                                                 // 2453
      define('sockjs', [], function () { return SockJS; });                                                             // 2454
    }                                                                                                                 // 2455
    //     [*] End of lib/index.js                                                                                    // 2456
    // 2457
    // [*] End of lib/all.js                                                                                          // 2458
    // 2459
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }).call(this);






  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                //
    // packages/ddp-client/stream_client_sockjs.js                                                                    //
    //                                                                                                                //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // @param url {String} URL to Meteor app                                                                          // 1
    //   "http://subdomain.meteor.com/" or "/" or                                                                     // 2
    //   "ddp+sockjs://foo-**.meteor.com/sockjs"                                                                      // 3
    LivedataTest.ClientStream = function (url, options) {                                                             // 4
      var self = this;                                                                                                // 5
      self.options = _.extend({                                                                                       // 6
        retry: true                                                                                                   // 7
      }, options);                                                                                                    // 8
      self._initCommon(self.options);                                                                                 // 9
      // 10
      //// Constants                                                                                                  // 11
      // 12
      // 13
      // how long between hearing heartbeat from the server until we declare                                          // 14
      // the connection dead. heartbeats come every 45s (stream_server.js)                                            // 15
      //                                                                                                              // 16
      // NOTE: this is a older timeout mechanism. We now send heartbeats at                                           // 17
      // the DDP level (https://github.com/meteor/meteor/pull/1865), and                                              // 18
      // expect those timeouts to kill a non-responsive connection before                                             // 19
      // this timeout fires. This is kept around for compatibility (when                                              // 20
      // talking to a server that doesn't support DDP heartbeats) and can be                                          // 21
      // removed later.                                                                                               // 22
      self.HEARTBEAT_TIMEOUT = 100 * 1000;                                                                              // 23
      // 24
      self.rawUrl = url;                                                                                              // 25
      self.socket = null;                                                                                             // 26
      // 27
      self.heartbeatTimer = null;                                                                                     // 28
      // 29
      // Listen to global 'online' event if we are running in a browser.                                              // 30
      // (IE8 does not support addEventListener)                                                                      // 31
      if (typeof window !== 'undefined' && window.addEventListener)                                                   // 32
        window.addEventListener("online", _.bind(self._online, self),                                                 // 33
          false /* useCapture. make FF3.6 happy. */);                                           // 34
      // 35
      //// Kickoff!                                                                                                   // 36
      self._launchConnection();                                                                                       // 37
    };                                                                                                                // 38
    // 39
    _.extend(LivedataTest.ClientStream.prototype, {                                                                   // 40
      // 41
      // data is a utf8 string. Data sent while not connected is dropped on                                           // 42
      // the floor, and it is up the user of this API to retransmit lost                                              // 43
      // messages on 'reset'                                                                                          // 44
      send: function (data) {                                                                                         // 45
        var self = this;                                                                                              // 46
        if (self.currentStatus.connected) {                                                                           // 47
          self.socket.send(data);                                                                                     // 48
        }                                                                                                             // 49
      },                                                                                                              // 50
      // 51
      // Changes where this connection points                                                                         // 52
      _changeUrl: function (url) {                                                                                    // 53
        var self = this;                                                                                              // 54
        self.rawUrl = url;                                                                                            // 55
      },                                                                                                              // 56
      // 57
      _connected: function () {                                                                                       // 58
        var self = this;                                                                                              // 59
        // 60
        if (self.connectionTimer) {                                                                                   // 61
          clearTimeout(self.connectionTimer);                                                                         // 62
          self.connectionTimer = null;                                                                                // 63
        }                                                                                                             // 64
        // 65
        if (self.currentStatus.connected) {                                                                           // 66
          // already connected. do nothing. this probably shouldn't happen.                                           // 67
          return;                                                                                                     // 68
        }                                                                                                             // 69
        // 70
        // update status                                                                                              // 71
        self.currentStatus.status = "connected";                                                                      // 72
        self.currentStatus.connected = true;                                                                          // 73
        self.currentStatus.retryCount = 0;                                                                            // 74
        self.statusChanged();                                                                                         // 75
        // 76
        // fire resets. This must come after status change so that clients                                            // 77
        // can call send from within a reset callback.                                                                // 78
        _.each(self.eventCallbacks.reset, function (callback) { callback(); });                                       // 79
        // 80
      },                                                                                                              // 81
      // 82
      _cleanup: function (maybeError) {                                                                               // 83
        var self = this;                                                                                              // 84
        // 85
        self._clearConnectionAndHeartbeatTimers();                                                                    // 86
        if (self.socket) {                                                                                            // 87
          self.socket.onmessage = self.socket.onclose                                                                 // 88
            = self.socket.onerror = self.socket.onheartbeat = function () { };                                         // 89
          self.socket.close();                                                                                        // 90
          self.socket = null;                                                                                         // 91
        }                                                                                                             // 92
        // 93
        _.each(self.eventCallbacks.disconnect, function (callback) {                                                  // 94
          callback(maybeError);                                                                                       // 95
        });                                                                                                           // 96
      },                                                                                                              // 97
      // 98
      _clearConnectionAndHeartbeatTimers: function () {                                                               // 99
        var self = this;                                                                                              // 100
        if (self.connectionTimer) {                                                                                   // 101
          clearTimeout(self.connectionTimer);                                                                         // 102
          self.connectionTimer = null;                                                                                // 103
        }                                                                                                             // 104
        if (self.heartbeatTimer) {                                                                                    // 105
          clearTimeout(self.heartbeatTimer);                                                                          // 106
          self.heartbeatTimer = null;                                                                                 // 107
        }                                                                                                             // 108
      },                                                                                                              // 109
      // 110
      _heartbeat_timeout: function () {                                                                               // 111
        var self = this;                                                                                              // 112
        Meteor._debug("Connection timeout. No sockjs heartbeat received.");                                           // 113
        self._lostConnection(new DDP.ConnectionError("Heartbeat timed out"));                                         // 114
      },                                                                                                              // 115
      // 116
      _heartbeat_received: function () {                                                                              // 117
        var self = this;                                                                                              // 118
        // If we've already permanently shut down this stream, the timeout is                                         // 119
        // already cleared, and we don't need to set it again.                                                        // 120
        if (self._forcedToDisconnect)                                                                                 // 121
          return;                                                                                                     // 122
        if (self.heartbeatTimer)                                                                                      // 123
          clearTimeout(self.heartbeatTimer);                                                                          // 124
        self.heartbeatTimer = setTimeout(                                                                             // 125
          _.bind(self._heartbeat_timeout, self),                                                                      // 126
          self.HEARTBEAT_TIMEOUT);                                                                                    // 127
      },                                                                                                              // 128
      // 129
      _sockjsProtocolsWhitelist: function () {                                                                        // 130
        // only allow polling protocols. no streaming.  streaming                                                     // 131
        // makes safari spin.                                                                                         // 132
        var protocolsWhitelist = [                                                                                    // 133
          'xdr-polling', 'xhr-polling', 'iframe-xhr-polling', 'jsonp-polling'];                                       // 134
        // 135
        // iOS 4 and 5 and below crash when using websockets over certain                                             // 136
        // proxies. this seems to be resolved with iOS 6. eg                                                          // 137
        // https://github.com/LearnBoost/socket.io/issues/193#issuecomment-7308865.                                   // 138
        //                                                                                                            // 139
        // iOS <4 doesn't support websockets at all so sockjs will just                                               // 140
        // immediately fall back to http                                                                              // 141
        var noWebsockets = navigator &&                                                                               // 142
          /iPhone|iPad|iPod/.test(navigator.userAgent) &&                                                         // 143
          /OS 4_|OS 5_/.test(navigator.userAgent);                                                                // 144
        // 145
        if (!noWebsockets)                                                                                            // 146
          protocolsWhitelist = ['websocket'].concat(protocolsWhitelist);                                              // 147
        // 148
        return protocolsWhitelist;                                                                                    // 149
      },                                                                                                              // 150
      // 151
      _launchConnection: function () {                                                                                // 152
        var self = this;                                                                                              // 153
        self._cleanup(); // cleanup the old socket, if there was one.                                                 // 154
        // 155
        var options = _.extend({                                                                                      // 156
          protocols_whitelist: self._sockjsProtocolsWhitelist()                                                        // 157
        }, self.options._sockjsOptions);                                                                              // 158
        // 159
        // Convert raw URL to SockJS URL each time we open a connection, so that we                                   // 160
        // can connect to random hostnames and get around browser per-host                                            // 161
        // connection limits.                                                                                         // 162
        self.socket = new SockJS(toSockjsUrl(self.rawUrl), undefined, options);                                       // 163
        self.socket.onopen = function (data) {                                                                        // 164
          self._connected();                                                                                          // 165
        };                                                                                                            // 166
        self.socket.onmessage = function (data) {                                                                     // 167
          self._heartbeat_received();                                                                                 // 168
          // 169
          if (self.currentStatus.connected)                                                                           // 170
            _.each(self.eventCallbacks.message, function (callback) {                                                 // 171
              callback(data.data);                                                                                    // 172
            });                                                                                                       // 173
        };                                                                                                            // 174
        self.socket.onclose = function () {                                                                           // 175
          self._lostConnection();                                                                                     // 176
        };                                                                                                            // 177
        self.socket.onerror = function () {                                                                           // 178
          // XXX is this ever called?                                                                                 // 179
          Meteor._debug("stream error", _.toArray(arguments), (new Date()).toDateString());                           // 180
        };                                                                                                            // 181
        // 182
        self.socket.onheartbeat = function () {                                                                      // 183
          self._heartbeat_received();                                                                                 // 184
        };                                                                                                            // 185
        // 186
        if (self.connectionTimer)                                                                                     // 187
          clearTimeout(self.connectionTimer);                                                                         // 188
        self.connectionTimer = setTimeout(function () {                                                               // 189
          self._lostConnection(                                                                                       // 190
            new DDP.ConnectionError("DDP connection timed out"));                                                     // 191
        }, self.CONNECT_TIMEOUT);                                                                                     // 192
      }                                                                                                               // 193
    });                                                                                                               // 194
    // 195
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }).call(this);






  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                //
    // packages/ddp-client/stream_client_common.js                                                                    //
    //                                                                                                                //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // XXX from Underscore.String (http://epeli.github.com/underscore.string/)                                        // 1
    var startsWith = function (str, starts) {                                                                          // 2
      return str.length >= starts.length &&                                                                           // 3
        str.substring(0, starts.length) === starts;                                                                   // 4
    };                                                                                                                // 5
    var endsWith = function (str, ends) {                                                                              // 6
      return str.length >= ends.length &&                                                                             // 7
        str.substring(str.length - ends.length) === ends;                                                             // 8
    };                                                                                                                // 9
    // 10
    // @param url {String} URL to Meteor app, eg:                                                                     // 11
    //   "/" or "madewith.meteor.com" or "https://foo.meteor.com"                                                     // 12
    //   or "ddp+sockjs://ddp--****-foo.meteor.com/sockjs"                                                            // 13
    // @returns {String} URL to the endpoint with the specific scheme and subPath, e.g.                               // 14
    // for scheme "http" and subPath "sockjs"                                                                         // 15
    //   "http://subdomain.meteor.com/sockjs" or "/sockjs"                                                            // 16
    //   or "https://ddp--1234-foo.meteor.com/sockjs"                                                                 // 17
    var translateUrl = function (url, newSchemeBase, subPath) {                                                       // 18
      if (!newSchemeBase) {                                                                                          // 19
        newSchemeBase = "http";                                                                                       // 20
      }                                                                                                               // 21
      // 22
      var ddpUrlMatch = url.match(/^ddp(i?)\+sockjs:\/\//);                                                           // 23
      var httpUrlMatch = url.match(/^http(s?):\/\//);                                                                 // 24
      var newScheme;                                                                                                  // 25
      if (ddpUrlMatch) {                                                                                              // 26
        // Remove scheme and split off the host.                                                                      // 27
        var urlAfterDDP = url.substr(ddpUrlMatch[0].length);                                                          // 28
        newScheme = ddpUrlMatch[1] === "i" ? newSchemeBase : newSchemeBase + "s";                                     // 29
        var slashPos = urlAfterDDP.indexOf('/');                                                                      // 30
        var host =                                                                                                    // 31
          slashPos === -1 ? urlAfterDDP : urlAfterDDP.substr(0, slashPos);                                        // 32
        var rest = slashPos === -1 ? '' : urlAfterDDP.substr(slashPos);                                               // 33
        // 34
        // In the host (ONLY!), change '*' characters into random digits. This                                        // 35
        // allows different stream connections to connect to different hostnames                                      // 36
        // and avoid browser per-hostname connection limits.                                                          // 37
        host = host.replace(/\*/g, function () {                                                                      // 38
          return Math.floor(Random.fraction() * 10);                                                                    // 39
        });                                                                                                           // 40
        // 41
        return newScheme + '://' + host + rest;                                                                       // 42
      } else if (httpUrlMatch) {                                                                                      // 43
        newScheme = !httpUrlMatch[1] ? newSchemeBase : newSchemeBase + "s";                                           // 44
        var urlAfterHttp = url.substr(httpUrlMatch[0].length);                                                        // 45
        url = newScheme + "://" + urlAfterHttp;                                                                       // 46
      }                                                                                                               // 47
      // 48
      // Prefix FQDNs but not relative URLs                                                                           // 49
      if (url.indexOf("://") === -1 && !startsWith(url, "/")) {                                                       // 50
        url = newSchemeBase + "://" + url;                                                                            // 51
      }                                                                                                               // 52
      // 53
      // XXX This is not what we should be doing: if I have a site                                                    // 54
      // deployed at "/foo", then DDP.connect("/") should actually connect                                            // 55
      // to "/", not to "/foo". "/" is an absolute path. (Contrast: if                                                // 56
      // deployed at "/foo", it would be reasonable for DDP.connect("bar")                                            // 57
      // to connect to "/foo/bar").                                                                                   // 58
      //                                                                                                              // 59
      // We should make this properly honor absolute paths rather than                                                // 60
      // forcing the path to be relative to the site root. Simultaneously,                                            // 61
      // we should set DDP_DEFAULT_CONNECTION_URL to include the site                                                 // 62
      // root. See also client_convenience.js #RationalizingRelativeDDPURLs                                           // 63
      url = Meteor._relativeToSiteRootUrl(url);                                                                       // 64
      // 65
      if (endsWith(url, "/"))                                                                                         // 66
        return url + subPath;                                                                                         // 67
      else                                                                                                            // 68
        return url + "/" + subPath;                                                                                   // 69
    };                                                                                                                // 70
    // 71
    toSockjsUrl = function (url) {                                                                                    // 72
      return translateUrl(url, "http", "sockjs");                                                                     // 73
    };                                                                                                                // 74
    // 75
    toWebsocketUrl = function (url) {                                                                                 // 76
      var ret = translateUrl(url, "ws", "websocket");                                                                 // 77
      return ret;                                                                                                     // 78
    };                                                                                                                // 79
    // 80
    LivedataTest.toSockjsUrl = toSockjsUrl;                                                                           // 81
    // 82
    // 83
    _.extend(LivedataTest.ClientStream.prototype, {                                                                   // 84
      // 85
      // Register for callbacks.                                                                                      // 86
      on: function (name, callback) {                                                                                 // 87
        var self = this;                                                                                              // 88
        // 89
        if (name !== 'message' && name !== 'reset' && name !== 'disconnect')                                          // 90
          throw new Error("unknown event type: " + name);                                                             // 91
        // 92
        if (!self.eventCallbacks[name])                                                                               // 93
          self.eventCallbacks[name] = [];                                                                             // 94
        self.eventCallbacks[name].push(callback);                                                                     // 95
      },                                                                                                              // 96
      // 97
      // 98
      _initCommon: function (options) {                                                                               // 99
        var self = this;                                                                                              // 100
        options = options || {};                                                                                      // 101
        // 102
        //// Constants                                                                                                // 103
        // 104
        // how long to wait until we declare the connection attempt                                                   // 105
        // failed.                                                                                                    // 106
        self.CONNECT_TIMEOUT = options.connectTimeoutMs || 10000;                                                     // 107
        // 108
        self.eventCallbacks = {}; // name -> [callback]                                                               // 109
        // 110
        self._forcedToDisconnect = false;                                                                             // 111
        // 112
        //// Reactive status                                                                                          // 113
        self.currentStatus = {                                                                                        // 114
          status: "connecting",                                                                                       // 115
          connected: false,                                                                                           // 116
          retryCount: 0                                                                                               // 117
        };                                                                                                            // 118
        // 119
        // 120
        self.statusListeners = typeof Tracker !== 'undefined' && new Tracker.Dependency;                              // 121
        self.statusChanged = function () {                                                                            // 122
          if (self.statusListeners)                                                                                   // 123
            self.statusListeners.changed();                                                                           // 124
        };                                                                                                            // 125
        // 126
        //// Retry logic                                                                                              // 127
        self._retry = new Retry;                                                                                      // 128
        self.connectionTimer = null;                                                                                  // 129
        // 130
      },                                                                                                              // 131
      // 132
      // Trigger a reconnect.                                                                                         // 133
      reconnect: function (options) {                                                                                 // 134
        var self = this;                                                                                              // 135
        options = options || {};                                                                                      // 136
        // 137
        if (options.url) {                                                                                            // 138
          self._changeUrl(options.url);                                                                               // 139
        }                                                                                                             // 140
        // 141
        if (options._sockjsOptions) {                                                                                 // 142
          self.options._sockjsOptions = options._sockjsOptions;                                                       // 143
        }                                                                                                             // 144
        // 145
        if (self.currentStatus.connected) {                                                                           // 146
          if (options._force || options.url) {                                                                        // 147
            // force reconnect.                                                                                       // 148
            self._lostConnection(new DDP.ForcedReconnectError);                                                       // 149
          } // else, noop.                                                                                            // 150
          return;                                                                                                     // 151
        }                                                                                                             // 152
        // 153
        // if we're mid-connection, stop it.                                                                          // 154
        if (self.currentStatus.status === "connecting") {                                                             // 155
          // Pretend it's a clean close.                                                                              // 156
          self._lostConnection();                                                                                     // 157
        }                                                                                                             // 158
        // 159
        self._retry.clear();                                                                                          // 160
        self.currentStatus.retryCount -= 1; // don't count manual retries                                             // 161
        self._retryNow();                                                                                             // 162
      },                                                                                                              // 163
      // 164
      disconnect: function (options) {                                                                                // 165
        var self = this;                                                                                              // 166
        options = options || {};                                                                                      // 167
        // 168
        // Failed is permanent. If we're failed, don't let people go back                                             // 169
        // online by calling 'disconnect' then 'reconnect'.                                                           // 170
        if (self._forcedToDisconnect)                                                                                 // 171
          return;                                                                                                     // 172
        // 173
        // If _permanent is set, permanently disconnect a stream. Once a stream                                       // 174
        // is forced to disconnect, it can never reconnect. This is for                                               // 175
        // error cases such as ddp version mismatch, where trying again                                               // 176
        // won't fix the problem.                                                                                     // 177
        if (options._permanent) {                                                                                     // 178
          self._forcedToDisconnect = true;                                                                            // 179
        }                                                                                                             // 180
        // 181
        self._cleanup();                                                                                              // 182
        self._retry.clear();                                                                                          // 183
        // 184
        self.currentStatus = {                                                                                        // 185
          status: (options._permanent ? "failed" : "offline"),                                                        // 186
          connected: false,                                                                                           // 187
          retryCount: 0                                                                                               // 188
        };                                                                                                            // 189
        // 190
        if (options._permanent && options._error)                                                                     // 191
          self.currentStatus.reason = options._error;                                                                 // 192
        // 193
        self.statusChanged();                                                                                         // 194
      },                                                                                                              // 195
      // 196
      // maybeError is set unless it's a clean protocol-level close.                                                  // 197
      _lostConnection: function (maybeError) {                                                                        // 198
        var self = this;                                                                                              // 199
        // 200
        self._cleanup(maybeError);                                                                                    // 201
        self._retryLater(maybeError); // sets status. no need to do it here.                                          // 202
      },                                                                                                              // 203
      // 204
      // fired when we detect that we've gone online. try to reconnect                                                // 205
      // immediately.                                                                                                 // 206
      _online: function () {                                                                                          // 207
        // if we've requested to be offline by disconnecting, don't reconnect.                                        // 208
        if (this.currentStatus.status != "offline")                                                                   // 209
          this.reconnect();                                                                                           // 210
      },                                                                                                              // 211
      // 212
      _retryLater: function (maybeError) {                                                                            // 213
        var self = this;                                                                                              // 214
        // 215
        var timeout = 0;                                                                                              // 216
        if (self.options.retry ||                                                                                     // 217
          (maybeError && maybeError.errorType === "DDP.ForcedReconnectError")) {                                    // 218
          timeout = self._retry.retryLater(                                                                           // 219
            self.currentStatus.retryCount,                                                                            // 220
            _.bind(self._retryNow, self)                                                                              // 221
          );                                                                                                          // 222
          self.currentStatus.status = "waiting";                                                                      // 223
          self.currentStatus.retryTime = (new Date()).getTime() + timeout;                                            // 224
        } else {                                                                                                      // 225
          self.currentStatus.status = "failed";                                                                       // 226
          delete self.currentStatus.retryTime;                                                                        // 227
        }                                                                                                             // 228
        // 229
        self.currentStatus.connected = false;                                                                         // 230
        self.statusChanged();                                                                                         // 231
      },                                                                                                              // 232
      // 233
      _retryNow: function () {                                                                                        // 234
        var self = this;                                                                                              // 235
        // 236
        if (self._forcedToDisconnect)                                                                                 // 237
          return;                                                                                                     // 238
        // 239
        self.currentStatus.retryCount += 1;                                                                           // 240
        self.currentStatus.status = "connecting";                                                                     // 241
        self.currentStatus.connected = false;                                                                         // 242
        delete self.currentStatus.retryTime;                                                                          // 243
        self.statusChanged();                                                                                         // 244
        // 245
        self._launchConnection();                                                                                     // 246
      },                                                                                                              // 247
      // 248
      // 249
      // Get current status. Reactive.                                                                                // 250
      status: function () {                                                                                           // 251
        var self = this;                                                                                              // 252
        if (self.statusListeners)                                                                                     // 253
          self.statusListeners.depend();                                                                              // 254
        return self.currentStatus;                                                                                    // 255
      }                                                                                                               // 256
    });                                                                                                               // 257
    // 258
    DDP.ConnectionError = Meteor.makeErrorType(                                                                       // 259
      "DDP.ConnectionError", function (message) {                                                                     // 260
        var self = this;                                                                                              // 261
        self.message = message;                                                                                       // 262
      });                                                                                                               // 263
    // 264
    DDP.ForcedReconnectError = Meteor.makeErrorType(                                                                  // 265
      "DDP.ForcedReconnectError", function () { });                                                                    // 266
    // 267
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }).call(this);






  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                //
    // packages/ddp-client/livedata_common.js                                                                         //
    //                                                                                                                //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    LivedataTest.SUPPORTED_DDP_VERSIONS = DDPCommon.SUPPORTED_DDP_VERSIONS;                                           // 1
    // 2
    // This is private but it's used in a few places. accounts-base uses                                              // 3
    // it to get the current user. Meteor.setTimeout and friends clear                                                // 4
    // it. We can probably find a better way to factor this.                                                          // 5
    DDP._CurrentInvocation = new Meteor.EnvironmentVariable;                                                          // 6
    // 7
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }).call(this);






  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                //
    // packages/ddp-client/random_stream.js                                                                           //
    //                                                                                                                //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Returns the named sequence of pseudo-random values.                                                            // 1
    // The scope will be DDP._CurrentInvocation.get(), so the stream will produce                                     // 2
    // consistent values for method calls on the client and server.                                                   // 3
    DDP.randomStream = function (name) {                                                                              // 4
      var scope = DDP._CurrentInvocation.get();                                                                       // 5
      return DDPCommon.RandomStream.get(scope, name);                                                                 // 6
    };                                                                                                                // 7
    // 8
    // 9
    // 10
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }).call(this);






  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                //
    // packages/ddp-client/livedata_connection.js                                                                     //
    //                                                                                                                //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    if (Meteor.isServer) {                                                                                            // 1
      var path = Npm.require('path');                                                                                 // 2
      var Fiber = Npm.require('fibers');                                                                              // 3
      var Future = Npm.require(path.join('fibers', 'future'));                                                        // 4
    }                                                                                                                 // 5
    // 6
    // @param url {String|Object} URL to Meteor app,                                                                  // 7
    //   or an object as a test hook (see code)                                                                       // 8
    // Options:                                                                                                       // 9
    //   reloadWithOutstanding: is it OK to reload if there are outstanding methods?                                  // 10
    //   headers: extra headers to send on the websockets connection, for                                             // 11
    //     server-to-server DDP only                                                                                  // 12
    //   _sockjsOptions: Specifies options to pass through to the sockjs client                                       // 13
    //   onDDPNegotiationVersionFailure: callback when version negotiation fails.                                     // 14
    //                                                                                                                // 15
    // XXX There should be a way to destroy a DDP connection, causing all                                             // 16
    // outstanding method calls to fail.                                                                              // 17
    //                                                                                                                // 18
    // XXX Our current way of handling failure and reconnection is great                                              // 19
    // for an app (where we want to tolerate being disconnected as an                                                 // 20
    // expect state, and keep trying forever to reconnect) but cumbersome                                             // 21
    // for something like a command line tool that wants to make a                                                    // 22
    // connection, call a method, and print an error if connection                                                    // 23
    // fails. We should have better usability in the latter case (while                                               // 24
    // still transparently reconnecting if it's just a transient failure                                              // 25
    // or the server migrating us).                                                                                   // 26
    var Connection = function (url, options) {                                                                        // 27
      var self = this;                                                                                                // 28
      options = _.extend({                                                                                            // 29
        onConnected: function () { },                                                                                  // 30
        onDDPVersionNegotiationFailure: function (description) {                                                      // 31
          Meteor._debug(description);                                                                                 // 32
        },                                                                                                            // 33
        heartbeatInterval: 17500,                                                                                     // 34
        heartbeatTimeout: 15000,                                                                                      // 35
        npmFayeOptions: {},                                                                                           // 36
        // These options are only for testing.                                                                        // 37
        reloadWithOutstanding: false,                                                                                 // 38
        supportedDDPVersions: DDPCommon.SUPPORTED_DDP_VERSIONS,                                                       // 39
        retry: true,                                                                                                  // 40
        respondToPings: true,                                                                                         // 41
        // When updates are coming within this ms interval, batch them together.                                      // 42
        bufferedWritesInterval: 5,                                                                                    // 43
        // Flush buffers immediately if writes are happening continuously for more than this many ms.                 // 44
        bufferedWritesMaxAge: 500                                                                                     // 45
      }, options);                                                                                                    // 46
      // 47
      // If set, called when we reconnect, queuing method calls _before_ the                                          // 48
      // existing outstanding ones. This is the only data member that is part of the                                  // 49
      // public API!                                                                                                  // 50
      self.onReconnect = null;                                                                                        // 51
      // 52
      // as a test hook, allow passing a stream instead of a url.                                                     // 53
      if (typeof url === "object") {                                                                                  // 54
        self._stream = url;                                                                                           // 55
      } else {                                                                                                        // 56
        self._stream = new LivedataTest.ClientStream(url, {                                                           // 57
          retry: options.retry,                                                                                       // 58
          headers: options.headers,                                                                                   // 59
          _sockjsOptions: options._sockjsOptions,                                                                     // 60
          // Used to keep some tests quiet, or for other cases in which                                               // 61
          // the right thing to do with connection errors is to silently                                              // 62
          // fail (e.g. sending package usage stats). At some point we                                                // 63
          // should have a real API for handling client-stream-level                                                  // 64
          // errors.                                                                                                  // 65
          _dontPrintErrors: options._dontPrintErrors,                                                                 // 66
          connectTimeoutMs: options.connectTimeoutMs,                                                                 // 67
          npmFayeOptions: options.npmFayeOptions                                                                      // 68
        });                                                                                                           // 69
      }                                                                                                               // 70
      // 71
      self._lastSessionId = null;                                                                                     // 72
      self._versionSuggestion = null;  // The last proposed DDP version.                                              // 73
      self._version = null;   // The DDP version agreed on by client and server.                                      // 74
      self._stores = {}; // name -> object with methods                                                               // 75
      self._methodHandlers = {}; // name -> func                                                                      // 76
      self._nextMethodId = 1;                                                                                         // 77
      self._supportedDDPVersions = options.supportedDDPVersions;                                                      // 78
      // 79
      self._heartbeatInterval = options.heartbeatInterval;                                                            // 80
      self._heartbeatTimeout = options.heartbeatTimeout;                                                              // 81
      // 82
      // Tracks methods which the user has tried to call but which have not yet                                       // 83
      // called their user callback (ie, they are waiting on their result or for all                                  // 84
      // of their writes to be written to the local cache). Map from method ID to                                     // 85
      // MethodInvoker object.                                                                                        // 86
      self._methodInvokers = {};                                                                                      // 87
      // 88
      // Tracks methods which the user has called but whose result messages have not                                  // 89
      // arrived yet.                                                                                                 // 90
      //                                                                                                              // 91
      // _outstandingMethodBlocks is an array of blocks of methods. Each block                                        // 92
      // represents a set of methods that can run at the same time. The first block                                   // 93
      // represents the methods which are currently in flight; subsequent blocks                                      // 94
      // must wait for previous blocks to be fully finished before they can be sent                                   // 95
      // to the server.                                                                                               // 96
      //                                                                                                              // 97
      // Each block is an object with the following fields:                                                           // 98
      // - methods: a list of MethodInvoker objects                                                                   // 99
      // - wait: a boolean; if true, this block had a single method invoked with                                      // 100
      //         the "wait" option                                                                                    // 101
      //                                                                                                              // 102
      // There will never be adjacent blocks with wait=false, because the only thing                                  // 103
      // that makes methods need to be serialized is a wait method.                                                   // 104
      //                                                                                                              // 105
      // Methods are removed from the first block when their "result" is                                              // 106
      // received. The entire first block is only removed when all of the in-flight                                   // 107
      // methods have received their results (so the "methods" list is empty) *AND*                                   // 108
      // all of the data written by those methods are visible in the local cache. So                                  // 109
      // it is possible for the first block's methods list to be empty, if we are                                     // 110
      // still waiting for some objects to quiesce.                                                                   // 111
      //                                                                                                              // 112
      // Example:                                                                                                     // 113
      //  _outstandingMethodBlocks = [                                                                                // 114
      //    {wait: false, methods: []},                                                                               // 115
      //    {wait: true, methods: [<MethodInvoker for 'login'>]},                                                     // 116
      //    {wait: false, methods: [<MethodInvoker for 'foo'>,                                                        // 117
      //                            <MethodInvoker for 'bar'>]}]                                                      // 118
      // This means that there were some methods which were sent to the server and                                    // 119
      // which have returned their results, but some of the data written by                                           // 120
      // the methods may not be visible in the local cache. Once all that data is                                     // 121
      // visible, we will send a 'login' method. Once the login method has returned                                   // 122
      // and all the data is visible (including re-running subs if userId changes),                                   // 123
      // we will send the 'foo' and 'bar' methods in parallel.                                                        // 124
      self._outstandingMethodBlocks = [];                                                                             // 125
      // 126
      // method ID -> array of objects with keys 'collection' and 'id', listing                                       // 127
      // documents written by a given method's stub. keys are associated with                                         // 128
      // methods whose stub wrote at least one document, and whose data-done message                                  // 129
      // has not yet been received.                                                                                   // 130
      self._documentsWrittenByStub = {};                                                                              // 131
      // collection -> IdMap of "server document" object. A "server document" has:                                    // 132
      // - "document": the version of the document according the                                                      // 133
      //   server (ie, the snapshot before a stub wrote it, amended by any changes                                    // 134
      //   received from the server)                                                                                  // 135
      //   It is undefined if we think the document does not exist                                                    // 136
      // - "writtenByStubs": a set of method IDs whose stubs wrote to the document                                    // 137
      //   whose "data done" messages have not yet been processed                                                     // 138
      self._serverDocuments = {};                                                                                     // 139
      // 140
      // Array of callbacks to be called after the next update of the local                                           // 141
      // cache. Used for:                                                                                             // 142
      //  - Calling methodInvoker.dataVisible and sub ready callbacks after                                           // 143
      //    the relevant data is flushed.                                                                             // 144
      //  - Invoking the callbacks of "half-finished" methods after reconnect                                         // 145
      //    quiescence. Specifically, methods whose result was received over the old                                  // 146
      //    connection (so we don't re-send it) but whose data had not been made                                      // 147
      //    visible.                                                                                                  // 148
      self._afterUpdateCallbacks = [];                                                                                // 149
      // 150
      // In two contexts, we buffer all incoming data messages and then process them                                  // 151
      // all at once in a single update:                                                                              // 152
      //   - During reconnect, we buffer all data messages until all subs that had                                    // 153
      //     been ready before reconnect are ready again, and all methods that are                                    // 154
      //     active have returned their "data done message"; then                                                     // 155
      //   - During the execution of a "wait" method, we buffer all data messages                                     // 156
      //     until the wait method gets its "data done" message. (If the wait method                                  // 157
      //     occurs during reconnect, it doesn't get any special handling.)                                           // 158
      // all data messages are processed in one update.                                                               // 159
      //                                                                                                              // 160
      // The following fields are used for this "quiescence" process.                                                 // 161
      // 162
      // This buffers the messages that aren't being processed yet.                                                   // 163
      self._messagesBufferedUntilQuiescence = [];                                                                     // 164
      // Map from method ID -> true. Methods are removed from this when their                                         // 165
      // "data done" message is received, and we will not quiesce until it is                                         // 166
      // empty.                                                                                                       // 167
      self._methodsBlockingQuiescence = {};                                                                           // 168
      // map from sub ID -> true for subs that were ready (ie, called the sub                                         // 169
      // ready callback) before reconnect but haven't become ready again yet                                          // 170
      self._subsBeingRevived = {}; // map from sub._id -> true                                                        // 171
      // if true, the next data update should reset all stores. (set during                                           // 172
      // reconnect.)                                                                                                  // 173
      self._resetStores = false;                                                                                      // 174
      // 175
      // name -> array of updates for (yet to be created) collections                                                 // 176
      self._updatesForUnknownStores = {};                                                                             // 177
      // if we're blocking a migration, the retry func                                                                // 178
      self._retryMigrate = null;                                                                                      // 179
      // 180
      self.__flushBufferedWrites = Meteor.bindEnvironment(                                                            // 181
        self._flushBufferedWrites, "flushing DDP buffered writes", self);                                             // 182
      // Collection name -> array of messages.                                                                        // 183
      self._bufferedWrites = {};                                                                                      // 184
      // When current buffer of updates must be flushed at, in ms timestamp.                                          // 185
      self._bufferedWritesFlushAt = null;                                                                             // 186
      // Timeout handle for the next processing of all pending writes                                                 // 187
      self._bufferedWritesFlushHandle = null;                                                                         // 188
      // 189
      self._bufferedWritesInterval = options.bufferedWritesInterval;                                                  // 190
      self._bufferedWritesMaxAge = options.bufferedWritesMaxAge;                                                      // 191
      // 192
      // metadata for subscriptions.  Map from sub ID to object with keys:                                            // 193
      //   - id                                                                                                       // 194
      //   - name                                                                                                     // 195
      //   - params                                                                                                   // 196
      //   - inactive (if true, will be cleaned up if not reused in re-run)                                           // 197
      //   - ready (has the 'ready' message been received?)                                                           // 198
      //   - readyCallback (an optional callback to call when ready)                                                  // 199
      //   - errorCallback (an optional callback to call if the sub terminates with                                   // 200
      //                    an error, XXX COMPAT WITH 1.0.3.1)                                                        // 201
      //   - stopCallback (an optional callback to call when the sub terminates                                       // 202
      //     for any reason, with an error argument if an error triggered the stop)                                   // 203
      self._subscriptions = {};                                                                                       // 204
      // 205
      // Reactive userId.                                                                                             // 206
      self._userId = null;                                                                                            // 207
      self._userIdDeps = new Tracker.Dependency;                                                                      // 208
      // 209
      // Block auto-reload while we're waiting for method responses.                                                  // 210
      if (Meteor.isClient && Package.reload && !options.reloadWithOutstanding) {                                      // 211
        Package.reload.Reload._onMigrate(function (retry) {                                                           // 212
          if (!self._readyToMigrate()) {                                                                              // 213
            if (self._retryMigrate)                                                                                   // 214
              throw new Error("Two migrations in progress?");                                                         // 215
            self._retryMigrate = retry;                                                                               // 216
            return false;                                                                                             // 217
          } else {                                                                                                    // 218
            return [true];                                                                                            // 219
          }                                                                                                           // 220
        });                                                                                                           // 221
      }                                                                                                               // 222
      // 223
      var onMessage = function (raw_msg) {                                                                            // 224
        try {                                                                                                         // 225
          var msg = DDPCommon.parseDDP(raw_msg);                                                                      // 226
        } catch (e) {                                                                                                 // 227
          Meteor._debug("Exception while parsing DDP", e);                                                            // 228
          return;                                                                                                     // 229
        }                                                                                                             // 230
        // 231
        // Any message counts as receiving a pong, as it demonstrates that                                            // 232
        // the server is still alive.                                                                                 // 233
        if (self._heartbeat) {                                                                                        // 234
          self._heartbeat.messageReceived();                                                                          // 235
        }                                                                                                             // 236
        // 237
        if (msg === null || !msg.msg) {                                                                               // 238
          // XXX COMPAT WITH 0.6.6. ignore the old welcome message for back                                           // 239
          // compat.  Remove this 'if' once the server stops sending welcome                                          // 240
          // messages (stream_server.js).                                                                             // 241
          if (!(msg && msg.server_id))                                                                               // 242
            Meteor._debug("discarding invalid livedata message", msg);                                                // 243
          return;                                                                                                     // 244
        }                                                                                                             // 245
        // 246
        if (msg.msg === 'connected') {                                                                                // 247
          self._version = self._versionSuggestion;                                                                    // 248
          self._livedata_connected(msg);                                                                              // 249
          options.onConnected();                                                                                      // 250
        }                                                                                                             // 251
        else if (msg.msg === 'failed') {                                                                              // 252
          if (_.contains(self._supportedDDPVersions, msg.version)) {                                                  // 253
            self._versionSuggestion = msg.version;                                                                    // 254
            self._stream.reconnect({ _force: true });                                                                   // 255
          } else {                                                                                                    // 256
            var description =                                                                                         // 257
              "DDP version negotiation failed; server requested version " + msg.version;                          // 258
            self._stream.disconnect({ _permanent: true, _error: description });                                         // 259
            options.onDDPVersionNegotiationFailure(description);                                                      // 260
          }                                                                                                           // 261
        }                                                                                                             // 262
        else if (msg.msg === 'ping' && options.respondToPings) {                                                      // 263
          self._send({ msg: "pong", id: msg.id });                                                                      // 264
        }                                                                                                             // 265
        else if (msg.msg === 'pong') {                                                                                // 266
          // noop, as we assume everything's a pong                                                                   // 267
        }                                                                                                             // 268
        else if (_.include(['added', 'changed', 'removed', 'ready', 'updated'], msg.msg))                             // 269
          self._livedata_data(msg);                                                                                   // 270
        else if (msg.msg === 'nosub')                                                                                 // 271
          self._livedata_nosub(msg);                                                                                  // 272
        else if (msg.msg === 'result')                                                                                // 273
          self._livedata_result(msg);                                                                                 // 274
        else if (msg.msg === 'error')                                                                                 // 275
          self._livedata_error(msg);                                                                                  // 276
        else                                                                                                          // 277
          Meteor._debug("discarding unknown livedata message type", msg);                                             // 278
      };                                                                                                              // 279
      // 280
      var onReset = function () {                                                                                     // 281
        // Send a connect message at the beginning of the stream.                                                     // 282
        // NOTE: reset is called even on the first connection, so this is                                             // 283
        // the only place we send this message.                                                                       // 284
        var msg = { msg: 'connect' };                                                                                   // 285
        if (self._lastSessionId)                                                                                      // 286
          msg.session = self._lastSessionId;                                                                          // 287
        msg.version = self._versionSuggestion || self._supportedDDPVersions[0];                                       // 288
        self._versionSuggestion = msg.version;                                                                        // 289
        msg.support = self._supportedDDPVersions;                                                                     // 290
        self._send(msg);                                                                                              // 291
        // 292
        // Mark non-retry calls as failed. This has to be done early as getting these methods out of the              // 293
        // current block is pretty important to making sure that quiescence is properly calculated, as                // 294
        // well as possibly moving on to another useful block.                                                        // 295
        // 296
        // Only bother testing if there is an outstandingMethodBlock (there might not be, especially if               // 297
        // we are connecting for the first time.                                                                      // 298
        if (self._outstandingMethodBlocks.length > 0) {                                                               // 299
          // If there is an outstanding method block, we only care about the first one as that is the                 // 300
          // one that could have already sent messages with no response, that are not allowed to retry.               // 301
          _.each(self._outstandingMethodBlocks[0].methods, function (methodInvoker) {                                  // 302
            // If the message wasn't sent or it's allowed to retry, do nothing.                                       // 303
            if (methodInvoker.sentMessage && methodInvoker.noRetry) {                                                 // 304
              // The next loop serves to get the index in the current method block of this method.                    // 305
              var currentMethodBlock = self._outstandingMethodBlocks[0].methods;                                      // 306
              var loopMethod;                                                                                         // 307
              for (var i = 0; i < currentMethodBlock.length; i++) {                                                   // 308
                loopMethod = currentMethodBlock[i];                                                                   // 309
                if (loopMethod.methodId === methodInvoker.methodId) {                                                 // 310
                  break;                                                                                              // 311
                }                                                                                                     // 312
              }                                                                                                       // 313
              // 314
              // Remove from current method block. This may leave the block empty, but we                             // 315
              // don't move on to the next block until the callback has been delivered, in                            // 316
              // _outstandingMethodFinished.                                                                          // 317
              currentMethodBlock.splice(i, 1);                                                                        // 318
              // 319
              // Make sure that the method is told that it failed.                                                    // 320
              methodInvoker.receiveResult(new Meteor.Error('invocation-failed',                                       // 321
                'Method invocation might have failed due to dropped connection. ' +                                   // 322
                'Failing because `noRetry` option was passed to Meteor.apply.'));                                     // 323
            }                                                                                                         // 324
          });                                                                                                         // 325
        }                                                                                                             // 326
        // 327
        // Now, to minimize setup latency, go ahead and blast out all of                                              // 328
        // our pending methods ands subscriptions before we've even taken                                             // 329
        // the necessary RTT to know if we successfully reconnected. (1)                                              // 330
        // They're supposed to be idempotent, and where they are not,                                                 // 331
        // they can block retry in apply; (2) even if we did reconnect,                                               // 332
        // we're not sure what messages might have gotten lost                                                        // 333
        // (in either direction) since we were disconnected (TCP being                                                // 334
        // sloppy about that.)                                                                                        // 335
        // 336
        // If the current block of methods all got their results (but didn't all get                                  // 337
        // their data visible), discard the empty block now.                                                          // 338
        if (!_.isEmpty(self._outstandingMethodBlocks) &&                                                             // 339
          _.isEmpty(self._outstandingMethodBlocks[0].methods)) {                                                    // 340
          self._outstandingMethodBlocks.shift();                                                                      // 341
        }                                                                                                             // 342
        // 343
        // Mark all messages as unsent, they have not yet been sent on this                                           // 344
        // connection.                                                                                                // 345
        _.each(self._methodInvokers, function (m) {                                                                   // 346
          m.sentMessage = false;                                                                                      // 347
        });                                                                                                           // 348
        // 349
        // If an `onReconnect` handler is set, call it first. Go through                                              // 350
        // some hoops to ensure that methods that are called from within                                              // 351
        // `onReconnect` get executed _before_ ones that were originally                                              // 352
        // outstanding (since `onReconnect` is used to re-establish auth                                              // 353
        // certificates)                                                                                              // 354
        if (self.onReconnect)                                                                                         // 355
          self._callOnReconnectAndSendAppropriateOutstandingMethods();                                                // 356
        else                                                                                                          // 357
          self._sendOutstandingMethods();                                                                             // 358
        // 359
        // add new subscriptions at the end. this way they take effect after                                          // 360
        // the handlers and we don't see flicker.                                                                     // 361
        _.each(self._subscriptions, function (sub, id) {                                                              // 362
          self._send({                                                                                                // 363
            msg: 'sub',                                                                                               // 364
            id: id,                                                                                                   // 365
            name: sub.name,                                                                                           // 366
            params: sub.params                                                                                        // 367
          });                                                                                                         // 368
        });                                                                                                           // 369
      };                                                                                                              // 370
      // 371
      var onDisconnect = function () {                                                                                // 372
        if (self._heartbeat) {                                                                                        // 373
          self._heartbeat.stop();                                                                                     // 374
          self._heartbeat = null;                                                                                     // 375
        }                                                                                                             // 376
      };                                                                                                              // 377
      // 378
      if (Meteor.isServer) {                                                                                          // 379
        self._stream.on('message', Meteor.bindEnvironment(onMessage, "handling DDP message"));                        // 380
        self._stream.on('reset', Meteor.bindEnvironment(onReset, "handling DDP reset"));                              // 381
        self._stream.on('disconnect', Meteor.bindEnvironment(onDisconnect, "handling DDP disconnect"));               // 382
      } else {                                                                                                        // 383
        self._stream.on('message', onMessage);                                                                        // 384
        self._stream.on('reset', onReset);                                                                            // 385
        self._stream.on('disconnect', onDisconnect);                                                                  // 386
      }                                                                                                               // 387
    };                                                                                                                // 388
    // 389
    // A MethodInvoker manages sending a method to the server and calling the user's                                  // 390
    // callbacks. On construction, it registers itself in the connection's                                            // 391
    // _methodInvokers map; it removes itself once the method is fully finished and                                   // 392
    // the callback is invoked. This occurs when it has both received a result,                                       // 393
    // and the data written by it is fully visible.                                                                   // 394
    var MethodInvoker = function (options) {                                                                          // 395
      var self = this;                                                                                                // 396
      // 397
      // Public (within this file) fields.                                                                            // 398
      self.methodId = options.methodId;                                                                               // 399
      self.sentMessage = false;                                                                                       // 400
      // 401
      self._callback = options.callback;                                                                              // 402
      self._connection = options.connection;                                                                          // 403
      self._message = options.message;                                                                                // 404
      self._onResultReceived = options.onResultReceived || function () { };                                            // 405
      self._wait = options.wait;                                                                                      // 406
      self.noRetry = options.noRetry;                                                                                 // 407
      self._methodResult = null;                                                                                      // 408
      self._dataVisible = false;                                                                                      // 409
      // 410
      // Register with the connection.                                                                                // 411
      self._connection._methodInvokers[self.methodId] = self;                                                         // 412
    };                                                                                                                // 413
    _.extend(MethodInvoker.prototype, {                                                                               // 414
      // Sends the method message to the server. May be called additional times if                                    // 415
      // we lose the connection and reconnect before receiving a result.                                              // 416
      sendMessage: function () {                                                                                      // 417
        var self = this;                                                                                              // 418
        // This function is called before sending a method (including resending on                                    // 419
        // reconnect). We should only (re)send methods where we don't already have a                                  // 420
        // result!                                                                                                    // 421
        if (self.gotResult())                                                                                         // 422
          throw new Error("sendingMethod is called on method with result");                                           // 423
        // 424
        // 425
        // If we're re-sending it, it doesn't matter if data was written the first                                    // 426
        // time.                                                                                                      // 427
        self._dataVisible = false;                                                                                    // 428
        self.sentMessage = true;                                                                                      // 429
        // 430
        // If this is a wait method, make all data messages be buffered until it is                                   // 431
        // done.                                                                                                      // 432
        if (self._wait)                                                                                               // 433
          self._connection._methodsBlockingQuiescence[self.methodId] = true;                                          // 434
        // 435
        // Actually send the message.                                                                                 // 436
        self._connection._send(self._message);                                                                        // 437
      },                                                                                                              // 438
      // Invoke the callback, if we have both a result and know that all data has                                     // 439
      // been written to the local cache.                                                                             // 440
      _maybeInvokeCallback: function () {                                                                             // 441
        var self = this;                                                                                              // 442
        if (self._methodResult && self._dataVisible) {                                                                // 443
          // Call the callback. (This won't throw: the callback was wrapped with                                      // 444
          // bindEnvironment.)                                                                                        // 445
          self._callback(self._methodResult[0], self._methodResult[1]);                                               // 446
          // 447
          // Forget about this method.                                                                                // 448
          delete self._connection._methodInvokers[self.methodId];                                                     // 449
          // 450
          // Let the connection know that this method is finished, so it can try to                                   // 451
          // move on to the next block of methods.                                                                    // 452
          self._connection._outstandingMethodFinished();                                                              // 453
        }                                                                                                             // 454
      },                                                                                                              // 455
      // Call with the result of the method from the server. Only may be called                                       // 456
      // once; once it is called, you should not call sendMessage again.                                              // 457
      // If the user provided an onResultReceived callback, call it immediately.                                      // 458
      // Then invoke the main callback if data is also visible.                                                       // 459
      receiveResult: function (err, result) {                                                                         // 460
        var self = this;                                                                                              // 461
        if (self.gotResult())                                                                                         // 462
          throw new Error("Methods should only receive results once");                                                // 463
        self._methodResult = [err, result];                                                                           // 464
        self._onResultReceived(err, result);                                                                          // 465
        self._maybeInvokeCallback();                                                                                  // 466
      },                                                                                                              // 467
      // Call this when all data written by the method is visible. This means that                                    // 468
      // the method has returns its "data is done" message *AND* all server                                           // 469
      // documents that are buffered at that time have been written to the local                                      // 470
      // cache. Invokes the main callback if the result has been received.                                            // 471
      dataVisible: function () {                                                                                      // 472
        var self = this;                                                                                              // 473
        self._dataVisible = true;                                                                                     // 474
        self._maybeInvokeCallback();                                                                                  // 475
      },                                                                                                              // 476
      // True if receiveResult has been called.                                                                       // 477
      gotResult: function () {                                                                                        // 478
        var self = this;                                                                                              // 479
        return !!self._methodResult;                                                                                  // 480
      }                                                                                                               // 481
    });                                                                                                               // 482
    // 483
    _.extend(Connection.prototype, {                                                                                  // 484
      // 'name' is the name of the data on the wire that should go in the                                             // 485
      // store. 'wrappedStore' should be an object with methods beginUpdate, update,                                  // 486
      // endUpdate, saveOriginals, retrieveOriginals. see Collection for an example.                                  // 487
      registerStore: function (name, wrappedStore) {                                                                  // 488
        var self = this;                                                                                              // 489
        // 490
        if (name in self._stores)                                                                                     // 491
          return false;                                                                                               // 492
        // 493
        // Wrap the input object in an object which makes any store method not                                        // 494
        // implemented by 'store' into a no-op.                                                                       // 495
        var store = {};                                                                                               // 496
        _.each(['update', 'beginUpdate', 'endUpdate', 'saveOriginals',                                                // 497
          'retrieveOriginals', 'getDoc',                                                                        // 498
          '_getCollection'], function (method) {                                                                         // 499
            store[method] = function () {                                                                       // 500
              return (wrappedStore[method]                                                                      // 501
                ? wrappedStore[method].apply(wrappedStore, arguments)                                     // 502
                : undefined);                                                                             // 503
            };                                                                                                  // 504
          });                                                                                                   // 505
        // 506
        self._stores[name] = store;                                                                                   // 507
        // 508
        var queued = self._updatesForUnknownStores[name];                                                             // 509
        if (queued) {                                                                                                 // 510
          store.beginUpdate(queued.length, false);                                                                    // 511
          _.each(queued, function (msg) {                                                                             // 512
            store.update(msg);                                                                                        // 513
          });                                                                                                         // 514
          store.endUpdate();                                                                                          // 515
          delete self._updatesForUnknownStores[name];                                                                 // 516
        }                                                                                                             // 517
        // 518
        return true;                                                                                                  // 519
      },                                                                                                              // 520
      // 521
      /**                                                                                                             // 522
       * @memberOf Meteor                                                                                             // 523
       * @importFromPackage meteor                                                                                    // 524
       * @summary Subscribe to a record set.  Returns a handle that provides                                          // 525
       * `stop()` and `ready()` methods.                                                                              // 526
       * @locus Client                                                                                                // 527
       * @param {String} name Name of the subscription.  Matches the name of the                                      // 528
       * server's `publish()` call.                                                                                   // 529
       * @param {EJSONable} [arg1,arg2...] Optional arguments passed to publisher                                     // 530
       * function on server.                                                                                          // 531
       * @param {Function|Object} [callbacks] Optional. May include `onStop`                                          // 532
       * and `onReady` callbacks. If there is an error, it is passed as an                                            // 533
       * argument to `onStop`. If a function is passed instead of an object, it                                       // 534
       * is interpreted as an `onReady` callback.                                                                     // 535
       */                                                                                                             // 536
      subscribe: function (name /* .. [arguments] .. (callback|callbacks) */) {                                       // 537
        var self = this;                                                                                              // 538
        // 539
        var params = Array.prototype.slice.call(arguments, 1);                                                        // 540
        var callbacks = {};                                                                                           // 541
        if (params.length) {                                                                                          // 542
          var lastParam = params[params.length - 1];                                                                  // 543
          if (_.isFunction(lastParam)) {                                                                              // 544
            callbacks.onReady = params.pop();                                                                         // 545
          } else if (lastParam &&                                                                                     // 546
            // XXX COMPAT WITH 1.0.3.1 onError used to exist, but now we use                                          // 547
            // onStop with an error callback instead.                                                                 // 548
            _.any([lastParam.onReady, lastParam.onError, lastParam.onStop],                                           // 549
              _.isFunction)) {                                                                                        // 550
            callbacks = params.pop();                                                                                 // 551
          }                                                                                                           // 552
        }                                                                                                             // 553
        // 554
        // Is there an existing sub with the same name and param, run in an                                           // 555
        // invalidated Computation? This will happen if we are rerunning an                                           // 556
        // existing computation.                                                                                      // 557
        //                                                                                                            // 558
        // For example, consider a rerun of:                                                                          // 559
        //                                                                                                            // 560
        //     Tracker.autorun(function () {                                                                          // 561
        //       Meteor.subscribe("foo", Session.get("foo"));                                                         // 562
        //       Meteor.subscribe("bar", Session.get("bar"));                                                         // 563
        //     });                                                                                                    // 564
        //                                                                                                            // 565
        // If "foo" has changed but "bar" has not, we will match the "bar"                                            // 566
        // subcribe to an existing inactive subscription in order to not                                              // 567
        // unsub and resub the subscription unnecessarily.                                                            // 568
        //                                                                                                            // 569
        // We only look for one such sub; if there are N apparently-identical subs                                    // 570
        // being invalidated, we will require N matching subscribe calls to keep                                      // 571
        // them all active.                                                                                           // 572
        var existing = _.find(self._subscriptions, function (sub) {                                                   // 573
          return sub.inactive && sub.name === name &&                                                                 // 574
            EJSON.equals(sub.params, params);                                                                         // 575
        });                                                                                                           // 576
        // 577
        var id;                                                                                                       // 578
        if (existing) {                                                                                               // 579
          id = existing.id;                                                                                           // 580
          existing.inactive = false; // reactivate                                                                    // 581
          // 582
          if (callbacks.onReady) {                                                                                    // 583
            // If the sub is not already ready, replace any ready callback with the                                   // 584
            // one provided now. (It's not really clear what users would expect for                                   // 585
            // an onReady callback inside an autorun; the semantics we provide is                                     // 586
            // that at the time the sub first becomes ready, we call the last                                         // 587
            // onReady callback provided, if any.)                                                                    // 588
            if (!existing.ready)                                                                                      // 589
              existing.readyCallback = callbacks.onReady;                                                             // 590
          }                                                                                                           // 591
          // 592
          // XXX COMPAT WITH 1.0.3.1 we used to have onError but now we call                                          // 593
          // onStop with an optional error argument                                                                   // 594
          if (callbacks.onError) {                                                                                    // 595
            // Replace existing callback if any, so that errors aren't                                                // 596
            // double-reported.                                                                                       // 597
            existing.errorCallback = callbacks.onError;                                                               // 598
          }                                                                                                           // 599
          // 600
          if (callbacks.onStop) {                                                                                     // 601
            existing.stopCallback = callbacks.onStop;                                                                 // 602
          }                                                                                                           // 603
        } else {                                                                                                      // 604
          // New sub! Generate an id, save it locally, and send message.                                              // 605
          id = Random.id();                                                                                           // 606
          self._subscriptions[id] = {                                                                                 // 607
            id: id,                                                                                                   // 608
            name: name,                                                                                               // 609
            params: EJSON.clone(params),                                                                              // 610
            inactive: false,                                                                                          // 611
            ready: false,                                                                                             // 612
            readyDeps: new Tracker.Dependency,                                                                        // 613
            readyCallback: callbacks.onReady,                                                                         // 614
            // XXX COMPAT WITH 1.0.3.1 #errorCallback                                                                 // 615
            errorCallback: callbacks.onError,                                                                         // 616
            stopCallback: callbacks.onStop,                                                                           // 617
            connection: self,                                                                                         // 618
            remove: function () {                                                                                      // 619
              delete this.connection._subscriptions[this.id];                                                         // 620
              this.ready && this.readyDeps.changed();                                                                 // 621
            },                                                                                                        // 622
            stop: function () {                                                                                        // 623
              this.connection._send({ msg: 'unsub', id: id });                                                          // 624
              this.remove();                                                                                          // 625
              // 626
              if (callbacks.onStop) {                                                                                 // 627
                callbacks.onStop();                                                                                   // 628
              }                                                                                                       // 629
            }                                                                                                         // 630
          };                                                                                                          // 631
          self._send({ msg: 'sub', id: id, name: name, params: params });                                               // 632
        }                                                                                                             // 633
        // 634
        // return a handle to the application.                                                                        // 635
        var handle = {                                                                                                // 636
          stop: function () {                                                                                         // 637
            if (!_.has(self._subscriptions, id))                                                                      // 638
              return;                                                                                                 // 639
            // 640
            self._subscriptions[id].stop();                                                                           // 641
          },                                                                                                          // 642
          ready: function () {                                                                                        // 643
            // return false if we've unsubscribed.                                                                    // 644
            if (!_.has(self._subscriptions, id))                                                                      // 645
              return false;                                                                                           // 646
            var record = self._subscriptions[id];                                                                     // 647
            record.readyDeps.depend();                                                                                // 648
            return record.ready;                                                                                      // 649
          },                                                                                                          // 650
          subscriptionId: id                                                                                          // 651
        };                                                                                                            // 652
        // 653
        if (Tracker.active) {                                                                                         // 654
          // We're in a reactive computation, so we'd like to unsubscribe when the                                    // 655
          // computation is invalidated... but not if the rerun just re-subscribes                                    // 656
          // to the same subscription!  When a rerun happens, we use onInvalidate                                     // 657
          // as a change to mark the subscription "inactive" so that it can                                           // 658
          // be reused from the rerun.  If it isn't reused, it's killed from                                          // 659
          // an afterFlush.                                                                                           // 660
          Tracker.onInvalidate(function (c) {                                                                         // 661
            if (_.has(self._subscriptions, id))                                                                       // 662
              self._subscriptions[id].inactive = true;                                                                // 663
            // 664
            Tracker.afterFlush(function () {                                                                          // 665
              if (_.has(self._subscriptions, id) &&                                                                   // 666
                self._subscriptions[id].inactive)                                                                   // 667
                handle.stop();                                                                                        // 668
            });                                                                                                       // 669
          });                                                                                                         // 670
        }                                                                                                             // 671
        // 672
        return handle;                                                                                                // 673
      },                                                                                                              // 674
      // 675
      // options:                                                                                                     // 676
      // - onLateError {Function(error)} called if an error was received after the ready event.                       // 677
      //     (errors received before ready cause an error to be thrown)                                               // 678
      _subscribeAndWait: function (name, args, options) {                                                             // 679
        var self = this;                                                                                              // 680
        var f = new Future();                                                                                         // 681
        var ready = false;                                                                                            // 682
        var handle;                                                                                                   // 683
        args = args || [];                                                                                            // 684
        args.push({                                                                                                   // 685
          onReady: function () {                                                                                      // 686
            ready = true;                                                                                             // 687
            f['return']();                                                                                            // 688
          },                                                                                                          // 689
          onError: function (e) {                                                                                     // 690
            if (!ready)                                                                                               // 691
              f['throw'](e);                                                                                          // 692
            else                                                                                                      // 693
              options && options.onLateError && options.onLateError(e);                                               // 694
          }                                                                                                           // 695
        });                                                                                                           // 696
        // 697
        handle = self.subscribe.apply(self, [name].concat(args));                                                     // 698
        f.wait();                                                                                                     // 699
        return handle;                                                                                                // 700
      },                                                                                                              // 701
      // 702
      methods: function (methods) {                                                                                   // 703
        var self = this;                                                                                              // 704
        _.each(methods, function (func, name) {                                                                       // 705
          if (typeof func !== 'function')                                                                             // 706
            throw new Error("Method '" + name + "' must be a function");                                              // 707
          if (self._methodHandlers[name])                                                                             // 708
            throw new Error("A method named '" + name + "' is already defined");                                      // 709
          self._methodHandlers[name] = func;                                                                          // 710
        });                                                                                                           // 711
      },                                                                                                              // 712
      // 713
      /**                                                                                                             // 714
       * @memberOf Meteor                                                                                             // 715
       * @importFromPackage meteor                                                                                    // 716
       * @summary Invokes a method passing any number of arguments.                                                   // 717
       * @locus Anywhere                                                                                              // 718
       * @param {String} name Name of method to invoke                                                                // 719
       * @param {EJSONable} [arg1,arg2...] Optional method arguments                                                  // 720
       * @param {Function} [asyncCallback] Optional callback, which is called asynchronously with the error or result after the method is complete. If not provided, the method runs synchronously if possible (see below).
       */                                                                                                             // 722
      call: function (name /* .. [arguments] .. callback */) {                                                        // 723
        // if it's a function, the last argument is the result callback,                                              // 724
        // not a parameter to the remote method.                                                                      // 725
        var args = Array.prototype.slice.call(arguments, 1);                                                          // 726
        if (args.length && typeof args[args.length - 1] === "function")                                               // 727
          var callback = args.pop();                                                                                  // 728
        return this.apply(name, args, callback);                                                                      // 729
      },                                                                                                              // 730
      // 731
      // @param options {Optional Object}                                                                             // 732
      //   wait: Boolean - Should we wait to call this until all current methods                                      // 733
      //                   are fully finished, and block subsequent method calls                                      // 734
      //                   until this method is fully finished?                                                       // 735
      //                   (does not affect methods called from within this method)                                   // 736
      //   onResultReceived: Function - a callback to call as soon as the method                                      // 737
      //                                result is received. the data written by                                       // 738
      //                                the method may not yet be in the cache!                                       // 739
      //   returnStubValue: Boolean - If true then in cases where we would have                                       // 740
      //                              otherwise discarded the stub's return value                                     // 741
      //                              and returned undefined, instead we go ahead                                     // 742
      //                              and return it.  Specifically, this is any                                       // 743
      //                              time other than when (a) we are already                                         // 744
      //                              inside a stub or (b) we are in Node and no                                      // 745
      //                              callback was provided.  Currently we require                                    // 746
      //                              this flag to be explicitly passed to reduce                                     // 747
      //                              the likelihood that stub return values will                                     // 748
      //                              be confused with server return values; we                                       // 749
      //                              may improve this in future.                                                     // 750
      // @param callback {Optional Function}                                                                          // 751
      // 752
      /**                                                                                                             // 753
       * @memberOf Meteor                                                                                             // 754
       * @importFromPackage meteor                                                                                    // 755
       * @summary Invoke a method passing an array of arguments.                                                      // 756
       * @locus Anywhere                                                                                              // 757
       * @param {String} name Name of method to invoke                                                                // 758
       * @param {EJSONable[]} args Method arguments                                                                   // 759
       * @param {Object} [options]                                                                                    // 760
       * @param {Boolean} options.wait (Client only) If true, don't send this method until all previous method calls have completed, and don't send any subsequent method calls until this one is completed.
       * @param {Function} options.onResultReceived (Client only) This callback is invoked with the error or result of the method (just like `asyncCallback`) as soon as the error or result is available. The local cache may not yet reflect the writes performed by the method.
       * @param {Boolean} options.noRetry (Client only) if true, don't send this method again on reload, simply call the callback an error with the error code 'invocation-failed'.
       * @param {Function} [asyncCallback] Optional callback; same semantics as in [`Meteor.call`](#meteor_call).     // 764
       */                                                                                                             // 765
      apply: function (name, args, options, callback) {                                                               // 766
        var self = this;                                                                                              // 767
        // 768
        // We were passed 3 arguments. They may be either (name, args, options)                                       // 769
        // or (name, args, callback)                                                                                  // 770
        if (!callback && typeof options === 'function') {                                                             // 771
          callback = options;                                                                                         // 772
          options = {};                                                                                               // 773
        }                                                                                                             // 774
        options = options || {};                                                                                      // 775
        // 776
        if (callback) {                                                                                               // 777
          // XXX would it be better form to do the binding in stream.on,                                              // 778
          // or caller, instead of here?                                                                              // 779
          // XXX improve error message (and how we report it)                                                         // 780
          callback = Meteor.bindEnvironment(                                                                          // 781
            callback,                                                                                                 // 782
            "delivering result of invoking '" + name + "'"                                                            // 783
          );                                                                                                          // 784
        }                                                                                                             // 785
        // 786
        // Keep our args safe from mutation (eg if we don't send the message for a                                    // 787
        // while because of a wait method).                                                                           // 788
        args = EJSON.clone(args);                                                                                     // 789
        // 790
        // Lazily allocate method ID once we know that it'll be needed.                                               // 791
        var methodId = (function () {                                                                                 // 792
          var id;                                                                                                     // 793
          return function () {                                                                                        // 794
            if (id === undefined)                                                                                     // 795
              id = '' + (self._nextMethodId++);                                                                       // 796
            return id;                                                                                                // 797
          };                                                                                                          // 798
        })();                                                                                                         // 799
        // 800
        var enclosing = DDP._CurrentInvocation.get();                                                                 // 801
        var alreadyInSimulation = enclosing && enclosing.isSimulation;                                                // 802
        // 803
        // Lazily generate a randomSeed, only if it is requested by the stub.                                         // 804
        // The random streams only have utility if they're used on both the client                                    // 805
        // and the server; if the client doesn't generate any 'random' values                                         // 806
        // then we don't expect the server to generate any either.                                                    // 807
        // Less commonly, the server may perform different actions from the client,                                   // 808
        // and may in fact generate values where the client did not, but we don't                                     // 809
        // have any client-side values to match, so even here we may as well just                                     // 810
        // use a random seed on the server.  In that case, we don't pass the                                          // 811
        // randomSeed to save bandwidth, and we don't even generate it to save a                                      // 812
        // bit of CPU and to avoid consuming entropy.                                                                 // 813
        var randomSeed = null;                                                                                        // 814
        var randomSeedGenerator = function () {                                                                       // 815
          if (randomSeed === null) {                                                                                  // 816
            randomSeed = DDPCommon.makeRpcSeed(enclosing, name);                                                      // 817
          }                                                                                                           // 818
          return randomSeed;                                                                                          // 819
        };                                                                                                            // 820
        // 821
        // Run the stub, if we have one. The stub is supposed to make some                                            // 822
        // temporary writes to the database to give the user a smooth experience                                      // 823
        // until the actual result of executing the method comes back from the                                        // 824
        // server (whereupon the temporary writes to the database will be reversed                                    // 825
        // during the beginUpdate/endUpdate process.)                                                                 // 826
        //                                                                                                            // 827
        // Normally, we ignore the return value of the stub (even if it is an                                         // 828
        // exception), in favor of the real return value from the server. The                                         // 829
        // exception is if the *caller* is a stub. In that case, we're not going                                      // 830
        // to do a RPC, so we use the return value of the stub as our return                                          // 831
        // value.                                                                                                     // 832
        // 833
        var stub = self._methodHandlers[name];                                                                        // 834
        if (stub) {                                                                                                   // 835
          var setUserId = function (userId) {                                                                          // 836
            self.setUserId(userId);                                                                                   // 837
          };                                                                                                          // 838
          // 839
          var invocation = new DDPCommon.MethodInvocation({                                                           // 840
            isSimulation: true,                                                                                       // 841
            userId: self.userId(),                                                                                    // 842
            setUserId: setUserId,                                                                                     // 843
            randomSeed: function () { return randomSeedGenerator(); }                                                 // 844
          });                                                                                                         // 845
          // 846
          if (!alreadyInSimulation)                                                                                   // 847
            self._saveOriginals();                                                                                    // 848
          // 849
          try {                                                                                                       // 850
            // Note that unlike in the corresponding server code, we never audit                                      // 851
            // that stubs check() their arguments.                                                                    // 852
            var stubReturnValue = DDP._CurrentInvocation.withValue(invocation, function () {                          // 853
              if (Meteor.isServer) {                                                                                  // 854
                // Because saveOriginals and retrieveOriginals aren't reentrant,                                      // 855
                // don't allow stubs to yield.                                                                        // 856
                return Meteor._noYieldsAllowed(function () {                                                          // 857
                  // re-clone, so that the stub can't affect our caller's values                                      // 858
                  return stub.apply(invocation, EJSON.clone(args));                                                   // 859
                });                                                                                                   // 860
              } else {                                                                                                // 861
                return stub.apply(invocation, EJSON.clone(args));                                                     // 862
              }                                                                                                       // 863
            });                                                                                                       // 864
          }                                                                                                           // 865
          catch (e) {                                                                                                 // 866
            var exception = e;                                                                                        // 867
          }                                                                                                           // 868
          // 869
          if (!alreadyInSimulation)                                                                                   // 870
            self._retrieveAndStoreOriginals(methodId());                                                              // 871
        }                                                                                                             // 872
        // 873
        // If we're in a simulation, stop and return the result we have,                                              // 874
        // rather than going on to do an RPC. If there was no stub,                                                   // 875
        // we'll end up returning undefined.                                                                          // 876
        if (alreadyInSimulation) {                                                                                    // 877
          if (callback) {                                                                                             // 878
            callback(exception, stubReturnValue);                                                                     // 879
            return undefined;                                                                                         // 880
          }                                                                                                           // 881
          if (exception)                                                                                              // 882
            throw exception;                                                                                          // 883
          return stubReturnValue;                                                                                     // 884
        }                                                                                                             // 885
        // 886
        // If an exception occurred in a stub, and we're ignoring it                                                  // 887
        // because we're doing an RPC and want to use what the server                                                 // 888
        // returns instead, log it so the developer knows                                                             // 889
        // (unless they explicitly ask to see the error).                                                             // 890
        //                                                                                                            // 891
        // Tests can set the 'expected' flag on an exception so it won't                                              // 892
        // go to log.                                                                                                 // 893
        if (exception) {                                                                                              // 894
          if (options.throwStubExceptions) {                                                                          // 895
            throw exception;                                                                                          // 896
          } else if (!exception.expected) {                                                                           // 897
            Meteor._debug("Exception while simulating the effect of invoking '" +                                     // 898
              name + "'", exception, exception.stack);                                                                // 899
          }                                                                                                           // 900
        }                                                                                                             // 901
        // 902
        // 903
        // At this point we're definitely doing an RPC, and we're going to                                            // 904
        // return the value of the RPC to the caller.                                                                 // 905
        // 906
        // If the caller didn't give a callback, decide what to do.                                                   // 907
        if (!callback) {                                                                                              // 908
          if (Meteor.isClient) {                                                                                      // 909
            // On the client, we don't have fibers, so we can't block. The                                            // 910
            // only thing we can do is to return undefined and discard the                                            // 911
            // result of the RPC. If an error occurred then print the error                                           // 912
            // to the console.                                                                                        // 913
            callback = function (err) {                                                                               // 914
              err && Meteor._debug("Error invoking Method '" + name + "':",                                           // 915
                err.message);                                                                      // 916
            };                                                                                                        // 917
          } else {                                                                                                    // 918
            // On the server, make the function synchronous. Throw on                                                 // 919
            // errors, return on success.                                                                             // 920
            var future = new Future;                                                                                  // 921
            callback = future.resolver();                                                                             // 922
          }                                                                                                           // 923
        }                                                                                                             // 924
        // Send the RPC. Note that on the client, it is important that the                                            // 925
        // stub have finished before we send the RPC, so that we know we have                                         // 926
        // a complete list of which local documents the stub wrote.                                                   // 927
        var message = {                                                                                               // 928
          msg: 'method',                                                                                              // 929
          method: name,                                                                                               // 930
          params: args,                                                                                               // 931
          id: methodId()                                                                                              // 932
        };                                                                                                            // 933
        // 934
        // Send the randomSeed only if we used it                                                                     // 935
        if (randomSeed !== null) {                                                                                    // 936
          message.randomSeed = randomSeed;                                                                            // 937
        }                                                                                                             // 938
        // 939
        var methodInvoker = new MethodInvoker({                                                                       // 940
          methodId: methodId(),                                                                                       // 941
          callback: callback,                                                                                         // 942
          connection: self,                                                                                           // 943
          onResultReceived: options.onResultReceived,                                                                 // 944
          wait: !!options.wait,                                                                                       // 945
          message: message,                                                                                           // 946
          noRetry: !!options.noRetry                                                                                  // 947
        });                                                                                                           // 948
        // 949
        if (options.wait) {                                                                                           // 950
          // It's a wait method! Wait methods go in their own block.                                                  // 951
          self._outstandingMethodBlocks.push(                                                                         // 952
            { wait: true, methods: [methodInvoker] });                                                                  // 953
        } else {                                                                                                      // 954
          // Not a wait method. Start a new block if the previous block was a wait                                    // 955
          // block, and add it to the last block of methods.                                                          // 956
          if (_.isEmpty(self._outstandingMethodBlocks) ||                                                             // 957
            _.last(self._outstandingMethodBlocks).wait)                                                             // 958
            self._outstandingMethodBlocks.push({ wait: false, methods: [] });                                           // 959
          _.last(self._outstandingMethodBlocks).methods.push(methodInvoker);                                          // 960
        }                                                                                                             // 961
        // 962
        // If we added it to the first block, send it out now.                                                        // 963
        if (self._outstandingMethodBlocks.length === 1)                                                               // 964
          methodInvoker.sendMessage();                                                                                // 965
        // 966
        // If we're using the default callback on the server,                                                         // 967
        // block waiting for the result.                                                                              // 968
        if (future) {                                                                                                 // 969
          return future.wait();                                                                                       // 970
        }                                                                                                             // 971
        return options.returnStubValue ? stubReturnValue : undefined;                                                 // 972
      },                                                                                                              // 973
      // 974
      // Before calling a method stub, prepare all stores to track changes and allow                                  // 975
      // _retrieveAndStoreOriginals to get the original versions of changed                                           // 976
      // documents.                                                                                                   // 977
      _saveOriginals: function () {                                                                                   // 978
        var self = this;                                                                                              // 979
        _.each(self._stores, function (s) {                                                                           // 980
          s.saveOriginals();                                                                                          // 981
        });                                                                                                           // 982
      },                                                                                                              // 983
      // Retrieves the original versions of all documents modified by the stub for                                    // 984
      // method 'methodId' from all stores and saves them to _serverDocuments (keyed                                  // 985
      // by document) and _documentsWrittenByStub (keyed by method ID).                                               // 986
      _retrieveAndStoreOriginals: function (methodId) {                                                               // 987
        var self = this;                                                                                              // 988
        if (self._documentsWrittenByStub[methodId])                                                                   // 989
          throw new Error("Duplicate methodId in _retrieveAndStoreOriginals");                                        // 990
        // 991
        var docsWritten = [];                                                                                         // 992
        _.each(self._stores, function (s, collection) {                                                               // 993
          var originals = s.retrieveOriginals();                                                                      // 994
          // not all stores define retrieveOriginals                                                                  // 995
          if (!originals)                                                                                             // 996
            return;                                                                                                   // 997
          originals.forEach(function (doc, id) {                                                                      // 998
            docsWritten.push({ collection: collection, id: id });                                                       // 999
            if (!_.has(self._serverDocuments, collection))                                                            // 1000
              self._serverDocuments[collection] = new MongoIDMap;                                                     // 1001
            var serverDoc = self._serverDocuments[collection].setDefault(id, {});                                     // 1002
            if (serverDoc.writtenByStubs) {                                                                           // 1003
              // We're not the first stub to write this doc. Just add our method ID                                   // 1004
              // to the record.                                                                                       // 1005
              serverDoc.writtenByStubs[methodId] = true;                                                              // 1006
            } else {                                                                                                  // 1007
              // First stub! Save the original value and our method ID.                                               // 1008
              serverDoc.document = doc;                                                                               // 1009
              serverDoc.flushCallbacks = [];                                                                          // 1010
              serverDoc.writtenByStubs = {};                                                                          // 1011
              serverDoc.writtenByStubs[methodId] = true;                                                              // 1012
            }                                                                                                         // 1013
          });                                                                                                         // 1014
        });                                                                                                           // 1015
        if (!_.isEmpty(docsWritten)) {                                                                                // 1016
          self._documentsWrittenByStub[methodId] = docsWritten;                                                       // 1017
        }                                                                                                             // 1018
      },                                                                                                              // 1019
      // 1020
      // This is very much a private function we use to make the tests                                                // 1021
      // take up fewer server resources after they complete.                                                          // 1022
      _unsubscribeAll: function () {                                                                                  // 1023
        var self = this;                                                                                              // 1024
        _.each(_.clone(self._subscriptions), function (sub, id) {                                                     // 1025
          // Avoid killing the autoupdate subscription so that developers                                             // 1026
          // still get hot code pushes when writing tests.                                                            // 1027
          //                                                                                                          // 1028
          // XXX it's a hack to encode knowledge about autoupdate here,                                               // 1029
          // but it doesn't seem worth it yet to have a special API for                                               // 1030
          // subscriptions to preserve after unit tests.                                                              // 1031
          if (sub.name !== 'meteor_autoupdate_clientVersions') {                                                      // 1032
            self._subscriptions[id].stop();                                                                           // 1033
          }                                                                                                           // 1034
        });                                                                                                           // 1035
      },                                                                                                              // 1036
      // 1037
      // Sends the DDP stringification of the given message object                                                    // 1038
      _send: function (obj) {                                                                                         // 1039
        var self = this;                                                                                              // 1040
        self._stream.send(DDPCommon.stringifyDDP(obj));                                                               // 1041
      },                                                                                                              // 1042
      // 1043
      // We detected via DDP-level heartbeats that we've lost the                                                     // 1044
      // connection.  Unlike `disconnect` or `close`, a lost connection                                               // 1045
      // will be automatically retried.                                                                               // 1046
      _lostConnection: function (error) {                                                                             // 1047
        var self = this;                                                                                              // 1048
        self._stream._lostConnection(error);                                                                          // 1049
      },                                                                                                              // 1050
      // 1051
      /**                                                                                                             // 1052
       * @summary Get the current connection status. A reactive data source.                                          // 1053
       * @locus Client                                                                                                // 1054
       * @memberOf Meteor                                                                                             // 1055
       * @importFromPackage meteor                                                                                    // 1056
       */                                                                                                             // 1057
      status: function (/*passthrough args*/) {                                                                       // 1058
        var self = this;                                                                                              // 1059
        return self._stream.status.apply(self._stream, arguments);                                                    // 1060
      },                                                                                                              // 1061
      // 1062
      /**                                                                                                             // 1063
       * @summary Force an immediate reconnection attempt if the client is not connected to the server.               // 1064
                                                                                                                      // 1065
      This method does nothing if the client is already connected.                                                    // 1066
       * @locus Client                                                                                                // 1067
       * @memberOf Meteor                                                                                             // 1068
       * @importFromPackage meteor                                                                                    // 1069
       */                                                                                                             // 1070
      reconnect: function (/*passthrough args*/) {                                                                    // 1071
        var self = this;                                                                                              // 1072
        return self._stream.reconnect.apply(self._stream, arguments);                                                 // 1073
      },                                                                                                              // 1074
      // 1075
      /**                                                                                                             // 1076
       * @summary Disconnect the client from the server.                                                              // 1077
       * @locus Client                                                                                                // 1078
       * @memberOf Meteor                                                                                             // 1079
       * @importFromPackage meteor                                                                                    // 1080
       */                                                                                                             // 1081
      disconnect: function (/*passthrough args*/) {                                                                   // 1082
        var self = this;                                                                                              // 1083
        return self._stream.disconnect.apply(self._stream, arguments);                                                // 1084
      },                                                                                                              // 1085
      // 1086
      close: function () {                                                                                            // 1087
        var self = this;                                                                                              // 1088
        return self._stream.disconnect({ _permanent: true });                                                           // 1089
      },                                                                                                              // 1090
      // 1091
      ///                                                                                                             // 1092
      /// Reactive user system                                                                                        // 1093
      ///                                                                                                             // 1094
      userId: function () {                                                                                           // 1095
        var self = this;                                                                                              // 1096
        if (self._userIdDeps)                                                                                         // 1097
          self._userIdDeps.depend();                                                                                  // 1098
        return self._userId;                                                                                          // 1099
      },                                                                                                              // 1100
      // 1101
      setUserId: function (userId) {                                                                                  // 1102
        var self = this;                                                                                              // 1103
        // Avoid invalidating dependents if setUserId is called with current value.                                   // 1104
        if (self._userId === userId)                                                                                  // 1105
          return;                                                                                                     // 1106
        self._userId = userId;                                                                                        // 1107
        if (self._userIdDeps)                                                                                         // 1108
          self._userIdDeps.changed();                                                                                 // 1109
      },                                                                                                              // 1110
      // 1111
      // Returns true if we are in a state after reconnect of waiting for subs to be                                  // 1112
      // revived or early methods to finish their data, or we are waiting for a                                       // 1113
      // "wait" method to finish.                                                                                     // 1114
      _waitingForQuiescence: function () {                                                                            // 1115
        var self = this;                                                                                              // 1116
        return (!_.isEmpty(self._subsBeingRevived) ||                                                                // 1117
          !_.isEmpty(self._methodsBlockingQuiescence));                                                        // 1118
      },                                                                                                              // 1119
      // 1120
      // Returns true if any method whose message has been sent to the server has                                     // 1121
      // not yet invoked its user callback.                                                                           // 1122
      _anyMethodsAreOutstanding: function () {                                                                        // 1123
        var self = this;                                                                                              // 1124
        return _.any(_.pluck(self._methodInvokers, 'sentMessage'));                                                   // 1125
      },                                                                                                              // 1126
      // 1127
      _livedata_connected: function (msg) {                                                                           // 1128
        var self = this;                                                                                              // 1129
        // 1130
        if (self._version !== 'pre1' && self._heartbeatInterval !== 0) {                                              // 1131
          self._heartbeat = new DDPCommon.Heartbeat({                                                                 // 1132
            heartbeatInterval: self._heartbeatInterval,                                                               // 1133
            heartbeatTimeout: self._heartbeatTimeout,                                                                 // 1134
            onTimeout: function () {                                                                                  // 1135
              self._lostConnection(                                                                                   // 1136
                new DDP.ConnectionError("DDP heartbeat timed out"));                                                  // 1137
            },                                                                                                        // 1138
            sendPing: function () {                                                                                   // 1139
              self._send({ msg: 'ping' });                                                                              // 1140
            }                                                                                                         // 1141
          });                                                                                                         // 1142
          self._heartbeat.start();                                                                                    // 1143
        }                                                                                                             // 1144
        // 1145
        // If this is a reconnect, we'll have to reset all stores.                                                    // 1146
        if (self._lastSessionId)                                                                                      // 1147
          self._resetStores = true;                                                                                   // 1148
        // 1149
        if (typeof (msg.session) === "string") {                                                                      // 1150
          var reconnectedToPreviousSession = (self._lastSessionId === msg.session);                                   // 1151
          self._lastSessionId = msg.session;                                                                          // 1152
        }                                                                                                             // 1153
        // 1154
        if (reconnectedToPreviousSession) {                                                                           // 1155
          // Successful reconnection -- pick up where we left off.  Note that right                                   // 1156
          // now, this never happens: the server never connects us to a previous                                      // 1157
          // session, because DDP doesn't provide enough data for the server to know                                  // 1158
          // what messages the client has processed. We need to improve DDP to make                                   // 1159
          // this possible, at which point we'll probably need more code here.                                        // 1160
          return;                                                                                                     // 1161
        }                                                                                                             // 1162
        // 1163
        // Server doesn't have our data any more. Re-sync a new session.                                              // 1164
        // 1165
        // Forget about messages we were buffering for unknown collections. They'll                                   // 1166
        // be resent if still relevant.                                                                               // 1167
        self._updatesForUnknownStores = {};                                                                           // 1168
        // 1169
        if (self._resetStores) {                                                                                      // 1170
          // Forget about the effects of stubs. We'll be resetting all collections                                    // 1171
          // anyway.                                                                                                  // 1172
          self._documentsWrittenByStub = {};                                                                          // 1173
          self._serverDocuments = {};                                                                                 // 1174
        }                                                                                                             // 1175
        // 1176
        // Clear _afterUpdateCallbacks.                                                                               // 1177
        self._afterUpdateCallbacks = [];                                                                              // 1178
        // 1179
        // Mark all named subscriptions which are ready (ie, we already called the                                    // 1180
        // ready callback) as needing to be revived.                                                                  // 1181
        // XXX We should also block reconnect quiescence until unnamed subscriptions                                  // 1182
        //     (eg, autopublish) are done re-publishing to avoid flicker!                                             // 1183
        self._subsBeingRevived = {};                                                                                  // 1184
        _.each(self._subscriptions, function (sub, id) {                                                              // 1185
          if (sub.ready)                                                                                              // 1186
            self._subsBeingRevived[id] = true;                                                                        // 1187
        });                                                                                                           // 1188
        // 1189
        // Arrange for "half-finished" methods to have their callbacks run, and                                       // 1190
        // track methods that were sent on this connection so that we don't                                           // 1191
        // quiesce until they are all done.                                                                           // 1192
        //                                                                                                            // 1193
        // Start by clearing _methodsBlockingQuiescence: methods sent before                                          // 1194
        // reconnect don't matter, and any "wait" methods sent on the new connection                                  // 1195
        // that we drop here will be restored by the loop below.                                                      // 1196
        self._methodsBlockingQuiescence = {};                                                                         // 1197
        if (self._resetStores) {                                                                                      // 1198
          _.each(self._methodInvokers, function (invoker) {                                                           // 1199
            if (invoker.gotResult()) {                                                                                // 1200
              // This method already got its result, but it didn't call its callback                                  // 1201
              // because its data didn't become visible. We did not resend the                                        // 1202
              // method RPC. We'll call its callback when we get a full quiesce,                                      // 1203
              // since that's as close as we'll get to "data must be visible".                                        // 1204
              self._afterUpdateCallbacks.push(_.bind(invoker.dataVisible, invoker));                                  // 1205
            } else if (invoker.sentMessage) {                                                                         // 1206
              // This method has been sent on this connection (maybe as a resend                                      // 1207
              // from the last connection, maybe from onReconnect, maybe just very                                    // 1208
              // quickly before processing the connected message).                                                    // 1209
              //                                                                                                      // 1210
              // We don't need to do anything special to ensure its callbacks get                                     // 1211
              // called, but we'll count it as a method which is preventing                                           // 1212
              // reconnect quiescence. (eg, it might be a login method that was run                                   // 1213
              // from onReconnect, and we don't want to see flicker by seeing a                                       // 1214
              // logged-out state.)                                                                                   // 1215
              self._methodsBlockingQuiescence[invoker.methodId] = true;                                               // 1216
            }                                                                                                         // 1217
          });                                                                                                         // 1218
        }                                                                                                             // 1219
        // 1220
        self._messagesBufferedUntilQuiescence = [];                                                                   // 1221
        // 1222
        // If we're not waiting on any methods or subs, we can reset the stores and                                   // 1223
        // call the callbacks immediately.                                                                            // 1224
        if (!self._waitingForQuiescence()) {                                                                          // 1225
          if (self._resetStores) {                                                                                    // 1226
            _.each(self._stores, function (s) {                                                                       // 1227
              s.beginUpdate(0, true);                                                                                 // 1228
              s.endUpdate();                                                                                          // 1229
            });                                                                                                       // 1230
            self._resetStores = false;                                                                                // 1231
          }                                                                                                           // 1232
          self._runAfterUpdateCallbacks();                                                                            // 1233
        }                                                                                                             // 1234
      },                                                                                                              // 1235
      // 1236
      // 1237
      _processOneDataMessage: function (msg, updates) {                                                               // 1238
        var self = this;                                                                                              // 1239
        // Using underscore here so as not to need to capitalize.                                                     // 1240
        self['_process_' + msg.msg](msg, updates);                                                                    // 1241
      },                                                                                                              // 1242
      // 1243
      // 1244
      _livedata_data: function (msg) {                                                                                // 1245
        var self = this;                                                                                              // 1246
        // 1247
        if (self._waitingForQuiescence()) {                                                                           // 1248
          self._messagesBufferedUntilQuiescence.push(msg);                                                            // 1249
          // 1250
          if (msg.msg === "nosub")                                                                                    // 1251
            delete self._subsBeingRevived[msg.id];                                                                    // 1252
          // 1253
          _.each(msg.subs || [], function (subId) {                                                                   // 1254
            delete self._subsBeingRevived[subId];                                                                     // 1255
          });                                                                                                         // 1256
          _.each(msg.methods || [], function (methodId) {                                                             // 1257
            delete self._methodsBlockingQuiescence[methodId];                                                         // 1258
          });                                                                                                         // 1259
          // 1260
          if (self._waitingForQuiescence())                                                                           // 1261
            return;                                                                                                   // 1262
          // 1263
          // No methods or subs are blocking quiescence!                                                              // 1264
          // We'll now process and all of our buffered messages, reset all stores,                                    // 1265
          // and apply them all at once.                                                                              // 1266
          _.each(self._messagesBufferedUntilQuiescence, function (bufferedMsg) {                                      // 1267
            self._processOneDataMessage(bufferedMsg, self._bufferedWrites);                                           // 1268
          });                                                                                                         // 1269
          self._messagesBufferedUntilQuiescence = [];                                                                 // 1270
        } else {                                                                                                      // 1271
          self._processOneDataMessage(msg, self._bufferedWrites);                                                     // 1272
        }                                                                                                             // 1273
        // 1274
        // Immediately flush writes when:                                                                             // 1275
        //  1. Buffering is disabled. Or;                                                                             // 1276
        //  2. any non-(added/changed/removed) message arrives.                                                       // 1277
        var standardWrite = _.include(['added', 'changed', 'removed'], msg.msg);                                      // 1278
        if (self._bufferedWritesInterval === 0 || !standardWrite) {                                                   // 1279
          self._flushBufferedWrites();                                                                                // 1280
          return;                                                                                                     // 1281
        }                                                                                                             // 1282
        // 1283
        if (self._bufferedWritesFlushAt === null) {                                                                   // 1284
          self._bufferedWritesFlushAt = new Date().valueOf() + self._bufferedWritesMaxAge;                            // 1285
        }                                                                                                             // 1286
        else if (self._bufferedWritesFlushAt < new Date().valueOf()) {                                                // 1287
          self._flushBufferedWrites();                                                                                // 1288
          return;                                                                                                     // 1289
        }                                                                                                             // 1290
        // 1291
        if (self._bufferedWritesFlushHandle) {                                                                        // 1292
          clearTimeout(self._bufferedWritesFlushHandle);                                                              // 1293
        }                                                                                                             // 1294
        self._bufferedWritesFlushHandle = setTimeout(self.__flushBufferedWrites,                                      // 1295
          self._bufferedWritesInterval);                              // 1296
      },                                                                                                              // 1297
      // 1298
      _flushBufferedWrites: function () {                                                                             // 1299
        var self = this;                                                                                              // 1300
        if (self._bufferedWritesFlushHandle) {                                                                        // 1301
          clearTimeout(self._bufferedWritesFlushHandle);                                                              // 1302
          self._bufferedWritesFlushHandle = null;                                                                     // 1303
        }                                                                                                             // 1304
        // 1305
        self._bufferedWritesFlushAt = null;                                                                           // 1306
        // We need to clear the buffer before passing it to                                                           // 1307
        //  performWrites. As there's no guarantee that it                                                            // 1308
        //  will exit cleanly.                                                                                        // 1309
        var writes = self._bufferedWrites;                                                                            // 1310
        self._bufferedWrites = {};                                                                                    // 1311
        self._performWrites(writes);                                                                                  // 1312
      },                                                                                                              // 1313
      // 1314
      _performWrites: function (updates) {                                                                              // 1315
        var self = this;                                                                                              // 1316
        // 1317
        if (self._resetStores || !_.isEmpty(updates)) {                                                               // 1318
          // Begin a transactional update of each store.                                                              // 1319
          _.each(self._stores, function (s, storeName) {                                                              // 1320
            s.beginUpdate(_.has(updates, storeName) ? updates[storeName].length : 0,                                  // 1321
              self._resetStores);                                                                         // 1322
          });                                                                                                         // 1323
          self._resetStores = false;                                                                                  // 1324
          // 1325
          _.each(updates, function (updateMessages, storeName) {                                                      // 1326
            var store = self._stores[storeName];                                                                      // 1327
            if (store) {                                                                                              // 1328
              _.each(updateMessages, function (updateMessage) {                                                       // 1329
                store.update(updateMessage);                                                                          // 1330
              });                                                                                                     // 1331
            } else {                                                                                                  // 1332
              // Nobody's listening for this data. Queue it up until                                                  // 1333
              // someone wants it.                                                                                    // 1334
              // XXX memory use will grow without bound if you forget to                                              // 1335
              // create a collection or just don't care about it... going                                             // 1336
              // to have to do something about that.                                                                  // 1337
              if (!_.has(self._updatesForUnknownStores, storeName))                                                   // 1338
                self._updatesForUnknownStores[storeName] = [];                                                        // 1339
              Array.prototype.push.apply(self._updatesForUnknownStores[storeName],                                    // 1340
                updateMessages);                                                             // 1341
            }                                                                                                         // 1342
          });                                                                                                         // 1343
          // 1344
          // End update transaction.                                                                                  // 1345
          _.each(self._stores, function (s) { s.endUpdate(); });                                                      // 1346
        }                                                                                                             // 1347
        // 1348
        self._runAfterUpdateCallbacks();                                                                              // 1349
      },                                                                                                              // 1350
      // 1351
      // Call any callbacks deferred with _runWhenAllServerDocsAreFlushed whose                                       // 1352
      // relevant docs have been flushed, as well as dataVisible callbacks at                                         // 1353
      // reconnect-quiescence time.                                                                                   // 1354
      _runAfterUpdateCallbacks: function () {                                                                         // 1355
        var self = this;                                                                                              // 1356
        var callbacks = self._afterUpdateCallbacks;                                                                   // 1357
        self._afterUpdateCallbacks = [];                                                                              // 1358
        _.each(callbacks, function (c) {                                                                              // 1359
          c();                                                                                                        // 1360
        });                                                                                                           // 1361
      },                                                                                                              // 1362
      // 1363
      _pushUpdate: function (updates, collection, msg) {                                                              // 1364
        var self = this;                                                                                              // 1365
        if (!_.has(updates, collection)) {                                                                            // 1366
          updates[collection] = [];                                                                                   // 1367
        }                                                                                                             // 1368
        updates[collection].push(msg);                                                                                // 1369
      },                                                                                                              // 1370
      // 1371
      _getServerDoc: function (collection, id) {                                                                      // 1372
        var self = this;                                                                                              // 1373
        if (!_.has(self._serverDocuments, collection))                                                                // 1374
          return null;                                                                                                // 1375
        var serverDocsForCollection = self._serverDocuments[collection];                                              // 1376
        return serverDocsForCollection.get(id) || null;                                                               // 1377
      },                                                                                                              // 1378
      // 1379
      _process_added: function (msg, updates) {                                                                       // 1380
        var self = this;                                                                                              // 1381
        var id = MongoID.idParse(msg.id);                                                                             // 1382
        var serverDoc = self._getServerDoc(msg.collection, id);                                                       // 1383
        if (serverDoc) {                                                                                              // 1384
          // Some outstanding stub wrote here.                                                                        // 1385
          var isExisting = (serverDoc.document !== undefined);                                                        // 1386
          // 1387
          serverDoc.document = msg.fields || {};                                                                      // 1388
          serverDoc.document._id = id;                                                                                // 1389
          // 1390
          if (self._resetStores) {                                                                                    // 1391
            // During reconnect the server is sending adds for existing ids.                                          // 1392
            // Always push an update so that document stays in the store after                                        // 1393
            // reset. Use current version of the document for this update, so                                         // 1394
            // that stub-written values are preserved.                                                                // 1395
            var currentDoc = self._stores[msg.collection].getDoc(msg.id);                                             // 1396
            if (currentDoc !== undefined)                                                                             // 1397
              msg.fields = currentDoc;                                                                                // 1398
            // 1399
            self._pushUpdate(updates, msg.collection, msg);                                                           // 1400
          } else if (isExisting) {                                                                                    // 1401
            throw new Error("Server sent add for existing id: " + msg.id);                                            // 1402
          }                                                                                                           // 1403
        } else {                                                                                                      // 1404
          self._pushUpdate(updates, msg.collection, msg);                                                             // 1405
        }                                                                                                             // 1406
      },                                                                                                              // 1407
      // 1408
      _process_changed: function (msg, updates) {                                                                     // 1409
        var self = this;                                                                                              // 1410
        var serverDoc = self._getServerDoc(                                                                           // 1411
          msg.collection, MongoID.idParse(msg.id));                                                                   // 1412
        if (serverDoc) {                                                                                              // 1413
          if (serverDoc.document === undefined)                                                                       // 1414
            throw new Error("Server sent changed for nonexisting id: " + msg.id);                                     // 1415
          DiffSequence.applyChanges(serverDoc.document, msg.fields);                                                  // 1416
        } else {                                                                                                      // 1417
          self._pushUpdate(updates, msg.collection, msg);                                                             // 1418
        }                                                                                                             // 1419
      },                                                                                                              // 1420
      // 1421
      _process_removed: function (msg, updates) {                                                                     // 1422
        var self = this;                                                                                              // 1423
        var serverDoc = self._getServerDoc(                                                                           // 1424
          msg.collection, MongoID.idParse(msg.id));                                                                   // 1425
        if (serverDoc) {                                                                                              // 1426
          // Some outstanding stub wrote here.                                                                        // 1427
          if (serverDoc.document === undefined)                                                                       // 1428
            throw new Error("Server sent removed for nonexisting id:" + msg.id);                                      // 1429
          serverDoc.document = undefined;                                                                             // 1430
        } else {                                                                                                      // 1431
          self._pushUpdate(updates, msg.collection, {                                                                 // 1432
            msg: 'removed',                                                                                           // 1433
            collection: msg.collection,                                                                               // 1434
            id: msg.id                                                                                                // 1435
          });                                                                                                         // 1436
        }                                                                                                             // 1437
      },                                                                                                              // 1438
      // 1439
      _process_updated: function (msg, updates) {                                                                     // 1440
        var self = this;                                                                                              // 1441
        // Process "method done" messages.                                                                            // 1442
        _.each(msg.methods, function (methodId) {                                                                     // 1443
          _.each(self._documentsWrittenByStub[methodId], function (written) {                                         // 1444
            var serverDoc = self._getServerDoc(written.collection, written.id);                                       // 1445
            if (!serverDoc)                                                                                           // 1446
              throw new Error("Lost serverDoc for " + JSON.stringify(written));                                       // 1447
            if (!serverDoc.writtenByStubs[methodId])                                                                  // 1448
              throw new Error("Doc " + JSON.stringify(written) +                                                      // 1449
                " not written by  method " + methodId);                                                 // 1450
            delete serverDoc.writtenByStubs[methodId];                                                                // 1451
            if (_.isEmpty(serverDoc.writtenByStubs)) {                                                                // 1452
              // All methods whose stubs wrote this method have completed! We can                                     // 1453
              // now copy the saved document to the database (reverting the stub's                                    // 1454
              // change if the server did not write to this object, or applying the                                   // 1455
              // server's writes if it did).                                                                          // 1456
              // 1457
              // This is a fake ddp 'replace' message.  It's just for talking                                         // 1458
              // between livedata connections and minimongo.  (We have to stringify                                   // 1459
              // the ID because it's supposed to look like a wire message.)                                           // 1460
              self._pushUpdate(updates, written.collection, {                                                         // 1461
                msg: 'replace',                                                                                       // 1462
                id: MongoID.idStringify(written.id),                                                                  // 1463
                replace: serverDoc.document                                                                           // 1464
              });                                                                                                     // 1465
              // Call all flush callbacks.                                                                            // 1466
              _.each(serverDoc.flushCallbacks, function (c) {                                                         // 1467
                c();                                                                                                  // 1468
              });                                                                                                     // 1469
              // 1470
              // Delete this completed serverDocument. Don't bother to GC empty                                       // 1471
              // IdMaps inside self._serverDocuments, since there probably aren't                                     // 1472
              // many collections and they'll be written repeatedly.                                                  // 1473
              self._serverDocuments[written.collection].remove(written.id);                                           // 1474
            }                                                                                                         // 1475
          });                                                                                                         // 1476
          delete self._documentsWrittenByStub[methodId];                                                              // 1477
          // 1478
          // We want to call the data-written callback, but we can't do so until all                                  // 1479
          // currently buffered messages are flushed.                                                                 // 1480
          var callbackInvoker = self._methodInvokers[methodId];                                                       // 1481
          if (!callbackInvoker)                                                                                       // 1482
            throw new Error("No callback invoker for method " + methodId);                                            // 1483
          self._runWhenAllServerDocsAreFlushed(                                                                       // 1484
            _.bind(callbackInvoker.dataVisible, callbackInvoker));                                                    // 1485
        });                                                                                                           // 1486
      },                                                                                                              // 1487
      // 1488
      _process_ready: function (msg, updates) {                                                                       // 1489
        var self = this;                                                                                              // 1490
        // Process "sub ready" messages. "sub ready" messages don't take effect                                       // 1491
        // until all current server documents have been flushed to the local                                          // 1492
        // database. We can use a write fence to implement this.                                                      // 1493
        _.each(msg.subs, function (subId) {                                                                           // 1494
          self._runWhenAllServerDocsAreFlushed(function () {                                                          // 1495
            var subRecord = self._subscriptions[subId];                                                               // 1496
            // Did we already unsubscribe?                                                                            // 1497
            if (!subRecord)                                                                                           // 1498
              return;                                                                                                 // 1499
            // Did we already receive a ready message? (Oops!)                                                        // 1500
            if (subRecord.ready)                                                                                      // 1501
              return;                                                                                                 // 1502
            subRecord.ready = true;                                                                                   // 1503
            subRecord.readyCallback && subRecord.readyCallback();                                                     // 1504
            subRecord.readyDeps.changed();                                                                            // 1505
          });                                                                                                         // 1506
        });                                                                                                           // 1507
      },                                                                                                              // 1508
      // 1509
      // Ensures that "f" will be called after all documents currently in                                             // 1510
      // _serverDocuments have been written to the local cache. f will not be called                                  // 1511
      // if the connection is lost before then!                                                                       // 1512
      _runWhenAllServerDocsAreFlushed: function (f) {                                                                 // 1513
        var self = this;                                                                                              // 1514
        var runFAfterUpdates = function () {                                                                          // 1515
          self._afterUpdateCallbacks.push(f);                                                                         // 1516
        };                                                                                                            // 1517
        var unflushedServerDocCount = 0;                                                                              // 1518
        var onServerDocFlush = function () {                                                                          // 1519
          --unflushedServerDocCount;                                                                                  // 1520
          if (unflushedServerDocCount === 0) {                                                                        // 1521
            // This was the last doc to flush! Arrange to run f after the updates                                     // 1522
            // have been applied.                                                                                     // 1523
            runFAfterUpdates();                                                                                       // 1524
          }                                                                                                           // 1525
        };                                                                                                            // 1526
        _.each(self._serverDocuments, function (collectionDocs) {                                                     // 1527
          collectionDocs.forEach(function (serverDoc) {                                                               // 1528
            var writtenByStubForAMethodWithSentMessage = _.any(                                                       // 1529
              serverDoc.writtenByStubs, function (dummy, methodId) {                                                  // 1530
                var invoker = self._methodInvokers[methodId];                                                         // 1531
                return invoker && invoker.sentMessage;                                                                // 1532
              });                                                                                                     // 1533
            if (writtenByStubForAMethodWithSentMessage) {                                                             // 1534
              ++unflushedServerDocCount;                                                                              // 1535
              serverDoc.flushCallbacks.push(onServerDocFlush);                                                        // 1536
            }                                                                                                         // 1537
          });                                                                                                         // 1538
        });                                                                                                           // 1539
        if (unflushedServerDocCount === 0) {                                                                          // 1540
          // There aren't any buffered docs --- we can call f as soon as the current                                  // 1541
          // round of updates is applied!                                                                             // 1542
          runFAfterUpdates();                                                                                         // 1543
        }                                                                                                             // 1544
      },                                                                                                              // 1545
      // 1546
      _livedata_nosub: function (msg) {                                                                               // 1547
        var self = this;                                                                                              // 1548
        // 1549
        // First pass it through _livedata_data, which only uses it to help get                                       // 1550
        // towards quiescence.                                                                                        // 1551
        self._livedata_data(msg);                                                                                     // 1552
        // 1553
        // Do the rest of our processing immediately, with no                                                         // 1554
        // buffering-until-quiescence.                                                                                // 1555
        // 1556
        // we weren't subbed anyway, or we initiated the unsub.                                                       // 1557
        if (!_.has(self._subscriptions, msg.id))                                                                      // 1558
          return;                                                                                                     // 1559
        // 1560
        // XXX COMPAT WITH 1.0.3.1 #errorCallback                                                                     // 1561
        var errorCallback = self._subscriptions[msg.id].errorCallback;                                                // 1562
        var stopCallback = self._subscriptions[msg.id].stopCallback;                                                  // 1563
        // 1564
        self._subscriptions[msg.id].remove();                                                                         // 1565
        // 1566
        var meteorErrorFromMsg = function (msgArg) {                                                                  // 1567
          return msgArg && msgArg.error && new Meteor.Error(                                                          // 1568
            msgArg.error.error, msgArg.error.reason, msgArg.error.details);                                           // 1569
        }                                                                                                             // 1570
        // 1571
        // XXX COMPAT WITH 1.0.3.1 #errorCallback                                                                     // 1572
        if (errorCallback && msg.error) {                                                                             // 1573
          errorCallback(meteorErrorFromMsg(msg));                                                                     // 1574
        }                                                                                                             // 1575
        // 1576
        if (stopCallback) {                                                                                           // 1577
          stopCallback(meteorErrorFromMsg(msg));                                                                      // 1578
        }                                                                                                             // 1579
      },                                                                                                              // 1580
      // 1581
      _process_nosub: function () {                                                                                   // 1582
        // This is called as part of the "buffer until quiescence" process, but                                       // 1583
        // nosub's effect is always immediate. It only goes in the buffer at all                                      // 1584
        // because it's possible for a nosub to be the thing that triggers                                            // 1585
        // quiescence, if we were waiting for a sub to be revived and it dies                                         // 1586
        // instead.                                                                                                   // 1587
      },                                                                                                              // 1588
      // 1589
      _livedata_result: function (msg) {                                                                              // 1590
        // id, result or error. error has error (code), reason, details                                               // 1591
        // 1592
        var self = this;                                                                                              // 1593
        // 1594
        // Lets make sure there are no buffered writes before returning result.                                       // 1595
        if (!_.isEmpty(self._bufferedWrites)) {                                                                       // 1596
          self._flushBufferedWrites();                                                                                // 1597
        }                                                                                                             // 1598
        // 1599
        // find the outstanding request                                                                               // 1600
        // should be O(1) in nearly all realistic use cases                                                           // 1601
        if (_.isEmpty(self._outstandingMethodBlocks)) {                                                               // 1602
          Meteor._debug("Received method result but no methods outstanding");                                         // 1603
          return;                                                                                                     // 1604
        }                                                                                                             // 1605
        var currentMethodBlock = self._outstandingMethodBlocks[0].methods;                                            // 1606
        var m;                                                                                                        // 1607
        for (var i = 0; i < currentMethodBlock.length; i++) {                                                         // 1608
          m = currentMethodBlock[i];                                                                                  // 1609
          if (m.methodId === msg.id)                                                                                  // 1610
            break;                                                                                                    // 1611
        }                                                                                                             // 1612
        // 1613
        if (!m) {                                                                                                     // 1614
          Meteor._debug("Can't match method response to original method call", msg);                                  // 1615
          return;                                                                                                     // 1616
        }                                                                                                             // 1617
        // 1618
        // Remove from current method block. This may leave the block empty, but we                                   // 1619
        // don't move on to the next block until the callback has been delivered, in                                  // 1620
        // _outstandingMethodFinished.                                                                                // 1621
        currentMethodBlock.splice(i, 1);                                                                              // 1622
        // 1623
        if (_.has(msg, 'error')) {                                                                                    // 1624
          m.receiveResult(new Meteor.Error(                                                                           // 1625
            msg.error.error, msg.error.reason,                                                                        // 1626
            msg.error.details));                                                                                      // 1627
        } else {                                                                                                      // 1628
          // msg.result may be undefined if the method didn't return a                                                // 1629
          // value                                                                                                    // 1630
          m.receiveResult(undefined, msg.result);                                                                     // 1631
        }                                                                                                             // 1632
      },                                                                                                              // 1633
      // 1634
      // Called by MethodInvoker after a method's callback is invoked.  If this was                                   // 1635
      // the last outstanding method in the current block, runs the next block. If                                    // 1636
      // there are no more methods, consider accepting a hot code push.                                               // 1637
      _outstandingMethodFinished: function () {                                                                       // 1638
        var self = this;                                                                                              // 1639
        if (self._anyMethodsAreOutstanding())                                                                         // 1640
          return;                                                                                                     // 1641
        // 1642
        // No methods are outstanding. This should mean that the first block of                                       // 1643
        // methods is empty. (Or it might not exist, if this was a method that                                        // 1644
        // half-finished before disconnect/reconnect.)                                                                // 1645
        if (!_.isEmpty(self._outstandingMethodBlocks)) {                                                             // 1646
          var firstBlock = self._outstandingMethodBlocks.shift();                                                     // 1647
          if (!_.isEmpty(firstBlock.methods))                                                                        // 1648
            throw new Error("No methods outstanding but nonempty block: " +                                           // 1649
              JSON.stringify(firstBlock));                                                              // 1650
          // 1651
          // Send the outstanding methods now in the first block.                                                     // 1652
          if (!_.isEmpty(self._outstandingMethodBlocks))                                                              // 1653
            self._sendOutstandingMethods();                                                                           // 1654
        }                                                                                                             // 1655
        // 1656
        // Maybe accept a hot code push.                                                                              // 1657
        self._maybeMigrate();                                                                                         // 1658
      },                                                                                                              // 1659
      // 1660
      // Sends messages for all the methods in the first block in                                                     // 1661
      // _outstandingMethodBlocks.                                                                                    // 1662
      _sendOutstandingMethods: function () {                                                                           // 1663
        var self = this;                                                                                              // 1664
        if (_.isEmpty(self._outstandingMethodBlocks))                                                                 // 1665
          return;                                                                                                     // 1666
        _.each(self._outstandingMethodBlocks[0].methods, function (m) {                                               // 1667
          m.sendMessage();                                                                                            // 1668
        });                                                                                                           // 1669
      },                                                                                                              // 1670
      // 1671
      _livedata_error: function (msg) {                                                                               // 1672
        Meteor._debug("Received error from server: ", msg.reason);                                                    // 1673
        if (msg.offendingMessage)                                                                                     // 1674
          Meteor._debug("For: ", msg.offendingMessage);                                                               // 1675
      },                                                                                                              // 1676
      // 1677
      _callOnReconnectAndSendAppropriateOutstandingMethods: function () {                                              // 1678
        var self = this;                                                                                              // 1679
        var oldOutstandingMethodBlocks = self._outstandingMethodBlocks;                                               // 1680
        self._outstandingMethodBlocks = [];                                                                           // 1681
        // 1682
        self.onReconnect();                                                                                           // 1683
        // 1684
        if (_.isEmpty(oldOutstandingMethodBlocks))                                                                    // 1685
          return;                                                                                                     // 1686
        // 1687
        // We have at least one block worth of old outstanding methods to try                                         // 1688
        // again. First: did onReconnect actually send anything? If not, we just                                      // 1689
        // restore all outstanding methods and run the first block.                                                   // 1690
        if (_.isEmpty(self._outstandingMethodBlocks)) {                                                               // 1691
          self._outstandingMethodBlocks = oldOutstandingMethodBlocks;                                                 // 1692
          self._sendOutstandingMethods();                                                                             // 1693
          return;                                                                                                     // 1694
        }                                                                                                             // 1695
        // 1696
        // OK, there are blocks on both sides. Special case: merge the last block of                                  // 1697
        // the reconnect methods with the first block of the original methods, if                                     // 1698
        // neither of them are "wait" blocks.                                                                         // 1699
        if (!_.last(self._outstandingMethodBlocks).wait &&                                                            // 1700
          !oldOutstandingMethodBlocks[0].wait) {                                                                    // 1701
          _.each(oldOutstandingMethodBlocks[0].methods, function (m) {                                                // 1702
            _.last(self._outstandingMethodBlocks).methods.push(m);                                                    // 1703
            // 1704
            // If this "last block" is also the first block, send the message.                                        // 1705
            if (self._outstandingMethodBlocks.length === 1)                                                           // 1706
              m.sendMessage();                                                                                        // 1707
          });                                                                                                         // 1708
          // 1709
          oldOutstandingMethodBlocks.shift();                                                                         // 1710
        }                                                                                                             // 1711
        // 1712
        // Now add the rest of the original blocks on.                                                                // 1713
        _.each(oldOutstandingMethodBlocks, function (block) {                                                         // 1714
          self._outstandingMethodBlocks.push(block);                                                                  // 1715
        });                                                                                                           // 1716
      },                                                                                                              // 1717
      // 1718
      // We can accept a hot code push if there are no methods in flight.                                             // 1719
      _readyToMigrate: function () {                                                                                   // 1720
        var self = this;                                                                                              // 1721
        return _.isEmpty(self._methodInvokers);                                                                       // 1722
      },                                                                                                              // 1723
      // 1724
      // If we were blocking a migration, see if it's now possible to continue.                                       // 1725
      // Call whenever the set of outstanding/blocked methods shrinks.                                                // 1726
      _maybeMigrate: function () {                                                                                    // 1727
        var self = this;                                                                                              // 1728
        if (self._retryMigrate && self._readyToMigrate()) {                                                           // 1729
          self._retryMigrate();                                                                                       // 1730
          self._retryMigrate = null;                                                                                  // 1731
        }                                                                                                             // 1732
      }                                                                                                               // 1733
    });                                                                                                               // 1734
    // 1735
    LivedataTest.Connection = Connection;                                                                             // 1736
    // 1737
    // @param url {String} URL to Meteor app,                                                                         // 1738
    //     e.g.:                                                                                                      // 1739
    //     "subdomain.meteor.com",                                                                                    // 1740
    //     "http://subdomain.meteor.com",                                                                             // 1741
    //     "/",                                                                                                       // 1742
    //     "ddp+sockjs://ddp--****-foo.meteor.com/sockjs"                                                             // 1743
    // 1744
    /**                                                                                                               // 1745
     * @summary Connect to the server of a different Meteor application to subscribe to its document sets and invoke its remote methods.
     * @locus Anywhere                                                                                                // 1747
     * @param {String} url The URL of another Meteor application.                                                     // 1748
     */                                                                                                               // 1749
    DDP.connect = function (url, options) {                                                                           // 1750
      var ret = new Connection(url, options);                                                                         // 1751
      allConnections.push(ret); // hack. see below.                                                                   // 1752
      return ret;                                                                                                     // 1753
    };                                                                                                                // 1754
    // 1755
    // Hack for `spiderable` package: a way to see if the page is done                                                // 1756
    // loading all the data it needs.                                                                                 // 1757
    //                                                                                                                // 1758
    allConnections = [];                                                                                              // 1759
    DDP._allSubscriptionsReady = function () {                                                                        // 1760
      return _.all(allConnections, function (conn) {                                                                  // 1761
        return _.all(conn._subscriptions, function (sub) {                                                            // 1762
          return sub.ready;                                                                                           // 1763
        });                                                                                                           // 1764
      });                                                                                                             // 1765
    };                                                                                                                // 1766
    // 1767
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }).call(this);






  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                //
    // packages/ddp-client/client_convenience.js                                                                      //
    //                                                                                                                //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Meteor.refresh can be called on the client (if you're in common code) but it                                   // 1
    // only has an effect on the server.                                                                              // 2
    Meteor.refresh = function (notification) {                                                                        // 3
    };                                                                                                                // 4
    // 5
    if (Meteor.isClient) {                                                                                            // 6
      // By default, try to connect back to the same endpoint as the page                                             // 7
      // was served from.                                                                                             // 8
      //                                                                                                              // 9
      // XXX We should be doing this a different way. Right now we don't                                              // 10
      // include ROOT_URL_PATH_PREFIX when computing ddpUrl. (We don't                                                // 11
      // include it on the server when computing                                                                      // 12
      // DDP_DEFAULT_CONNECTION_URL, and we don't include it in our                                                   // 13
      // default, '/'.) We get by with this because DDP.connect then                                                  // 14
      // forces the URL passed to it to be interpreted relative to the                                                // 15
      // app's deploy path, even if it is absolute. Instead, we should                                                // 16
      // make DDP_DEFAULT_CONNECTION_URL, if set, include the path prefix;                                            // 17
      // make the default ddpUrl be '' rather that '/'; and make                                                      // 18
      // _translateUrl in stream_client_common.js not force absolute paths                                            // 19
      // to be treated like relative paths. See also                                                                  // 20
      // stream_client_common.js #RationalizingRelativeDDPURLs                                                        // 21
      var ddpUrl = '/';                                                                                               // 22
      if (typeof __meteor_runtime_config__ !== "undefined") {                                                         // 23
        if (__meteor_runtime_config__.DDP_DEFAULT_CONNECTION_URL)                                                     // 24
          ddpUrl = __meteor_runtime_config__.DDP_DEFAULT_CONNECTION_URL;                                              // 25
      }                                                                                                               // 26
      // 27
      var retry = new Retry();                                                                                        // 28
      // 29
      var onDDPVersionNegotiationFailure = function (description) {                                                   // 30
        Meteor._debug(description);                                                                                   // 31
        if (Package.reload) {                                                                                         // 32
          var migrationData = Package.reload.Reload._migrationData('livedata') || {};                                 // 33
          var failures = migrationData.DDPVersionNegotiationFailures || 0;                                            // 34
          ++failures;                                                                                                 // 35
          Package.reload.Reload._onMigrate('livedata', function () {                                                  // 36
            return [true, { DDPVersionNegotiationFailures: failures }];                                                 // 37
          });                                                                                                         // 38
          retry.retryLater(failures, function () {                                                                    // 39
            Package.reload.Reload._reload();                                                                          // 40
          });                                                                                                         // 41
        }                                                                                                             // 42
      };                                                                                                              // 43
      // 44
      Meteor.connection =                                                                                             // 45
        DDP.connect(ddpUrl, {                                                                                         // 46
          onDDPVersionNegotiationFailure: onDDPVersionNegotiationFailure                                              // 47
        });                                                                                                           // 48
      // 49
      // Proxy the public methods of Meteor.connection so they can                                                    // 50
      // be called directly on Meteor.                                                                                // 51
      _.each(['subscribe', 'methods', 'call', 'apply', 'status', 'reconnect',                                         // 52
        'disconnect'],                                                                                          // 53
        function (name) {                                                                                        // 54
          Meteor[name] = _.bind(Meteor.connection[name], Meteor.connection);                                     // 55
        });                                                                                                      // 56
    } else {                                                                                                          // 57
      // Never set up a default connection on the server. Don't even map                                              // 58
      // subscribe/call/etc onto Meteor.                                                                              // 59
      Meteor.connection = null;                                                                                       // 60
    }                                                                                                                 // 61
    // 62
    // Meteor.connection used to be called                                                                            // 63
    // Meteor.default_connection. Provide backcompat as a courtesy even                                               // 64
    // though it was never documented.                                                                                // 65
    // XXX COMPAT WITH 0.6.4                                                                                          // 66
    Meteor.default_connection = Meteor.connection;                                                                    // 67
    // 68
    // We should transition from Meteor.connect to DDP.connect.                                                       // 69
    // XXX COMPAT WITH 0.6.4                                                                                          // 70
    Meteor.connect = DDP.connect;                                                                                     // 71
    // 72
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }).call(this);


  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols)
      (s in pkg) || (pkg[s] = symbols[s]);
  })(Package['ddp-client'] = {}, {
    DDP: DDP,
    LivedataTest: LivedataTest
  });

})();
(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var DDP = Package['ddp-client'].DDP;



  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols)
      (s in pkg) || (pkg[s] = symbols[s]);
  })(Package.ddp = {}, {
    DDP: DDP
  });

})();
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var _ = Package.underscore._;
  var LocalCollection = Package.minimongo.LocalCollection;
  var Minimongo = Package.minimongo.Minimongo;
  var check = Package.check.check;
  var Match = Package.check.Match;
  var EJSON = Package.ejson.EJSON;
  var DDP = Package['ddp-client'].DDP;
  var meteorInstall = Package.modules.meteorInstall;
  var Buffer = Package.modules.Buffer;
  var process = Package.modules.process;
  var Symbol = Package['ecmascript-runtime'].Symbol;
  var Map = Package['ecmascript-runtime'].Map;
  var Set = Package['ecmascript-runtime'].Set;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var AllowDeny;

  var require = meteorInstall({
    "node_modules": {
      "meteor": {
        "allow-deny": {
          "allow-deny.js": function () {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                //
            // packages/allow-deny/allow-deny.js                                                                              //
            //                                                                                                                //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            ///                                                                                                               //
            /// Remote methods and access control.                                                                            //
            ///                                                                                                               //
            //
            // Restrict default mutators on collection. allow() and deny() take the                                           //
            // same options:                                                                                                  //
            //                                                                                                                //
            // options.insert {Function(userId, doc)}                                                                         //
            //   return true to allow/deny adding this document                                                               //
            //                                                                                                                //
            // options.update {Function(userId, docs, fields, modifier)}                                                      //
            //   return true to allow/deny updating these documents.                                                          //
            //   `fields` is passed as an array of fields that are to be modified                                             //
            //                                                                                                                //
            // options.remove {Function(userId, docs)}                                                                        //
            //   return true to allow/deny removing these documents                                                           //
            //                                                                                                                //
            // options.fetch {Array}                                                                                          //
            //   Fields to fetch for these validators. If any call to allow or deny                                           //
            //   does not have this option then all fields are loaded.                                                        //
            //                                                                                                                //
            // allow and deny can be called multiple times. The validators are                                                //
            // evaluated as follows:                                                                                          //
            // - If neither deny() nor allow() has been called on the collection,                                             //
            //   then the request is allowed if and only if the "insecure" smart                                              //
            //   package is in use.                                                                                           //
            // - Otherwise, if any deny() function returns true, the request is denied.                                       //
            // - Otherwise, if any allow() function returns true, the request is allowed.                                     //
            // - Otherwise, the request is denied.                                                                            //
            //                                                                                                                //
            // Meteor may call your deny() and allow() functions in any order, and may not                                    //
            // call all of them if it is able to make a decision without calling them all                                     //
            // (so don't include side effects).                                                                               //
            //
            AllowDeny = {                                                                                                     // 35
              CollectionPrototype: {}                                                                                         // 36
            };                                                                                                                // 35
            //
            // In the `mongo` package, we will extend Mongo.Collection.prototype with these                                   //
            // methods                                                                                                        //
            var CollectionPrototype = AllowDeny.CollectionPrototype;                                                          // 41
            //
            /**                                                                                                               //
             * @summary Allow users to write directly to this collection from client code, subject to limitations you define.
             * @locus Server                                                                                                  //
             * @method allow                                                                                                  //
             * @memberOf Mongo.Collection                                                                                     //
             * @instance                                                                                                      //
             * @param {Object} options                                                                                        //
             * @param {Function} options.insert,update,remove Functions that look at a proposed modification to the database and return true if it should be allowed.
             * @param {String[]} options.fetch Optional performance enhancement. Limits the fields that will be fetched from the database for inspection by your `update` and `remove` functions.
             * @param {Function} options.transform Overrides `transform` on the  [`Collection`](#collections).  Pass `null` to disable transformation.
             */                                                                                                               //
            CollectionPrototype.allow = function (options) {                                                                  // 54
              addValidator(this, 'allow', options);                                                                           // 55
            };                                                                                                                // 56
            //
            /**                                                                                                               //
             * @summary Override `allow` rules.                                                                               //
             * @locus Server                                                                                                  //
             * @method deny                                                                                                   //
             * @memberOf Mongo.Collection                                                                                     //
             * @instance                                                                                                      //
             * @param {Object} options                                                                                        //
             * @param {Function} options.insert,update,remove Functions that look at a proposed modification to the database and return true if it should be denied, even if an [allow](#allow) rule says otherwise.
             * @param {String[]} options.fetch Optional performance enhancement. Limits the fields that will be fetched from the database for inspection by your `update` and `remove` functions.
             * @param {Function} options.transform Overrides `transform` on the  [`Collection`](#collections).  Pass `null` to disable transformation.
             */                                                                                                               //
            CollectionPrototype.deny = function (options) {                                                                   // 69
              addValidator(this, 'deny', options);                                                                            // 70
            };                                                                                                                // 71
            //
            CollectionPrototype._defineMutationMethods = function (options) {                                                 // 73
              var self = this;                                                                                                // 74
              options = options || {};                                                                                        // 75
              //
              // set to true once we call any allow or deny methods. If true, use                                             //
              // allow/deny semantics. If false, use insecure mode semantics.                                                 //
              self._restricted = false;                                                                                       // 79
              //
              // Insecure mode (default to allowing writes). Defaults to 'undefined' which                                    //
              // means insecure iff the insecure package is loaded. This property can be                                      //
              // overriden by tests or packages wishing to change insecure mode behavior of                                   //
              // their collections.                                                                                           //
              self._insecure = undefined;                                                                                     // 85
              //
              self._validators = {                                                                                            // 87
                insert: { allow: [], deny: [] },                                                                              // 88
                update: { allow: [], deny: [] },                                                                              // 89
                remove: { allow: [], deny: [] },                                                                              // 90
                upsert: { allow: [], deny: [] }, // dummy arrays; can't set these!                                            // 91
                fetch: [],                                                                                                    // 92
                fetchAllFields: false                                                                                         // 93
              };                                                                                                              // 87
              //
              if (!self._name) return; // anonymous collection                                                                // 96
              //
              // XXX Think about method namespacing. Maybe methods should be                                                  //
              // "Meteor:Mongo:insert/NAME"?                                                                                  //
              self._prefix = '/' + self._name + '/';                                                                          // 101
              //
              // Mutation Methods                                                                                             //
              // Minimongo on the server gets no stubs; instead, by default                                                   //
              // it wait()s until its result is ready, yielding.                                                              //
              // This matches the behavior of macromongo on the server better.                                                //
              // XXX see #MeteorServerNull                                                                                    //
              if (self._connection && (self._connection === Meteor.server || Meteor.isClient)) {                              // 108
                (function () {                                                                                                // 108
                  var m = {};                                                                                                 // 109
                  //
                  _.each(['insert', 'update', 'remove'], function (method) {                                                  // 111
                    var methodName = self._prefix + method;                                                                   // 112
                    //
                    if (options.useExisting) {                                                                                // 114
                      var handlerPropName = Meteor.isClient ? '_methodHandlers' : 'method_handlers';                          // 115
                      // Do not try to create additional methods if this has already been called.                             //
                      // (Otherwise the .methods() call below will throw an error.)                                           //
                      if (self._connection[handlerPropName] && typeof self._connection[handlerPropName][methodName] === 'function') return;
                    }                                                                                                         // 120
                    //
                    m[methodName] = function () /* ... */ {                                                                    // 122
                      // All the methods do their own validation, instead of using check().                                   //
                      check(arguments, [Match.Any]);                                                                          // 124
                      var args = _.toArray(arguments);                                                                        // 125
                      try {                                                                                                   // 126
                        // For an insert, if the client didn't specify an _id, generate one                                   //
                        // now; because this uses DDP.randomStream, it will be consistent with                                //
                        // what the client generated. We generate it now rather than later so                                 //
                        // that if (eg) an allow/deny rule does an insert to the same                                         //
                        // collection (not that it really should), the generated _id will                                     //
                        // still be the first use of the stream and will be consistent.                                       //
                        //                                                                                                    //
                        // However, we don't actually stick the _id onto the document yet,                                    //
                        // because we want allow/deny rules to be able to differentiate                                       //
                        // between arbitrary client-specified _id fields and merely                                           //
                        // client-controlled-via-randomSeed fields.                                                           //
                        var generatedId = null;                                                                               // 138
                        if (method === "insert" && !_.has(args[0], '_id')) {                                                  // 139
                          generatedId = self._makeNewID();                                                                    // 140
                        }                                                                                                     // 141
                        //
                        if (this.isSimulation) {                                                                              // 143
                          // In a client simulation, you can do any mutation (even with a                                     //
                          // complex selector).                                                                               //
                          if (generatedId !== null) args[0]._id = generatedId;                                                // 146
                          return self._collection[method].apply(self._collection, args);                                      // 148
                        }                                                                                                     // 150
                        //
                        // This is the server receiving a method call from the client.                                        //
                        //
                        // We don't allow arbitrary selectors in mutations from the client: only                              //
                        // single-ID selectors.                                                                               //
                        if (method !== 'insert') throwIfSelectorIsNotId(args[0], method);                                     // 156
                        //
                        if (self._restricted) {                                                                               // 159
                          // short circuit if there is no way it will pass.                                                   //
                          if (self._validators[method].allow.length === 0) {                                                  // 161
                            throw new Meteor.Error(403, "Access denied. No allow validators set on restricted " + "collection for method '" + method + "'.");
                          }                                                                                                   // 165
                          //
                          var validatedMethodName = '_validated' + method.charAt(0).toUpperCase() + method.slice(1);          // 167
                          args.unshift(this.userId);                                                                          // 169
                          method === 'insert' && args.push(generatedId);                                                      // 170
                          return self[validatedMethodName].apply(self, args);                                                 // 171
                        } else if (self._isInsecure()) {                                                                      // 172
                          if (generatedId !== null) args[0]._id = generatedId;                                                // 173
                          // In insecure mode, allow any mutation (with a simple selector).                                   //
                          // XXX This is kind of bogus.  Instead of blindly passing whatever                                  //
                          //     we get from the network to this function, we should actually                                 //
                          //     know the correct arguments for the function and pass just                                    //
                          //     them.  For example, if you have an extraneous extra null                                     //
                          //     argument and this is Mongo on the server, the .wrapAsync'd                                   //
                          //     functions like update will get confused and pass the                                         //
                          //     "fut.resolver()" in the wrong slot, where _update will never                                 //
                          //     invoke it. Bam, broken DDP connection.  Probably should just                                 //
                          //     take this whole method and write it three times, invoking                                    //
                          //     helpers for the common code.                                                                 //
                          return self._collection[method].apply(self._collection, args);                                      // 186
                        } else {                                                                                              // 187
                          // In secure mode, if we haven't called allow or deny, then nothing                                 //
                          // is permitted.                                                                                    //
                          throw new Meteor.Error(403, "Access denied");                                                       // 190
                        }                                                                                                     // 191
                      } catch (e) {                                                                                           // 192
                        if (e.name === 'MongoError' || e.name === 'MinimongoError') {                                         // 193
                          throw new Meteor.Error(409, e.toString());                                                          // 194
                        } else {                                                                                              // 195
                          throw e;                                                                                            // 196
                        }                                                                                                     // 197
                      }                                                                                                       // 198
                    };                                                                                                        // 199
                  });                                                                                                         // 200
                  //
                  self._connection.methods(m);                                                                                // 202
                })();                                                                                                         // 108
              }                                                                                                               // 203
            };                                                                                                                // 204
            //
            CollectionPrototype._updateFetch = function (fields) {                                                            // 206
              var self = this;                                                                                                // 207
              //
              if (!self._validators.fetchAllFields) {                                                                         // 209
                if (fields) {                                                                                                 // 210
                  self._validators.fetch = _.union(self._validators.fetch, fields);                                           // 211
                } else {                                                                                                      // 212
                  self._validators.fetchAllFields = true;                                                                     // 213
                  // clear fetch just to make sure we don't accidentally read it                                              //
                  self._validators.fetch = null;                                                                              // 215
                }                                                                                                             // 216
              }                                                                                                               // 217
            };                                                                                                                // 218
            //
            CollectionPrototype._isInsecure = function () {                                                                   // 220
              var self = this;                                                                                                // 221
              if (self._insecure === undefined) return !!Package.insecure;                                                    // 222
              return self._insecure;                                                                                          // 224
            };                                                                                                                // 225
            //
            CollectionPrototype._validatedInsert = function (userId, doc, generatedId) {                                      // 227
              var self = this;                                                                                                // 229
              //
              // call user validators.                                                                                        //
              // Any deny returns true means denied.                                                                          //
              if (_.any(self._validators.insert.deny, function (validator) {                                                  // 233
                return validator(userId, docToValidate(validator, doc, generatedId));                                         // 234
              })) {                                                                                                           // 235
                throw new Meteor.Error(403, "Access denied");                                                                 // 236
              }                                                                                                               // 237
              // Any allow returns true means proceed. Throw error if they all fail.                                          //
              if (_.all(self._validators.insert.allow, function (validator) {                                                 // 239
                return !validator(userId, docToValidate(validator, doc, generatedId));                                        // 240
              })) {                                                                                                           // 241
                throw new Meteor.Error(403, "Access denied");                                                                 // 242
              }                                                                                                               // 243
              //
              // If we generated an ID above, insert it now: after the validation, but                                        //
              // before actually inserting.                                                                                   //
              if (generatedId !== null) doc._id = generatedId;                                                                // 247
              //
              self._collection.insert.call(self._collection, doc);                                                            // 250
            };                                                                                                                // 251
            //
            // Simulate a mongo `update` operation while validating that the access                                           //
            // control rules set by calls to `allow/deny` are satisfied. If all                                               //
            // pass, rewrite the mongo operation to use $in to set the list of                                                //
            // document ids to change ##ValidatedChange                                                                       //
            CollectionPrototype._validatedUpdate = function (userId, selector, mutator, options) {                            // 257
              var self = this;                                                                                                // 259
              //
              check(mutator, Object);                                                                                         // 261
              //
              options = _.clone(options) || {};                                                                               // 263
              //
              if (!LocalCollection._selectorIsIdPerhapsAsObject(selector)) throw new Error("validated update should be of a single ID");
              //
              // We don't support upserts because they don't fit nicely into allow/deny                                       //
              // rules.                                                                                                       //
              if (options.upsert) throw new Meteor.Error(403, "Access denied. Upserts not " + "allowed in a restricted collection.");
              //
              var noReplaceError = "Access denied. In a restricted collection you can only" + " update documents, not replace them. Use a Mongo update operator, such " + "as '$set'.";
              //
              // compute modified fields                                                                                      //
              var fields = [];                                                                                                // 279
              if (_.isEmpty(mutator)) {                                                                                       // 280
                throw new Meteor.Error(403, noReplaceError);                                                                  // 281
              }                                                                                                               // 282
              _.each(mutator, function (params, op) {                                                                         // 283
                if (op.charAt(0) !== '$') {                                                                                   // 284
                  throw new Meteor.Error(403, noReplaceError);                                                                // 285
                } else if (!_.has(ALLOWED_UPDATE_OPERATIONS, op)) {                                                           // 286
                  throw new Meteor.Error(403, "Access denied. Operator " + op + " not allowed in a restricted collection.");  // 287
                } else {                                                                                                      // 289
                  _.each(_.keys(params), function (field) {                                                                   // 290
                    // treat dotted fields as if they are replacing their                                                     //
                    // top-level part                                                                                         //
                    if (field.indexOf('.') !== -1) field = field.substring(0, field.indexOf('.'));                            // 293
                    //
                    // record the field we are trying to change                                                               //
                    if (!_.contains(fields, field)) fields.push(field);                                                       // 297
                  });                                                                                                         // 299
                }                                                                                                             // 300
              });                                                                                                             // 301
              //
              var findOptions = { transform: null };                                                                          // 303
              if (!self._validators.fetchAllFields) {                                                                         // 304
                findOptions.fields = {};                                                                                      // 305
                _.each(self._validators.fetch, function (fieldName) {                                                         // 306
                  findOptions.fields[fieldName] = 1;                                                                          // 307
                });                                                                                                           // 308
              }                                                                                                               // 309
              //
              var doc = self._collection.findOne(selector, findOptions);                                                      // 311
              if (!doc) // none satisfied!                                                                                    // 312
                return 0;                                                                                                     // 313
              //
              // call user validators.                                                                                        //
              // Any deny returns true means denied.                                                                          //
              if (_.any(self._validators.update.deny, function (validator) {                                                  // 317
                var factoriedDoc = transformDoc(validator, doc);                                                              // 318
                return validator(userId, factoriedDoc, fields, mutator);                                                      // 319
              })) {                                                                                                           // 323
                throw new Meteor.Error(403, "Access denied");                                                                 // 324
              }                                                                                                               // 325
              // Any allow returns true means proceed. Throw error if they all fail.                                          //
              if (_.all(self._validators.update.allow, function (validator) {                                                 // 327
                var factoriedDoc = transformDoc(validator, doc);                                                              // 328
                return !validator(userId, factoriedDoc, fields, mutator);                                                     // 329
              })) {                                                                                                           // 333
                throw new Meteor.Error(403, "Access denied");                                                                 // 334
              }                                                                                                               // 335
              //
              options._forbidReplace = true;                                                                                  // 337
              //
              // Back when we supported arbitrary client-provided selectors, we actually                                      //
              // rewrote the selector to include an _id clause before passing to Mongo to                                     //
              // avoid races, but since selector is guaranteed to already just be an ID, we                                   //
              // don't have to any more.                                                                                      //
              //
              return self._collection.update.call(self._collection, selector, mutator, options);                              // 344
            };                                                                                                                // 346
            //
            // Only allow these operations in validated updates. Specifically                                                 //
            // whitelist operations, rather than blacklist, so new complex                                                    //
            // operations that are added aren't automatically allowed. A complex                                              //
            // operation is one that does more than just modify its target                                                    //
            // field. For now this contains all update operations except '$rename'.                                           //
            // http://docs.mongodb.org/manual/reference/operators/#update                                                     //
            var ALLOWED_UPDATE_OPERATIONS = {                                                                                 // 354
              $inc: 1, $set: 1, $unset: 1, $addToSet: 1, $pop: 1, $pullAll: 1, $pull: 1,                                      // 355
              $pushAll: 1, $push: 1, $bit: 1                                                                                  // 356
            };                                                                                                                // 354
            //
            // Simulate a mongo `remove` operation while validating access control                                            //
            // rules. See #ValidatedChange                                                                                    //
            CollectionPrototype._validatedRemove = function (userId, selector) {                                              // 361
              var self = this;                                                                                                // 362
              //
              var findOptions = { transform: null };                                                                          // 364
              if (!self._validators.fetchAllFields) {                                                                         // 365
                findOptions.fields = {};                                                                                      // 366
                _.each(self._validators.fetch, function (fieldName) {                                                         // 367
                  findOptions.fields[fieldName] = 1;                                                                          // 368
                });                                                                                                           // 369
              }                                                                                                               // 370
              //
              var doc = self._collection.findOne(selector, findOptions);                                                      // 372
              if (!doc) return 0;                                                                                             // 373
              //
              // call user validators.                                                                                        //
              // Any deny returns true means denied.                                                                          //
              if (_.any(self._validators.remove.deny, function (validator) {                                                  // 378
                return validator(userId, transformDoc(validator, doc));                                                       // 379
              })) {                                                                                                           // 380
                throw new Meteor.Error(403, "Access denied");                                                                 // 381
              }                                                                                                               // 382
              // Any allow returns true means proceed. Throw error if they all fail.                                          //
              if (_.all(self._validators.remove.allow, function (validator) {                                                 // 384
                return !validator(userId, transformDoc(validator, doc));                                                      // 385
              })) {                                                                                                           // 386
                throw new Meteor.Error(403, "Access denied");                                                                 // 387
              }                                                                                                               // 388
              //
              // Back when we supported arbitrary client-provided selectors, we actually                                      //
              // rewrote the selector to {_id: {$in: [ids that we found]}} before passing to                                  //
              // Mongo to avoid races, but since selector is guaranteed to already just be                                    //
              // an ID, we don't have to any more.                                                                            //
              //
              return self._collection.remove.call(self._collection, selector);                                                // 395
            };                                                                                                                // 396
            //
            CollectionPrototype._callMutatorMethod = function () {                                                            // 398
              function _callMutatorMethod(name, args, callback) {                                                             // 398
                if (Meteor.isClient && !callback && !alreadyInSimulation()) {                                                 // 399
                  // Client can't block, so it can't report errors by exception,                                              //
                  // only by callback. If they forget the callback, give them a                                               //
                  // default one that logs the error, so they aren't totally                                                  //
                  // baffled if their writes don't work because their database is                                             //
                  // down.                                                                                                    //
                  // Don't give a default callback in simulation, because inside stubs we                                     //
                  // want to return the results from the local collection immediately and                                     //
                  // not force a callback.                                                                                    //
                  callback = function () {                                                                                    // 408
                    function callback(err) {                                                                                  // 408
                      if (err) Meteor._debug(name + " failed: " + (err.reason || err.stack));                                 // 409
                    }                                                                                                         // 411
                    //
                    return callback;                                                                                          // 408
                  }();                                                                                                        // 408
                }                                                                                                             // 412
                //
                // For two out of three mutator methods, the first argument is a selector                                     //
                var firstArgIsSelector = name === "update" || name === "remove";                                              // 415
                if (firstArgIsSelector && !alreadyInSimulation()) {                                                           // 416
                  // If we're about to actually send an RPC, we should throw an error if                                      //
                  // this is a non-ID selector, because the mutation methods only allow                                       //
                  // single-ID selectors. (If we don't throw here, we'll see flicker.)                                        //
                  throwIfSelectorIsNotId(args[0], name);                                                                      // 420
                }                                                                                                             // 421
                //
                var mutatorMethodName = this._prefix + name;                                                                  // 423
                return this._connection.apply(mutatorMethodName, args, { returnStubValue: true }, callback);                  // 424
              }                                                                                                               // 426
              //
              return _callMutatorMethod;                                                                                      // 398
            }();                                                                                                              // 398
            //
            function transformDoc(validator, doc) {                                                                           // 428
              if (validator.transform) return validator.transform(doc);                                                       // 429
              return doc;                                                                                                     // 431
            }                                                                                                                 // 432
            //
            function docToValidate(validator, doc, generatedId) {                                                             // 434
              var ret = doc;                                                                                                  // 435
              if (validator.transform) {                                                                                      // 436
                ret = EJSON.clone(doc);                                                                                       // 437
                // If you set a server-side transform on your collection, then you don't get                                  //
                // to tell the difference between "client specified the ID" and "server                                       //
                // generated the ID", because transforms expect to get _id.  If you want to                                   //
                // do that check, you can do it with a specific                                                               //
                // `C.allow({insert: f, transform: null})` validator.                                                         //
                if (generatedId !== null) {                                                                                   // 443
                  ret._id = generatedId;                                                                                      // 444
                }                                                                                                             // 445
                ret = validator.transform(ret);                                                                               // 446
              }                                                                                                               // 447
              return ret;                                                                                                     // 448
            }                                                                                                                 // 449
            //
            function addValidator(collection, allowOrDeny, options) {                                                         // 451
              // validate keys                                                                                                //
              var VALID_KEYS = ['insert', 'update', 'remove', 'fetch', 'transform'];                                          // 453
              _.each(_.keys(options), function (key) {                                                                        // 454
                if (!_.contains(VALID_KEYS, key)) throw new Error(allowOrDeny + ": Invalid key: " + key);                     // 455
              });                                                                                                             // 457
              //
              collection._restricted = true;                                                                                  // 459
              //
              _.each(['insert', 'update', 'remove'], function (name) {                                                        // 461
                if (options.hasOwnProperty(name)) {                                                                           // 462
                  if (!(options[name] instanceof Function)) {                                                                 // 463
                    throw new Error(allowOrDeny + ": Value for `" + name + "` must be a function");                           // 464
                  }                                                                                                           // 465
                  //
                  // If the transform is specified at all (including as 'null') in this                                       //
                  // call, then take that; otherwise, take the transform from the                                             //
                  // collection.                                                                                              //
                  if (options.transform === undefined) {                                                                      // 470
                    options[name].transform = collection._transform; // already wrapped                                       // 471
                  } else {                                                                                                    // 472
                    options[name].transform = LocalCollection.wrapTransform(options.transform);                             // 473
                  }                                                                                                         // 475
                  //
                  collection._validators[name][allowOrDeny].push(options[name]);                                              // 477
                }                                                                                                             // 478
              });                                                                                                             // 479
              //
              // Only update the fetch fields if we're passed things that affect                                              //
              // fetching. This way allow({}) and allow({insert: f}) don't result in                                          //
              // setting fetchAllFields                                                                                       //
              if (options.update || options.remove || options.fetch) {                                                        // 484
                if (options.fetch && !(options.fetch instanceof Array)) {                                                     // 485
                  throw new Error(allowOrDeny + ": Value for `fetch` must be an array");                                      // 486
                }                                                                                                             // 487
                collection._updateFetch(options.fetch);                                                                       // 488
              }                                                                                                               // 489
            }                                                                                                                 // 490
            //
            function throwIfSelectorIsNotId(selector, methodName) {                                                           // 492
              if (!LocalCollection._selectorIsIdPerhapsAsObject(selector)) {                                                  // 493
                throw new Meteor.Error(403, "Not permitted. Untrusted code may only " + methodName + " documents by ID.");    // 494
              }                                                                                                               // 497
            };                                                                                                                // 498
            //
            // Determine if we are in a DDP method simulation                                                                 //
            function alreadyInSimulation() {                                                                                  // 501
              var enclosing = DDP._CurrentInvocation.get();                                                                   // 502
              return enclosing && enclosing.isSimulation;                                                                     // 503
            }                                                                                                                 // 504
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

          }
        }
      }
    }
  }, { "extensions": [".js", ".json"] });
  require("./node_modules/meteor/allow-deny/allow-deny.js");

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols)
      (s in pkg) || (pkg[s] = symbols[s]);
  })(Package['allow-deny'] = {}, {
    AllowDeny: AllowDeny
  });

})();
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var AllowDeny = Package['allow-deny'].AllowDeny;
  var Random = Package.random.Random;
  var EJSON = Package.ejson.EJSON;
  var _ = Package.underscore._;
  var LocalCollection = Package.minimongo.LocalCollection;
  var Minimongo = Package.minimongo.Minimongo;
  var DDP = Package['ddp-client'].DDP;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;
  var DiffSequence = Package['diff-sequence'].DiffSequence;
  var MongoID = Package['mongo-id'].MongoID;
  var check = Package.check.check;
  var Match = Package.check.Match;
  var meteorInstall = Package.modules.meteorInstall;
  var Buffer = Package.modules.Buffer;
  var process = Package.modules.process;
  var Symbol = Package['ecmascript-runtime'].Symbol;
  var Map = Package['ecmascript-runtime'].Map;
  var Set = Package['ecmascript-runtime'].Set;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var LocalCollectionDriver, Mongo;

  var require = meteorInstall({
    "node_modules": {
      "meteor": {
        "mongo": {
          "local_collection_driver.js": function () {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                    //
            // packages/mongo/local_collection_driver.js                                                                          //
            //                                                                                                                    //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            LocalCollectionDriver = function LocalCollectionDriver() {                                                            // 1
              var self = this;                                                                                                    // 2
              self.noConnCollections = {};                                                                                        // 3
            };                                                                                                                    // 4
            //
            var ensureCollection = function ensureCollection(name, collections) {                                                 // 6
              if (!(name in collections)) collections[name] = new LocalCollection(name);                                          // 7
              return collections[name];                                                                                           // 9
            };                                                                                                                    // 10
            //
            _.extend(LocalCollectionDriver.prototype, {                                                                           // 12
              open: function () {                                                                                                 // 13
                function open(name, conn) {                                                                                       // 13
                  var self = this;                                                                                                // 14
                  if (!name) return new LocalCollection();                                                                        // 15
                  if (!conn) {                                                                                                    // 17
                    return ensureCollection(name, self.noConnCollections);                                                        // 18
                  }                                                                                                               // 19
                  if (!conn._mongo_livedata_collections) conn._mongo_livedata_collections = {};                                   // 20
                  // XXX is there a way to keep track of a connection's collections without                                       //
                  // dangling it off the connection object?                                                                       //
                  return ensureCollection(name, conn._mongo_livedata_collections);                                                // 24
                }                                                                                                                 // 25
                //
                return open;                                                                                                      // 13
              }()                                                                                                                 // 13
            });                                                                                                                   // 12
            //
            // singleton                                                                                                          //
            LocalCollectionDriver = new LocalCollectionDriver();                                                                  // 29
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

          }, "collection.js": function (require, exports, module) {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                    //
            // packages/mongo/collection.js                                                                                       //
            //                                                                                                                    //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // options.connection, if given, is a LivedataClient or LivedataServer                                                //
            // XXX presently there is no way to destroy/clean up a Collection                                                     //
            //
            /**                                                                                                                   //
             * @summary Namespace for MongoDB-related items                                                                       //
             * @namespace                                                                                                         //
             */                                                                                                                   //
            Mongo = {};                                                                                                           // 8
            //
            /**                                                                                                                   //
             * @summary Constructor for a Collection                                                                              //
             * @locus Anywhere                                                                                                    //
             * @instancename collection                                                                                           //
             * @class                                                                                                             //
             * @param {String} name The name of the collection.  If null, creates an unmanaged (unsynchronized) local collection.
             * @param {Object} [options]                                                                                          //
             * @param {Object} options.connection The server connection that will manage this collection. Uses the default connection if not specified.  Pass the return value of calling [`DDP.connect`](#ddp_connect) to specify a different server. Pass `null` to specify no connection. Unmanaged (`name` is null) collections cannot specify a connection.
             * @param {String} options.idGeneration The method of generating the `_id` fields of new documents in this collection.  Possible values:
                                                                                                                                  //
             - **`'STRING'`**: random strings                                                                                     //
             - **`'MONGO'`**:  random [`Mongo.ObjectID`](#mongo_object_id) values                                                 //
                                                                                                                                  //
            The default id generation technique is `'STRING'`.                                                                    //
             * @param {Function} options.transform An optional transformation function. Documents will be passed through this function before being returned from `fetch` or `findOne`, and before being passed to callbacks of `observe`, `map`, `forEach`, `allow`, and `deny`. Transforms are *not* applied for the callbacks of `observeChanges` or to cursors returned from publish functions.
             * @param {Boolean} options.defineMutationMethods Set to `false` to skip setting up the mutation methods that enable insert/update/remove from client code. Default `true`.
             */                                                                                                                   //
            Mongo.Collection = function (name, options) {                                                                         // 27
              var self = this;                                                                                                    // 28
              if (!(self instanceof Mongo.Collection)) throw new Error('use "new" to construct a Mongo.Collection');              // 29
              //
              if (!name && name !== null) {                                                                                       // 32
                Meteor._debug("Warning: creating anonymous collection. It will not be " + "saved or synchronized over the network. (Pass null for " + "the collection name to turn off this warning.)");
                name = null;                                                                                                      // 36
              }                                                                                                                   // 37
              //
              if (name !== null && typeof name !== "string") {                                                                    // 39
                throw new Error("First argument to new Mongo.Collection must be a string or null");                               // 40
              }                                                                                                                   // 42
              //
              if (options && options.methods) {                                                                                   // 44
                // Backwards compatibility hack with original signature (which passed                                             //
                // "connection" directly instead of in options. (Connections must have a "methods"                                //
                // method.)                                                                                                       //
                // XXX remove before 1.0                                                                                          //
                options = { connection: options };                                                                                // 49
              }                                                                                                                   // 50
              // Backwards compatibility: "connection" used to be called "manager".                                               //
              if (options && options.manager && !options.connection) {                                                            // 52
                options.connection = options.manager;                                                                             // 53
              }                                                                                                                   // 54
              options = _.extend({                                                                                                // 55
                connection: undefined,                                                                                            // 56
                idGeneration: 'STRING',                                                                                           // 57
                transform: null,                                                                                                  // 58
                _driver: undefined,                                                                                               // 59
                _preventAutopublish: false                                                                                        // 60
              }, options);                                                                                                        // 55
              //
              switch (options.idGeneration) {                                                                                     // 63
                case 'MONGO':                                                                                                     // 64
                  self._makeNewID = function () {                                                                                 // 65
                    var src = name ? DDP.randomStream('/collection/' + name) : Random.insecure;                                   // 66
                    return new Mongo.ObjectID(src.hexString(24));                                                                 // 69
                  };                                                                                                              // 70
                  break;                                                                                                          // 71
                case 'STRING':                                                                                                    // 72
                default:                                                                                                          // 73
                  self._makeNewID = function () {                                                                                 // 74
                    var src = name ? DDP.randomStream('/collection/' + name) : Random.insecure;                                   // 75
                    return src.id();                                                                                              // 78
                  };                                                                                                              // 79
                  break;                                                                                                          // 80
              }                                                                                                                   // 63
              //
              self._transform = LocalCollection.wrapTransform(options.transform);                                                 // 83
              //
              if (!name || options.connection === null)                                                                           // 85
                // note: nameless collections never have a connection                                                             //
                self._connection = null; else if (options.connection) self._connection = options.connection; else if (Meteor.isClient) self._connection = Meteor.connection; else self._connection = Meteor.server;
              //
              if (!options._driver) {                                                                                             // 95
                // XXX This check assumes that webapp is loaded so that Meteor.server !==                                         //
                // null. We should fully support the case of "want to use a Mongo-backed                                          //
                // collection from Node code without webapp", but we don't yet.                                                   //
                // #MeteorServerNull                                                                                              //
                if (name && self._connection === Meteor.server && typeof MongoInternals !== "undefined" && MongoInternals.defaultRemoteCollectionDriver) {
                  options._driver = MongoInternals.defaultRemoteCollectionDriver();                                               // 103
                } else {                                                                                                          // 104
                  options._driver = LocalCollectionDriver;                                                                        // 105
                }                                                                                                                 // 106
              }                                                                                                                   // 107
              //
              self._collection = options._driver.open(name, self._connection);                                                    // 109
              self._name = name;                                                                                                  // 110
              self._driver = options._driver;                                                                                     // 111
              //
              if (self._connection && self._connection.registerStore) {                                                           // 113
                // OK, we're going to be a slave, replicating some remote                                                         //
                // database, except possibly with some temporary divergence while                                                 //
                // we have unacknowledged RPC's.                                                                                  //
                var ok = self._connection.registerStore(name, {                                                                   // 117
                  // Called at the beginning of a batch of updates. batchSize is the number                                       //
                  // of update calls to expect.                                                                                   //
                  //                                                                                                              //
                  // XXX This interface is pretty janky. reset probably ought to go back to                                       //
                  // being its own function, and callers shouldn't have to calculate                                              //
                  // batchSize. The optimization of not calling pause/remove should be                                            //
                  // delayed until later: the first call to update() should buffer its                                            //
                  // message, and then we can either directly apply it at endUpdate time if                                       //
                  // it was the only update, or do pauseObservers/apply/apply at the next                                         //
                  // update() if there's another one.                                                                             //
                  beginUpdate: function () {                                                                                      // 128
                    function beginUpdate(batchSize, reset) {                                                                      // 128
                      // pause observers so users don't see flicker when updating several                                         //
                      // objects at once (including the post-reconnect reset-and-reapply                                          //
                      // stage), and so that a re-sorting of a query can take advantage of the                                    //
                      // full _diffQuery moved calculation instead of applying change one at a                                    //
                      // time.                                                                                                    //
                      if (batchSize > 1 || reset) self._collection.pauseObservers();                                              // 134
                      //
                      if (reset) self._collection.remove({});                                                                     // 137
                    }                                                                                                             // 139
                    //
                    return beginUpdate;                                                                                           // 128
                  }(),                                                                                                            // 128
                  //
                  // Apply an update.                                                                                             //
                  // XXX better specify this interface (not in terms of a wire message)?                                          //
                  update: function () {                                                                                           // 143
                    function update(msg) {                                                                                        // 143
                      var mongoId = MongoID.idParse(msg.id);                                                                      // 144
                      var doc = self._collection.findOne(mongoId);                                                                // 145
                      //
                      // Is this a "replace the whole doc" message coming from the quiescence                                     //
                      // of method writes to an object? (Note that 'undefined' is a valid                                         //
                      // value meaning "remove it".)                                                                              //
                      if (msg.msg === 'replace') {                                                                                // 150
                        var replace = msg.replace;                                                                                // 151
                        if (!replace) {                                                                                           // 152
                          if (doc) self._collection.remove(mongoId);                                                              // 153
                        } else if (!doc) {                                                                                        // 155
                          self._collection.insert(replace);                                                                       // 156
                        } else {                                                                                                  // 157
                          // XXX check that replace has no $ ops                                                                  //
                          self._collection.update(mongoId, replace);                                                              // 159
                        }                                                                                                         // 160
                        return;                                                                                                   // 161
                      } else if (msg.msg === 'added') {                                                                           // 162
                        if (doc) {                                                                                                // 163
                          throw new Error("Expected not to find a document already present for an add");                          // 164
                        }                                                                                                         // 165
                        self._collection.insert(_.extend({ _id: mongoId }, msg.fields));                                          // 166
                      } else if (msg.msg === 'removed') {                                                                         // 167
                        if (!doc) throw new Error("Expected to find a document already present for removed");                     // 168
                        self._collection.remove(mongoId);                                                                         // 170
                      } else if (msg.msg === 'changed') {                                                                         // 171
                        if (!doc) throw new Error("Expected to find a document to change");                                       // 172
                        if (!_.isEmpty(msg.fields)) {                                                                             // 174
                          var modifier = {};                                                                                      // 175
                          _.each(msg.fields, function (value, key) {                                                              // 176
                            if (value === undefined) {                                                                            // 177
                              if (!modifier.$unset) modifier.$unset = {};                                                         // 178
                              modifier.$unset[key] = 1;                                                                           // 180
                            } else {                                                                                              // 181
                              if (!modifier.$set) modifier.$set = {};                                                             // 182
                              modifier.$set[key] = value;                                                                         // 184
                            }                                                                                                     // 185
                          });                                                                                                     // 186
                          self._collection.update(mongoId, modifier);                                                             // 187
                        }                                                                                                         // 188
                      } else {                                                                                                    // 189
                        throw new Error("I don't know how to deal with this message");                                            // 190
                      }                                                                                                           // 191
                    }                                                                                                             // 193
                    //
                    return update;                                                                                                // 143
                  }(),                                                                                                            // 143
                  //
                  // Called at the end of a batch of updates.                                                                     //
                  endUpdate: function () {                                                                                        // 196
                    function endUpdate() {                                                                                        // 196
                      self._collection.resumeObservers();                                                                         // 197
                    }                                                                                                             // 198
                    //
                    return endUpdate;                                                                                             // 196
                  }(),                                                                                                            // 196
                  //
                  // Called around method stub invocations to capture the original versions                                       //
                  // of modified documents.                                                                                       //
                  saveOriginals: function () {                                                                                    // 202
                    function saveOriginals() {                                                                                    // 202
                      self._collection.saveOriginals();                                                                           // 203
                    }                                                                                                             // 204
                    //
                    return saveOriginals;                                                                                         // 202
                  }(),                                                                                                            // 202
                  retrieveOriginals: function () {                                                                                // 205
                    function retrieveOriginals() {                                                                                // 205
                      return self._collection.retrieveOriginals();                                                                // 206
                    }                                                                                                             // 207
                    //
                    return retrieveOriginals;                                                                                     // 205
                  }(),                                                                                                            // 205
                  //
                  // Used to preserve current versions of documents across a store reset.                                         //
                  getDoc: function () {                                                                                           // 210
                    function getDoc(id) {                                                                                         // 210
                      return self.findOne(id);                                                                                    // 211
                    }                                                                                                             // 212
                    //
                    return getDoc;                                                                                                // 210
                  }(),                                                                                                            // 210
                  //
                  // To be able to get back to the collection from the store.                                                     //
                  _getCollection: function () {                                                                                   // 215
                    function _getCollection() {                                                                                   // 215
                      return self;                                                                                                // 216
                    }                                                                                                             // 217
                    //
                    return _getCollection;                                                                                        // 215
                  }()                                                                                                             // 215
                });                                                                                                               // 117
                //
                if (!ok) {                                                                                                        // 220
                  var message = "There is already a collection named \"" + name + "\"";                                           // 221
                  if (options._suppressSameNameError === true) {                                                                  // 222
                    // XXX In theory we do not have to throw when `ok` is falsy. The store is already defined                     //
                    // for this collection name, but this will simply be another reference to it and everything                   //
                    // should work. However, we have historically thrown an error here, so for now we will                        //
                    // skip the error only when `_suppressSameNameError` is `true`, allowing people to opt in                     //
                    // and give this some real world testing.                                                                     //
                    console.warn ? console.warn(message) : console.log(message);                                                  // 228
                  } else {                                                                                                        // 229
                    throw new Error(message);                                                                                     // 230
                  }                                                                                                               // 231
                }                                                                                                                 // 232
              }                                                                                                                   // 233
              //
              // XXX don't define these until allow or deny is actually used for this                                             //
              // collection. Could be hard if the security rules are only defined on the                                          //
              // server.                                                                                                          //
              if (options.defineMutationMethods !== false) {                                                                      // 238
                try {                                                                                                             // 239
                  self._defineMutationMethods({ useExisting: options._suppressSameNameError === true });                          // 240
                } catch (error) {                                                                                                 // 241
                  // Throw a more understandable error on the server for same collection name                                     //
                  if (error.message === "A method named '/" + name + "/insert' is already defined") throw new Error("There is already a collection named \"" + name + "\"");
                  throw error;                                                                                                    // 245
                }                                                                                                                 // 246
              }                                                                                                                   // 247
              //
              // autopublish                                                                                                      //
              if (Package.autopublish && !options._preventAutopublish && self._connection && self._connection.publish) {          // 250
                self._connection.publish(null, function () {                                                                      // 252
                  return self.find();                                                                                             // 253
                }, { is_auto: true });                                                                                            // 254
              }                                                                                                                   // 255
            };                                                                                                                    // 256
            //
            ///                                                                                                                   //
            /// Main collection API                                                                                               //
            ///                                                                                                                   //
            //
            _.extend(Mongo.Collection.prototype, {                                                                                // 263
              //
              _getFindSelector: function () {                                                                                     // 265
                function _getFindSelector(args) {                                                                                 // 265
                  if (args.length == 0) return {}; else return args[0];                                                            // 266
                }                                                                                                                 // 270
                //
                return _getFindSelector;                                                                                          // 265
              }(),                                                                                                                // 265
              //
              _getFindOptions: function () {                                                                                      // 272
                function _getFindOptions(args) {                                                                                  // 272
                  var self = this;                                                                                                // 273
                  if (args.length < 2) {                                                                                          // 274
                    return { transform: self._transform };                                                                        // 275
                  } else {                                                                                                        // 276
                    check(args[1], Match.Optional(Match.ObjectIncluding({                                                         // 277
                      fields: Match.Optional(Match.OneOf(Object, undefined)),                                                     // 278
                      sort: Match.Optional(Match.OneOf(Object, Array, Function, undefined)),                                      // 279
                      limit: Match.Optional(Match.OneOf(Number, undefined)),                                                      // 280
                      skip: Match.Optional(Match.OneOf(Number, undefined))                                                        // 281
                    })));                                                                                                         // 277
                    //
                    return _.extend({                                                                                             // 284
                      transform: self._transform                                                                                  // 285
                    }, args[1]);                                                                                                  // 284
                  }                                                                                                               // 287
                }                                                                                                                 // 288
                //
                return _getFindOptions;                                                                                           // 272
              }(),                                                                                                                // 272
              //
              /**                                                                                                                 //
               * @summary Find the documents in a collection that match the selector.                                             //
               * @locus Anywhere                                                                                                  //
               * @method find                                                                                                     //
               * @memberOf Mongo.Collection                                                                                       //
               * @instance                                                                                                        //
               * @param {MongoSelector} [selector] A query describing the documents to find                                       //
               * @param {Object} [options]                                                                                        //
               * @param {MongoSortSpecifier} options.sort Sort order (default: natural order)                                     //
               * @param {Number} options.skip Number of results to skip at the beginning                                          //
               * @param {Number} options.limit Maximum number of results to return                                                //
               * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.                           //
               * @param {Boolean} options.reactive (Client only) Default `true`; pass `false` to disable reactivity               //
               * @param {Function} options.transform Overrides `transform` on the  [`Collection`](#collections) for this cursor.  Pass `null` to disable transformation.
               * @param {Boolean} options.disableOplog (Server only) Pass true to disable oplog-tailing on this query. This affects the way server processes calls to `observe` on this query. Disabling the oplog can be useful when working with data that updates in large batches.
               * @param {Number} options.pollingIntervalMs (Server only) How often to poll this query when observing on the server. In milliseconds. Defaults to 10 seconds.
               * @param {Number} options.pollingThrottleMs (Server only) Minimum time to allow between re-polling. Increasing this will save CPU and mongo load at the expense of slower updates to users. Decreasing this is not recommended. In milliseconds. Defaults to 50 milliseconds.
               * @returns {Mongo.Cursor}                                                                                          //
               */                                                                                                                 //
              find: function () {                                                                                                 // 309
                function find() /* selector, options */ {                                                                          // 309
                  // Collection.find() (return all docs) behaves differently                                                      //
                  // from Collection.find(undefined) (return 0 docs).  so be                                                      //
                  // careful about the length of arguments.                                                                       //
                  var self = this;                                                                                                // 313
                  var argArray = _.toArray(arguments);                                                                            // 314
                  return self._collection.find(self._getFindSelector(argArray), self._getFindOptions(argArray));                  // 315
                }                                                                                                                 // 317
                //
                return find;                                                                                                      // 309
              }(),                                                                                                                // 309
              //
              /**                                                                                                                 //
               * @summary Finds the first document that matches the selector, as ordered by sort and skip options.                //
               * @locus Anywhere                                                                                                  //
               * @method findOne                                                                                                  //
               * @memberOf Mongo.Collection                                                                                       //
               * @instance                                                                                                        //
               * @param {MongoSelector} [selector] A query describing the documents to find                                       //
               * @param {Object} [options]                                                                                        //
               * @param {MongoSortSpecifier} options.sort Sort order (default: natural order)                                     //
               * @param {Number} options.skip Number of results to skip at the beginning                                          //
               * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.                           //
               * @param {Boolean} options.reactive (Client only) Default true; pass false to disable reactivity                   //
               * @param {Function} options.transform Overrides `transform` on the [`Collection`](#collections) for this cursor.  Pass `null` to disable transformation.
               * @returns {Object}                                                                                                //
               */                                                                                                                 //
              findOne: function () {                                                                                              // 334
                function findOne() /* selector, options */ {                                                                       // 334
                  var self = this;                                                                                                // 335
                  var argArray = _.toArray(arguments);                                                                            // 336
                  return self._collection.findOne(self._getFindSelector(argArray), self._getFindOptions(argArray));               // 337
                }                                                                                                                 // 339
                //
                return findOne;                                                                                                   // 334
              }()                                                                                                                 // 334
              //
            });                                                                                                                   // 263
            //
            Mongo.Collection._publishCursor = function (cursor, sub, collection) {                                                // 343
              var observeHandle = cursor.observeChanges({                                                                         // 344
                added: function () {                                                                                              // 345
                  function added(id, fields) {                                                                                    // 345
                    sub.added(collection, id, fields);                                                                            // 346
                  }                                                                                                               // 347
                  //
                  return added;                                                                                                   // 345
                }(),                                                                                                              // 345
                changed: function () {                                                                                            // 348
                  function changed(id, fields) {                                                                                  // 348
                    sub.changed(collection, id, fields);                                                                          // 349
                  }                                                                                                               // 350
                  //
                  return changed;                                                                                                 // 348
                }(),                                                                                                              // 348
                removed: function () {                                                                                            // 351
                  function removed(id) {                                                                                          // 351
                    sub.removed(collection, id);                                                                                  // 352
                  }                                                                                                               // 353
                  //
                  return removed;                                                                                                 // 351
                }()                                                                                                               // 351
              });                                                                                                                 // 344
              //
              // We don't call sub.ready() here: it gets called in livedata_server, after                                         //
              // possibly calling _publishCursor on multiple returned cursors.                                                    //
              //
              // register stop callback (expects lambda w/ no args).                                                              //
              sub.onStop(function () {                                                                                            // 360
                observeHandle.stop();                                                                                             // 360
              });                                                                                                                 // 360
              //
              // return the observeHandle in case it needs to be stopped early                                                    //
              return observeHandle;                                                                                               // 363
            };                                                                                                                    // 364
            //
            // protect against dangerous selectors.  falsey and {_id: falsey} are both                                            //
            // likely programmer error, and not what you want, particularly for destructive                                       //
            // operations.  JS regexps don't serialize over DDP but can be trivially                                              //
            // replaced by $regex.                                                                                                //
            Mongo.Collection._rewriteSelector = function (selector) {                                                             // 370
              // shorthand -- scalars match _id                                                                                   //
              if (LocalCollection._selectorIsId(selector)) selector = { _id: selector };                                          // 372
              //
              if (_.isArray(selector)) {                                                                                          // 375
                // This is consistent with the Mongo console itself; if we don't do this                                          //
                // check passing an empty array ends up selecting all items                                                       //
                throw new Error("Mongo selector can't be an array.");                                                             // 378
              }                                                                                                                   // 379
              //
              if (!selector || '_id' in selector && !selector._id)                                                                // 381
                // can't match anything                                                                                           //
                return { _id: Random.id() };                                                                                      // 383
              //
              var ret = {};                                                                                                       // 385
              _.each(selector, function (value, key) {                                                                            // 386
                // Mongo supports both {field: /foo/} and {field: {$regex: /foo/}}                                                //
                if (value instanceof RegExp) {                                                                                    // 388
                  ret[key] = convertRegexpToMongoSelector(value);                                                                 // 389
                } else if (value && value.$regex instanceof RegExp) {                                                             // 390
                  ret[key] = convertRegexpToMongoSelector(value.$regex);                                                          // 391
                  // if value is {$regex: /foo/, $options: ...} then $options                                                     //
                  // override the ones set on $regex.                                                                             //
                  if (value.$options !== undefined) ret[key].$options = value.$options;                                           // 394
                } else if (_.contains(['$or', '$and', '$nor'], key)) {                                                            // 396
                  // Translate lower levels of $and/$or/$nor                                                                      //
                  ret[key] = _.map(value, function (v) {                                                                          // 399
                    return Mongo.Collection._rewriteSelector(v);                                                                  // 400
                  });                                                                                                             // 401
                } else {                                                                                                          // 402
                  ret[key] = value;                                                                                               // 403
                }                                                                                                                 // 404
              });                                                                                                                 // 405
              return ret;                                                                                                         // 406
            };                                                                                                                    // 407
            //
            // convert a JS RegExp object to a Mongo {$regex: ..., $options: ...}                                                 //
            // selector                                                                                                           //
            function convertRegexpToMongoSelector(regexp) {                                                                       // 411
              check(regexp, RegExp); // safety belt                                                                               // 412
              //
              var selector = { $regex: regexp.source };                                                                           // 414
              var regexOptions = '';                                                                                              // 415
              // JS RegExp objects support 'i', 'm', and 'g'. Mongo regex $options                                                //
              // support 'i', 'm', 'x', and 's'. So we support 'i' and 'm' here.                                                  //
              if (regexp.ignoreCase) regexOptions += 'i';                                                                         // 418
              if (regexp.multiline) regexOptions += 'm';                                                                          // 420
              if (regexOptions) selector.$options = regexOptions;                                                                 // 422
              //
              return selector;                                                                                                    // 425
            };                                                                                                                    // 426
            //
            // 'insert' immediately returns the inserted document's new _id.                                                      //
            // The others return values immediately if you are in a stub, an in-memory                                            //
            // unmanaged collection, or a mongo-backed collection and you don't pass a                                            //
            // callback. 'update' and 'remove' return the number of affected                                                      //
            // documents. 'upsert' returns an object with keys 'numberAffected' and, if an                                        //
            // insert happened, 'insertedId'.                                                                                     //
            //                                                                                                                    //
            // Otherwise, the semantics are exactly like other methods: they take                                                 //
            // a callback as an optional last argument; if no callback is                                                         //
            // provided, they block until the operation is complete, and throw an                                                 //
            // exception if it fails; if a callback is provided, then they don't                                                  //
            // necessarily block, and they call the callback when they finish with error and                                      //
            // result arguments.  (The insert method provides the document ID as its result;                                      //
            // update and remove provide the number of affected docs as the result; upsert                                        //
            // provides an object with numberAffected and maybe insertedId.)                                                      //
            //                                                                                                                    //
            // On the client, blocking is impossible, so if a callback                                                            //
            // isn't provided, they just return immediately and any error                                                         //
            // information is lost.                                                                                               //
            //                                                                                                                    //
            // There's one more tweak. On the client, if you don't provide a                                                      //
            // callback, then if there is an error, a message will be logged with                                                 //
            // Meteor._debug.                                                                                                     //
            //                                                                                                                    //
            // The intent (though this is actually determined by the underlying                                                   //
            // drivers) is that the operations should be done synchronously, not                                                  //
            // generating their result until the database has acknowledged                                                        //
            // them. In the future maybe we should provide a flag to turn this                                                    //
            // off.                                                                                                               //
            //
            /**                                                                                                                   //
             * @summary Insert a document in the collection.  Returns its unique _id.                                             //
             * @locus Anywhere                                                                                                    //
             * @method  insert                                                                                                    //
             * @memberOf Mongo.Collection                                                                                         //
             * @instance                                                                                                          //
             * @param {Object} doc The document to insert. May not yet have an _id attribute, in which case Meteor will generate one for you.
             * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the _id as the second.
             */                                                                                                                   //
            Mongo.Collection.prototype.insert = function () {                                                                     // 467
              function insert(doc, callback) {                                                                                    // 467
                // Make sure we were passed a document to insert                                                                  //
                if (!doc) {                                                                                                       // 469
                  throw new Error("insert requires an argument");                                                                 // 470
                }                                                                                                                 // 471
                //
                // Shallow-copy the document and possibly generate an ID                                                          //
                doc = _.extend({}, doc);                                                                                          // 474
                //
                if ('_id' in doc) {                                                                                               // 476
                  if (!doc._id || !(typeof doc._id === 'string' || doc._id instanceof Mongo.ObjectID)) {                          // 477
                    throw new Error("Meteor requires document _id fields to be non-empty strings or ObjectIDs");                  // 479
                  }                                                                                                               // 480
                } else {                                                                                                          // 481
                  var generateId = true;                                                                                          // 482
                  //
                  // Don't generate the id if we're the client and the 'outermost' call                                           //
                  // This optimization saves us passing both the randomSeed and the id                                            //
                  // Passing both is redundant.                                                                                   //
                  if (this._isRemoteCollection()) {                                                                               // 487
                    var enclosing = DDP._CurrentInvocation.get();                                                                 // 488
                    if (!enclosing) {                                                                                             // 489
                      generateId = false;                                                                                         // 490
                    }                                                                                                             // 491
                  }                                                                                                               // 492
                  //
                  if (generateId) {                                                                                               // 494
                    doc._id = this._makeNewID();                                                                                  // 495
                  }                                                                                                               // 496
                }                                                                                                                 // 497
                //
                // On inserts, always return the id that we generated; on all other                                               //
                // operations, just return the result from the collection.                                                        //
                var chooseReturnValueFromCollectionResult = function () {                                                         // 501
                  function chooseReturnValueFromCollectionResult(result) {                                                        // 501
                    if (doc._id) {                                                                                                // 502
                      return doc._id;                                                                                             // 503
                    }                                                                                                             // 504
                    //
                    // XXX what is this for??                                                                                     //
                    // It's some iteraction between the callback to _callMutatorMethod and                                        //
                    // the return value conversion                                                                                //
                    doc._id = result;                                                                                             // 509
                    //
                    return result;                                                                                                // 511
                  }                                                                                                               // 512
                  //
                  return chooseReturnValueFromCollectionResult;                                                                   // 501
                }();                                                                                                              // 501
                //
                var wrappedCallback = wrapCallback(callback, chooseReturnValueFromCollectionResult);                              // 514
                //
                if (this._isRemoteCollection()) {                                                                                 // 517
                  var result = this._callMutatorMethod("insert", [doc], wrappedCallback);                                         // 518
                  return chooseReturnValueFromCollectionResult(result);                                                           // 519
                }                                                                                                                 // 520
                //
                // it's my collection.  descend into the collection object                                                        //
                // and propagate any exception.                                                                                   //
                try {                                                                                                             // 524
                  // If the user provided a callback and the collection implements this                                           //
                  // operation asynchronously, then queryRet will be undefined, and the                                           //
                  // result will be returned through the callback instead.                                                        //
                  var _result = this._collection.insert(doc, wrappedCallback);                                                    // 528
                  return chooseReturnValueFromCollectionResult(_result);                                                          // 529
                } catch (e) {                                                                                                     // 530
                  if (callback) {                                                                                                 // 531
                    callback(e);                                                                                                  // 532
                    return null;                                                                                                  // 533
                  }                                                                                                               // 534
                  throw e;                                                                                                        // 535
                }                                                                                                                 // 536
              }                                                                                                                   // 537
              //
              return insert;                                                                                                      // 467
            }();                                                                                                                  // 467
            //
            /**                                                                                                                   //
             * @summary Modify one or more documents in the collection. Returns the number of affected documents.                 //
             * @locus Anywhere                                                                                                    //
             * @method update                                                                                                     //
             * @memberOf Mongo.Collection                                                                                         //
             * @instance                                                                                                          //
             * @param {MongoSelector} selector Specifies which documents to modify                                                //
             * @param {MongoModifier} modifier Specifies how to modify the documents                                              //
             * @param {Object} [options]                                                                                          //
             * @param {Boolean} options.multi True to modify all matching documents; false to only modify one of the matching documents (the default).
             * @param {Boolean} options.upsert True to insert a document if no matching documents are found.                      //
             * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.
             */                                                                                                                   //
            Mongo.Collection.prototype.update = function () {                                                                     // 552
              function update(selector, modifier) {                                                                               // 552
                for (var _len = arguments.length, optionsAndCallback = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
                  optionsAndCallback[_key - 2] = arguments[_key];                                                                 // 552
                }                                                                                                                 // 552
                //
                var callback = popCallbackFromArgs(optionsAndCallback);                                                           // 553
                //
                selector = Mongo.Collection._rewriteSelector(selector);                                                           // 555
                //
                // We've already popped off the callback, so we are left with an array                                            //
                // of one or zero items                                                                                           //
                var options = _.clone(optionsAndCallback[0]) || {};                                                               // 559
                if (options && options.upsert) {                                                                                  // 560
                  // set `insertedId` if absent.  `insertedId` is a Meteor extension.                                             //
                  if (options.insertedId) {                                                                                       // 562
                    if (!(typeof options.insertedId === 'string' || options.insertedId instanceof Mongo.ObjectID)) throw new Error("insertedId must be string or ObjectID");
                  } else if (!selector._id) {                                                                                     // 566
                    options.insertedId = this._makeNewID();                                                                       // 567
                  }                                                                                                               // 568
                }                                                                                                                 // 569
                //
                var wrappedCallback = wrapCallback(callback);                                                                     // 571
                //
                if (this._isRemoteCollection()) {                                                                                 // 573
                  var args = [selector, modifier, options];                                                                       // 574
                  //
                  return this._callMutatorMethod("update", args, wrappedCallback);                                                // 580
                }                                                                                                                 // 581
                //
                // it's my collection.  descend into the collection object                                                        //
                // and propagate any exception.                                                                                   //
                try {                                                                                                             // 585
                  // If the user provided a callback and the collection implements this                                           //
                  // operation asynchronously, then queryRet will be undefined, and the                                           //
                  // result will be returned through the callback instead.                                                        //
                  return this._collection.update(selector, modifier, options, wrappedCallback);                                   // 589
                } catch (e) {                                                                                                     // 591
                  if (callback) {                                                                                                 // 592
                    callback(e);                                                                                                  // 593
                    return null;                                                                                                  // 594
                  }                                                                                                               // 595
                  throw e;                                                                                                        // 596
                }                                                                                                                 // 597
              }                                                                                                                   // 598
              //
              return update;                                                                                                      // 552
            }();                                                                                                                  // 552
            //
            /**                                                                                                                   //
             * @summary Remove documents from the collection                                                                      //
             * @locus Anywhere                                                                                                    //
             * @method remove                                                                                                     //
             * @memberOf Mongo.Collection                                                                                         //
             * @instance                                                                                                          //
             * @param {MongoSelector} selector Specifies which documents to remove                                                //
             * @param {Function} [callback] Optional.  If present, called with an error object as its argument.                   //
             */                                                                                                                   //
            Mongo.Collection.prototype.remove = function () {                                                                     // 609
              function remove(selector, callback) {                                                                               // 609
                selector = Mongo.Collection._rewriteSelector(selector);                                                           // 610
                //
                var wrappedCallback = wrapCallback(callback);                                                                     // 612
                //
                if (this._isRemoteCollection()) {                                                                                 // 614
                  return this._callMutatorMethod("remove", [selector], wrappedCallback);                                          // 615
                }                                                                                                                 // 616
                //
                // it's my collection.  descend into the collection object                                                        //
                // and propagate any exception.                                                                                   //
                try {                                                                                                             // 620
                  // If the user provided a callback and the collection implements this                                           //
                  // operation asynchronously, then queryRet will be undefined, and the                                           //
                  // result will be returned through the callback instead.                                                        //
                  return this._collection.remove(selector, wrappedCallback);                                                      // 624
                } catch (e) {                                                                                                     // 625
                  if (callback) {                                                                                                 // 626
                    callback(e);                                                                                                  // 627
                    return null;                                                                                                  // 628
                  }                                                                                                               // 629
                  throw e;                                                                                                        // 630
                }                                                                                                                 // 631
              }                                                                                                                   // 632
              //
              return remove;                                                                                                      // 609
            }();                                                                                                                  // 609
            //
            // Determine if this collection is simply a minimongo representation of a real                                        //
            // database on another server                                                                                         //
            Mongo.Collection.prototype._isRemoteCollection = function () {                                                        // 636
              function _isRemoteCollection() {                                                                                    // 636
                // XXX see #MeteorServerNull                                                                                      //
                return this._connection && this._connection !== Meteor.server;                                                    // 638
              }                                                                                                                   // 639
              //
              return _isRemoteCollection;                                                                                         // 636
            }();                                                                                                                  // 636
            //
            // Convert the callback to not return a result if there is an error                                                   //
            function wrapCallback(callback, convertResult) {                                                                      // 642
              if (!callback) {                                                                                                    // 643
                return;                                                                                                           // 644
              }                                                                                                                   // 645
              //
              // If no convert function was passed in, just use a "blank function"                                                //
              convertResult = convertResult || _.identity;                                                                        // 648
              //
              return function (error, result) {                                                                                   // 650
                callback(error, !error && convertResult(result));                                                                 // 651
              };                                                                                                                  // 652
            }                                                                                                                     // 653
            //
            /**                                                                                                                   //
             * @summary Modify one or more documents in the collection, or insert one if no matching documents were found. Returns an object with keys `numberAffected` (the number of documents modified)  and `insertedId` (the unique _id of the document that was inserted, if any).
             * @locus Anywhere                                                                                                    //
             * @param {MongoSelector} selector Specifies which documents to modify                                                //
             * @param {MongoModifier} modifier Specifies how to modify the documents                                              //
             * @param {Object} [options]                                                                                          //
             * @param {Boolean} options.multi True to modify all matching documents; false to only modify one of the matching documents (the default).
             * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.
             */                                                                                                                   //
            Mongo.Collection.prototype.upsert = function () {                                                                     // 664
              function upsert(selector, modifier, options, callback) {                                                            // 664
                if (!callback && typeof options === "function") {                                                                 // 666
                  callback = options;                                                                                             // 667
                  options = {};                                                                                                   // 668
                }                                                                                                                 // 669
                //
                var updateOptions = _.extend({}, options, {                                                                       // 671
                  _returnObject: true,                                                                                            // 672
                  upsert: true                                                                                                    // 673
                });                                                                                                               // 671
                //
                return this.update(selector, modifier, updateOptions, callback);                                                  // 676
              }                                                                                                                   // 677
              //
              return upsert;                                                                                                      // 664
            }();                                                                                                                  // 664
            //
            // We'll actually design an index API later. For now, we just pass through to                                         //
            // Mongo's, but make it synchronous.                                                                                  //
            Mongo.Collection.prototype._ensureIndex = function (index, options) {                                                 // 681
              var self = this;                                                                                                    // 682
              if (!self._collection._ensureIndex) throw new Error("Can only call _ensureIndex on server collections");            // 683
              self._collection._ensureIndex(index, options);                                                                      // 685
            };                                                                                                                    // 686
            Mongo.Collection.prototype._dropIndex = function (index) {                                                            // 687
              var self = this;                                                                                                    // 688
              if (!self._collection._dropIndex) throw new Error("Can only call _dropIndex on server collections");                // 689
              self._collection._dropIndex(index);                                                                                 // 691
            };                                                                                                                    // 692
            Mongo.Collection.prototype._dropCollection = function () {                                                            // 693
              var self = this;                                                                                                    // 694
              if (!self._collection.dropCollection) throw new Error("Can only call _dropCollection on server collections");       // 695
              self._collection.dropCollection();                                                                                  // 697
            };                                                                                                                    // 698
            Mongo.Collection.prototype._createCappedCollection = function (byteSize, maxDocuments) {                              // 699
              var self = this;                                                                                                    // 700
              if (!self._collection._createCappedCollection) throw new Error("Can only call _createCappedCollection on server collections");
              self._collection._createCappedCollection(byteSize, maxDocuments);                                                   // 703
            };                                                                                                                    // 704
            //
            /**                                                                                                                   //
             * @summary Returns the [`Collection`](http://mongodb.github.io/node-mongodb-native/1.4/api-generated/collection.html) object corresponding to this collection from the [npm `mongodb` driver module](https://www.npmjs.com/package/mongodb) which is wrapped by `Mongo.Collection`.
             * @locus Server                                                                                                      //
             */                                                                                                                   //
            Mongo.Collection.prototype.rawCollection = function () {                                                              // 710
              var self = this;                                                                                                    // 711
              if (!self._collection.rawCollection) {                                                                              // 712
                throw new Error("Can only call rawCollection on server collections");                                             // 713
              }                                                                                                                   // 714
              return self._collection.rawCollection();                                                                            // 715
            };                                                                                                                    // 716
            //
            /**                                                                                                                   //
             * @summary Returns the [`Db`](http://mongodb.github.io/node-mongodb-native/1.4/api-generated/db.html) object corresponding to this collection's database connection from the [npm `mongodb` driver module](https://www.npmjs.com/package/mongodb) which is wrapped by `Mongo.Collection`.
             * @locus Server                                                                                                      //
             */                                                                                                                   //
            Mongo.Collection.prototype.rawDatabase = function () {                                                                // 722
              var self = this;                                                                                                    // 723
              if (!(self._driver.mongo && self._driver.mongo.db)) {                                                               // 724
                throw new Error("Can only call rawDatabase on server collections");                                               // 725
              }                                                                                                                   // 726
              return self._driver.mongo.db;                                                                                       // 727
            };                                                                                                                    // 728
            //
            /**                                                                                                                   //
             * @summary Create a Mongo-style `ObjectID`.  If you don't specify a `hexString`, the `ObjectID` will generated randomly (not using MongoDB's ID construction rules).
             * @locus Anywhere                                                                                                    //
             * @class                                                                                                             //
             * @param {String} [hexString] Optional.  The 24-character hexadecimal contents of the ObjectID to create             //
             */                                                                                                                   //
            Mongo.ObjectID = MongoID.ObjectID;                                                                                    // 737
            //
            /**                                                                                                                   //
             * @summary To create a cursor, use find. To access the documents in a cursor, use forEach, map, or fetch.            //
             * @class                                                                                                             //
             * @instanceName cursor                                                                                               //
             */                                                                                                                   //
            Mongo.Cursor = LocalCollection.Cursor;                                                                                // 744
            //
            /**                                                                                                                   //
             * @deprecated in 0.9.1                                                                                               //
             */                                                                                                                   //
            Mongo.Collection.Cursor = Mongo.Cursor;                                                                               // 749
            //
            /**                                                                                                                   //
             * @deprecated in 0.9.1                                                                                               //
             */                                                                                                                   //
            Mongo.Collection.ObjectID = Mongo.ObjectID;                                                                           // 754
            //
            /**                                                                                                                   //
             * @deprecated in 0.9.1                                                                                               //
             */                                                                                                                   //
            Meteor.Collection = Mongo.Collection;                                                                                 // 759
            //
            // Allow deny stuff is now in the allow-deny package                                                                  //
            _.extend(Meteor.Collection.prototype, AllowDeny.CollectionPrototype);                                                 // 762
            //
            function popCallbackFromArgs(args) {                                                                                  // 764
              // Pull off any callback (or perhaps a 'callback' variable that was passed                                          //
              // in undefined, like how 'upsert' does it).                                                                        //
              if (args.length && (args[args.length - 1] === undefined || args[args.length - 1] instanceof Function)) {            // 767
                return args.pop();                                                                                                // 770
              }                                                                                                                   // 771
            }                                                                                                                     // 772
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

          }
        }
      }
    }
  }, { "extensions": [".js", ".json"] });
  require("./node_modules/meteor/mongo/local_collection_driver.js");
  require("./node_modules/meteor/mongo/collection.js");

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols)
      (s in pkg) || (pkg[s] = symbols[s]);
  })(Package.mongo = {}, {
    Mongo: Mongo
  });

})();
/* Imports for global scope */

Meteor = Package.meteor.Meteor;
global = Package.meteor.global;
meteorEnv = Package.meteor.meteorEnv;
_ = Package.underscore._;
DDP = Package['ddp-client'].DDP;
Mongo = Package.mongo.Mongo;
Tracker = Package.tracker.Tracker;
Deps = Package.tracker.Deps;


