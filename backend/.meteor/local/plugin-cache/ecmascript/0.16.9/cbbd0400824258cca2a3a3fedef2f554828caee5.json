{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/smichel/Projects/Team-5-Project/database/packages/minimongo/common.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"packages/minimongo/common.js","filename":"/Users/smichel/Projects/Team-5-Project/database/packages/minimongo/common.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/smichel/Projects/Team-5-Project/database","root":"/Users/smichel/Projects/Team-5-Project/database","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/smichel/Projects/Team-5-Project/database/packages/minimongo/common.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/minimongo/common.js"}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    module.export({\n      hasOwn: () => hasOwn,\n      ELEMENT_OPERATORS: () => ELEMENT_OPERATORS,\n      compileDocumentSelector: () => compileDocumentSelector,\n      equalityElementMatcher: () => equalityElementMatcher,\n      expandArraysInBranches: () => expandArraysInBranches,\n      isIndexable: () => isIndexable,\n      isNumericKey: () => isNumericKey,\n      isOperatorObject: () => isOperatorObject,\n      makeLookupFunction: () => makeLookupFunction,\n      nothingMatcher: () => nothingMatcher,\n      pathsToTree: () => pathsToTree,\n      populateDocumentWithQueryFields: () => populateDocumentWithQueryFields,\n      projectionDetails: () => projectionDetails,\n      regexpElementMatcher: () => regexpElementMatcher\n    });\n    let LocalCollection;\n    module.link(\"./local_collection.js\", {\n      default(v) {\n        LocalCollection = v;\n      }\n    }, 0);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const hasOwn = Object.prototype.hasOwnProperty;\n    const ELEMENT_OPERATORS = {\n      $lt: makeInequality(cmpValue => cmpValue < 0),\n      $gt: makeInequality(cmpValue => cmpValue > 0),\n      $lte: makeInequality(cmpValue => cmpValue <= 0),\n      $gte: makeInequality(cmpValue => cmpValue >= 0),\n      $mod: {\n        compileElementSelector(operand) {\n          if (!(Array.isArray(operand) && operand.length === 2 && typeof operand[0] === 'number' && typeof operand[1] === 'number')) {\n            throw Error('argument to $mod must be an array of two numbers');\n          }\n\n          // XXX could require to be ints or round or something\n          const divisor = operand[0];\n          const remainder = operand[1];\n          return value => typeof value === 'number' && value % divisor === remainder;\n        }\n      },\n      $in: {\n        compileElementSelector(operand) {\n          if (!Array.isArray(operand)) {\n            throw Error('$in needs an array');\n          }\n          const elementMatchers = operand.map(option => {\n            if (option instanceof RegExp) {\n              return regexpElementMatcher(option);\n            }\n            if (isOperatorObject(option)) {\n              throw Error('cannot nest $ under $in');\n            }\n            return equalityElementMatcher(option);\n          });\n          return value => {\n            // Allow {a: {$in: [null]}} to match when 'a' does not exist.\n            if (value === undefined) {\n              value = null;\n            }\n            return elementMatchers.some(matcher => matcher(value));\n          };\n        }\n      },\n      $size: {\n        // {a: [[5, 5]]} must match {a: {$size: 1}} but not {a: {$size: 2}}, so we\n        // don't want to consider the element [5,5] in the leaf array [[5,5]] as a\n        // possible value.\n        dontExpandLeafArrays: true,\n        compileElementSelector(operand) {\n          if (typeof operand === 'string') {\n            // Don't ask me why, but by experimentation, this seems to be what Mongo\n            // does.\n            operand = 0;\n          } else if (typeof operand !== 'number') {\n            throw Error('$size needs a number');\n          }\n          return value => Array.isArray(value) && value.length === operand;\n        }\n      },\n      $type: {\n        // {a: [5]} must not match {a: {$type: 4}} (4 means array), but it should\n        // match {a: {$type: 1}} (1 means number), and {a: [[5]]} must match {$a:\n        // {$type: 4}}. Thus, when we see a leaf array, we *should* expand it but\n        // should *not* include it itself.\n        dontIncludeLeafArrays: true,\n        compileElementSelector(operand) {\n          if (typeof operand === 'string') {\n            const operandAliasMap = {\n              'double': 1,\n              'string': 2,\n              'object': 3,\n              'array': 4,\n              'binData': 5,\n              'undefined': 6,\n              'objectId': 7,\n              'bool': 8,\n              'date': 9,\n              'null': 10,\n              'regex': 11,\n              'dbPointer': 12,\n              'javascript': 13,\n              'symbol': 14,\n              'javascriptWithScope': 15,\n              'int': 16,\n              'timestamp': 17,\n              'long': 18,\n              'decimal': 19,\n              'minKey': -1,\n              'maxKey': 127\n            };\n            if (!hasOwn.call(operandAliasMap, operand)) {\n              throw Error(\"unknown string alias for $type: \".concat(operand));\n            }\n            operand = operandAliasMap[operand];\n          } else if (typeof operand === 'number') {\n            if (operand === 0 || operand < -1 || operand > 19 && operand !== 127) {\n              throw Error(\"Invalid numerical $type code: \".concat(operand));\n            }\n          } else {\n            throw Error('argument to $type is not a number or a string');\n          }\n          return value => value !== undefined && LocalCollection._f._type(value) === operand;\n        }\n      },\n      $bitsAllSet: {\n        compileElementSelector(operand) {\n          const mask = getOperandBitmask(operand, '$bitsAllSet');\n          return value => {\n            const bitmask = getValueBitmask(value, mask.length);\n            return bitmask && mask.every((byte, i) => (bitmask[i] & byte) === byte);\n          };\n        }\n      },\n      $bitsAnySet: {\n        compileElementSelector(operand) {\n          const mask = getOperandBitmask(operand, '$bitsAnySet');\n          return value => {\n            const bitmask = getValueBitmask(value, mask.length);\n            return bitmask && mask.some((byte, i) => (~bitmask[i] & byte) !== byte);\n          };\n        }\n      },\n      $bitsAllClear: {\n        compileElementSelector(operand) {\n          const mask = getOperandBitmask(operand, '$bitsAllClear');\n          return value => {\n            const bitmask = getValueBitmask(value, mask.length);\n            return bitmask && mask.every((byte, i) => !(bitmask[i] & byte));\n          };\n        }\n      },\n      $bitsAnyClear: {\n        compileElementSelector(operand) {\n          const mask = getOperandBitmask(operand, '$bitsAnyClear');\n          return value => {\n            const bitmask = getValueBitmask(value, mask.length);\n            return bitmask && mask.some((byte, i) => (bitmask[i] & byte) !== byte);\n          };\n        }\n      },\n      $regex: {\n        compileElementSelector(operand, valueSelector) {\n          if (!(typeof operand === 'string' || operand instanceof RegExp)) {\n            throw Error('$regex has to be a string or RegExp');\n          }\n          let regexp;\n          if (valueSelector.$options !== undefined) {\n            // Options passed in $options (even the empty string) always overrides\n            // options in the RegExp object itself.\n\n            // Be clear that we only support the JS-supported options, not extended\n            // ones (eg, Mongo supports x and s). Ideally we would implement x and s\n            // by transforming the regexp, but not today...\n            if (/[^gim]/.test(valueSelector.$options)) {\n              throw new Error('Only the i, m, and g regexp options are supported');\n            }\n            const source = operand instanceof RegExp ? operand.source : operand;\n            regexp = new RegExp(source, valueSelector.$options);\n          } else if (operand instanceof RegExp) {\n            regexp = operand;\n          } else {\n            regexp = new RegExp(operand);\n          }\n          return regexpElementMatcher(regexp);\n        }\n      },\n      $elemMatch: {\n        dontExpandLeafArrays: true,\n        compileElementSelector(operand, valueSelector, matcher) {\n          if (!LocalCollection._isPlainObject(operand)) {\n            throw Error('$elemMatch need an object');\n          }\n          const isDocMatcher = !isOperatorObject(Object.keys(operand).filter(key => !hasOwn.call(LOGICAL_OPERATORS, key)).reduce((a, b) => Object.assign(a, {\n            [b]: operand[b]\n          }), {}), true);\n          let subMatcher;\n          if (isDocMatcher) {\n            // This is NOT the same as compileValueSelector(operand), and not just\n            // because of the slightly different calling convention.\n            // {$elemMatch: {x: 3}} means \"an element has a field x:3\", not\n            // \"consists only of a field x:3\". Also, regexps and sub-$ are allowed.\n            subMatcher = compileDocumentSelector(operand, matcher, {\n              inElemMatch: true\n            });\n          } else {\n            subMatcher = compileValueSelector(operand, matcher);\n          }\n          return value => {\n            if (!Array.isArray(value)) {\n              return false;\n            }\n            for (let i = 0; i < value.length; ++i) {\n              const arrayElement = value[i];\n              let arg;\n              if (isDocMatcher) {\n                // We can only match {$elemMatch: {b: 3}} against objects.\n                // (We can also match against arrays, if there's numeric indices,\n                // eg {$elemMatch: {'0.b': 3}} or {$elemMatch: {0: 3}}.)\n                if (!isIndexable(arrayElement)) {\n                  return false;\n                }\n                arg = arrayElement;\n              } else {\n                // dontIterate ensures that {a: {$elemMatch: {$gt: 5}}} matches\n                // {a: [8]} but not {a: [[8]]}\n                arg = [{\n                  value: arrayElement,\n                  dontIterate: true\n                }];\n              }\n              // XXX support $near in $elemMatch by propagating $distance?\n              if (subMatcher(arg).result) {\n                return i; // specially understood to mean \"use as arrayIndices\"\n              }\n            }\n            return false;\n          };\n        }\n      }\n    };\n    // Operators that appear at the top level of a document selector.\n    const LOGICAL_OPERATORS = {\n      $and(subSelector, matcher, inElemMatch) {\n        return andDocumentMatchers(compileArrayOfDocumentSelectors(subSelector, matcher, inElemMatch));\n      },\n      $or(subSelector, matcher, inElemMatch) {\n        const matchers = compileArrayOfDocumentSelectors(subSelector, matcher, inElemMatch);\n\n        // Special case: if there is only one matcher, use it directly, *preserving*\n        // any arrayIndices it returns.\n        if (matchers.length === 1) {\n          return matchers[0];\n        }\n        return doc => {\n          const result = matchers.some(fn => fn(doc).result);\n          // $or does NOT set arrayIndices when it has multiple\n          // sub-expressions. (Tested against MongoDB.)\n          return {\n            result\n          };\n        };\n      },\n      $nor(subSelector, matcher, inElemMatch) {\n        const matchers = compileArrayOfDocumentSelectors(subSelector, matcher, inElemMatch);\n        return doc => {\n          const result = matchers.every(fn => !fn(doc).result);\n          // Never set arrayIndices, because we only match if nothing in particular\n          // 'matched' (and because this is consistent with MongoDB).\n          return {\n            result\n          };\n        };\n      },\n      $where(selectorValue, matcher) {\n        // Record that *any* path may be used.\n        matcher._recordPathUsed('');\n        matcher._hasWhere = true;\n        if (!(selectorValue instanceof Function)) {\n          // XXX MongoDB seems to have more complex logic to decide where or or not\n          // to add 'return'; not sure exactly what it is.\n          selectorValue = Function('obj', \"return \".concat(selectorValue));\n        }\n\n        // We make the document available as both `this` and `obj`.\n        // // XXX not sure what we should do if this throws\n        return doc => ({\n          result: selectorValue.call(doc, doc)\n        });\n      },\n      // This is just used as a comment in the query (in MongoDB, it also ends up in\n      // query logs); it has no effect on the actual selection.\n      $comment() {\n        return () => ({\n          result: true\n        });\n      }\n    };\n\n    // Operators that (unlike LOGICAL_OPERATORS) pertain to individual paths in a\n    // document, but (unlike ELEMENT_OPERATORS) do not have a simple definition as\n    // \"match each branched value independently and combine with\n    // convertElementMatcherToBranchedMatcher\".\n    const VALUE_OPERATORS = {\n      $eq(operand) {\n        return convertElementMatcherToBranchedMatcher(equalityElementMatcher(operand));\n      },\n      $not(operand, valueSelector, matcher) {\n        return invertBranchedMatcher(compileValueSelector(operand, matcher));\n      },\n      $ne(operand) {\n        return invertBranchedMatcher(convertElementMatcherToBranchedMatcher(equalityElementMatcher(operand)));\n      },\n      $nin(operand) {\n        return invertBranchedMatcher(convertElementMatcherToBranchedMatcher(ELEMENT_OPERATORS.$in.compileElementSelector(operand)));\n      },\n      $exists(operand) {\n        const exists = convertElementMatcherToBranchedMatcher(value => value !== undefined);\n        return operand ? exists : invertBranchedMatcher(exists);\n      },\n      // $options just provides options for $regex; its logic is inside $regex\n      $options(operand, valueSelector) {\n        if (!hasOwn.call(valueSelector, '$regex')) {\n          throw Error('$options needs a $regex');\n        }\n        return everythingMatcher;\n      },\n      // $maxDistance is basically an argument to $near\n      $maxDistance(operand, valueSelector) {\n        if (!valueSelector.$near) {\n          throw Error('$maxDistance needs a $near');\n        }\n        return everythingMatcher;\n      },\n      $all(operand, valueSelector, matcher) {\n        if (!Array.isArray(operand)) {\n          throw Error('$all requires array');\n        }\n\n        // Not sure why, but this seems to be what MongoDB does.\n        if (operand.length === 0) {\n          return nothingMatcher;\n        }\n        const branchedMatchers = operand.map(criterion => {\n          // XXX handle $all/$elemMatch combination\n          if (isOperatorObject(criterion)) {\n            throw Error('no $ expressions in $all');\n          }\n\n          // This is always a regexp or equality selector.\n          return compileValueSelector(criterion, matcher);\n        });\n\n        // andBranchedMatchers does NOT require all selectors to return true on the\n        // SAME branch.\n        return andBranchedMatchers(branchedMatchers);\n      },\n      $near(operand, valueSelector, matcher, isRoot) {\n        if (!isRoot) {\n          throw Error('$near can\\'t be inside another $ operator');\n        }\n        matcher._hasGeoQuery = true;\n\n        // There are two kinds of geodata in MongoDB: legacy coordinate pairs and\n        // GeoJSON. They use different distance metrics, too. GeoJSON queries are\n        // marked with a $geometry property, though legacy coordinates can be\n        // matched using $geometry.\n        let maxDistance, point, distance;\n        if (LocalCollection._isPlainObject(operand) && hasOwn.call(operand, '$geometry')) {\n          // GeoJSON \"2dsphere\" mode.\n          maxDistance = operand.$maxDistance;\n          point = operand.$geometry;\n          distance = value => {\n            // XXX: for now, we don't calculate the actual distance between, say,\n            // polygon and circle. If people care about this use-case it will get\n            // a priority.\n            if (!value) {\n              return null;\n            }\n            if (!value.type) {\n              return GeoJSON.pointDistance(point, {\n                type: 'Point',\n                coordinates: pointToArray(value)\n              });\n            }\n            if (value.type === 'Point') {\n              return GeoJSON.pointDistance(point, value);\n            }\n            return GeoJSON.geometryWithinRadius(value, point, maxDistance) ? 0 : maxDistance + 1;\n          };\n        } else {\n          maxDistance = valueSelector.$maxDistance;\n          if (!isIndexable(operand)) {\n            throw Error('$near argument must be coordinate pair or GeoJSON');\n          }\n          point = pointToArray(operand);\n          distance = value => {\n            if (!isIndexable(value)) {\n              return null;\n            }\n            return distanceCoordinatePairs(point, value);\n          };\n        }\n        return branchedValues => {\n          // There might be multiple points in the document that match the given\n          // field. Only one of them needs to be within $maxDistance, but we need to\n          // evaluate all of them and use the nearest one for the implicit sort\n          // specifier. (That's why we can't just use ELEMENT_OPERATORS here.)\n          //\n          // Note: This differs from MongoDB's implementation, where a document will\n          // actually show up *multiple times* in the result set, with one entry for\n          // each within-$maxDistance branching point.\n          const result = {\n            result: false\n          };\n          expandArraysInBranches(branchedValues).every(branch => {\n            // if operation is an update, don't skip branches, just return the first\n            // one (#3599)\n            let curDistance;\n            if (!matcher._isUpdate) {\n              if (!(typeof branch.value === 'object')) {\n                return true;\n              }\n              curDistance = distance(branch.value);\n\n              // Skip branches that aren't real points or are too far away.\n              if (curDistance === null || curDistance > maxDistance) {\n                return true;\n              }\n\n              // Skip anything that's a tie.\n              if (result.distance !== undefined && result.distance <= curDistance) {\n                return true;\n              }\n            }\n            result.result = true;\n            result.distance = curDistance;\n            if (branch.arrayIndices) {\n              result.arrayIndices = branch.arrayIndices;\n            } else {\n              delete result.arrayIndices;\n            }\n            return !matcher._isUpdate;\n          });\n          return result;\n        };\n      }\n    };\n\n    // NB: We are cheating and using this function to implement 'AND' for both\n    // 'document matchers' and 'branched matchers'. They both return result objects\n    // but the argument is different: for the former it's a whole doc, whereas for\n    // the latter it's an array of 'branched values'.\n    function andSomeMatchers(subMatchers) {\n      if (subMatchers.length === 0) {\n        return everythingMatcher;\n      }\n      if (subMatchers.length === 1) {\n        return subMatchers[0];\n      }\n      return docOrBranches => {\n        const match = {};\n        match.result = subMatchers.every(fn => {\n          const subResult = fn(docOrBranches);\n\n          // Copy a 'distance' number out of the first sub-matcher that has\n          // one. Yes, this means that if there are multiple $near fields in a\n          // query, something arbitrary happens; this appears to be consistent with\n          // Mongo.\n          if (subResult.result && subResult.distance !== undefined && match.distance === undefined) {\n            match.distance = subResult.distance;\n          }\n\n          // Similarly, propagate arrayIndices from sub-matchers... but to match\n          // MongoDB behavior, this time the *last* sub-matcher with arrayIndices\n          // wins.\n          if (subResult.result && subResult.arrayIndices) {\n            match.arrayIndices = subResult.arrayIndices;\n          }\n          return subResult.result;\n        });\n\n        // If we didn't actually match, forget any extra metadata we came up with.\n        if (!match.result) {\n          delete match.distance;\n          delete match.arrayIndices;\n        }\n        return match;\n      };\n    }\n    const andDocumentMatchers = andSomeMatchers;\n    const andBranchedMatchers = andSomeMatchers;\n    function compileArrayOfDocumentSelectors(selectors, matcher, inElemMatch) {\n      if (!Array.isArray(selectors) || selectors.length === 0) {\n        throw Error('$and/$or/$nor must be nonempty array');\n      }\n      return selectors.map(subSelector => {\n        if (!LocalCollection._isPlainObject(subSelector)) {\n          throw Error('$or/$and/$nor entries need to be full objects');\n        }\n        return compileDocumentSelector(subSelector, matcher, {\n          inElemMatch\n        });\n      });\n    }\n\n    // Takes in a selector that could match a full document (eg, the original\n    // selector). Returns a function mapping document->result object.\n    //\n    // matcher is the Matcher object we are compiling.\n    //\n    // If this is the root document selector (ie, not wrapped in $and or the like),\n    // then isRoot is true. (This is used by $near.)\n    function compileDocumentSelector(docSelector, matcher) {\n      let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      const docMatchers = Object.keys(docSelector).map(key => {\n        const subSelector = docSelector[key];\n        if (key.substr(0, 1) === '$') {\n          // Outer operators are either logical operators (they recurse back into\n          // this function), or $where.\n          if (!hasOwn.call(LOGICAL_OPERATORS, key)) {\n            throw new Error(\"Unrecognized logical operator: \".concat(key));\n          }\n          matcher._isSimple = false;\n          return LOGICAL_OPERATORS[key](subSelector, matcher, options.inElemMatch);\n        }\n\n        // Record this path, but only if we aren't in an elemMatcher, since in an\n        // elemMatch this is a path inside an object in an array, not in the doc\n        // root.\n        if (!options.inElemMatch) {\n          matcher._recordPathUsed(key);\n        }\n\n        // Don't add a matcher if subSelector is a function -- this is to match\n        // the behavior of Meteor on the server (inherited from the node mongodb\n        // driver), which is to ignore any part of a selector which is a function.\n        if (typeof subSelector === 'function') {\n          return undefined;\n        }\n        const lookUpByIndex = makeLookupFunction(key);\n        const valueMatcher = compileValueSelector(subSelector, matcher, options.isRoot);\n        return doc => valueMatcher(lookUpByIndex(doc));\n      }).filter(Boolean);\n      return andDocumentMatchers(docMatchers);\n    }\n    // Takes in a selector that could match a key-indexed value in a document; eg,\n    // {$gt: 5, $lt: 9}, or a regular expression, or any non-expression object (to\n    // indicate equality).  Returns a branched matcher: a function mapping\n    // [branched value]->result object.\n    function compileValueSelector(valueSelector, matcher, isRoot) {\n      if (valueSelector instanceof RegExp) {\n        matcher._isSimple = false;\n        return convertElementMatcherToBranchedMatcher(regexpElementMatcher(valueSelector));\n      }\n      if (isOperatorObject(valueSelector)) {\n        return operatorBranchedMatcher(valueSelector, matcher, isRoot);\n      }\n      return convertElementMatcherToBranchedMatcher(equalityElementMatcher(valueSelector));\n    }\n\n    // Given an element matcher (which evaluates a single value), returns a branched\n    // value (which evaluates the element matcher on all the branches and returns a\n    // more structured return value possibly including arrayIndices).\n    function convertElementMatcherToBranchedMatcher(elementMatcher) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return branches => {\n        const expanded = options.dontExpandLeafArrays ? branches : expandArraysInBranches(branches, options.dontIncludeLeafArrays);\n        const match = {};\n        match.result = expanded.some(element => {\n          let matched = elementMatcher(element.value);\n\n          // Special case for $elemMatch: it means \"true, and use this as an array\n          // index if I didn't already have one\".\n          if (typeof matched === 'number') {\n            // XXX This code dates from when we only stored a single array index\n            // (for the outermost array). Should we be also including deeper array\n            // indices from the $elemMatch match?\n            if (!element.arrayIndices) {\n              element.arrayIndices = [matched];\n            }\n            matched = true;\n          }\n\n          // If some element matched, and it's tagged with array indices, include\n          // those indices in our result object.\n          if (matched && element.arrayIndices) {\n            match.arrayIndices = element.arrayIndices;\n          }\n          return matched;\n        });\n        return match;\n      };\n    }\n\n    // Helpers for $near.\n    function distanceCoordinatePairs(a, b) {\n      const pointA = pointToArray(a);\n      const pointB = pointToArray(b);\n      return Math.hypot(pointA[0] - pointB[0], pointA[1] - pointB[1]);\n    }\n\n    // Takes something that is not an operator object and returns an element matcher\n    // for equality with that thing.\n    function equalityElementMatcher(elementSelector) {\n      if (isOperatorObject(elementSelector)) {\n        throw Error('Can\\'t create equalityValueSelector for operator object');\n      }\n\n      // Special-case: null and undefined are equal (if you got undefined in there\n      // somewhere, or if you got it due to some branch being non-existent in the\n      // weird special case), even though they aren't with EJSON.equals.\n      // undefined or null\n      if (elementSelector == null) {\n        return value => value == null;\n      }\n      return value => LocalCollection._f._equal(elementSelector, value);\n    }\n    function everythingMatcher(docOrBranchedValues) {\n      return {\n        result: true\n      };\n    }\n    function expandArraysInBranches(branches, skipTheArrays) {\n      const branchesOut = [];\n      branches.forEach(branch => {\n        const thisIsArray = Array.isArray(branch.value);\n\n        // We include the branch itself, *UNLESS* we it's an array that we're going\n        // to iterate and we're told to skip arrays.  (That's right, we include some\n        // arrays even skipTheArrays is true: these are arrays that were found via\n        // explicit numerical indices.)\n        if (!(skipTheArrays && thisIsArray && !branch.dontIterate)) {\n          branchesOut.push({\n            arrayIndices: branch.arrayIndices,\n            value: branch.value\n          });\n        }\n        if (thisIsArray && !branch.dontIterate) {\n          branch.value.forEach((value, i) => {\n            branchesOut.push({\n              arrayIndices: (branch.arrayIndices || []).concat(i),\n              value\n            });\n          });\n        }\n      });\n      return branchesOut;\n    }\n    // Helpers for $bitsAllSet/$bitsAnySet/$bitsAllClear/$bitsAnyClear.\n    function getOperandBitmask(operand, selector) {\n      // numeric bitmask\n      // You can provide a numeric bitmask to be matched against the operand field.\n      // It must be representable as a non-negative 32-bit signed integer.\n      // Otherwise, $bitsAllSet will return an error.\n      if (Number.isInteger(operand) && operand >= 0) {\n        return new Uint8Array(new Int32Array([operand]).buffer);\n      }\n\n      // bindata bitmask\n      // You can also use an arbitrarily large BinData instance as a bitmask.\n      if (EJSON.isBinary(operand)) {\n        return new Uint8Array(operand.buffer);\n      }\n\n      // position list\n      // If querying a list of bit positions, each <position> must be a non-negative\n      // integer. Bit positions start at 0 from the least significant bit.\n      if (Array.isArray(operand) && operand.every(x => Number.isInteger(x) && x >= 0)) {\n        const buffer = new ArrayBuffer((Math.max(...operand) >> 3) + 1);\n        const view = new Uint8Array(buffer);\n        operand.forEach(x => {\n          view[x >> 3] |= 1 << (x & 0x7);\n        });\n        return view;\n      }\n\n      // bad operand\n      throw Error(\"operand to \".concat(selector, \" must be a numeric bitmask (representable as a \") + 'non-negative 32-bit signed integer), a bindata bitmask or an array with ' + 'bit positions (non-negative integers)');\n    }\n    function getValueBitmask(value, length) {\n      // The field value must be either numerical or a BinData instance. Otherwise,\n      // $bits... will not match the current document.\n\n      // numerical\n      if (Number.isSafeInteger(value)) {\n        // $bits... will not match numerical values that cannot be represented as a\n        // signed 64-bit integer. This can be the case if a value is either too\n        // large or small to fit in a signed 64-bit integer, or if it has a\n        // fractional component.\n        const buffer = new ArrayBuffer(Math.max(length, 2 * Uint32Array.BYTES_PER_ELEMENT));\n        let view = new Uint32Array(buffer, 0, 2);\n        view[0] = value % ((1 << 16) * (1 << 16)) | 0;\n        view[1] = value / ((1 << 16) * (1 << 16)) | 0;\n\n        // sign extension\n        if (value < 0) {\n          view = new Uint8Array(buffer, 2);\n          view.forEach((byte, i) => {\n            view[i] = 0xff;\n          });\n        }\n        return new Uint8Array(buffer);\n      }\n\n      // bindata\n      if (EJSON.isBinary(value)) {\n        return new Uint8Array(value.buffer);\n      }\n\n      // no match\n      return false;\n    }\n\n    // Actually inserts a key value into the selector document\n    // However, this checks there is no ambiguity in setting\n    // the value for the given key, throws otherwise\n    function insertIntoDocument(document, key, value) {\n      Object.keys(document).forEach(existingKey => {\n        if (existingKey.length > key.length && existingKey.indexOf(\"\".concat(key, \".\")) === 0 || key.length > existingKey.length && key.indexOf(\"\".concat(existingKey, \".\")) === 0) {\n          throw new Error(\"cannot infer query fields to set, both paths '\".concat(existingKey, \"' and \") + \"'\".concat(key, \"' are matched\"));\n        } else if (existingKey === key) {\n          throw new Error(\"cannot infer query fields to set, path '\".concat(key, \"' is matched twice\"));\n        }\n      });\n      document[key] = value;\n    }\n\n    // Returns a branched matcher that matches iff the given matcher does not.\n    // Note that this implicitly \"deMorganizes\" the wrapped function.  ie, it\n    // means that ALL branch values need to fail to match innerBranchedMatcher.\n    function invertBranchedMatcher(branchedMatcher) {\n      return branchValues => {\n        // We explicitly choose to strip arrayIndices here: it doesn't make sense to\n        // say \"update the array element that does not match something\", at least\n        // in mongo-land.\n        return {\n          result: !branchedMatcher(branchValues).result\n        };\n      };\n    }\n    function isIndexable(obj) {\n      return Array.isArray(obj) || LocalCollection._isPlainObject(obj);\n    }\n    function isNumericKey(s) {\n      return /^[0-9]+$/.test(s);\n    }\n    function isOperatorObject(valueSelector, inconsistentOK) {\n      if (!LocalCollection._isPlainObject(valueSelector)) {\n        return false;\n      }\n      let theseAreOperators = undefined;\n      Object.keys(valueSelector).forEach(selKey => {\n        const thisIsOperator = selKey.substr(0, 1) === '$' || selKey === 'diff';\n        if (theseAreOperators === undefined) {\n          theseAreOperators = thisIsOperator;\n        } else if (theseAreOperators !== thisIsOperator) {\n          if (!inconsistentOK) {\n            throw new Error(\"Inconsistent operator: \".concat(JSON.stringify(valueSelector)));\n          }\n          theseAreOperators = false;\n        }\n      });\n      return !!theseAreOperators; // {} has no operators\n    }\n    // Helper for $lt/$gt/$lte/$gte.\n    function makeInequality(cmpValueComparator) {\n      return {\n        compileElementSelector(operand) {\n          // Arrays never compare false with non-arrays for any inequality.\n          // XXX This was behavior we observed in pre-release MongoDB 2.5, but\n          //     it seems to have been reverted.\n          //     See https://jira.mongodb.org/browse/SERVER-11444\n          if (Array.isArray(operand)) {\n            return () => false;\n          }\n\n          // Special case: consider undefined and null the same (so true with\n          // $gte/$lte).\n          if (operand === undefined) {\n            operand = null;\n          }\n          const operandType = LocalCollection._f._type(operand);\n          return value => {\n            if (value === undefined) {\n              value = null;\n            }\n\n            // Comparisons are never true among things of different type (except\n            // null vs undefined).\n            if (LocalCollection._f._type(value) !== operandType) {\n              return false;\n            }\n            return cmpValueComparator(LocalCollection._f._cmp(value, operand));\n          };\n        }\n      };\n    }\n\n    // makeLookupFunction(key) returns a lookup function.\n    //\n    // A lookup function takes in a document and returns an array of matching\n    // branches.  If no arrays are found while looking up the key, this array will\n    // have exactly one branches (possibly 'undefined', if some segment of the key\n    // was not found).\n    //\n    // If arrays are found in the middle, this can have more than one element, since\n    // we 'branch'. When we 'branch', if there are more key segments to look up,\n    // then we only pursue branches that are plain objects (not arrays or scalars).\n    // This means we can actually end up with no branches!\n    //\n    // We do *NOT* branch on arrays that are found at the end (ie, at the last\n    // dotted member of the key). We just return that array; if you want to\n    // effectively 'branch' over the array's values, post-process the lookup\n    // function with expandArraysInBranches.\n    //\n    // Each branch is an object with keys:\n    //  - value: the value at the branch\n    //  - dontIterate: an optional bool; if true, it means that 'value' is an array\n    //    that expandArraysInBranches should NOT expand. This specifically happens\n    //    when there is a numeric index in the key, and ensures the\n    //    perhaps-surprising MongoDB behavior where {'a.0': 5} does NOT\n    //    match {a: [[5]]}.\n    //  - arrayIndices: if any array indexing was done during lookup (either due to\n    //    explicit numeric indices or implicit branching), this will be an array of\n    //    the array indices used, from outermost to innermost; it is falsey or\n    //    absent if no array index is used. If an explicit numeric index is used,\n    //    the index will be followed in arrayIndices by the string 'x'.\n    //\n    //    Note: arrayIndices is used for two purposes. First, it is used to\n    //    implement the '$' modifier feature, which only ever looks at its first\n    //    element.\n    //\n    //    Second, it is used for sort key generation, which needs to be able to tell\n    //    the difference between different paths. Moreover, it needs to\n    //    differentiate between explicit and implicit branching, which is why\n    //    there's the somewhat hacky 'x' entry: this means that explicit and\n    //    implicit array lookups will have different full arrayIndices paths. (That\n    //    code only requires that different paths have different arrayIndices; it\n    //    doesn't actually 'parse' arrayIndices. As an alternative, arrayIndices\n    //    could contain objects with flags like 'implicit', but I think that only\n    //    makes the code surrounding them more complex.)\n    //\n    //    (By the way, this field ends up getting passed around a lot without\n    //    cloning, so never mutate any arrayIndices field/var in this package!)\n    //\n    //\n    // At the top level, you may only pass in a plain object or array.\n    //\n    // See the test 'minimongo - lookup' for some examples of what lookup functions\n    // return.\n    function makeLookupFunction(key) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      const parts = key.split('.');\n      const firstPart = parts.length ? parts[0] : '';\n      const lookupRest = parts.length > 1 && makeLookupFunction(parts.slice(1).join('.'), options);\n      function buildResult(arrayIndices, dontIterate, value) {\n        return arrayIndices && arrayIndices.length ? dontIterate ? [{\n          arrayIndices,\n          dontIterate,\n          value\n        }] : [{\n          arrayIndices,\n          value\n        }] : dontIterate ? [{\n          dontIterate,\n          value\n        }] : [{\n          value\n        }];\n      }\n\n      // Doc will always be a plain object or an array.\n      // apply an explicit numeric index, an array.\n      return (doc, arrayIndices) => {\n        if (Array.isArray(doc)) {\n          // If we're being asked to do an invalid lookup into an array (non-integer\n          // or out-of-bounds), return no results (which is different from returning\n          // a single undefined result, in that `null` equality checks won't match).\n          if (!(isNumericKey(firstPart) && firstPart < doc.length)) {\n            return [];\n          }\n\n          // Remember that we used this array index. Include an 'x' to indicate that\n          // the previous index came from being considered as an explicit array\n          // index (not branching).\n          arrayIndices = arrayIndices ? arrayIndices.concat(+firstPart, 'x') : [+firstPart, 'x'];\n        }\n\n        // Do our first lookup.\n        const firstLevel = doc[firstPart];\n\n        // If there is no deeper to dig, return what we found.\n        //\n        // If what we found is an array, most value selectors will choose to treat\n        // the elements of the array as matchable values in their own right, but\n        // that's done outside of the lookup function. (Exceptions to this are $size\n        // and stuff relating to $elemMatch.  eg, {a: {$size: 2}} does not match {a:\n        // [[1, 2]]}.)\n        //\n        // That said, if we just did an *explicit* array lookup (on doc) to find\n        // firstLevel, and firstLevel is an array too, we do NOT want value\n        // selectors to iterate over it.  eg, {'a.0': 5} does not match {a: [[5]]}.\n        // So in that case, we mark the return value as 'don't iterate'.\n        if (!lookupRest) {\n          return buildResult(arrayIndices, Array.isArray(doc) && Array.isArray(firstLevel), firstLevel);\n        }\n\n        // We need to dig deeper.  But if we can't, because what we've found is not\n        // an array or plain object, we're done. If we just did a numeric index into\n        // an array, we return nothing here (this is a change in Mongo 2.5 from\n        // Mongo 2.4, where {'a.0.b': null} stopped matching {a: [5]}). Otherwise,\n        // return a single `undefined` (which can, for example, match via equality\n        // with `null`).\n        if (!isIndexable(firstLevel)) {\n          if (Array.isArray(doc)) {\n            return [];\n          }\n          return buildResult(arrayIndices, false, undefined);\n        }\n        const result = [];\n        const appendToResult = more => {\n          result.push(...more);\n        };\n\n        // Dig deeper: look up the rest of the parts on whatever we've found.\n        // (lookupRest is smart enough to not try to do invalid lookups into\n        // firstLevel if it's an array.)\n        appendToResult(lookupRest(firstLevel, arrayIndices));\n\n        // If we found an array, then in *addition* to potentially treating the next\n        // part as a literal integer lookup, we should also 'branch': try to look up\n        // the rest of the parts on each array element in parallel.\n        //\n        // In this case, we *only* dig deeper into array elements that are plain\n        // objects. (Recall that we only got this far if we have further to dig.)\n        // This makes sense: we certainly don't dig deeper into non-indexable\n        // objects. And it would be weird to dig into an array: it's simpler to have\n        // a rule that explicit integer indexes only apply to an outer array, not to\n        // an array you find after a branching search.\n        //\n        // In the special case of a numeric part in a *sort selector* (not a query\n        // selector), we skip the branching: we ONLY allow the numeric part to mean\n        // 'look up this index' in that case, not 'also look up this index in all\n        // the elements of the array'.\n        if (Array.isArray(firstLevel) && !(isNumericKey(parts[1]) && options.forSort)) {\n          firstLevel.forEach((branch, arrayIndex) => {\n            if (LocalCollection._isPlainObject(branch)) {\n              appendToResult(lookupRest(branch, arrayIndices ? arrayIndices.concat(arrayIndex) : [arrayIndex]));\n            }\n          });\n        }\n        return result;\n      };\n    }\n    // Object exported only for unit testing.\n    // Use it to export private functions to test in Tinytest.\n    MinimongoTest = {\n      makeLookupFunction\n    };\n    MinimongoError = function (message) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (typeof message === 'string' && options.field) {\n        message += \" for field '\".concat(options.field, \"'\");\n      }\n      const error = new Error(message);\n      error.name = 'MinimongoError';\n      return error;\n    };\n    function nothingMatcher(docOrBranchedValues) {\n      return {\n        result: false\n      };\n    }\n    // Takes an operator object (an object with $ keys) and returns a branched\n    // matcher for it.\n    function operatorBranchedMatcher(valueSelector, matcher, isRoot) {\n      // Each valueSelector works separately on the various branches.  So one\n      // operator can match one branch and another can match another branch.  This\n      // is OK.\n      const operatorMatchers = Object.keys(valueSelector).map(operator => {\n        const operand = valueSelector[operator];\n        const simpleRange = ['$lt', '$lte', '$gt', '$gte'].includes(operator) && typeof operand === 'number';\n        const simpleEquality = ['$ne', '$eq'].includes(operator) && operand !== Object(operand);\n        const simpleInclusion = ['$in', '$nin'].includes(operator) && Array.isArray(operand) && !operand.some(x => x === Object(x));\n        if (!(simpleRange || simpleInclusion || simpleEquality)) {\n          matcher._isSimple = false;\n        }\n        if (hasOwn.call(VALUE_OPERATORS, operator)) {\n          return VALUE_OPERATORS[operator](operand, valueSelector, matcher, isRoot);\n        }\n        if (hasOwn.call(ELEMENT_OPERATORS, operator)) {\n          const options = ELEMENT_OPERATORS[operator];\n          return convertElementMatcherToBranchedMatcher(options.compileElementSelector(operand, valueSelector, matcher), options);\n        }\n        throw new Error(\"Unrecognized operator: \".concat(operator));\n      });\n      return andBranchedMatchers(operatorMatchers);\n    }\n\n    // paths - Array: list of mongo style paths\n    // newLeafFn - Function: of form function(path) should return a scalar value to\n    //                       put into list created for that path\n    // conflictFn - Function: of form function(node, path, fullPath) is called\n    //                        when building a tree path for 'fullPath' node on\n    //                        'path' was already a leaf with a value. Must return a\n    //                        conflict resolution.\n    // initial tree - Optional Object: starting tree.\n    // @returns - Object: tree represented as a set of nested objects\n    function pathsToTree(paths, newLeafFn, conflictFn) {\n      let root = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      paths.forEach(path => {\n        const pathArray = path.split('.');\n        let tree = root;\n\n        // use .every just for iteration with break\n        const success = pathArray.slice(0, -1).every((key, i) => {\n          if (!hasOwn.call(tree, key)) {\n            tree[key] = {};\n          } else if (tree[key] !== Object(tree[key])) {\n            tree[key] = conflictFn(tree[key], pathArray.slice(0, i + 1).join('.'), path);\n\n            // break out of loop if we are failing for this path\n            if (tree[key] !== Object(tree[key])) {\n              return false;\n            }\n          }\n          tree = tree[key];\n          return true;\n        });\n        if (success) {\n          const lastKey = pathArray[pathArray.length - 1];\n          if (hasOwn.call(tree, lastKey)) {\n            tree[lastKey] = conflictFn(tree[lastKey], path, path);\n          } else {\n            tree[lastKey] = newLeafFn(path);\n          }\n        }\n      });\n      return root;\n    }\n    // Makes sure we get 2 elements array and assume the first one to be x and\n    // the second one to y no matter what user passes.\n    // In case user passes { lon: x, lat: y } returns [x, y]\n    function pointToArray(point) {\n      return Array.isArray(point) ? point.slice() : [point.x, point.y];\n    }\n\n    // Creating a document from an upsert is quite tricky.\n    // E.g. this selector: {\"$or\": [{\"b.foo\": {\"$all\": [\"bar\"]}}]}, should result\n    // in: {\"b.foo\": \"bar\"}\n    // But this selector: {\"$or\": [{\"b\": {\"foo\": {\"$all\": [\"bar\"]}}}]} should throw\n    // an error\n\n    // Some rules (found mainly with trial & error, so there might be more):\n    // - handle all childs of $and (or implicit $and)\n    // - handle $or nodes with exactly 1 child\n    // - ignore $or nodes with more than 1 child\n    // - ignore $nor and $not nodes\n    // - throw when a value can not be set unambiguously\n    // - every value for $all should be dealt with as separate $eq-s\n    // - threat all children of $all as $eq setters (=> set if $all.length === 1,\n    //   otherwise throw error)\n    // - you can not mix '$'-prefixed keys and non-'$'-prefixed keys\n    // - you can only have dotted keys on a root-level\n    // - you can not have '$'-prefixed keys more than one-level deep in an object\n\n    // Handles one key/value pair to put in the selector document\n    function populateDocumentWithKeyValue(document, key, value) {\n      if (value && Object.getPrototypeOf(value) === Object.prototype) {\n        populateDocumentWithObject(document, key, value);\n      } else if (!(value instanceof RegExp)) {\n        insertIntoDocument(document, key, value);\n      }\n    }\n\n    // Handles a key, value pair to put in the selector document\n    // if the value is an object\n    function populateDocumentWithObject(document, key, value) {\n      const keys = Object.keys(value);\n      const unprefixedKeys = keys.filter(op => op[0] !== '$');\n      if (unprefixedKeys.length > 0 || !keys.length) {\n        // Literal (possibly empty) object ( or empty object )\n        // Don't allow mixing '$'-prefixed with non-'$'-prefixed fields\n        if (keys.length !== unprefixedKeys.length) {\n          throw new Error(\"unknown operator: \".concat(unprefixedKeys[0]));\n        }\n        validateObject(value, key);\n        insertIntoDocument(document, key, value);\n      } else {\n        Object.keys(value).forEach(op => {\n          const object = value[op];\n          if (op === '$eq') {\n            populateDocumentWithKeyValue(document, key, object);\n          } else if (op === '$all') {\n            // every value for $all should be dealt with as separate $eq-s\n            object.forEach(element => populateDocumentWithKeyValue(document, key, element));\n          }\n        });\n      }\n    }\n\n    // Fills a document with certain fields from an upsert selector\n    function populateDocumentWithQueryFields(query) {\n      let document = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (Object.getPrototypeOf(query) === Object.prototype) {\n        // handle implicit $and\n        Object.keys(query).forEach(key => {\n          const value = query[key];\n          if (key === '$and') {\n            // handle explicit $and\n            value.forEach(element => populateDocumentWithQueryFields(element, document));\n          } else if (key === '$or') {\n            // handle $or nodes with exactly 1 child\n            if (value.length === 1) {\n              populateDocumentWithQueryFields(value[0], document);\n            }\n          } else if (key[0] !== '$') {\n            // Ignore other '$'-prefixed logical selectors\n            populateDocumentWithKeyValue(document, key, value);\n          }\n        });\n      } else {\n        // Handle meteor-specific shortcut for selecting _id\n        if (LocalCollection._selectorIsId(query)) {\n          insertIntoDocument(document, '_id', query);\n        }\n      }\n      return document;\n    }\n    function projectionDetails(fields) {\n      // Find the non-_id keys (_id is handled specially because it is included\n      // unless explicitly excluded). Sort the keys, so that our code to detect\n      // overlaps like 'foo' and 'foo.bar' can assume that 'foo' comes first.\n      let fieldsKeys = Object.keys(fields).sort();\n\n      // If _id is the only field in the projection, do not remove it, since it is\n      // required to determine if this is an exclusion or exclusion. Also keep an\n      // inclusive _id, since inclusive _id follows the normal rules about mixing\n      // inclusive and exclusive fields. If _id is not the only field in the\n      // projection and is exclusive, remove it so it can be handled later by a\n      // special case, since exclusive _id is always allowed.\n      if (!(fieldsKeys.length === 1 && fieldsKeys[0] === '_id') && !(fieldsKeys.includes('_id') && fields._id)) {\n        fieldsKeys = fieldsKeys.filter(key => key !== '_id');\n      }\n      let including = null; // Unknown\n\n      fieldsKeys.forEach(keyPath => {\n        const rule = !!fields[keyPath];\n        if (including === null) {\n          including = rule;\n        }\n\n        // This error message is copied from MongoDB shell\n        if (including !== rule) {\n          throw MinimongoError('You cannot currently mix including and excluding fields.');\n        }\n      });\n      const projectionRulesTree = pathsToTree(fieldsKeys, path => including, (node, path, fullPath) => {\n        // Check passed projection fields' keys: If you have two rules such as\n        // 'foo.bar' and 'foo.bar.baz', then the result becomes ambiguous. If\n        // that happens, there is a probability you are doing something wrong,\n        // framework should notify you about such mistake earlier on cursor\n        // compilation step than later during runtime.  Note, that real mongo\n        // doesn't do anything about it and the later rule appears in projection\n        // project, more priority it takes.\n        //\n        // Example, assume following in mongo shell:\n        // > db.coll.insert({ a: { b: 23, c: 44 } })\n        // > db.coll.find({}, { 'a': 1, 'a.b': 1 })\n        // {\"_id\": ObjectId(\"520bfe456024608e8ef24af3\"), \"a\": {\"b\": 23}}\n        // > db.coll.find({}, { 'a.b': 1, 'a': 1 })\n        // {\"_id\": ObjectId(\"520bfe456024608e8ef24af3\"), \"a\": {\"b\": 23, \"c\": 44}}\n        //\n        // Note, how second time the return set of keys is different.\n        const currentPath = fullPath;\n        const anotherPath = path;\n        throw MinimongoError(\"both \".concat(currentPath, \" and \").concat(anotherPath, \" found in fields option, \") + 'using both of them may trigger unexpected behavior. Did you mean to ' + 'use only one of them?');\n      });\n      return {\n        including,\n        tree: projectionRulesTree\n      };\n    }\n    function regexpElementMatcher(regexp) {\n      return value => {\n        if (value instanceof RegExp) {\n          return value.toString() === regexp.toString();\n        }\n\n        // Regexps only work against strings.\n        if (typeof value !== 'string') {\n          return false;\n        }\n\n        // Reset regexp's state to avoid inconsistent matching for objects with the\n        // same value on consecutive calls of regexp.test. This happens only if the\n        // regexp has the 'g' flag. Also note that ES6 introduces a new flag 'y' for\n        // which we should *not* change the lastIndex but MongoDB doesn't support\n        // either of these flags.\n        regexp.lastIndex = 0;\n        return regexp.test(value);\n      };\n    }\n    // Validates the key in a path.\n    // Objects that are nested more then 1 level cannot have dotted fields\n    // or fields starting with '$'\n    function validateKeyInPath(key, path) {\n      if (key.includes('.')) {\n        throw new Error(\"The dotted field '\".concat(key, \"' in '\").concat(path, \".\").concat(key, \" is not valid for storage.\"));\n      }\n      if (key[0] === '$') {\n        throw new Error(\"The dollar ($) prefixed field  '\".concat(path, \".\").concat(key, \" is not valid for storage.\"));\n      }\n    }\n\n    // Recursively validates an object that is nested more than one level deep\n    function validateObject(object, path) {\n      if (object && Object.getPrototypeOf(object) === Object.prototype) {\n        Object.keys(object).forEach(key => {\n          validateKeyInPath(key, path);\n          validateObject(object[key], path + '.' + key);\n        });\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["module","export","hasOwn","ELEMENT_OPERATORS","compileDocumentSelector","equalityElementMatcher","expandArraysInBranches","isIndexable","isNumericKey","isOperatorObject","makeLookupFunction","nothingMatcher","pathsToTree","populateDocumentWithQueryFields","projectionDetails","regexpElementMatcher","LocalCollection","link","default","v","__reifyWaitForDeps__","Object","prototype","hasOwnProperty","$lt","makeInequality","cmpValue","$gt","$lte","$gte","$mod","compileElementSelector","operand","Array","isArray","length","Error","divisor","remainder","value","$in","elementMatchers","map","option","RegExp","undefined","some","matcher","$size","dontExpandLeafArrays","$type","dontIncludeLeafArrays","operandAliasMap","call","concat","_f","_type","$bitsAllSet","mask","getOperandBitmask","bitmask","getValueBitmask","every","byte","i","$bitsAnySet","$bitsAllClear","$bitsAnyClear","$regex","valueSelector","regexp","$options","test","source","$elemMatch","_isPlainObject","isDocMatcher","keys","filter","key","LOGICAL_OPERATORS","reduce","a","b","assign","subMatcher","inElemMatch","compileValueSelector","arrayElement","arg","dontIterate","result","$and","subSelector","andDocumentMatchers","compileArrayOfDocumentSelectors","$or","matchers","doc","fn","$nor","$where","selectorValue","_recordPathUsed","_hasWhere","Function","$comment","VALUE_OPERATORS","$eq","convertElementMatcherToBranchedMatcher","$not","invertBranchedMatcher","$ne","$nin","$exists","exists","everythingMatcher","$maxDistance","$near","$all","branchedMatchers","criterion","andBranchedMatchers","isRoot","_hasGeoQuery","maxDistance","point","distance","$geometry","type","GeoJSON","pointDistance","coordinates","pointToArray","geometryWithinRadius","distanceCoordinatePairs","branchedValues","branch","curDistance","_isUpdate","arrayIndices","andSomeMatchers","subMatchers","docOrBranches","match","subResult","selectors","docSelector","options","arguments","docMatchers","substr","_isSimple","lookUpByIndex","valueMatcher","Boolean","operatorBranchedMatcher","elementMatcher","branches","expanded","element","matched","pointA","pointB","Math","hypot","elementSelector","_equal","docOrBranchedValues","skipTheArrays","branchesOut","forEach","thisIsArray","push","selector","Number","isInteger","Uint8Array","Int32Array","buffer","EJSON","isBinary","x","ArrayBuffer","max","view","isSafeInteger","Uint32Array","BYTES_PER_ELEMENT","insertIntoDocument","document","existingKey","indexOf","branchedMatcher","branchValues","obj","s","inconsistentOK","theseAreOperators","selKey","thisIsOperator","JSON","stringify","cmpValueComparator","operandType","_cmp","parts","split","firstPart","lookupRest","slice","join","buildResult","firstLevel","appendToResult","more","forSort","arrayIndex","MinimongoTest","MinimongoError","message","field","error","name","operatorMatchers","operator","simpleRange","includes","simpleEquality","simpleInclusion","paths","newLeafFn","conflictFn","root","path","pathArray","tree","success","lastKey","y","populateDocumentWithKeyValue","getPrototypeOf","populateDocumentWithObject","unprefixedKeys","op","validateObject","object","query","_selectorIsId","fields","fieldsKeys","sort","_id","including","keyPath","rule","projectionRulesTree","node","fullPath","currentPath","anotherPath","toString","lastIndex","validateKeyInPath","__reify_async_result__","_reifyError","self","async"],"sources":["packages/minimongo/common.js"],"sourcesContent":["import LocalCollection from './local_collection.js';\n\nexport const hasOwn = Object.prototype.hasOwnProperty;\n\n// Each element selector contains:\n//  - compileElementSelector, a function with args:\n//    - operand - the \"right hand side\" of the operator\n//    - valueSelector - the \"context\" for the operator (so that $regex can find\n//      $options)\n//    - matcher - the Matcher this is going into (so that $elemMatch can compile\n//      more things)\n//    returning a function mapping a single value to bool.\n//  - dontExpandLeafArrays, a bool which prevents expandArraysInBranches from\n//    being called\n//  - dontIncludeLeafArrays, a bool which causes an argument to be passed to\n//    expandArraysInBranches if it is called\nexport const ELEMENT_OPERATORS = {\n  $lt: makeInequality(cmpValue => cmpValue < 0),\n  $gt: makeInequality(cmpValue => cmpValue > 0),\n  $lte: makeInequality(cmpValue => cmpValue <= 0),\n  $gte: makeInequality(cmpValue => cmpValue >= 0),\n  $mod: {\n    compileElementSelector(operand) {\n      if (!(Array.isArray(operand) && operand.length === 2\n            && typeof operand[0] === 'number'\n            && typeof operand[1] === 'number')) {\n        throw Error('argument to $mod must be an array of two numbers');\n      }\n\n      // XXX could require to be ints or round or something\n      const divisor = operand[0];\n      const remainder = operand[1];\n      return value => (\n        typeof value === 'number' && value % divisor === remainder\n      );\n    },\n  },\n  $in: {\n    compileElementSelector(operand) {\n      if (!Array.isArray(operand)) {\n        throw Error('$in needs an array');\n      }\n\n      const elementMatchers = operand.map(option => {\n        if (option instanceof RegExp) {\n          return regexpElementMatcher(option);\n        }\n\n        if (isOperatorObject(option)) {\n          throw Error('cannot nest $ under $in');\n        }\n\n        return equalityElementMatcher(option);\n      });\n\n      return value => {\n        // Allow {a: {$in: [null]}} to match when 'a' does not exist.\n        if (value === undefined) {\n          value = null;\n        }\n\n        return elementMatchers.some(matcher => matcher(value));\n      };\n    },\n  },\n  $size: {\n    // {a: [[5, 5]]} must match {a: {$size: 1}} but not {a: {$size: 2}}, so we\n    // don't want to consider the element [5,5] in the leaf array [[5,5]] as a\n    // possible value.\n    dontExpandLeafArrays: true,\n    compileElementSelector(operand) {\n      if (typeof operand === 'string') {\n        // Don't ask me why, but by experimentation, this seems to be what Mongo\n        // does.\n        operand = 0;\n      } else if (typeof operand !== 'number') {\n        throw Error('$size needs a number');\n      }\n\n      return value => Array.isArray(value) && value.length === operand;\n    },\n  },\n  $type: {\n    // {a: [5]} must not match {a: {$type: 4}} (4 means array), but it should\n    // match {a: {$type: 1}} (1 means number), and {a: [[5]]} must match {$a:\n    // {$type: 4}}. Thus, when we see a leaf array, we *should* expand it but\n    // should *not* include it itself.\n    dontIncludeLeafArrays: true,\n    compileElementSelector(operand) {\n      if (typeof operand === 'string') {\n        const operandAliasMap = {\n          'double': 1,\n          'string': 2,\n          'object': 3,\n          'array': 4,\n          'binData': 5,\n          'undefined': 6,\n          'objectId': 7,\n          'bool': 8,\n          'date': 9,\n          'null': 10,\n          'regex': 11,\n          'dbPointer': 12,\n          'javascript': 13,\n          'symbol': 14,\n          'javascriptWithScope': 15,\n          'int': 16,\n          'timestamp': 17,\n          'long': 18,\n          'decimal': 19,\n          'minKey': -1,\n          'maxKey': 127,\n        };\n        if (!hasOwn.call(operandAliasMap, operand)) {\n          throw Error(`unknown string alias for $type: ${operand}`);\n        }\n        operand = operandAliasMap[operand];\n      } else if (typeof operand === 'number') {\n        if (operand === 0 || operand < -1\n          || (operand > 19 && operand !== 127)) {\n          throw Error(`Invalid numerical $type code: ${operand}`);\n        }\n      } else {\n        throw Error('argument to $type is not a number or a string');\n      }\n\n      return value => (\n        value !== undefined && LocalCollection._f._type(value) === operand\n      );\n    },\n  },\n  $bitsAllSet: {\n    compileElementSelector(operand) {\n      const mask = getOperandBitmask(operand, '$bitsAllSet');\n      return value => {\n        const bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.every((byte, i) => (bitmask[i] & byte) === byte);\n      };\n    },\n  },\n  $bitsAnySet: {\n    compileElementSelector(operand) {\n      const mask = getOperandBitmask(operand, '$bitsAnySet');\n      return value => {\n        const bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.some((byte, i) => (~bitmask[i] & byte) !== byte);\n      };\n    },\n  },\n  $bitsAllClear: {\n    compileElementSelector(operand) {\n      const mask = getOperandBitmask(operand, '$bitsAllClear');\n      return value => {\n        const bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.every((byte, i) => !(bitmask[i] & byte));\n      };\n    },\n  },\n  $bitsAnyClear: {\n    compileElementSelector(operand) {\n      const mask = getOperandBitmask(operand, '$bitsAnyClear');\n      return value => {\n        const bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.some((byte, i) => (bitmask[i] & byte) !== byte);\n      };\n    },\n  },\n  $regex: {\n    compileElementSelector(operand, valueSelector) {\n      if (!(typeof operand === 'string' || operand instanceof RegExp)) {\n        throw Error('$regex has to be a string or RegExp');\n      }\n\n      let regexp;\n      if (valueSelector.$options !== undefined) {\n        // Options passed in $options (even the empty string) always overrides\n        // options in the RegExp object itself.\n\n        // Be clear that we only support the JS-supported options, not extended\n        // ones (eg, Mongo supports x and s). Ideally we would implement x and s\n        // by transforming the regexp, but not today...\n        if (/[^gim]/.test(valueSelector.$options)) {\n          throw new Error('Only the i, m, and g regexp options are supported');\n        }\n\n        const source = operand instanceof RegExp ? operand.source : operand;\n        regexp = new RegExp(source, valueSelector.$options);\n      } else if (operand instanceof RegExp) {\n        regexp = operand;\n      } else {\n        regexp = new RegExp(operand);\n      }\n\n      return regexpElementMatcher(regexp);\n    },\n  },\n  $elemMatch: {\n    dontExpandLeafArrays: true,\n    compileElementSelector(operand, valueSelector, matcher) {\n      if (!LocalCollection._isPlainObject(operand)) {\n        throw Error('$elemMatch need an object');\n      }\n\n      const isDocMatcher = !isOperatorObject(\n        Object.keys(operand)\n          .filter(key => !hasOwn.call(LOGICAL_OPERATORS, key))\n          .reduce((a, b) => Object.assign(a, {[b]: operand[b]}), {}),\n        true);\n\n      let subMatcher;\n      if (isDocMatcher) {\n        // This is NOT the same as compileValueSelector(operand), and not just\n        // because of the slightly different calling convention.\n        // {$elemMatch: {x: 3}} means \"an element has a field x:3\", not\n        // \"consists only of a field x:3\". Also, regexps and sub-$ are allowed.\n        subMatcher =\n          compileDocumentSelector(operand, matcher, {inElemMatch: true});\n      } else {\n        subMatcher = compileValueSelector(operand, matcher);\n      }\n\n      return value => {\n        if (!Array.isArray(value)) {\n          return false;\n        }\n\n        for (let i = 0; i < value.length; ++i) {\n          const arrayElement = value[i];\n          let arg;\n          if (isDocMatcher) {\n            // We can only match {$elemMatch: {b: 3}} against objects.\n            // (We can also match against arrays, if there's numeric indices,\n            // eg {$elemMatch: {'0.b': 3}} or {$elemMatch: {0: 3}}.)\n            if (!isIndexable(arrayElement)) {\n              return false;\n            }\n\n            arg = arrayElement;\n          } else {\n            // dontIterate ensures that {a: {$elemMatch: {$gt: 5}}} matches\n            // {a: [8]} but not {a: [[8]]}\n            arg = [{value: arrayElement, dontIterate: true}];\n          }\n          // XXX support $near in $elemMatch by propagating $distance?\n          if (subMatcher(arg).result) {\n            return i; // specially understood to mean \"use as arrayIndices\"\n          }\n        }\n\n        return false;\n      };\n    },\n  },\n};\n\n// Operators that appear at the top level of a document selector.\nconst LOGICAL_OPERATORS = {\n  $and(subSelector, matcher, inElemMatch) {\n    return andDocumentMatchers(\n      compileArrayOfDocumentSelectors(subSelector, matcher, inElemMatch)\n    );\n  },\n\n  $or(subSelector, matcher, inElemMatch) {\n    const matchers = compileArrayOfDocumentSelectors(\n      subSelector,\n      matcher,\n      inElemMatch\n    );\n\n    // Special case: if there is only one matcher, use it directly, *preserving*\n    // any arrayIndices it returns.\n    if (matchers.length === 1) {\n      return matchers[0];\n    }\n\n    return doc => {\n      const result = matchers.some(fn => fn(doc).result);\n      // $or does NOT set arrayIndices when it has multiple\n      // sub-expressions. (Tested against MongoDB.)\n      return {result};\n    };\n  },\n\n  $nor(subSelector, matcher, inElemMatch) {\n    const matchers = compileArrayOfDocumentSelectors(\n      subSelector,\n      matcher,\n      inElemMatch\n    );\n    return doc => {\n      const result = matchers.every(fn => !fn(doc).result);\n      // Never set arrayIndices, because we only match if nothing in particular\n      // 'matched' (and because this is consistent with MongoDB).\n      return {result};\n    };\n  },\n\n  $where(selectorValue, matcher) {\n    // Record that *any* path may be used.\n    matcher._recordPathUsed('');\n    matcher._hasWhere = true;\n\n    if (!(selectorValue instanceof Function)) {\n      // XXX MongoDB seems to have more complex logic to decide where or or not\n      // to add 'return'; not sure exactly what it is.\n      selectorValue = Function('obj', `return ${selectorValue}`);\n    }\n\n    // We make the document available as both `this` and `obj`.\n    // // XXX not sure what we should do if this throws\n    return doc => ({result: selectorValue.call(doc, doc)});\n  },\n\n  // This is just used as a comment in the query (in MongoDB, it also ends up in\n  // query logs); it has no effect on the actual selection.\n  $comment() {\n    return () => ({result: true});\n  },\n};\n\n// Operators that (unlike LOGICAL_OPERATORS) pertain to individual paths in a\n// document, but (unlike ELEMENT_OPERATORS) do not have a simple definition as\n// \"match each branched value independently and combine with\n// convertElementMatcherToBranchedMatcher\".\nconst VALUE_OPERATORS = {\n  $eq(operand) {\n    return convertElementMatcherToBranchedMatcher(\n      equalityElementMatcher(operand)\n    );\n  },\n  $not(operand, valueSelector, matcher) {\n    return invertBranchedMatcher(compileValueSelector(operand, matcher));\n  },\n  $ne(operand) {\n    return invertBranchedMatcher(\n      convertElementMatcherToBranchedMatcher(equalityElementMatcher(operand))\n    );\n  },\n  $nin(operand) {\n    return invertBranchedMatcher(\n      convertElementMatcherToBranchedMatcher(\n        ELEMENT_OPERATORS.$in.compileElementSelector(operand)\n      )\n    );\n  },\n  $exists(operand) {\n    const exists = convertElementMatcherToBranchedMatcher(\n      value => value !== undefined\n    );\n    return operand ? exists : invertBranchedMatcher(exists);\n  },\n  // $options just provides options for $regex; its logic is inside $regex\n  $options(operand, valueSelector) {\n    if (!hasOwn.call(valueSelector, '$regex')) {\n      throw Error('$options needs a $regex');\n    }\n\n    return everythingMatcher;\n  },\n  // $maxDistance is basically an argument to $near\n  $maxDistance(operand, valueSelector) {\n    if (!valueSelector.$near) {\n      throw Error('$maxDistance needs a $near');\n    }\n\n    return everythingMatcher;\n  },\n  $all(operand, valueSelector, matcher) {\n    if (!Array.isArray(operand)) {\n      throw Error('$all requires array');\n    }\n\n    // Not sure why, but this seems to be what MongoDB does.\n    if (operand.length === 0) {\n      return nothingMatcher;\n    }\n\n    const branchedMatchers = operand.map(criterion => {\n      // XXX handle $all/$elemMatch combination\n      if (isOperatorObject(criterion)) {\n        throw Error('no $ expressions in $all');\n      }\n\n      // This is always a regexp or equality selector.\n      return compileValueSelector(criterion, matcher);\n    });\n\n    // andBranchedMatchers does NOT require all selectors to return true on the\n    // SAME branch.\n    return andBranchedMatchers(branchedMatchers);\n  },\n  $near(operand, valueSelector, matcher, isRoot) {\n    if (!isRoot) {\n      throw Error('$near can\\'t be inside another $ operator');\n    }\n\n    matcher._hasGeoQuery = true;\n\n    // There are two kinds of geodata in MongoDB: legacy coordinate pairs and\n    // GeoJSON. They use different distance metrics, too. GeoJSON queries are\n    // marked with a $geometry property, though legacy coordinates can be\n    // matched using $geometry.\n    let maxDistance, point, distance;\n    if (LocalCollection._isPlainObject(operand) && hasOwn.call(operand, '$geometry')) {\n      // GeoJSON \"2dsphere\" mode.\n      maxDistance = operand.$maxDistance;\n      point = operand.$geometry;\n      distance = value => {\n        // XXX: for now, we don't calculate the actual distance between, say,\n        // polygon and circle. If people care about this use-case it will get\n        // a priority.\n        if (!value) {\n          return null;\n        }\n\n        if (!value.type) {\n          return GeoJSON.pointDistance(\n            point,\n            {type: 'Point', coordinates: pointToArray(value)}\n          );\n        }\n\n        if (value.type === 'Point') {\n          return GeoJSON.pointDistance(point, value);\n        }\n\n        return GeoJSON.geometryWithinRadius(value, point, maxDistance)\n          ? 0\n          : maxDistance + 1;\n      };\n    } else {\n      maxDistance = valueSelector.$maxDistance;\n\n      if (!isIndexable(operand)) {\n        throw Error('$near argument must be coordinate pair or GeoJSON');\n      }\n\n      point = pointToArray(operand);\n\n      distance = value => {\n        if (!isIndexable(value)) {\n          return null;\n        }\n\n        return distanceCoordinatePairs(point, value);\n      };\n    }\n\n    return branchedValues => {\n      // There might be multiple points in the document that match the given\n      // field. Only one of them needs to be within $maxDistance, but we need to\n      // evaluate all of them and use the nearest one for the implicit sort\n      // specifier. (That's why we can't just use ELEMENT_OPERATORS here.)\n      //\n      // Note: This differs from MongoDB's implementation, where a document will\n      // actually show up *multiple times* in the result set, with one entry for\n      // each within-$maxDistance branching point.\n      const result = {result: false};\n      expandArraysInBranches(branchedValues).every(branch => {\n        // if operation is an update, don't skip branches, just return the first\n        // one (#3599)\n        let curDistance;\n        if (!matcher._isUpdate) {\n          if (!(typeof branch.value === 'object')) {\n            return true;\n          }\n\n          curDistance = distance(branch.value);\n\n          // Skip branches that aren't real points or are too far away.\n          if (curDistance === null || curDistance > maxDistance) {\n            return true;\n          }\n\n          // Skip anything that's a tie.\n          if (result.distance !== undefined && result.distance <= curDistance) {\n            return true;\n          }\n        }\n\n        result.result = true;\n        result.distance = curDistance;\n\n        if (branch.arrayIndices) {\n          result.arrayIndices = branch.arrayIndices;\n        } else {\n          delete result.arrayIndices;\n        }\n\n        return !matcher._isUpdate;\n      });\n\n      return result;\n    };\n  },\n};\n\n// NB: We are cheating and using this function to implement 'AND' for both\n// 'document matchers' and 'branched matchers'. They both return result objects\n// but the argument is different: for the former it's a whole doc, whereas for\n// the latter it's an array of 'branched values'.\nfunction andSomeMatchers(subMatchers) {\n  if (subMatchers.length === 0) {\n    return everythingMatcher;\n  }\n\n  if (subMatchers.length === 1) {\n    return subMatchers[0];\n  }\n\n  return docOrBranches => {\n    const match = {};\n    match.result = subMatchers.every(fn => {\n      const subResult = fn(docOrBranches);\n\n      // Copy a 'distance' number out of the first sub-matcher that has\n      // one. Yes, this means that if there are multiple $near fields in a\n      // query, something arbitrary happens; this appears to be consistent with\n      // Mongo.\n      if (subResult.result &&\n          subResult.distance !== undefined &&\n          match.distance === undefined) {\n        match.distance = subResult.distance;\n      }\n\n      // Similarly, propagate arrayIndices from sub-matchers... but to match\n      // MongoDB behavior, this time the *last* sub-matcher with arrayIndices\n      // wins.\n      if (subResult.result && subResult.arrayIndices) {\n        match.arrayIndices = subResult.arrayIndices;\n      }\n\n      return subResult.result;\n    });\n\n    // If we didn't actually match, forget any extra metadata we came up with.\n    if (!match.result) {\n      delete match.distance;\n      delete match.arrayIndices;\n    }\n\n    return match;\n  };\n}\n\nconst andDocumentMatchers = andSomeMatchers;\nconst andBranchedMatchers = andSomeMatchers;\n\nfunction compileArrayOfDocumentSelectors(selectors, matcher, inElemMatch) {\n  if (!Array.isArray(selectors) || selectors.length === 0) {\n    throw Error('$and/$or/$nor must be nonempty array');\n  }\n\n  return selectors.map(subSelector => {\n    if (!LocalCollection._isPlainObject(subSelector)) {\n      throw Error('$or/$and/$nor entries need to be full objects');\n    }\n\n    return compileDocumentSelector(subSelector, matcher, {inElemMatch});\n  });\n}\n\n// Takes in a selector that could match a full document (eg, the original\n// selector). Returns a function mapping document->result object.\n//\n// matcher is the Matcher object we are compiling.\n//\n// If this is the root document selector (ie, not wrapped in $and or the like),\n// then isRoot is true. (This is used by $near.)\nexport function compileDocumentSelector(docSelector, matcher, options = {}) {\n  const docMatchers = Object.keys(docSelector).map(key => {\n    const subSelector = docSelector[key];\n\n    if (key.substr(0, 1) === '$') {\n      // Outer operators are either logical operators (they recurse back into\n      // this function), or $where.\n      if (!hasOwn.call(LOGICAL_OPERATORS, key)) {\n        throw new Error(`Unrecognized logical operator: ${key}`);\n      }\n\n      matcher._isSimple = false;\n      return LOGICAL_OPERATORS[key](subSelector, matcher, options.inElemMatch);\n    }\n\n    // Record this path, but only if we aren't in an elemMatcher, since in an\n    // elemMatch this is a path inside an object in an array, not in the doc\n    // root.\n    if (!options.inElemMatch) {\n      matcher._recordPathUsed(key);\n    }\n\n    // Don't add a matcher if subSelector is a function -- this is to match\n    // the behavior of Meteor on the server (inherited from the node mongodb\n    // driver), which is to ignore any part of a selector which is a function.\n    if (typeof subSelector === 'function') {\n      return undefined;\n    }\n\n    const lookUpByIndex = makeLookupFunction(key);\n    const valueMatcher = compileValueSelector(\n      subSelector,\n      matcher,\n      options.isRoot\n    );\n\n    return doc => valueMatcher(lookUpByIndex(doc));\n  }).filter(Boolean);\n\n  return andDocumentMatchers(docMatchers);\n}\n\n// Takes in a selector that could match a key-indexed value in a document; eg,\n// {$gt: 5, $lt: 9}, or a regular expression, or any non-expression object (to\n// indicate equality).  Returns a branched matcher: a function mapping\n// [branched value]->result object.\nfunction compileValueSelector(valueSelector, matcher, isRoot) {\n  if (valueSelector instanceof RegExp) {\n    matcher._isSimple = false;\n    return convertElementMatcherToBranchedMatcher(\n      regexpElementMatcher(valueSelector)\n    );\n  }\n\n  if (isOperatorObject(valueSelector)) {\n    return operatorBranchedMatcher(valueSelector, matcher, isRoot);\n  }\n\n  return convertElementMatcherToBranchedMatcher(\n    equalityElementMatcher(valueSelector)\n  );\n}\n\n// Given an element matcher (which evaluates a single value), returns a branched\n// value (which evaluates the element matcher on all the branches and returns a\n// more structured return value possibly including arrayIndices).\nfunction convertElementMatcherToBranchedMatcher(elementMatcher, options = {}) {\n  return branches => {\n    const expanded = options.dontExpandLeafArrays\n      ? branches\n      : expandArraysInBranches(branches, options.dontIncludeLeafArrays);\n\n    const match = {};\n    match.result = expanded.some(element => {\n      let matched = elementMatcher(element.value);\n\n      // Special case for $elemMatch: it means \"true, and use this as an array\n      // index if I didn't already have one\".\n      if (typeof matched === 'number') {\n        // XXX This code dates from when we only stored a single array index\n        // (for the outermost array). Should we be also including deeper array\n        // indices from the $elemMatch match?\n        if (!element.arrayIndices) {\n          element.arrayIndices = [matched];\n        }\n\n        matched = true;\n      }\n\n      // If some element matched, and it's tagged with array indices, include\n      // those indices in our result object.\n      if (matched && element.arrayIndices) {\n        match.arrayIndices = element.arrayIndices;\n      }\n\n      return matched;\n    });\n\n    return match;\n  };\n}\n\n// Helpers for $near.\nfunction distanceCoordinatePairs(a, b) {\n  const pointA = pointToArray(a);\n  const pointB = pointToArray(b);\n\n  return Math.hypot(pointA[0] - pointB[0], pointA[1] - pointB[1]);\n}\n\n// Takes something that is not an operator object and returns an element matcher\n// for equality with that thing.\nexport function equalityElementMatcher(elementSelector) {\n  if (isOperatorObject(elementSelector)) {\n    throw Error('Can\\'t create equalityValueSelector for operator object');\n  }\n\n  // Special-case: null and undefined are equal (if you got undefined in there\n  // somewhere, or if you got it due to some branch being non-existent in the\n  // weird special case), even though they aren't with EJSON.equals.\n  // undefined or null\n  if (elementSelector == null) {\n    return value => value == null;\n  }\n\n  return value => LocalCollection._f._equal(elementSelector, value);\n}\n\nfunction everythingMatcher(docOrBranchedValues) {\n  return {result: true};\n}\n\nexport function expandArraysInBranches(branches, skipTheArrays) {\n  const branchesOut = [];\n\n  branches.forEach(branch => {\n    const thisIsArray = Array.isArray(branch.value);\n\n    // We include the branch itself, *UNLESS* we it's an array that we're going\n    // to iterate and we're told to skip arrays.  (That's right, we include some\n    // arrays even skipTheArrays is true: these are arrays that were found via\n    // explicit numerical indices.)\n    if (!(skipTheArrays && thisIsArray && !branch.dontIterate)) {\n      branchesOut.push({arrayIndices: branch.arrayIndices, value: branch.value});\n    }\n\n    if (thisIsArray && !branch.dontIterate) {\n      branch.value.forEach((value, i) => {\n        branchesOut.push({\n          arrayIndices: (branch.arrayIndices || []).concat(i),\n          value\n        });\n      });\n    }\n  });\n\n  return branchesOut;\n}\n\n// Helpers for $bitsAllSet/$bitsAnySet/$bitsAllClear/$bitsAnyClear.\nfunction getOperandBitmask(operand, selector) {\n  // numeric bitmask\n  // You can provide a numeric bitmask to be matched against the operand field.\n  // It must be representable as a non-negative 32-bit signed integer.\n  // Otherwise, $bitsAllSet will return an error.\n  if (Number.isInteger(operand) && operand >= 0) {\n    return new Uint8Array(new Int32Array([operand]).buffer);\n  }\n\n  // bindata bitmask\n  // You can also use an arbitrarily large BinData instance as a bitmask.\n  if (EJSON.isBinary(operand)) {\n    return new Uint8Array(operand.buffer);\n  }\n\n  // position list\n  // If querying a list of bit positions, each <position> must be a non-negative\n  // integer. Bit positions start at 0 from the least significant bit.\n  if (Array.isArray(operand) &&\n      operand.every(x => Number.isInteger(x) && x >= 0)) {\n    const buffer = new ArrayBuffer((Math.max(...operand) >> 3) + 1);\n    const view = new Uint8Array(buffer);\n\n    operand.forEach(x => {\n      view[x >> 3] |= 1 << (x & 0x7);\n    });\n\n    return view;\n  }\n\n  // bad operand\n  throw Error(\n    `operand to ${selector} must be a numeric bitmask (representable as a ` +\n    'non-negative 32-bit signed integer), a bindata bitmask or an array with ' +\n    'bit positions (non-negative integers)'\n  );\n}\n\nfunction getValueBitmask(value, length) {\n  // The field value must be either numerical or a BinData instance. Otherwise,\n  // $bits... will not match the current document.\n\n  // numerical\n  if (Number.isSafeInteger(value)) {\n    // $bits... will not match numerical values that cannot be represented as a\n    // signed 64-bit integer. This can be the case if a value is either too\n    // large or small to fit in a signed 64-bit integer, or if it has a\n    // fractional component.\n    const buffer = new ArrayBuffer(\n      Math.max(length, 2 * Uint32Array.BYTES_PER_ELEMENT)\n    );\n\n    let view = new Uint32Array(buffer, 0, 2);\n    view[0] = value % ((1 << 16) * (1 << 16)) | 0;\n    view[1] = value / ((1 << 16) * (1 << 16)) | 0;\n\n    // sign extension\n    if (value < 0) {\n      view = new Uint8Array(buffer, 2);\n      view.forEach((byte, i) => {\n        view[i] = 0xff;\n      });\n    }\n\n    return new Uint8Array(buffer);\n  }\n\n  // bindata\n  if (EJSON.isBinary(value)) {\n    return new Uint8Array(value.buffer);\n  }\n\n  // no match\n  return false;\n}\n\n// Actually inserts a key value into the selector document\n// However, this checks there is no ambiguity in setting\n// the value for the given key, throws otherwise\nfunction insertIntoDocument(document, key, value) {\n  Object.keys(document).forEach(existingKey => {\n    if (\n      (existingKey.length > key.length && existingKey.indexOf(`${key}.`) === 0) ||\n      (key.length > existingKey.length && key.indexOf(`${existingKey}.`) === 0)\n    ) {\n      throw new Error(\n        `cannot infer query fields to set, both paths '${existingKey}' and ` +\n        `'${key}' are matched`\n      );\n    } else if (existingKey === key) {\n      throw new Error(\n        `cannot infer query fields to set, path '${key}' is matched twice`\n      );\n    }\n  });\n\n  document[key] = value;\n}\n\n// Returns a branched matcher that matches iff the given matcher does not.\n// Note that this implicitly \"deMorganizes\" the wrapped function.  ie, it\n// means that ALL branch values need to fail to match innerBranchedMatcher.\nfunction invertBranchedMatcher(branchedMatcher) {\n  return branchValues => {\n    // We explicitly choose to strip arrayIndices here: it doesn't make sense to\n    // say \"update the array element that does not match something\", at least\n    // in mongo-land.\n    return {result: !branchedMatcher(branchValues).result};\n  };\n}\n\nexport function isIndexable(obj) {\n  return Array.isArray(obj) || LocalCollection._isPlainObject(obj);\n}\n\nexport function isNumericKey(s) {\n  return /^[0-9]+$/.test(s);\n}\n\n// Returns true if this is an object with at least one key and all keys begin\n// with $.  Unless inconsistentOK is set, throws if some keys begin with $ and\n// others don't.\nexport function isOperatorObject(valueSelector, inconsistentOK) {\n  if (!LocalCollection._isPlainObject(valueSelector)) {\n    return false;\n  }\n\n  let theseAreOperators = undefined;\n  Object.keys(valueSelector).forEach(selKey => {\n    const thisIsOperator = selKey.substr(0, 1) === '$' || selKey === 'diff';\n\n    if (theseAreOperators === undefined) {\n      theseAreOperators = thisIsOperator;\n    } else if (theseAreOperators !== thisIsOperator) {\n      if (!inconsistentOK) {\n        throw new Error(\n          `Inconsistent operator: ${JSON.stringify(valueSelector)}`\n        );\n      }\n\n      theseAreOperators = false;\n    }\n  });\n\n  return !!theseAreOperators; // {} has no operators\n}\n\n// Helper for $lt/$gt/$lte/$gte.\nfunction makeInequality(cmpValueComparator) {\n  return {\n    compileElementSelector(operand) {\n      // Arrays never compare false with non-arrays for any inequality.\n      // XXX This was behavior we observed in pre-release MongoDB 2.5, but\n      //     it seems to have been reverted.\n      //     See https://jira.mongodb.org/browse/SERVER-11444\n      if (Array.isArray(operand)) {\n        return () => false;\n      }\n\n      // Special case: consider undefined and null the same (so true with\n      // $gte/$lte).\n      if (operand === undefined) {\n        operand = null;\n      }\n\n      const operandType = LocalCollection._f._type(operand);\n\n      return value => {\n        if (value === undefined) {\n          value = null;\n        }\n\n        // Comparisons are never true among things of different type (except\n        // null vs undefined).\n        if (LocalCollection._f._type(value) !== operandType) {\n          return false;\n        }\n\n        return cmpValueComparator(LocalCollection._f._cmp(value, operand));\n      };\n    },\n  };\n}\n\n// makeLookupFunction(key) returns a lookup function.\n//\n// A lookup function takes in a document and returns an array of matching\n// branches.  If no arrays are found while looking up the key, this array will\n// have exactly one branches (possibly 'undefined', if some segment of the key\n// was not found).\n//\n// If arrays are found in the middle, this can have more than one element, since\n// we 'branch'. When we 'branch', if there are more key segments to look up,\n// then we only pursue branches that are plain objects (not arrays or scalars).\n// This means we can actually end up with no branches!\n//\n// We do *NOT* branch on arrays that are found at the end (ie, at the last\n// dotted member of the key). We just return that array; if you want to\n// effectively 'branch' over the array's values, post-process the lookup\n// function with expandArraysInBranches.\n//\n// Each branch is an object with keys:\n//  - value: the value at the branch\n//  - dontIterate: an optional bool; if true, it means that 'value' is an array\n//    that expandArraysInBranches should NOT expand. This specifically happens\n//    when there is a numeric index in the key, and ensures the\n//    perhaps-surprising MongoDB behavior where {'a.0': 5} does NOT\n//    match {a: [[5]]}.\n//  - arrayIndices: if any array indexing was done during lookup (either due to\n//    explicit numeric indices or implicit branching), this will be an array of\n//    the array indices used, from outermost to innermost; it is falsey or\n//    absent if no array index is used. If an explicit numeric index is used,\n//    the index will be followed in arrayIndices by the string 'x'.\n//\n//    Note: arrayIndices is used for two purposes. First, it is used to\n//    implement the '$' modifier feature, which only ever looks at its first\n//    element.\n//\n//    Second, it is used for sort key generation, which needs to be able to tell\n//    the difference between different paths. Moreover, it needs to\n//    differentiate between explicit and implicit branching, which is why\n//    there's the somewhat hacky 'x' entry: this means that explicit and\n//    implicit array lookups will have different full arrayIndices paths. (That\n//    code only requires that different paths have different arrayIndices; it\n//    doesn't actually 'parse' arrayIndices. As an alternative, arrayIndices\n//    could contain objects with flags like 'implicit', but I think that only\n//    makes the code surrounding them more complex.)\n//\n//    (By the way, this field ends up getting passed around a lot without\n//    cloning, so never mutate any arrayIndices field/var in this package!)\n//\n//\n// At the top level, you may only pass in a plain object or array.\n//\n// See the test 'minimongo - lookup' for some examples of what lookup functions\n// return.\nexport function makeLookupFunction(key, options = {}) {\n  const parts = key.split('.');\n  const firstPart = parts.length ? parts[0] : '';\n  const lookupRest = (\n    parts.length > 1 &&\n    makeLookupFunction(parts.slice(1).join('.'), options)\n  );\n\n  function buildResult(arrayIndices, dontIterate, value) {\n    return arrayIndices && arrayIndices.length\n      ? dontIterate\n        ? [{ arrayIndices, dontIterate, value }]\n        : [{ arrayIndices, value }]\n      : dontIterate\n        ? [{ dontIterate, value }]\n        : [{ value }];\n  }\n\n  // Doc will always be a plain object or an array.\n  // apply an explicit numeric index, an array.\n  return (doc, arrayIndices) => {\n    if (Array.isArray(doc)) {\n      // If we're being asked to do an invalid lookup into an array (non-integer\n      // or out-of-bounds), return no results (which is different from returning\n      // a single undefined result, in that `null` equality checks won't match).\n      if (!(isNumericKey(firstPart) && firstPart < doc.length)) {\n        return [];\n      }\n\n      // Remember that we used this array index. Include an 'x' to indicate that\n      // the previous index came from being considered as an explicit array\n      // index (not branching).\n      arrayIndices = arrayIndices ? arrayIndices.concat(+firstPart, 'x') : [+firstPart, 'x'];\n    }\n\n    // Do our first lookup.\n    const firstLevel = doc[firstPart];\n\n    // If there is no deeper to dig, return what we found.\n    //\n    // If what we found is an array, most value selectors will choose to treat\n    // the elements of the array as matchable values in their own right, but\n    // that's done outside of the lookup function. (Exceptions to this are $size\n    // and stuff relating to $elemMatch.  eg, {a: {$size: 2}} does not match {a:\n    // [[1, 2]]}.)\n    //\n    // That said, if we just did an *explicit* array lookup (on doc) to find\n    // firstLevel, and firstLevel is an array too, we do NOT want value\n    // selectors to iterate over it.  eg, {'a.0': 5} does not match {a: [[5]]}.\n    // So in that case, we mark the return value as 'don't iterate'.\n    if (!lookupRest) {\n      return buildResult(\n        arrayIndices,\n        Array.isArray(doc) && Array.isArray(firstLevel),\n        firstLevel,\n      );\n    }\n\n    // We need to dig deeper.  But if we can't, because what we've found is not\n    // an array or plain object, we're done. If we just did a numeric index into\n    // an array, we return nothing here (this is a change in Mongo 2.5 from\n    // Mongo 2.4, where {'a.0.b': null} stopped matching {a: [5]}). Otherwise,\n    // return a single `undefined` (which can, for example, match via equality\n    // with `null`).\n    if (!isIndexable(firstLevel)) {\n      if (Array.isArray(doc)) {\n        return [];\n      }\n\n      return buildResult(arrayIndices, false, undefined);\n    }\n\n    const result = [];\n    const appendToResult = more => {\n      result.push(...more);\n    };\n\n    // Dig deeper: look up the rest of the parts on whatever we've found.\n    // (lookupRest is smart enough to not try to do invalid lookups into\n    // firstLevel if it's an array.)\n    appendToResult(lookupRest(firstLevel, arrayIndices));\n\n    // If we found an array, then in *addition* to potentially treating the next\n    // part as a literal integer lookup, we should also 'branch': try to look up\n    // the rest of the parts on each array element in parallel.\n    //\n    // In this case, we *only* dig deeper into array elements that are plain\n    // objects. (Recall that we only got this far if we have further to dig.)\n    // This makes sense: we certainly don't dig deeper into non-indexable\n    // objects. And it would be weird to dig into an array: it's simpler to have\n    // a rule that explicit integer indexes only apply to an outer array, not to\n    // an array you find after a branching search.\n    //\n    // In the special case of a numeric part in a *sort selector* (not a query\n    // selector), we skip the branching: we ONLY allow the numeric part to mean\n    // 'look up this index' in that case, not 'also look up this index in all\n    // the elements of the array'.\n    if (Array.isArray(firstLevel) &&\n        !(isNumericKey(parts[1]) && options.forSort)) {\n      firstLevel.forEach((branch, arrayIndex) => {\n        if (LocalCollection._isPlainObject(branch)) {\n          appendToResult(lookupRest(branch, arrayIndices ? arrayIndices.concat(arrayIndex) : [arrayIndex]));\n        }\n      });\n    }\n\n    return result;\n  };\n}\n\n// Object exported only for unit testing.\n// Use it to export private functions to test in Tinytest.\nMinimongoTest = {makeLookupFunction};\nMinimongoError = (message, options = {}) => {\n  if (typeof message === 'string' && options.field) {\n    message += ` for field '${options.field}'`;\n  }\n\n  const error = new Error(message);\n  error.name = 'MinimongoError';\n  return error;\n};\n\nexport function nothingMatcher(docOrBranchedValues) {\n  return {result: false};\n}\n\n// Takes an operator object (an object with $ keys) and returns a branched\n// matcher for it.\nfunction operatorBranchedMatcher(valueSelector, matcher, isRoot) {\n  // Each valueSelector works separately on the various branches.  So one\n  // operator can match one branch and another can match another branch.  This\n  // is OK.\n  const operatorMatchers = Object.keys(valueSelector).map(operator => {\n    const operand = valueSelector[operator];\n\n    const simpleRange = (\n      ['$lt', '$lte', '$gt', '$gte'].includes(operator) &&\n      typeof operand === 'number'\n    );\n\n    const simpleEquality = (\n      ['$ne', '$eq'].includes(operator) &&\n      operand !== Object(operand)\n    );\n\n    const simpleInclusion = (\n      ['$in', '$nin'].includes(operator)\n      && Array.isArray(operand)\n      && !operand.some(x => x === Object(x))\n    );\n\n    if (!(simpleRange || simpleInclusion || simpleEquality)) {\n      matcher._isSimple = false;\n    }\n\n    if (hasOwn.call(VALUE_OPERATORS, operator)) {\n      return VALUE_OPERATORS[operator](operand, valueSelector, matcher, isRoot);\n    }\n\n    if (hasOwn.call(ELEMENT_OPERATORS, operator)) {\n      const options = ELEMENT_OPERATORS[operator];\n      return convertElementMatcherToBranchedMatcher(\n        options.compileElementSelector(operand, valueSelector, matcher),\n        options\n      );\n    }\n\n    throw new Error(`Unrecognized operator: ${operator}`);\n  });\n\n  return andBranchedMatchers(operatorMatchers);\n}\n\n// paths - Array: list of mongo style paths\n// newLeafFn - Function: of form function(path) should return a scalar value to\n//                       put into list created for that path\n// conflictFn - Function: of form function(node, path, fullPath) is called\n//                        when building a tree path for 'fullPath' node on\n//                        'path' was already a leaf with a value. Must return a\n//                        conflict resolution.\n// initial tree - Optional Object: starting tree.\n// @returns - Object: tree represented as a set of nested objects\nexport function pathsToTree(paths, newLeafFn, conflictFn, root = {}) {\n  paths.forEach(path => {\n    const pathArray = path.split('.');\n    let tree = root;\n\n    // use .every just for iteration with break\n    const success = pathArray.slice(0, -1).every((key, i) => {\n      if (!hasOwn.call(tree, key)) {\n        tree[key] = {};\n      } else if (tree[key] !== Object(tree[key])) {\n        tree[key] = conflictFn(\n          tree[key],\n          pathArray.slice(0, i + 1).join('.'),\n          path\n        );\n\n        // break out of loop if we are failing for this path\n        if (tree[key] !== Object(tree[key])) {\n          return false;\n        }\n      }\n\n      tree = tree[key];\n\n      return true;\n    });\n\n    if (success) {\n      const lastKey = pathArray[pathArray.length - 1];\n      if (hasOwn.call(tree, lastKey)) {\n        tree[lastKey] = conflictFn(tree[lastKey], path, path);\n      } else {\n        tree[lastKey] = newLeafFn(path);\n      }\n    }\n  });\n\n  return root;\n}\n\n// Makes sure we get 2 elements array and assume the first one to be x and\n// the second one to y no matter what user passes.\n// In case user passes { lon: x, lat: y } returns [x, y]\nfunction pointToArray(point) {\n  return Array.isArray(point) ? point.slice() : [point.x, point.y];\n}\n\n// Creating a document from an upsert is quite tricky.\n// E.g. this selector: {\"$or\": [{\"b.foo\": {\"$all\": [\"bar\"]}}]}, should result\n// in: {\"b.foo\": \"bar\"}\n// But this selector: {\"$or\": [{\"b\": {\"foo\": {\"$all\": [\"bar\"]}}}]} should throw\n// an error\n\n// Some rules (found mainly with trial & error, so there might be more):\n// - handle all childs of $and (or implicit $and)\n// - handle $or nodes with exactly 1 child\n// - ignore $or nodes with more than 1 child\n// - ignore $nor and $not nodes\n// - throw when a value can not be set unambiguously\n// - every value for $all should be dealt with as separate $eq-s\n// - threat all children of $all as $eq setters (=> set if $all.length === 1,\n//   otherwise throw error)\n// - you can not mix '$'-prefixed keys and non-'$'-prefixed keys\n// - you can only have dotted keys on a root-level\n// - you can not have '$'-prefixed keys more than one-level deep in an object\n\n// Handles one key/value pair to put in the selector document\nfunction populateDocumentWithKeyValue(document, key, value) {\n  if (value && Object.getPrototypeOf(value) === Object.prototype) {\n    populateDocumentWithObject(document, key, value);\n  } else if (!(value instanceof RegExp)) {\n    insertIntoDocument(document, key, value);\n  }\n}\n\n// Handles a key, value pair to put in the selector document\n// if the value is an object\nfunction populateDocumentWithObject(document, key, value) {\n  const keys = Object.keys(value);\n  const unprefixedKeys = keys.filter(op => op[0] !== '$');\n\n  if (unprefixedKeys.length > 0 || !keys.length) {\n    // Literal (possibly empty) object ( or empty object )\n    // Don't allow mixing '$'-prefixed with non-'$'-prefixed fields\n    if (keys.length !== unprefixedKeys.length) {\n      throw new Error(`unknown operator: ${unprefixedKeys[0]}`);\n    }\n\n    validateObject(value, key);\n    insertIntoDocument(document, key, value);\n  } else {\n    Object.keys(value).forEach(op => {\n      const object = value[op];\n\n      if (op === '$eq') {\n        populateDocumentWithKeyValue(document, key, object);\n      } else if (op === '$all') {\n        // every value for $all should be dealt with as separate $eq-s\n        object.forEach(element =>\n          populateDocumentWithKeyValue(document, key, element)\n        );\n      }\n    });\n  }\n}\n\n// Fills a document with certain fields from an upsert selector\nexport function populateDocumentWithQueryFields(query, document = {}) {\n  if (Object.getPrototypeOf(query) === Object.prototype) {\n    // handle implicit $and\n    Object.keys(query).forEach(key => {\n      const value = query[key];\n\n      if (key === '$and') {\n        // handle explicit $and\n        value.forEach(element =>\n          populateDocumentWithQueryFields(element, document)\n        );\n      } else if (key === '$or') {\n        // handle $or nodes with exactly 1 child\n        if (value.length === 1) {\n          populateDocumentWithQueryFields(value[0], document);\n        }\n      } else if (key[0] !== '$') {\n        // Ignore other '$'-prefixed logical selectors\n        populateDocumentWithKeyValue(document, key, value);\n      }\n    });\n  } else {\n    // Handle meteor-specific shortcut for selecting _id\n    if (LocalCollection._selectorIsId(query)) {\n      insertIntoDocument(document, '_id', query);\n    }\n  }\n\n  return document;\n}\n\n// Traverses the keys of passed projection and constructs a tree where all\n// leaves are either all True or all False\n// @returns Object:\n//  - tree - Object - tree representation of keys involved in projection\n//  (exception for '_id' as it is a special case handled separately)\n//  - including - Boolean - \"take only certain fields\" type of projection\nexport function projectionDetails(fields) {\n  // Find the non-_id keys (_id is handled specially because it is included\n  // unless explicitly excluded). Sort the keys, so that our code to detect\n  // overlaps like 'foo' and 'foo.bar' can assume that 'foo' comes first.\n  let fieldsKeys = Object.keys(fields).sort();\n\n  // If _id is the only field in the projection, do not remove it, since it is\n  // required to determine if this is an exclusion or exclusion. Also keep an\n  // inclusive _id, since inclusive _id follows the normal rules about mixing\n  // inclusive and exclusive fields. If _id is not the only field in the\n  // projection and is exclusive, remove it so it can be handled later by a\n  // special case, since exclusive _id is always allowed.\n  if (!(fieldsKeys.length === 1 && fieldsKeys[0] === '_id') &&\n      !(fieldsKeys.includes('_id') && fields._id)) {\n    fieldsKeys = fieldsKeys.filter(key => key !== '_id');\n  }\n\n  let including = null; // Unknown\n\n  fieldsKeys.forEach(keyPath => {\n    const rule = !!fields[keyPath];\n\n    if (including === null) {\n      including = rule;\n    }\n\n    // This error message is copied from MongoDB shell\n    if (including !== rule) {\n      throw MinimongoError(\n        'You cannot currently mix including and excluding fields.'\n      );\n    }\n  });\n\n  const projectionRulesTree = pathsToTree(\n    fieldsKeys,\n    path => including,\n    (node, path, fullPath) => {\n      // Check passed projection fields' keys: If you have two rules such as\n      // 'foo.bar' and 'foo.bar.baz', then the result becomes ambiguous. If\n      // that happens, there is a probability you are doing something wrong,\n      // framework should notify you about such mistake earlier on cursor\n      // compilation step than later during runtime.  Note, that real mongo\n      // doesn't do anything about it and the later rule appears in projection\n      // project, more priority it takes.\n      //\n      // Example, assume following in mongo shell:\n      // > db.coll.insert({ a: { b: 23, c: 44 } })\n      // > db.coll.find({}, { 'a': 1, 'a.b': 1 })\n      // {\"_id\": ObjectId(\"520bfe456024608e8ef24af3\"), \"a\": {\"b\": 23}}\n      // > db.coll.find({}, { 'a.b': 1, 'a': 1 })\n      // {\"_id\": ObjectId(\"520bfe456024608e8ef24af3\"), \"a\": {\"b\": 23, \"c\": 44}}\n      //\n      // Note, how second time the return set of keys is different.\n      const currentPath = fullPath;\n      const anotherPath = path;\n      throw MinimongoError(\n        `both ${currentPath} and ${anotherPath} found in fields option, ` +\n        'using both of them may trigger unexpected behavior. Did you mean to ' +\n        'use only one of them?'\n      );\n    });\n\n  return {including, tree: projectionRulesTree};\n}\n\n// Takes a RegExp object and returns an element matcher.\nexport function regexpElementMatcher(regexp) {\n  return value => {\n    if (value instanceof RegExp) {\n      return value.toString() === regexp.toString();\n    }\n\n    // Regexps only work against strings.\n    if (typeof value !== 'string') {\n      return false;\n    }\n\n    // Reset regexp's state to avoid inconsistent matching for objects with the\n    // same value on consecutive calls of regexp.test. This happens only if the\n    // regexp has the 'g' flag. Also note that ES6 introduces a new flag 'y' for\n    // which we should *not* change the lastIndex but MongoDB doesn't support\n    // either of these flags.\n    regexp.lastIndex = 0;\n\n    return regexp.test(value);\n  };\n}\n\n// Validates the key in a path.\n// Objects that are nested more then 1 level cannot have dotted fields\n// or fields starting with '$'\nfunction validateKeyInPath(key, path) {\n  if (key.includes('.')) {\n    throw new Error(\n      `The dotted field '${key}' in '${path}.${key} is not valid for storage.`\n    );\n  }\n\n  if (key[0] === '$') {\n    throw new Error(\n      `The dollar ($) prefixed field  '${path}.${key} is not valid for storage.`\n    );\n  }\n}\n\n// Recursively validates an object that is nested more than one level deep\nfunction validateObject(object, path) {\n  if (object && Object.getPrototypeOf(object) === Object.prototype) {\n    Object.keys(object).forEach(key => {\n      validateKeyInPath(key, path);\n      validateObject(object[key], path + '.' + key);\n    });\n  }\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"cbbd0400824258cca2a3a3fedef2f554828caee5"}
