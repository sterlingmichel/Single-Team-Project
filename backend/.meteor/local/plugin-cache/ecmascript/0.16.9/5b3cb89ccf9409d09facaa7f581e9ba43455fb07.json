{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/smichel/Projects/Team-5-Project/database/packages/socket-stream-client/common.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"packages/socket-stream-client/common.js","filename":"/Users/smichel/Projects/Team-5-Project/database/packages/socket-stream-client/common.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/smichel/Projects/Team-5-Project/database","root":"/Users/smichel/Projects/Team-5-Project/database","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/smichel/Projects/Team-5-Project/database/packages/socket-stream-client/common.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/socket-stream-client/common.js"}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    module.export({\n      StreamClientCommon: () => StreamClientCommon\n    });\n    let Retry;\n    module.link(\"meteor/retry\", {\n      Retry(v) {\n        Retry = v;\n      }\n    }, 0);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const forcedReconnectError = new Error(\"forced reconnect\");\n    class StreamClientCommon {\n      constructor(options) {\n        this.options = _objectSpread({\n          retry: true\n        }, options || null);\n        this.ConnectionError = options && options.ConnectionError || Error;\n      }\n\n      // Register for callbacks.\n      on(name, callback) {\n        if (name !== 'message' && name !== 'reset' && name !== 'disconnect') throw new Error('unknown event type: ' + name);\n        if (!this.eventCallbacks[name]) this.eventCallbacks[name] = [];\n        this.eventCallbacks[name].push(callback);\n      }\n      forEachCallback(name, cb) {\n        if (!this.eventCallbacks[name] || !this.eventCallbacks[name].length) {\n          return;\n        }\n        this.eventCallbacks[name].forEach(cb);\n      }\n      _initCommon(options) {\n        options = options || Object.create(null);\n\n        //// Constants\n\n        // how long to wait until we declare the connection attempt\n        // failed.\n        this.CONNECT_TIMEOUT = options.connectTimeoutMs || 10000;\n        this.eventCallbacks = Object.create(null); // name -> [callback]\n\n        this._forcedToDisconnect = false;\n\n        //// Reactive status\n        this.currentStatus = {\n          status: 'connecting',\n          connected: false,\n          retryCount: 0\n        };\n        if (Package.tracker) {\n          this.statusListeners = new Package.tracker.Tracker.Dependency();\n        }\n        this.statusChanged = () => {\n          if (this.statusListeners) {\n            this.statusListeners.changed();\n          }\n        };\n\n        //// Retry logic\n        this._retry = new Retry();\n        this.connectionTimer = null;\n      }\n\n      // Trigger a reconnect.\n      reconnect(options) {\n        options = options || Object.create(null);\n        if (options.url) {\n          this._changeUrl(options.url);\n        }\n        if (options._sockjsOptions) {\n          this.options._sockjsOptions = options._sockjsOptions;\n        }\n        if (this.currentStatus.connected) {\n          if (options._force || options.url) {\n            this._lostConnection(forcedReconnectError);\n          }\n          return;\n        }\n\n        // if we're mid-connection, stop it.\n        if (this.currentStatus.status === 'connecting') {\n          // Pretend it's a clean close.\n          this._lostConnection();\n        }\n        this._retry.clear();\n        this.currentStatus.retryCount -= 1; // don't count manual retries\n        this._retryNow();\n      }\n      disconnect(options) {\n        options = options || Object.create(null);\n\n        // Failed is permanent. If we're failed, don't let people go back\n        // online by calling 'disconnect' then 'reconnect'.\n        if (this._forcedToDisconnect) return;\n\n        // If _permanent is set, permanently disconnect a stream. Once a stream\n        // is forced to disconnect, it can never reconnect. This is for\n        // error cases such as ddp version mismatch, where trying again\n        // won't fix the problem.\n        if (options._permanent) {\n          this._forcedToDisconnect = true;\n        }\n        this._cleanup();\n        this._retry.clear();\n        this.currentStatus = {\n          status: options._permanent ? 'failed' : 'offline',\n          connected: false,\n          retryCount: 0\n        };\n        if (options._permanent && options._error) this.currentStatus.reason = options._error;\n        this.statusChanged();\n      }\n\n      // maybeError is set unless it's a clean protocol-level close.\n      _lostConnection(maybeError) {\n        this._cleanup(maybeError);\n        this._retryLater(maybeError); // sets status. no need to do it here.\n      }\n\n      // fired when we detect that we've gone online. try to reconnect\n      // immediately.\n      _online() {\n        // if we've requested to be offline by disconnecting, don't reconnect.\n        if (this.currentStatus.status != 'offline') this.reconnect();\n      }\n      _retryLater(maybeError) {\n        var timeout = 0;\n        if (this.options.retry || maybeError === forcedReconnectError) {\n          timeout = this._retry.retryLater(this.currentStatus.retryCount, this._retryNow.bind(this));\n          this.currentStatus.status = 'waiting';\n          this.currentStatus.retryTime = new Date().getTime() + timeout;\n        } else {\n          this.currentStatus.status = 'failed';\n          delete this.currentStatus.retryTime;\n        }\n        this.currentStatus.connected = false;\n        this.statusChanged();\n      }\n      _retryNow() {\n        if (this._forcedToDisconnect) return;\n        this.currentStatus.retryCount += 1;\n        this.currentStatus.status = 'connecting';\n        this.currentStatus.connected = false;\n        delete this.currentStatus.retryTime;\n        this.statusChanged();\n        this._launchConnection();\n      }\n\n      // Get current status. Reactive.\n      status() {\n        if (this.statusListeners) {\n          this.statusListeners.depend();\n        }\n        return this.currentStatus;\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","export","StreamClientCommon","Retry","__reifyWaitForDeps__","forcedReconnectError","Error","constructor","options","retry","ConnectionError","on","name","callback","eventCallbacks","push","forEachCallback","cb","length","forEach","_initCommon","Object","create","CONNECT_TIMEOUT","connectTimeoutMs","_forcedToDisconnect","currentStatus","status","connected","retryCount","Package","tracker","statusListeners","Tracker","Dependency","statusChanged","changed","_retry","connectionTimer","reconnect","url","_changeUrl","_sockjsOptions","_force","_lostConnection","clear","_retryNow","disconnect","_permanent","_cleanup","_error","reason","maybeError","_retryLater","_online","timeout","retryLater","bind","retryTime","Date","getTime","_launchConnection","depend","__reify_async_result__","_reifyError","self","async"],"sources":["packages/socket-stream-client/common.js"],"sourcesContent":["import { Retry } from 'meteor/retry';\n\nconst forcedReconnectError = new Error(\"forced reconnect\");\n\nexport class StreamClientCommon {\n  constructor(options) {\n    this.options = {\n      retry: true,\n      ...(options || null),\n    };\n\n    this.ConnectionError =\n      options && options.ConnectionError || Error;\n  }\n\n  // Register for callbacks.\n  on(name, callback) {\n    if (name !== 'message' && name !== 'reset' && name !== 'disconnect')\n      throw new Error('unknown event type: ' + name);\n\n    if (!this.eventCallbacks[name]) this.eventCallbacks[name] = [];\n    this.eventCallbacks[name].push(callback);\n  }\n\n  forEachCallback(name, cb) {\n    if (!this.eventCallbacks[name] || !this.eventCallbacks[name].length) {\n      return;\n    }\n\n    this.eventCallbacks[name].forEach(cb);\n  }\n\n  _initCommon(options) {\n    options = options || Object.create(null);\n\n    //// Constants\n\n    // how long to wait until we declare the connection attempt\n    // failed.\n    this.CONNECT_TIMEOUT = options.connectTimeoutMs || 10000;\n\n    this.eventCallbacks = Object.create(null); // name -> [callback]\n\n    this._forcedToDisconnect = false;\n\n    //// Reactive status\n    this.currentStatus = {\n      status: 'connecting',\n      connected: false,\n      retryCount: 0\n    };\n\n    if (Package.tracker) {\n      this.statusListeners = new Package.tracker.Tracker.Dependency();\n    }\n\n    this.statusChanged = () => {\n      if (this.statusListeners) {\n        this.statusListeners.changed();\n      }\n    };\n\n    //// Retry logic\n    this._retry = new Retry();\n    this.connectionTimer = null;\n  }\n\n  // Trigger a reconnect.\n  reconnect(options) {\n    options = options || Object.create(null);\n\n    if (options.url) {\n      this._changeUrl(options.url);\n    }\n\n    if (options._sockjsOptions) {\n      this.options._sockjsOptions = options._sockjsOptions;\n    }\n\n    if (this.currentStatus.connected) {\n      if (options._force || options.url) {\n        this._lostConnection(forcedReconnectError);\n      }\n      return;\n    }\n\n    // if we're mid-connection, stop it.\n    if (this.currentStatus.status === 'connecting') {\n      // Pretend it's a clean close.\n      this._lostConnection();\n    }\n\n    this._retry.clear();\n    this.currentStatus.retryCount -= 1; // don't count manual retries\n    this._retryNow();\n  }\n\n  disconnect(options) {\n    options = options || Object.create(null);\n\n    // Failed is permanent. If we're failed, don't let people go back\n    // online by calling 'disconnect' then 'reconnect'.\n    if (this._forcedToDisconnect) return;\n\n    // If _permanent is set, permanently disconnect a stream. Once a stream\n    // is forced to disconnect, it can never reconnect. This is for\n    // error cases such as ddp version mismatch, where trying again\n    // won't fix the problem.\n    if (options._permanent) {\n      this._forcedToDisconnect = true;\n    }\n\n    this._cleanup();\n    this._retry.clear();\n\n    this.currentStatus = {\n      status: options._permanent ? 'failed' : 'offline',\n      connected: false,\n      retryCount: 0\n    };\n\n    if (options._permanent && options._error)\n      this.currentStatus.reason = options._error;\n\n    this.statusChanged();\n  }\n\n  // maybeError is set unless it's a clean protocol-level close.\n  _lostConnection(maybeError) {\n    this._cleanup(maybeError);\n    this._retryLater(maybeError); // sets status. no need to do it here.\n  }\n\n  // fired when we detect that we've gone online. try to reconnect\n  // immediately.\n  _online() {\n    // if we've requested to be offline by disconnecting, don't reconnect.\n    if (this.currentStatus.status != 'offline') this.reconnect();\n  }\n\n  _retryLater(maybeError) {\n    var timeout = 0;\n    if (this.options.retry ||\n        maybeError === forcedReconnectError) {\n      timeout = this._retry.retryLater(\n        this.currentStatus.retryCount,\n        this._retryNow.bind(this)\n      );\n      this.currentStatus.status = 'waiting';\n      this.currentStatus.retryTime = new Date().getTime() + timeout;\n    } else {\n      this.currentStatus.status = 'failed';\n      delete this.currentStatus.retryTime;\n    }\n\n    this.currentStatus.connected = false;\n    this.statusChanged();\n  }\n\n  _retryNow() {\n    if (this._forcedToDisconnect) return;\n\n    this.currentStatus.retryCount += 1;\n    this.currentStatus.status = 'connecting';\n    this.currentStatus.connected = false;\n    delete this.currentStatus.retryTime;\n    this.statusChanged();\n\n    this._launchConnection();\n  }\n\n  // Get current status. Reactive.\n  status() {\n    if (this.statusListeners) {\n      this.statusListeners.depend();\n    }\n    return this.currentStatus;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"5b3cb89ccf9409d09facaa7f581e9ba43455fb07"}
