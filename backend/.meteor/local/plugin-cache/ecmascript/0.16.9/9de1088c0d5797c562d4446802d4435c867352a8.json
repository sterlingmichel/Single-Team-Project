{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/smichel/Projects/Team-5-Project/database/packages/mongo/oplog_observe_driver.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"packages/mongo/oplog_observe_driver.js","filename":"/Users/smichel/Projects/Team-5-Project/database/packages/mongo/oplog_observe_driver.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/smichel/Projects/Team-5-Project/database","root":"/Users/smichel/Projects/Team-5-Project/database","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/smichel/Projects/Team-5-Project/database/packages/mongo/oplog_observe_driver.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/mongo/oplog_observe_driver.js"}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _asyncIterator;\n    module.link(\"@babel/runtime/helpers/asyncIterator\", {\n      default(v) {\n        _asyncIterator = v;\n      }\n    }, 0);\n    let has;\n    module.link(\"lodash.has\", {\n      default(v) {\n        has = v;\n      }\n    }, 0);\n    let isEmpty;\n    module.link(\"lodash.isempty\", {\n      default(v) {\n        isEmpty = v;\n      }\n    }, 1);\n    let oplogV2V1Converter;\n    module.link(\"./oplog_v2_converter\", {\n      oplogV2V1Converter(v) {\n        oplogV2V1Converter = v;\n      }\n    }, 2);\n    let check, Match;\n    module.link(\"meteor/check\", {\n      check(v) {\n        check = v;\n      },\n      Match(v) {\n        Match = v;\n      }\n    }, 3);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    var PHASE = {\n      QUERYING: \"QUERYING\",\n      FETCHING: \"FETCHING\",\n      STEADY: \"STEADY\"\n    };\n\n    // Exception thrown by _needToPollQuery which unrolls the stack up to the\n    // enclosing call to finishIfNeedToPollQuery.\n    var SwitchedToQuery = function () {};\n    var finishIfNeedToPollQuery = function (f) {\n      return function () {\n        try {\n          f.apply(this, arguments);\n        } catch (e) {\n          if (!(e instanceof SwitchedToQuery)) throw e;\n        }\n      };\n    };\n    var currentId = 0;\n\n    // OplogObserveDriver is an alternative to PollingObserveDriver which follows\n    // the Mongo operation log instead of just re-polling the query. It obeys the\n    // same simple interface: constructing it starts sending observeChanges\n    // callbacks (and a ready() invocation) to the ObserveMultiplexer, and you stop\n    // it by calling the stop() method.\n    OplogObserveDriver = function (options) {\n      const self = this;\n      self._usesOplog = true; // tests look at this\n\n      self._id = currentId;\n      currentId++;\n      self._cursorDescription = options.cursorDescription;\n      self._mongoHandle = options.mongoHandle;\n      self._multiplexer = options.multiplexer;\n      if (options.ordered) {\n        throw Error(\"OplogObserveDriver only supports unordered observeChanges\");\n      }\n      const sorter = options.sorter;\n      // We don't support $near and other geo-queries so it's OK to initialize the\n      // comparator only once in the constructor.\n      const comparator = sorter && sorter.getComparator();\n      if (options.cursorDescription.options.limit) {\n        // There are several properties ordered driver implements:\n        // - _limit is a positive number\n        // - _comparator is a function-comparator by which the query is ordered\n        // - _unpublishedBuffer is non-null Min/Max Heap,\n        //                      the empty buffer in STEADY phase implies that the\n        //                      everything that matches the queries selector fits\n        //                      into published set.\n        // - _published - Max Heap (also implements IdMap methods)\n\n        const heapOptions = {\n          IdMap: LocalCollection._IdMap\n        };\n        self._limit = self._cursorDescription.options.limit;\n        self._comparator = comparator;\n        self._sorter = sorter;\n        self._unpublishedBuffer = new MinMaxHeap(comparator, heapOptions);\n        // We need something that can find Max value in addition to IdMap interface\n        self._published = new MaxHeap(comparator, heapOptions);\n      } else {\n        self._limit = 0;\n        self._comparator = null;\n        self._sorter = null;\n        self._unpublishedBuffer = null;\n        self._published = new LocalCollection._IdMap();\n      }\n\n      // Indicates if it is safe to insert a new document at the end of the buffer\n      // for this query. i.e. it is known that there are no documents matching the\n      // selector those are not in published or buffer.\n      self._safeAppendToBuffer = false;\n      self._stopped = false;\n      self._stopHandles = [];\n      self._addStopHandles = function (newStopHandles) {\n        const expectedPattern = Match.ObjectIncluding({\n          stop: Function\n        });\n        // Single item or array\n        check(newStopHandles, Match.OneOf([expectedPattern], expectedPattern));\n        self._stopHandles.push(newStopHandles);\n      };\n      Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\"mongo-livedata\", \"observe-drivers-oplog\", 1);\n      self._registerPhaseChange(PHASE.QUERYING);\n      self._matcher = options.matcher;\n      // we are now using projection, not fields in the cursor description even if you pass {fields}\n      // in the cursor construction\n      const projection = self._cursorDescription.options.fields || self._cursorDescription.options.projection || {};\n      self._projectionFn = LocalCollection._compileProjection(projection);\n      // Projection function, result of combining important fields for selector and\n      // existing fields projection\n      self._sharedProjection = self._matcher.combineIntoProjection(projection);\n      if (sorter) self._sharedProjection = sorter.combineIntoProjection(self._sharedProjection);\n      self._sharedProjectionFn = LocalCollection._compileProjection(self._sharedProjection);\n      self._needToFetch = new LocalCollection._IdMap();\n      self._currentlyFetching = null;\n      self._fetchGeneration = 0;\n      self._requeryWhenDoneThisQuery = false;\n      self._writesToCommitWhenWeReachSteady = [];\n    };\n    _.extend(OplogObserveDriver.prototype, {\n      _init: async function () {\n        const self = this;\n\n        // If the oplog handle tells us that it skipped some entries (because it got\n        // behind, say), re-poll.\n        self._addStopHandles(self._mongoHandle._oplogHandle.onSkippedEntries(finishIfNeedToPollQuery(function () {\n          return self._needToPollQuery();\n        })));\n        await forEachTrigger(self._cursorDescription, async function (trigger) {\n          self._addStopHandles(await self._mongoHandle._oplogHandle.onOplogEntry(trigger, function (notification) {\n            finishIfNeedToPollQuery(function () {\n              const op = notification.op;\n              if (notification.dropCollection || notification.dropDatabase) {\n                // Note: this call is not allowed to block on anything (especially\n                // on waiting for oplog entries to catch up) because that will block\n                // onOplogEntry!\n                return self._needToPollQuery();\n              } else {\n                // All other operators should be handled depending on phase\n                if (self._phase === PHASE.QUERYING) {\n                  return self._handleOplogEntryQuerying(op);\n                } else {\n                  return self._handleOplogEntrySteadyOrFetching(op);\n                }\n              }\n            })();\n          }));\n        });\n\n        // XXX ordering w.r.t. everything else?\n        self._addStopHandles(await listenAll(self._cursorDescription, function () {\n          // If we're not in a pre-fire write fence, we don't have to do anything.\n          const fence = DDPServer._getCurrentFence();\n          if (!fence || fence.fired) return;\n          if (fence._oplogObserveDrivers) {\n            fence._oplogObserveDrivers[self._id] = self;\n            return;\n          }\n          fence._oplogObserveDrivers = {};\n          fence._oplogObserveDrivers[self._id] = self;\n          fence.onBeforeFire(async function () {\n            const drivers = fence._oplogObserveDrivers;\n            delete fence._oplogObserveDrivers;\n\n            // This fence cannot fire until we've caught up to \"this point\" in the\n            // oplog, and all observers made it back to the steady state.\n            await self._mongoHandle._oplogHandle.waitUntilCaughtUp();\n            for (const driver of Object.values(drivers)) {\n              if (driver._stopped) continue;\n              const write = await fence.beginWrite();\n              if (driver._phase === PHASE.STEADY) {\n                // Make sure that all of the callbacks have made it through the\n                // multiplexer and been delivered to ObserveHandles before committing\n                // writes.\n                await driver._multiplexer.onFlush(write.committed);\n              } else {\n                driver._writesToCommitWhenWeReachSteady.push(write);\n              }\n            }\n          });\n        }));\n\n        // When Mongo fails over, we need to repoll the query, in case we processed an\n        // oplog entry that got rolled back.\n        self._addStopHandles(self._mongoHandle._onFailover(finishIfNeedToPollQuery(function () {\n          return self._needToPollQuery();\n        })));\n\n        // Give _observeChanges a chance to add the new ObserveHandle to our\n        // multiplexer, so that the added calls get streamed.\n        return self._runInitialQuery();\n      },\n      _addPublished: function (id, doc) {\n        var self = this;\n        Meteor._noYieldsAllowed(function () {\n          var fields = Object.assign({}, doc);\n          delete fields._id;\n          self._published.set(id, self._sharedProjectionFn(doc));\n          self._multiplexer.added(id, self._projectionFn(fields));\n\n          // After adding this document, the published set might be overflowed\n          // (exceeding capacity specified by limit). If so, push the maximum\n          // element to the buffer, we might want to save it in memory to reduce the\n          // amount of Mongo lookups in the future.\n          if (self._limit && self._published.size() > self._limit) {\n            // XXX in theory the size of published is no more than limit+1\n            if (self._published.size() !== self._limit + 1) {\n              throw new Error(\"After adding to published, \" + (self._published.size() - self._limit) + \" documents are overflowing the set\");\n            }\n            var overflowingDocId = self._published.maxElementId();\n            var overflowingDoc = self._published.get(overflowingDocId);\n            if (EJSON.equals(overflowingDocId, id)) {\n              throw new Error(\"The document just added is overflowing the published set\");\n            }\n            self._published.remove(overflowingDocId);\n            self._multiplexer.removed(overflowingDocId);\n            self._addBuffered(overflowingDocId, overflowingDoc);\n          }\n        });\n      },\n      _removePublished: function (id) {\n        var self = this;\n        Meteor._noYieldsAllowed(function () {\n          self._published.remove(id);\n          self._multiplexer.removed(id);\n          if (!self._limit || self._published.size() === self._limit) return;\n          if (self._published.size() > self._limit) throw Error(\"self._published got too big\");\n\n          // OK, we are publishing less than the limit. Maybe we should look in the\n          // buffer to find the next element past what we were publishing before.\n\n          if (!self._unpublishedBuffer.empty()) {\n            // There's something in the buffer; move the first thing in it to\n            // _published.\n            var newDocId = self._unpublishedBuffer.minElementId();\n            var newDoc = self._unpublishedBuffer.get(newDocId);\n            self._removeBuffered(newDocId);\n            self._addPublished(newDocId, newDoc);\n            return;\n          }\n\n          // There's nothing in the buffer.  This could mean one of a few things.\n\n          // (a) We could be in the middle of re-running the query (specifically, we\n          // could be in _publishNewResults). In that case, _unpublishedBuffer is\n          // empty because we clear it at the beginning of _publishNewResults. In\n          // this case, our caller already knows the entire answer to the query and\n          // we don't need to do anything fancy here.  Just return.\n          if (self._phase === PHASE.QUERYING) return;\n\n          // (b) We're pretty confident that the union of _published and\n          // _unpublishedBuffer contain all documents that match selector. Because\n          // _unpublishedBuffer is empty, that means we're confident that _published\n          // contains all documents that match selector. So we have nothing to do.\n          if (self._safeAppendToBuffer) return;\n\n          // (c) Maybe there are other documents out there that should be in our\n          // buffer. But in that case, when we emptied _unpublishedBuffer in\n          // _removeBuffered, we should have called _needToPollQuery, which will\n          // either put something in _unpublishedBuffer or set _safeAppendToBuffer\n          // (or both), and it will put us in QUERYING for that whole time. So in\n          // fact, we shouldn't be able to get here.\n\n          throw new Error(\"Buffer inexplicably empty\");\n        });\n      },\n      _changePublished: function (id, oldDoc, newDoc) {\n        var self = this;\n        Meteor._noYieldsAllowed(function () {\n          self._published.set(id, self._sharedProjectionFn(newDoc));\n          var projectedNew = self._projectionFn(newDoc);\n          var projectedOld = self._projectionFn(oldDoc);\n          var changed = DiffSequence.makeChangedFields(projectedNew, projectedOld);\n          if (!isEmpty(changed)) self._multiplexer.changed(id, changed);\n        });\n      },\n      _addBuffered: function (id, doc) {\n        var self = this;\n        Meteor._noYieldsAllowed(function () {\n          self._unpublishedBuffer.set(id, self._sharedProjectionFn(doc));\n\n          // If something is overflowing the buffer, we just remove it from cache\n          if (self._unpublishedBuffer.size() > self._limit) {\n            var maxBufferedId = self._unpublishedBuffer.maxElementId();\n            self._unpublishedBuffer.remove(maxBufferedId);\n\n            // Since something matching is removed from cache (both published set and\n            // buffer), set flag to false\n            self._safeAppendToBuffer = false;\n          }\n        });\n      },\n      // Is called either to remove the doc completely from matching set or to move\n      // it to the published set later.\n      _removeBuffered: function (id) {\n        var self = this;\n        Meteor._noYieldsAllowed(function () {\n          self._unpublishedBuffer.remove(id);\n          // To keep the contract \"buffer is never empty in STEADY phase unless the\n          // everything matching fits into published\" true, we poll everything as\n          // soon as we see the buffer becoming empty.\n          if (!self._unpublishedBuffer.size() && !self._safeAppendToBuffer) self._needToPollQuery();\n        });\n      },\n      // Called when a document has joined the \"Matching\" results set.\n      // Takes responsibility of keeping _unpublishedBuffer in sync with _published\n      // and the effect of limit enforced.\n      _addMatching: function (doc) {\n        var self = this;\n        Meteor._noYieldsAllowed(function () {\n          var id = doc._id;\n          if (self._published.has(id)) throw Error(\"tried to add something already published \" + id);\n          if (self._limit && self._unpublishedBuffer.has(id)) throw Error(\"tried to add something already existed in buffer \" + id);\n          var limit = self._limit;\n          var comparator = self._comparator;\n          var maxPublished = limit && self._published.size() > 0 ? self._published.get(self._published.maxElementId()) : null;\n          var maxBuffered = limit && self._unpublishedBuffer.size() > 0 ? self._unpublishedBuffer.get(self._unpublishedBuffer.maxElementId()) : null;\n          // The query is unlimited or didn't publish enough documents yet or the\n          // new document would fit into published set pushing the maximum element\n          // out, then we need to publish the doc.\n          var toPublish = !limit || self._published.size() < limit || comparator(doc, maxPublished) < 0;\n\n          // Otherwise we might need to buffer it (only in case of limited query).\n          // Buffering is allowed if the buffer is not filled up yet and all\n          // matching docs are either in the published set or in the buffer.\n          var canAppendToBuffer = !toPublish && self._safeAppendToBuffer && self._unpublishedBuffer.size() < limit;\n\n          // Or if it is small enough to be safely inserted to the middle or the\n          // beginning of the buffer.\n          var canInsertIntoBuffer = !toPublish && maxBuffered && comparator(doc, maxBuffered) <= 0;\n          var toBuffer = canAppendToBuffer || canInsertIntoBuffer;\n          if (toPublish) {\n            self._addPublished(id, doc);\n          } else if (toBuffer) {\n            self._addBuffered(id, doc);\n          } else {\n            // dropping it and not saving to the cache\n            self._safeAppendToBuffer = false;\n          }\n        });\n      },\n      // Called when a document leaves the \"Matching\" results set.\n      // Takes responsibility of keeping _unpublishedBuffer in sync with _published\n      // and the effect of limit enforced.\n      _removeMatching: function (id) {\n        var self = this;\n        Meteor._noYieldsAllowed(function () {\n          if (!self._published.has(id) && !self._limit) throw Error(\"tried to remove something matching but not cached \" + id);\n          if (self._published.has(id)) {\n            self._removePublished(id);\n          } else if (self._unpublishedBuffer.has(id)) {\n            self._removeBuffered(id);\n          }\n        });\n      },\n      _handleDoc: function (id, newDoc) {\n        var self = this;\n        Meteor._noYieldsAllowed(function () {\n          var matchesNow = newDoc && self._matcher.documentMatches(newDoc).result;\n          var publishedBefore = self._published.has(id);\n          var bufferedBefore = self._limit && self._unpublishedBuffer.has(id);\n          var cachedBefore = publishedBefore || bufferedBefore;\n          if (matchesNow && !cachedBefore) {\n            self._addMatching(newDoc);\n          } else if (cachedBefore && !matchesNow) {\n            self._removeMatching(id);\n          } else if (cachedBefore && matchesNow) {\n            var oldDoc = self._published.get(id);\n            var comparator = self._comparator;\n            var minBuffered = self._limit && self._unpublishedBuffer.size() && self._unpublishedBuffer.get(self._unpublishedBuffer.minElementId());\n            var maxBuffered;\n            if (publishedBefore) {\n              // Unlimited case where the document stays in published once it\n              // matches or the case when we don't have enough matching docs to\n              // publish or the changed but matching doc will stay in published\n              // anyways.\n              //\n              // XXX: We rely on the emptiness of buffer. Be sure to maintain the\n              // fact that buffer can't be empty if there are matching documents not\n              // published. Notably, we don't want to schedule repoll and continue\n              // relying on this property.\n              var staysInPublished = !self._limit || self._unpublishedBuffer.size() === 0 || comparator(newDoc, minBuffered) <= 0;\n              if (staysInPublished) {\n                self._changePublished(id, oldDoc, newDoc);\n              } else {\n                // after the change doc doesn't stay in the published, remove it\n                self._removePublished(id);\n                // but it can move into buffered now, check it\n                maxBuffered = self._unpublishedBuffer.get(self._unpublishedBuffer.maxElementId());\n                var toBuffer = self._safeAppendToBuffer || maxBuffered && comparator(newDoc, maxBuffered) <= 0;\n                if (toBuffer) {\n                  self._addBuffered(id, newDoc);\n                } else {\n                  // Throw away from both published set and buffer\n                  self._safeAppendToBuffer = false;\n                }\n              }\n            } else if (bufferedBefore) {\n              oldDoc = self._unpublishedBuffer.get(id);\n              // remove the old version manually instead of using _removeBuffered so\n              // we don't trigger the querying immediately.  if we end this block\n              // with the buffer empty, we will need to trigger the query poll\n              // manually too.\n              self._unpublishedBuffer.remove(id);\n              var maxPublished = self._published.get(self._published.maxElementId());\n              maxBuffered = self._unpublishedBuffer.size() && self._unpublishedBuffer.get(self._unpublishedBuffer.maxElementId());\n\n              // the buffered doc was updated, it could move to published\n              var toPublish = comparator(newDoc, maxPublished) < 0;\n\n              // or stays in buffer even after the change\n              var staysInBuffer = !toPublish && self._safeAppendToBuffer || !toPublish && maxBuffered && comparator(newDoc, maxBuffered) <= 0;\n              if (toPublish) {\n                self._addPublished(id, newDoc);\n              } else if (staysInBuffer) {\n                // stays in buffer but changes\n                self._unpublishedBuffer.set(id, newDoc);\n              } else {\n                // Throw away from both published set and buffer\n                self._safeAppendToBuffer = false;\n                // Normally this check would have been done in _removeBuffered but\n                // we didn't use it, so we need to do it ourself now.\n                if (!self._unpublishedBuffer.size()) {\n                  self._needToPollQuery();\n                }\n              }\n            } else {\n              throw new Error(\"cachedBefore implies either of publishedBefore or bufferedBefore is true.\");\n            }\n          }\n        });\n      },\n      _fetchModifiedDocuments: function () {\n        var self = this;\n        self._registerPhaseChange(PHASE.FETCHING);\n        // Defer, because nothing called from the oplog entry handler may yield,\n        // but fetch() yields.\n        Meteor.defer(finishIfNeedToPollQuery(async function () {\n          while (!self._stopped && !self._needToFetch.empty()) {\n            if (self._phase === PHASE.QUERYING) {\n              // While fetching, we decided to go into QUERYING mode, and then we\n              // saw another oplog entry, so _needToFetch is not empty. But we\n              // shouldn't fetch these documents until AFTER the query is done.\n              break;\n            }\n\n            // Being in steady phase here would be surprising.\n            if (self._phase !== PHASE.FETCHING) throw new Error(\"phase in fetchModifiedDocuments: \" + self._phase);\n            self._currentlyFetching = self._needToFetch;\n            var thisGeneration = ++self._fetchGeneration;\n            self._needToFetch = new LocalCollection._IdMap();\n            var waiting = 0;\n            let promiseResolver = null;\n            const awaitablePromise = new Promise(r => promiseResolver = r);\n            // This loop is safe, because _currentlyFetching will not be updated\n            // during this loop (in fact, it is never mutated).\n            await self._currentlyFetching.forEachAsync(async function (op, id) {\n              waiting++;\n              await self._mongoHandle._docFetcher.fetch(self._cursorDescription.collectionName, id, op, finishIfNeedToPollQuery(function (err, doc) {\n                if (err) {\n                  Meteor._debug('Got exception while fetching documents', err);\n                  // If we get an error from the fetcher (eg, trouble\n                  // connecting to Mongo), let's just abandon the fetch phase\n                  // altogether and fall back to polling. It's not like we're\n                  // getting live updates anyway.\n                  if (self._phase !== PHASE.QUERYING) {\n                    self._needToPollQuery();\n                  }\n                  waiting--;\n                  // Because fetch() never calls its callback synchronously,\n                  // this is safe (ie, we won't call fut.return() before the\n                  // forEach is done).\n                  if (waiting === 0) promiseResolver();\n                  return;\n                }\n                try {\n                  if (!self._stopped && self._phase === PHASE.FETCHING && self._fetchGeneration === thisGeneration) {\n                    // We re-check the generation in case we've had an explicit\n                    // _pollQuery call (eg, in another fiber) which should\n                    // effectively cancel this round of fetches.  (_pollQuery\n                    // increments the generation.)\n\n                    self._handleDoc(id, doc);\n                  }\n                } finally {\n                  waiting--;\n                  // Because fetch() never calls its callback synchronously,\n                  // this is safe (ie, we won't call fut.return() before the\n                  // forEach is done).\n                  if (waiting === 0) promiseResolver();\n                }\n              }));\n            });\n            await awaitablePromise;\n            // Exit now if we've had a _pollQuery call (here or in another fiber).\n            if (self._phase === PHASE.QUERYING) return;\n            self._currentlyFetching = null;\n          }\n          // We're done fetching, so we can be steady, unless we've had a\n          // _pollQuery call (here or in another fiber).\n          if (self._phase !== PHASE.QUERYING) await self._beSteady();\n        }));\n      },\n      _beSteady: async function () {\n        var self = this;\n        self._registerPhaseChange(PHASE.STEADY);\n        var writes = self._writesToCommitWhenWeReachSteady || [];\n        self._writesToCommitWhenWeReachSteady = [];\n        await self._multiplexer.onFlush(async function () {\n          try {\n            for (const w of writes) {\n              await w.committed();\n            }\n          } catch (e) {\n            console.error(\"_beSteady error\", {\n              writes\n            }, e);\n          }\n        });\n      },\n      _handleOplogEntryQuerying: function (op) {\n        var self = this;\n        Meteor._noYieldsAllowed(function () {\n          self._needToFetch.set(idForOp(op), op);\n        });\n      },\n      _handleOplogEntrySteadyOrFetching: function (op) {\n        var self = this;\n        Meteor._noYieldsAllowed(function () {\n          var id = idForOp(op);\n          // If we're already fetching this one, or about to, we can't optimize;\n          // make sure that we fetch it again if necessary.\n\n          if (self._phase === PHASE.FETCHING && (self._currentlyFetching && self._currentlyFetching.has(id) || self._needToFetch.has(id))) {\n            self._needToFetch.set(id, op);\n            return;\n          }\n          if (op.op === 'd') {\n            if (self._published.has(id) || self._limit && self._unpublishedBuffer.has(id)) self._removeMatching(id);\n          } else if (op.op === 'i') {\n            if (self._published.has(id)) throw new Error(\"insert found for already-existing ID in published\");\n            if (self._unpublishedBuffer && self._unpublishedBuffer.has(id)) throw new Error(\"insert found for already-existing ID in buffer\");\n\n            // XXX what if selector yields?  for now it can't but later it could\n            // have $where\n            if (self._matcher.documentMatches(op.o).result) self._addMatching(op.o);\n          } else if (op.op === 'u') {\n            // we are mapping the new oplog format on mongo 5\n            // to what we know better, $set\n            op.o = oplogV2V1Converter(op.o);\n            // Is this a modifier ($set/$unset, which may require us to poll the\n            // database to figure out if the whole document matches the selector) or\n            // a replacement (in which case we can just directly re-evaluate the\n            // selector)?\n            // oplog format has changed on mongodb 5, we have to support both now\n            // diff is the format in Mongo 5+ (oplog v2)\n            var isReplace = !has(op.o, '$set') && !has(op.o, 'diff') && !has(op.o, '$unset');\n            // If this modifier modifies something inside an EJSON custom type (ie,\n            // anything with EJSON$), then we can't try to use\n            // LocalCollection._modify, since that just mutates the EJSON encoding,\n            // not the actual object.\n            var canDirectlyModifyDoc = !isReplace && modifierCanBeDirectlyApplied(op.o);\n            var publishedBefore = self._published.has(id);\n            var bufferedBefore = self._limit && self._unpublishedBuffer.has(id);\n            if (isReplace) {\n              self._handleDoc(id, Object.assign({\n                _id: id\n              }, op.o));\n            } else if ((publishedBefore || bufferedBefore) && canDirectlyModifyDoc) {\n              // Oh great, we actually know what the document is, so we can apply\n              // this directly.\n              var newDoc = self._published.has(id) ? self._published.get(id) : self._unpublishedBuffer.get(id);\n              newDoc = EJSON.clone(newDoc);\n              newDoc._id = id;\n              try {\n                LocalCollection._modify(newDoc, op.o);\n              } catch (e) {\n                if (e.name !== \"MinimongoError\") throw e;\n                // We didn't understand the modifier.  Re-fetch.\n                self._needToFetch.set(id, op);\n                if (self._phase === PHASE.STEADY) {\n                  self._fetchModifiedDocuments();\n                }\n                return;\n              }\n              self._handleDoc(id, self._sharedProjectionFn(newDoc));\n            } else if (!canDirectlyModifyDoc || self._matcher.canBecomeTrueByModifier(op.o) || self._sorter && self._sorter.affectedByModifier(op.o)) {\n              self._needToFetch.set(id, op);\n              if (self._phase === PHASE.STEADY) self._fetchModifiedDocuments();\n            }\n          } else {\n            throw Error(\"XXX SURPRISING OPERATION: \" + op);\n          }\n        });\n      },\n      async _runInitialQueryAsync() {\n        var self = this;\n        if (self._stopped) throw new Error(\"oplog stopped surprisingly early\");\n        await self._runQuery({\n          initial: true\n        }); // yields\n\n        if (self._stopped) return; // can happen on queryError\n\n        // Allow observeChanges calls to return. (After this, it's possible for\n        // stop() to be called.)\n        await self._multiplexer.ready();\n        await self._doneQuerying(); // yields\n      },\n      // Yields!\n      _runInitialQuery: function () {\n        return this._runInitialQueryAsync();\n      },\n      // In various circumstances, we may just want to stop processing the oplog and\n      // re-run the initial query, just as if we were a PollingObserveDriver.\n      //\n      // This function may not block, because it is called from an oplog entry\n      // handler.\n      //\n      // XXX We should call this when we detect that we've been in FETCHING for \"too\n      // long\".\n      //\n      // XXX We should call this when we detect Mongo failover (since that might\n      // mean that some of the oplog entries we have processed have been rolled\n      // back). The Node Mongo driver is in the middle of a bunch of huge\n      // refactorings, including the way that it notifies you when primary\n      // changes. Will put off implementing this until driver 1.4 is out.\n      _pollQuery: function () {\n        var self = this;\n        Meteor._noYieldsAllowed(function () {\n          if (self._stopped) return;\n\n          // Yay, we get to forget about all the things we thought we had to fetch.\n          self._needToFetch = new LocalCollection._IdMap();\n          self._currentlyFetching = null;\n          ++self._fetchGeneration; // ignore any in-flight fetches\n          self._registerPhaseChange(PHASE.QUERYING);\n\n          // Defer so that we don't yield.  We don't need finishIfNeedToPollQuery\n          // here because SwitchedToQuery is not thrown in QUERYING mode.\n          Meteor.defer(async function () {\n            await self._runQuery();\n            await self._doneQuerying();\n          });\n        });\n      },\n      // Yields!\n      async _runQueryAsync(options) {\n        var self = this;\n        options = options || {};\n        var newResults, newBuffer;\n\n        // This while loop is just to retry failures.\n        while (true) {\n          // If we've been stopped, we don't have to run anything any more.\n          if (self._stopped) return;\n          newResults = new LocalCollection._IdMap();\n          newBuffer = new LocalCollection._IdMap();\n\n          // Query 2x documents as the half excluded from the original query will go\n          // into unpublished buffer to reduce additional Mongo lookups in cases\n          // when documents are removed from the published set and need a\n          // replacement.\n          // XXX needs more thought on non-zero skip\n          // XXX 2 is a \"magic number\" meaning there is an extra chunk of docs for\n          // buffer if such is needed.\n          var cursor = self._cursorForQuery({\n            limit: self._limit * 2\n          });\n          try {\n            await cursor.forEach(function (doc, i) {\n              // yields\n              if (!self._limit || i < self._limit) {\n                newResults.set(doc._id, doc);\n              } else {\n                newBuffer.set(doc._id, doc);\n              }\n            });\n            break;\n          } catch (e) {\n            if (options.initial && typeof e.code === 'number') {\n              // This is an error document sent to us by mongod, not a connection\n              // error generated by the client. And we've never seen this query work\n              // successfully. Probably it's a bad selector or something, so we\n              // should NOT retry. Instead, we should halt the observe (which ends\n              // up calling `stop` on us).\n              await self._multiplexer.queryError(e);\n              return;\n            }\n\n            // During failover (eg) if we get an exception we should log and retry\n            // instead of crashing.\n            Meteor._debug(\"Got exception while polling query\", e);\n            await Meteor._sleepForMs(100);\n          }\n        }\n        if (self._stopped) return;\n        self._publishNewResults(newResults, newBuffer);\n      },\n      // Yields!\n      _runQuery: function (options) {\n        return this._runQueryAsync(options);\n      },\n      // Transitions to QUERYING and runs another query, or (if already in QUERYING)\n      // ensures that we will query again later.\n      //\n      // This function may not block, because it is called from an oplog entry\n      // handler. However, if we were not already in the QUERYING phase, it throws\n      // an exception that is caught by the closest surrounding\n      // finishIfNeedToPollQuery call; this ensures that we don't continue running\n      // close that was designed for another phase inside PHASE.QUERYING.\n      //\n      // (It's also necessary whenever logic in this file yields to check that other\n      // phases haven't put us into QUERYING mode, though; eg,\n      // _fetchModifiedDocuments does this.)\n      _needToPollQuery: function () {\n        var self = this;\n        Meteor._noYieldsAllowed(function () {\n          if (self._stopped) return;\n\n          // If we're not already in the middle of a query, we can query now\n          // (possibly pausing FETCHING).\n          if (self._phase !== PHASE.QUERYING) {\n            self._pollQuery();\n            throw new SwitchedToQuery();\n          }\n\n          // We're currently in QUERYING. Set a flag to ensure that we run another\n          // query when we're done.\n          self._requeryWhenDoneThisQuery = true;\n        });\n      },\n      // Yields!\n      _doneQuerying: async function () {\n        var self = this;\n        if (self._stopped) return;\n        await self._mongoHandle._oplogHandle.waitUntilCaughtUp();\n        if (self._stopped) return;\n        if (self._phase !== PHASE.QUERYING) throw Error(\"Phase unexpectedly \" + self._phase);\n        if (self._requeryWhenDoneThisQuery) {\n          self._requeryWhenDoneThisQuery = false;\n          self._pollQuery();\n        } else if (self._needToFetch.empty()) {\n          await self._beSteady();\n        } else {\n          self._fetchModifiedDocuments();\n        }\n      },\n      _cursorForQuery: function (optionsOverwrite) {\n        var self = this;\n        return Meteor._noYieldsAllowed(function () {\n          // The query we run is almost the same as the cursor we are observing,\n          // with a few changes. We need to read all the fields that are relevant to\n          // the selector, not just the fields we are going to publish (that's the\n          // \"shared\" projection). And we don't want to apply any transform in the\n          // cursor, because observeChanges shouldn't use the transform.\n          var options = Object.assign({}, self._cursorDescription.options);\n\n          // Allow the caller to modify the options. Useful to specify different\n          // skip and limit values.\n          Object.assign(options, optionsOverwrite);\n          options.fields = self._sharedProjection;\n          delete options.transform;\n          // We are NOT deep cloning fields or selector here, which should be OK.\n          var description = new CursorDescription(self._cursorDescription.collectionName, self._cursorDescription.selector, options);\n          return new Cursor(self._mongoHandle, description);\n        });\n      },\n      // Replace self._published with newResults (both are IdMaps), invoking observe\n      // callbacks on the multiplexer.\n      // Replace self._unpublishedBuffer with newBuffer.\n      //\n      // XXX This is very similar to LocalCollection._diffQueryUnorderedChanges. We\n      // should really: (a) Unify IdMap and OrderedDict into Unordered/OrderedDict\n      // (b) Rewrite diff.js to use these classes instead of arrays and objects.\n      _publishNewResults: function (newResults, newBuffer) {\n        var self = this;\n        Meteor._noYieldsAllowed(function () {\n          // If the query is limited and there is a buffer, shut down so it doesn't\n          // stay in a way.\n          if (self._limit) {\n            self._unpublishedBuffer.clear();\n          }\n\n          // First remove anything that's gone. Be careful not to modify\n          // self._published while iterating over it.\n          var idsToRemove = [];\n          self._published.forEach(function (doc, id) {\n            if (!newResults.has(id)) idsToRemove.push(id);\n          });\n          idsToRemove.forEach(function (id) {\n            self._removePublished(id);\n          });\n\n          // Now do adds and changes.\n          // If self has a buffer and limit, the new fetched result will be\n          // limited correctly as the query has sort specifier.\n          newResults.forEach(function (doc, id) {\n            self._handleDoc(id, doc);\n          });\n\n          // Sanity-check that everything we tried to put into _published ended up\n          // there.\n          // XXX if this is slow, remove it later\n          if (self._published.size() !== newResults.size()) {\n            Meteor._debug('The Mongo server and the Meteor query disagree on how ' + 'many documents match your query. Cursor description: ', self._cursorDescription);\n          }\n          self._published.forEach(function (doc, id) {\n            if (!newResults.has(id)) throw Error(\"_published has a doc that newResults doesn't; \" + id);\n          });\n\n          // Finally, replace the buffer\n          newBuffer.forEach(function (doc, id) {\n            self._addBuffered(id, doc);\n          });\n          self._safeAppendToBuffer = newBuffer.size() < self._limit;\n        });\n      },\n      // This stop function is invoked from the onStop of the ObserveMultiplexer, so\n      // it shouldn't actually be possible to call it until the multiplexer is\n      // ready.\n      //\n      // It's important to check self._stopped after every call in this file that\n      // can yield!\n      _stop: async function () {\n        var self = this;\n        if (self._stopped) return;\n        self._stopped = true;\n\n        // Note: we *don't* use multiplexer.onFlush here because this stop\n        // callback is actually invoked by the multiplexer itself when it has\n        // determined that there are no handles left. So nothing is actually going\n        // to get flushed (and it's probably not valid to call methods on the\n        // dying multiplexer).\n        for (const w of self._writesToCommitWhenWeReachSteady) {\n          await w.committed();\n        }\n        self._writesToCommitWhenWeReachSteady = null;\n\n        // Proactively drop references to potentially big things.\n        self._published = null;\n        self._unpublishedBuffer = null;\n        self._needToFetch = null;\n        self._currentlyFetching = null;\n        self._oplogEntryHandle = null;\n        self._listenersHandle = null;\n        Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\"mongo-livedata\", \"observe-drivers-oplog\", -1);\n        var _iteratorAbruptCompletion = false;\n        var _didIteratorError = false;\n        var _iteratorError;\n        try {\n          for (var _iterator = _asyncIterator(self._stopHandles), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n            const handle = _step.value;\n            {\n              await handle.stop();\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion && _iterator.return != null) {\n              await _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      },\n      stop: async function () {\n        const self = this;\n        return await self._stop();\n      },\n      _registerPhaseChange: function (phase) {\n        var self = this;\n        Meteor._noYieldsAllowed(function () {\n          var now = new Date();\n          if (self._phase) {\n            var timeDiff = now - self._phaseStartTime;\n            Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\"mongo-livedata\", \"time-spent-in-\" + self._phase + \"-phase\", timeDiff);\n          }\n          self._phase = phase;\n          self._phaseStartTime = now;\n        });\n      }\n    });\n\n    // Does our oplog tailing code support this cursor? For now, we are being very\n    // conservative and allowing only simple queries with simple options.\n    // (This is a \"static method\".)\n    OplogObserveDriver.cursorSupported = function (cursorDescription, matcher) {\n      // First, check the options.\n      var options = cursorDescription.options;\n\n      // Did the user say no explicitly?\n      // underscored version of the option is COMPAT with 1.2\n      if (options.disableOplog || options._disableOplog) return false;\n\n      // skip is not supported: to support it we would need to keep track of all\n      // \"skipped\" documents or at least their ids.\n      // limit w/o a sort specifier is not supported: current implementation needs a\n      // deterministic way to order documents.\n      if (options.skip || options.limit && !options.sort) return false;\n\n      // If a fields projection option is given check if it is supported by\n      // minimongo (some operators are not supported).\n      const fields = options.fields || options.projection;\n      if (fields) {\n        try {\n          LocalCollection._checkSupportedProjection(fields);\n        } catch (e) {\n          if (e.name === \"MinimongoError\") {\n            return false;\n          } else {\n            throw e;\n          }\n        }\n      }\n\n      // We don't allow the following selectors:\n      //   - $where (not confident that we provide the same JS environment\n      //             as Mongo, and can yield!)\n      //   - $near (has \"interesting\" properties in MongoDB, like the possibility\n      //            of returning an ID multiple times, though even polling maybe\n      //            have a bug there)\n      //           XXX: once we support it, we would need to think more on how we\n      //           initialize the comparators when we create the driver.\n      return !matcher.hasWhere() && !matcher.hasGeoQuery();\n    };\n    var modifierCanBeDirectlyApplied = function (modifier) {\n      return Object.entries(modifier).every(function (_ref) {\n        let [operation, fields] = _ref;\n        return Object.entries(fields).every(function (_ref2) {\n          let [field, value] = _ref2;\n          return !/EJSON\\$/.test(field);\n        });\n      });\n    };\n    MongoInternals.OplogObserveDriver = OplogObserveDriver;\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_asyncIterator","module","link","default","v","has","isEmpty","oplogV2V1Converter","check","Match","__reifyWaitForDeps__","PHASE","QUERYING","FETCHING","STEADY","SwitchedToQuery","finishIfNeedToPollQuery","f","apply","arguments","e","currentId","OplogObserveDriver","options","self","_usesOplog","_id","_cursorDescription","cursorDescription","_mongoHandle","mongoHandle","_multiplexer","multiplexer","ordered","Error","sorter","comparator","getComparator","limit","heapOptions","IdMap","LocalCollection","_IdMap","_limit","_comparator","_sorter","_unpublishedBuffer","MinMaxHeap","_published","MaxHeap","_safeAppendToBuffer","_stopped","_stopHandles","_addStopHandles","newStopHandles","expectedPattern","ObjectIncluding","stop","Function","OneOf","push","Package","Facts","incrementServerFact","_registerPhaseChange","_matcher","matcher","projection","fields","_projectionFn","_compileProjection","_sharedProjection","combineIntoProjection","_sharedProjectionFn","_needToFetch","_currentlyFetching","_fetchGeneration","_requeryWhenDoneThisQuery","_writesToCommitWhenWeReachSteady","_","extend","prototype","_init","_oplogHandle","onSkippedEntries","_needToPollQuery","forEachTrigger","trigger","onOplogEntry","notification","op","dropCollection","dropDatabase","_phase","_handleOplogEntryQuerying","_handleOplogEntrySteadyOrFetching","listenAll","fence","DDPServer","_getCurrentFence","fired","_oplogObserveDrivers","onBeforeFire","drivers","waitUntilCaughtUp","driver","Object","values","write","beginWrite","onFlush","committed","_onFailover","_runInitialQuery","_addPublished","id","doc","Meteor","_noYieldsAllowed","assign","set","added","size","overflowingDocId","maxElementId","overflowingDoc","get","EJSON","equals","remove","removed","_addBuffered","_removePublished","empty","newDocId","minElementId","newDoc","_removeBuffered","_changePublished","oldDoc","projectedNew","projectedOld","changed","DiffSequence","makeChangedFields","maxBufferedId","_addMatching","maxPublished","maxBuffered","toPublish","canAppendToBuffer","canInsertIntoBuffer","toBuffer","_removeMatching","_handleDoc","matchesNow","documentMatches","result","publishedBefore","bufferedBefore","cachedBefore","minBuffered","staysInPublished","staysInBuffer","_fetchModifiedDocuments","defer","thisGeneration","waiting","promiseResolver","awaitablePromise","Promise","r","forEachAsync","_docFetcher","fetch","collectionName","err","_debug","_beSteady","writes","w","console","error","idForOp","o","isReplace","canDirectlyModifyDoc","modifierCanBeDirectlyApplied","clone","_modify","name","canBecomeTrueByModifier","affectedByModifier","_runInitialQueryAsync","_runQuery","initial","ready","_doneQuerying","_pollQuery","_runQueryAsync","newResults","newBuffer","cursor","_cursorForQuery","forEach","i","code","queryError","_sleepForMs","_publishNewResults","optionsOverwrite","transform","description","CursorDescription","selector","Cursor","clear","idsToRemove","_stop","_oplogEntryHandle","_listenersHandle","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","next","done","handle","value","return","phase","now","Date","timeDiff","_phaseStartTime","cursorSupported","disableOplog","_disableOplog","skip","sort","_checkSupportedProjection","hasWhere","hasGeoQuery","modifier","entries","every","_ref","operation","_ref2","field","test","MongoInternals","__reify_async_result__","_reifyError","async"],"sources":["packages/mongo/oplog_observe_driver.js"],"sourcesContent":["import has from 'lodash.has';\nimport isEmpty from 'lodash.isempty';\nimport { oplogV2V1Converter } from \"./oplog_v2_converter\";\nimport { check, Match } from 'meteor/check';\n\nvar PHASE = {\n  QUERYING: \"QUERYING\",\n  FETCHING: \"FETCHING\",\n  STEADY: \"STEADY\"\n};\n\n// Exception thrown by _needToPollQuery which unrolls the stack up to the\n// enclosing call to finishIfNeedToPollQuery.\nvar SwitchedToQuery = function () {};\nvar finishIfNeedToPollQuery = function (f) {\n  return function () {\n    try {\n      f.apply(this, arguments);\n    } catch (e) {\n      if (!(e instanceof SwitchedToQuery))\n        throw e;\n    }\n  };\n};\n\nvar currentId = 0;\n\n// OplogObserveDriver is an alternative to PollingObserveDriver which follows\n// the Mongo operation log instead of just re-polling the query. It obeys the\n// same simple interface: constructing it starts sending observeChanges\n// callbacks (and a ready() invocation) to the ObserveMultiplexer, and you stop\n// it by calling the stop() method.\nOplogObserveDriver = function (options) {\n  const self = this;\n  self._usesOplog = true;  // tests look at this\n\n  self._id = currentId;\n  currentId++;\n\n  self._cursorDescription = options.cursorDescription;\n  self._mongoHandle = options.mongoHandle;\n  self._multiplexer = options.multiplexer;\n\n  if (options.ordered) {\n    throw Error(\"OplogObserveDriver only supports unordered observeChanges\");\n  }\n\n  const sorter = options.sorter;\n  // We don't support $near and other geo-queries so it's OK to initialize the\n  // comparator only once in the constructor.\n  const comparator = sorter && sorter.getComparator();\n\n  if (options.cursorDescription.options.limit) {\n    // There are several properties ordered driver implements:\n    // - _limit is a positive number\n    // - _comparator is a function-comparator by which the query is ordered\n    // - _unpublishedBuffer is non-null Min/Max Heap,\n    //                      the empty buffer in STEADY phase implies that the\n    //                      everything that matches the queries selector fits\n    //                      into published set.\n    // - _published - Max Heap (also implements IdMap methods)\n\n    const heapOptions = { IdMap: LocalCollection._IdMap };\n    self._limit = self._cursorDescription.options.limit;\n    self._comparator = comparator;\n    self._sorter = sorter;\n    self._unpublishedBuffer = new MinMaxHeap(comparator, heapOptions);\n    // We need something that can find Max value in addition to IdMap interface\n    self._published = new MaxHeap(comparator, heapOptions);\n  } else {\n    self._limit = 0;\n    self._comparator = null;\n    self._sorter = null;\n    self._unpublishedBuffer = null;\n    self._published = new LocalCollection._IdMap;\n  }\n\n  // Indicates if it is safe to insert a new document at the end of the buffer\n  // for this query. i.e. it is known that there are no documents matching the\n  // selector those are not in published or buffer.\n  self._safeAppendToBuffer = false;\n\n  self._stopped = false;\n  self._stopHandles = [];\n  self._addStopHandles = function (newStopHandles) {\n    const expectedPattern = Match.ObjectIncluding({ stop: Function });\n    // Single item or array\n    check(newStopHandles, Match.OneOf([expectedPattern], expectedPattern));\n    self._stopHandles.push(newStopHandles);\n  }\n\n  Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\n    \"mongo-livedata\", \"observe-drivers-oplog\", 1);\n\n  self._registerPhaseChange(PHASE.QUERYING);\n\n  self._matcher = options.matcher;\n  // we are now using projection, not fields in the cursor description even if you pass {fields}\n  // in the cursor construction\n  const projection = self._cursorDescription.options.fields || self._cursorDescription.options.projection || {};\n  self._projectionFn = LocalCollection._compileProjection(projection);\n  // Projection function, result of combining important fields for selector and\n  // existing fields projection\n  self._sharedProjection = self._matcher.combineIntoProjection(projection);\n  if (sorter)\n    self._sharedProjection = sorter.combineIntoProjection(self._sharedProjection);\n  self._sharedProjectionFn = LocalCollection._compileProjection(\n    self._sharedProjection);\n\n  self._needToFetch = new LocalCollection._IdMap;\n  self._currentlyFetching = null;\n  self._fetchGeneration = 0;\n\n  self._requeryWhenDoneThisQuery = false;\n  self._writesToCommitWhenWeReachSteady = [];\n\n\n\n };\n\n_.extend(OplogObserveDriver.prototype, {\n  _init: async function() {\n    const self = this;\n\n    // If the oplog handle tells us that it skipped some entries (because it got\n    // behind, say), re-poll.\n    self._addStopHandles(self._mongoHandle._oplogHandle.onSkippedEntries(\n      finishIfNeedToPollQuery(function () {\n        return self._needToPollQuery();\n      })\n    ));\n    \n    await forEachTrigger(self._cursorDescription, async function (trigger) {\n      self._addStopHandles(await self._mongoHandle._oplogHandle.onOplogEntry(\n        trigger, function (notification) {\n          finishIfNeedToPollQuery(function () {\n            const op = notification.op;\n            if (notification.dropCollection || notification.dropDatabase) {\n              // Note: this call is not allowed to block on anything (especially\n              // on waiting for oplog entries to catch up) because that will block\n              // onOplogEntry!\n              return self._needToPollQuery();\n            } else {\n              // All other operators should be handled depending on phase\n              if (self._phase === PHASE.QUERYING) {\n                return self._handleOplogEntryQuerying(op);\n              } else {\n                return self._handleOplogEntrySteadyOrFetching(op);\n              }\n            }\n          })();\n        }\n      ));\n    });\n  \n    // XXX ordering w.r.t. everything else?\n    self._addStopHandles(await listenAll(\n      self._cursorDescription, function () {\n        // If we're not in a pre-fire write fence, we don't have to do anything.\n        const fence = DDPServer._getCurrentFence();\n        if (!fence || fence.fired)\n          return;\n  \n        if (fence._oplogObserveDrivers) {\n          fence._oplogObserveDrivers[self._id] = self;\n          return;\n        }\n  \n        fence._oplogObserveDrivers = {};\n        fence._oplogObserveDrivers[self._id] = self;\n  \n        fence.onBeforeFire(async function () {\n          const drivers = fence._oplogObserveDrivers;\n          delete fence._oplogObserveDrivers;\n  \n          // This fence cannot fire until we've caught up to \"this point\" in the\n          // oplog, and all observers made it back to the steady state.\n          await self._mongoHandle._oplogHandle.waitUntilCaughtUp();\n  \n          for (const driver of Object.values(drivers)) {\n            if (driver._stopped)\n              continue;\n  \n            const write = await fence.beginWrite();\n            if (driver._phase === PHASE.STEADY) {\n              // Make sure that all of the callbacks have made it through the\n              // multiplexer and been delivered to ObserveHandles before committing\n              // writes.\n              await driver._multiplexer.onFlush(write.committed);\n            } else {\n              driver._writesToCommitWhenWeReachSteady.push(write);\n            }\n          }\n        });\n      }\n    ));\n  \n    // When Mongo fails over, we need to repoll the query, in case we processed an\n    // oplog entry that got rolled back.\n    self._addStopHandles(self._mongoHandle._onFailover(finishIfNeedToPollQuery(\n      function () {\n        return self._needToPollQuery();\n      })));\n  \n    // Give _observeChanges a chance to add the new ObserveHandle to our\n    // multiplexer, so that the added calls get streamed.\n    return self._runInitialQuery();\n  },\n  _addPublished: function (id, doc) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      var fields = Object.assign({}, doc);\n      delete fields._id;\n      self._published.set(id, self._sharedProjectionFn(doc));\n      self._multiplexer.added(id, self._projectionFn(fields));\n\n      // After adding this document, the published set might be overflowed\n      // (exceeding capacity specified by limit). If so, push the maximum\n      // element to the buffer, we might want to save it in memory to reduce the\n      // amount of Mongo lookups in the future.\n      if (self._limit && self._published.size() > self._limit) {\n        // XXX in theory the size of published is no more than limit+1\n        if (self._published.size() !== self._limit + 1) {\n          throw new Error(\"After adding to published, \" +\n                          (self._published.size() - self._limit) +\n                          \" documents are overflowing the set\");\n        }\n\n        var overflowingDocId = self._published.maxElementId();\n        var overflowingDoc = self._published.get(overflowingDocId);\n\n        if (EJSON.equals(overflowingDocId, id)) {\n          throw new Error(\"The document just added is overflowing the published set\");\n        }\n\n        self._published.remove(overflowingDocId);\n        self._multiplexer.removed(overflowingDocId);\n        self._addBuffered(overflowingDocId, overflowingDoc);\n      }\n    });\n  },\n  _removePublished: function (id) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._published.remove(id);\n      self._multiplexer.removed(id);\n      if (! self._limit || self._published.size() === self._limit)\n        return;\n\n      if (self._published.size() > self._limit)\n        throw Error(\"self._published got too big\");\n\n      // OK, we are publishing less than the limit. Maybe we should look in the\n      // buffer to find the next element past what we were publishing before.\n\n      if (!self._unpublishedBuffer.empty()) {\n        // There's something in the buffer; move the first thing in it to\n        // _published.\n        var newDocId = self._unpublishedBuffer.minElementId();\n        var newDoc = self._unpublishedBuffer.get(newDocId);\n        self._removeBuffered(newDocId);\n        self._addPublished(newDocId, newDoc);\n        return;\n      }\n\n      // There's nothing in the buffer.  This could mean one of a few things.\n\n      // (a) We could be in the middle of re-running the query (specifically, we\n      // could be in _publishNewResults). In that case, _unpublishedBuffer is\n      // empty because we clear it at the beginning of _publishNewResults. In\n      // this case, our caller already knows the entire answer to the query and\n      // we don't need to do anything fancy here.  Just return.\n      if (self._phase === PHASE.QUERYING)\n        return;\n\n      // (b) We're pretty confident that the union of _published and\n      // _unpublishedBuffer contain all documents that match selector. Because\n      // _unpublishedBuffer is empty, that means we're confident that _published\n      // contains all documents that match selector. So we have nothing to do.\n      if (self._safeAppendToBuffer)\n        return;\n\n      // (c) Maybe there are other documents out there that should be in our\n      // buffer. But in that case, when we emptied _unpublishedBuffer in\n      // _removeBuffered, we should have called _needToPollQuery, which will\n      // either put something in _unpublishedBuffer or set _safeAppendToBuffer\n      // (or both), and it will put us in QUERYING for that whole time. So in\n      // fact, we shouldn't be able to get here.\n\n      throw new Error(\"Buffer inexplicably empty\");\n    });\n  },\n  _changePublished: function (id, oldDoc, newDoc) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._published.set(id, self._sharedProjectionFn(newDoc));\n      var projectedNew = self._projectionFn(newDoc);\n      var projectedOld = self._projectionFn(oldDoc);\n      var changed = DiffSequence.makeChangedFields(\n        projectedNew, projectedOld);\n      if (!isEmpty(changed))\n        self._multiplexer.changed(id, changed);\n    });\n  },\n  _addBuffered: function (id, doc) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._unpublishedBuffer.set(id, self._sharedProjectionFn(doc));\n\n      // If something is overflowing the buffer, we just remove it from cache\n      if (self._unpublishedBuffer.size() > self._limit) {\n        var maxBufferedId = self._unpublishedBuffer.maxElementId();\n\n        self._unpublishedBuffer.remove(maxBufferedId);\n\n        // Since something matching is removed from cache (both published set and\n        // buffer), set flag to false\n        self._safeAppendToBuffer = false;\n      }\n    });\n  },\n  // Is called either to remove the doc completely from matching set or to move\n  // it to the published set later.\n  _removeBuffered: function (id) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._unpublishedBuffer.remove(id);\n      // To keep the contract \"buffer is never empty in STEADY phase unless the\n      // everything matching fits into published\" true, we poll everything as\n      // soon as we see the buffer becoming empty.\n      if (! self._unpublishedBuffer.size() && ! self._safeAppendToBuffer)\n        self._needToPollQuery();\n    });\n  },\n  // Called when a document has joined the \"Matching\" results set.\n  // Takes responsibility of keeping _unpublishedBuffer in sync with _published\n  // and the effect of limit enforced.\n  _addMatching: function (doc) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      var id = doc._id;\n      if (self._published.has(id))\n        throw Error(\"tried to add something already published \" + id);\n      if (self._limit && self._unpublishedBuffer.has(id))\n        throw Error(\"tried to add something already existed in buffer \" + id);\n\n      var limit = self._limit;\n      var comparator = self._comparator;\n      var maxPublished = (limit && self._published.size() > 0) ?\n        self._published.get(self._published.maxElementId()) : null;\n      var maxBuffered = (limit && self._unpublishedBuffer.size() > 0)\n        ? self._unpublishedBuffer.get(self._unpublishedBuffer.maxElementId())\n        : null;\n      // The query is unlimited or didn't publish enough documents yet or the\n      // new document would fit into published set pushing the maximum element\n      // out, then we need to publish the doc.\n      var toPublish = ! limit || self._published.size() < limit ||\n        comparator(doc, maxPublished) < 0;\n\n      // Otherwise we might need to buffer it (only in case of limited query).\n      // Buffering is allowed if the buffer is not filled up yet and all\n      // matching docs are either in the published set or in the buffer.\n      var canAppendToBuffer = !toPublish && self._safeAppendToBuffer &&\n        self._unpublishedBuffer.size() < limit;\n\n      // Or if it is small enough to be safely inserted to the middle or the\n      // beginning of the buffer.\n      var canInsertIntoBuffer = !toPublish && maxBuffered &&\n        comparator(doc, maxBuffered) <= 0;\n\n      var toBuffer = canAppendToBuffer || canInsertIntoBuffer;\n\n      if (toPublish) {\n        self._addPublished(id, doc);\n      } else if (toBuffer) {\n        self._addBuffered(id, doc);\n      } else {\n        // dropping it and not saving to the cache\n        self._safeAppendToBuffer = false;\n      }\n    });\n  },\n  // Called when a document leaves the \"Matching\" results set.\n  // Takes responsibility of keeping _unpublishedBuffer in sync with _published\n  // and the effect of limit enforced.\n  _removeMatching: function (id) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      if (! self._published.has(id) && ! self._limit)\n        throw Error(\"tried to remove something matching but not cached \" + id);\n\n      if (self._published.has(id)) {\n        self._removePublished(id);\n      } else if (self._unpublishedBuffer.has(id)) {\n        self._removeBuffered(id);\n      }\n    });\n  },\n  _handleDoc: function (id, newDoc) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      var matchesNow = newDoc && self._matcher.documentMatches(newDoc).result;\n\n      var publishedBefore = self._published.has(id);\n      var bufferedBefore = self._limit && self._unpublishedBuffer.has(id);\n      var cachedBefore = publishedBefore || bufferedBefore;\n\n      if (matchesNow && !cachedBefore) {\n        self._addMatching(newDoc);\n      } else if (cachedBefore && !matchesNow) {\n        self._removeMatching(id);\n      } else if (cachedBefore && matchesNow) {\n        var oldDoc = self._published.get(id);\n        var comparator = self._comparator;\n        var minBuffered = self._limit && self._unpublishedBuffer.size() &&\n          self._unpublishedBuffer.get(self._unpublishedBuffer.minElementId());\n        var maxBuffered;\n\n        if (publishedBefore) {\n          // Unlimited case where the document stays in published once it\n          // matches or the case when we don't have enough matching docs to\n          // publish or the changed but matching doc will stay in published\n          // anyways.\n          //\n          // XXX: We rely on the emptiness of buffer. Be sure to maintain the\n          // fact that buffer can't be empty if there are matching documents not\n          // published. Notably, we don't want to schedule repoll and continue\n          // relying on this property.\n          var staysInPublished = ! self._limit ||\n            self._unpublishedBuffer.size() === 0 ||\n            comparator(newDoc, minBuffered) <= 0;\n\n          if (staysInPublished) {\n            self._changePublished(id, oldDoc, newDoc);\n          } else {\n            // after the change doc doesn't stay in the published, remove it\n            self._removePublished(id);\n            // but it can move into buffered now, check it\n            maxBuffered = self._unpublishedBuffer.get(\n              self._unpublishedBuffer.maxElementId());\n\n            var toBuffer = self._safeAppendToBuffer ||\n                  (maxBuffered && comparator(newDoc, maxBuffered) <= 0);\n\n            if (toBuffer) {\n              self._addBuffered(id, newDoc);\n            } else {\n              // Throw away from both published set and buffer\n              self._safeAppendToBuffer = false;\n            }\n          }\n        } else if (bufferedBefore) {\n          oldDoc = self._unpublishedBuffer.get(id);\n          // remove the old version manually instead of using _removeBuffered so\n          // we don't trigger the querying immediately.  if we end this block\n          // with the buffer empty, we will need to trigger the query poll\n          // manually too.\n          self._unpublishedBuffer.remove(id);\n\n          var maxPublished = self._published.get(\n            self._published.maxElementId());\n          maxBuffered = self._unpublishedBuffer.size() &&\n                self._unpublishedBuffer.get(\n                  self._unpublishedBuffer.maxElementId());\n\n          // the buffered doc was updated, it could move to published\n          var toPublish = comparator(newDoc, maxPublished) < 0;\n\n          // or stays in buffer even after the change\n          var staysInBuffer = (! toPublish && self._safeAppendToBuffer) ||\n                (!toPublish && maxBuffered &&\n                 comparator(newDoc, maxBuffered) <= 0);\n\n          if (toPublish) {\n            self._addPublished(id, newDoc);\n          } else if (staysInBuffer) {\n            // stays in buffer but changes\n            self._unpublishedBuffer.set(id, newDoc);\n          } else {\n            // Throw away from both published set and buffer\n            self._safeAppendToBuffer = false;\n            // Normally this check would have been done in _removeBuffered but\n            // we didn't use it, so we need to do it ourself now.\n            if (! self._unpublishedBuffer.size()) {\n              self._needToPollQuery();\n            }\n          }\n        } else {\n          throw new Error(\"cachedBefore implies either of publishedBefore or bufferedBefore is true.\");\n        }\n      }\n    });\n  },\n  _fetchModifiedDocuments: function () {\n    var self = this;\n    self._registerPhaseChange(PHASE.FETCHING);\n    // Defer, because nothing called from the oplog entry handler may yield,\n    // but fetch() yields.\n    Meteor.defer(finishIfNeedToPollQuery(async function () {\n      while (!self._stopped && !self._needToFetch.empty()) {\n        if (self._phase === PHASE.QUERYING) {\n          // While fetching, we decided to go into QUERYING mode, and then we\n          // saw another oplog entry, so _needToFetch is not empty. But we\n          // shouldn't fetch these documents until AFTER the query is done.\n          break;\n        }\n\n        // Being in steady phase here would be surprising.\n        if (self._phase !== PHASE.FETCHING)\n          throw new Error(\"phase in fetchModifiedDocuments: \" + self._phase);\n\n        self._currentlyFetching = self._needToFetch;\n        var thisGeneration = ++self._fetchGeneration;\n        self._needToFetch = new LocalCollection._IdMap;\n        var waiting = 0;\n\n        let promiseResolver = null;\n        const awaitablePromise = new Promise(r => promiseResolver = r);\n        // This loop is safe, because _currentlyFetching will not be updated\n        // during this loop (in fact, it is never mutated).\n        await self._currentlyFetching.forEachAsync(async function (op, id) {\n          waiting++;\n          await self._mongoHandle._docFetcher.fetch(\n            self._cursorDescription.collectionName,\n            id,\n            op,\n            finishIfNeedToPollQuery(function(err, doc) {\n              if (err) {\n                Meteor._debug('Got exception while fetching documents', err);\n                // If we get an error from the fetcher (eg, trouble\n                // connecting to Mongo), let's just abandon the fetch phase\n                // altogether and fall back to polling. It's not like we're\n                // getting live updates anyway.\n                if (self._phase !== PHASE.QUERYING) {\n                  self._needToPollQuery();\n                }\n                waiting--;\n                // Because fetch() never calls its callback synchronously,\n                // this is safe (ie, we won't call fut.return() before the\n                // forEach is done).\n                if (waiting === 0) promiseResolver();\n                return;\n              }\n\n              try {\n                if (\n                  !self._stopped &&\n                  self._phase === PHASE.FETCHING &&\n                  self._fetchGeneration === thisGeneration\n                ) {\n                  // We re-check the generation in case we've had an explicit\n                  // _pollQuery call (eg, in another fiber) which should\n                  // effectively cancel this round of fetches.  (_pollQuery\n                  // increments the generation.)\n\n                  self._handleDoc(id, doc);\n                }\n              } finally {\n                waiting--;\n                // Because fetch() never calls its callback synchronously,\n                // this is safe (ie, we won't call fut.return() before the\n                // forEach is done).\n                if (waiting === 0) promiseResolver();\n              }\n            })\n          );\n        });\n        await awaitablePromise;\n        // Exit now if we've had a _pollQuery call (here or in another fiber).\n        if (self._phase === PHASE.QUERYING)\n          return;\n        self._currentlyFetching = null;\n      }\n      // We're done fetching, so we can be steady, unless we've had a\n      // _pollQuery call (here or in another fiber).\n      if (self._phase !== PHASE.QUERYING)\n        await self._beSteady();\n    }));\n  },\n  _beSteady: async function () {\n    var self = this;\n    self._registerPhaseChange(PHASE.STEADY);\n    var writes = self._writesToCommitWhenWeReachSteady || [];\n    self._writesToCommitWhenWeReachSteady = [];\n    await self._multiplexer.onFlush(async function () {\n      try {\n        for (const w of writes) {\n          await w.committed();\n        }\n      } catch (e) {\n        console.error(\"_beSteady error\", {writes}, e);\n      }\n    });\n  },\n  _handleOplogEntryQuerying: function (op) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._needToFetch.set(idForOp(op), op);\n    });\n  },\n  _handleOplogEntrySteadyOrFetching: function (op) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      var id = idForOp(op);\n      // If we're already fetching this one, or about to, we can't optimize;\n      // make sure that we fetch it again if necessary.\n\n      if (self._phase === PHASE.FETCHING &&\n          ((self._currentlyFetching && self._currentlyFetching.has(id)) ||\n           self._needToFetch.has(id))) {\n        self._needToFetch.set(id, op);\n        return;\n      }\n\n      if (op.op === 'd') {\n        if (self._published.has(id) ||\n            (self._limit && self._unpublishedBuffer.has(id)))\n          self._removeMatching(id);\n      } else if (op.op === 'i') {\n        if (self._published.has(id))\n          throw new Error(\"insert found for already-existing ID in published\");\n        if (self._unpublishedBuffer && self._unpublishedBuffer.has(id))\n          throw new Error(\"insert found for already-existing ID in buffer\");\n\n        // XXX what if selector yields?  for now it can't but later it could\n        // have $where\n        if (self._matcher.documentMatches(op.o).result)\n          self._addMatching(op.o);\n      } else if (op.op === 'u') {\n        // we are mapping the new oplog format on mongo 5\n        // to what we know better, $set\n        op.o = oplogV2V1Converter(op.o)\n        // Is this a modifier ($set/$unset, which may require us to poll the\n        // database to figure out if the whole document matches the selector) or\n        // a replacement (in which case we can just directly re-evaluate the\n        // selector)?\n        // oplog format has changed on mongodb 5, we have to support both now\n        // diff is the format in Mongo 5+ (oplog v2)\n        var isReplace = !has(op.o, '$set') && !has(op.o, 'diff') && !has(op.o, '$unset');\n        // If this modifier modifies something inside an EJSON custom type (ie,\n        // anything with EJSON$), then we can't try to use\n        // LocalCollection._modify, since that just mutates the EJSON encoding,\n        // not the actual object.\n        var canDirectlyModifyDoc =\n          !isReplace && modifierCanBeDirectlyApplied(op.o);\n\n        var publishedBefore = self._published.has(id);\n        var bufferedBefore = self._limit && self._unpublishedBuffer.has(id);\n\n        if (isReplace) {\n          self._handleDoc(id, Object.assign({_id: id}, op.o));\n        } else if ((publishedBefore || bufferedBefore) &&\n                   canDirectlyModifyDoc) {\n          // Oh great, we actually know what the document is, so we can apply\n          // this directly.\n          var newDoc = self._published.has(id)\n            ? self._published.get(id) : self._unpublishedBuffer.get(id);\n          newDoc = EJSON.clone(newDoc);\n\n          newDoc._id = id;\n          try {\n            LocalCollection._modify(newDoc, op.o);\n          } catch (e) {\n            if (e.name !== \"MinimongoError\")\n              throw e;\n            // We didn't understand the modifier.  Re-fetch.\n            self._needToFetch.set(id, op);\n            if (self._phase === PHASE.STEADY) {\n              self._fetchModifiedDocuments();\n            }\n            return;\n          }\n          self._handleDoc(id, self._sharedProjectionFn(newDoc));\n        } else if (!canDirectlyModifyDoc ||\n                   self._matcher.canBecomeTrueByModifier(op.o) ||\n                   (self._sorter && self._sorter.affectedByModifier(op.o))) {\n          self._needToFetch.set(id, op);\n          if (self._phase === PHASE.STEADY)\n            self._fetchModifiedDocuments();\n        }\n      } else {\n        throw Error(\"XXX SURPRISING OPERATION: \" + op);\n      }\n    });\n  },\n\n  async _runInitialQueryAsync() {\n    var self = this;\n    if (self._stopped)\n      throw new Error(\"oplog stopped surprisingly early\");\n\n    await self._runQuery({initial: true});  // yields\n\n    if (self._stopped)\n      return;  // can happen on queryError\n\n    // Allow observeChanges calls to return. (After this, it's possible for\n    // stop() to be called.)\n    await self._multiplexer.ready();\n\n    await self._doneQuerying();  // yields\n  },\n\n  // Yields!\n  _runInitialQuery: function () {\n    return this._runInitialQueryAsync();\n  },\n\n  // In various circumstances, we may just want to stop processing the oplog and\n  // re-run the initial query, just as if we were a PollingObserveDriver.\n  //\n  // This function may not block, because it is called from an oplog entry\n  // handler.\n  //\n  // XXX We should call this when we detect that we've been in FETCHING for \"too\n  // long\".\n  //\n  // XXX We should call this when we detect Mongo failover (since that might\n  // mean that some of the oplog entries we have processed have been rolled\n  // back). The Node Mongo driver is in the middle of a bunch of huge\n  // refactorings, including the way that it notifies you when primary\n  // changes. Will put off implementing this until driver 1.4 is out.\n  _pollQuery: function () {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      if (self._stopped)\n        return;\n\n      // Yay, we get to forget about all the things we thought we had to fetch.\n      self._needToFetch = new LocalCollection._IdMap;\n      self._currentlyFetching = null;\n      ++self._fetchGeneration;  // ignore any in-flight fetches\n      self._registerPhaseChange(PHASE.QUERYING);\n\n      // Defer so that we don't yield.  We don't need finishIfNeedToPollQuery\n      // here because SwitchedToQuery is not thrown in QUERYING mode.\n      Meteor.defer(async function () {\n        await self._runQuery();\n        await self._doneQuerying();\n      });\n    });\n  },\n\n  // Yields!\n  async _runQueryAsync(options) {\n    var self = this;\n    options = options || {};\n    var newResults, newBuffer;\n\n    // This while loop is just to retry failures.\n    while (true) {\n      // If we've been stopped, we don't have to run anything any more.\n      if (self._stopped)\n        return;\n\n      newResults = new LocalCollection._IdMap;\n      newBuffer = new LocalCollection._IdMap;\n\n      // Query 2x documents as the half excluded from the original query will go\n      // into unpublished buffer to reduce additional Mongo lookups in cases\n      // when documents are removed from the published set and need a\n      // replacement.\n      // XXX needs more thought on non-zero skip\n      // XXX 2 is a \"magic number\" meaning there is an extra chunk of docs for\n      // buffer if such is needed.\n      var cursor = self._cursorForQuery({ limit: self._limit * 2 });\n      try {\n        await cursor.forEach(function (doc, i) {  // yields\n          if (!self._limit || i < self._limit) {\n            newResults.set(doc._id, doc);\n          } else {\n            newBuffer.set(doc._id, doc);\n          }\n        });\n        break;\n      } catch (e) {\n        if (options.initial && typeof(e.code) === 'number') {\n          // This is an error document sent to us by mongod, not a connection\n          // error generated by the client. And we've never seen this query work\n          // successfully. Probably it's a bad selector or something, so we\n          // should NOT retry. Instead, we should halt the observe (which ends\n          // up calling `stop` on us).\n          await self._multiplexer.queryError(e);\n          return;\n        }\n\n        // During failover (eg) if we get an exception we should log and retry\n        // instead of crashing.\n        Meteor._debug(\"Got exception while polling query\", e);\n        await Meteor._sleepForMs(100);\n      }\n    }\n\n    if (self._stopped)\n      return;\n\n    self._publishNewResults(newResults, newBuffer);\n  },\n\n  // Yields!\n  _runQuery: function (options) {\n    return this._runQueryAsync(options);\n  },\n\n  // Transitions to QUERYING and runs another query, or (if already in QUERYING)\n  // ensures that we will query again later.\n  //\n  // This function may not block, because it is called from an oplog entry\n  // handler. However, if we were not already in the QUERYING phase, it throws\n  // an exception that is caught by the closest surrounding\n  // finishIfNeedToPollQuery call; this ensures that we don't continue running\n  // close that was designed for another phase inside PHASE.QUERYING.\n  //\n  // (It's also necessary whenever logic in this file yields to check that other\n  // phases haven't put us into QUERYING mode, though; eg,\n  // _fetchModifiedDocuments does this.)\n  _needToPollQuery: function () {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      if (self._stopped)\n        return;\n\n      // If we're not already in the middle of a query, we can query now\n      // (possibly pausing FETCHING).\n      if (self._phase !== PHASE.QUERYING) {\n        self._pollQuery();\n        throw new SwitchedToQuery;\n      }\n\n      // We're currently in QUERYING. Set a flag to ensure that we run another\n      // query when we're done.\n      self._requeryWhenDoneThisQuery = true;\n    });\n  },\n\n  // Yields!\n  _doneQuerying: async function () {\n    var self = this;\n\n    if (self._stopped)\n      return;\n\n    await self._mongoHandle._oplogHandle.waitUntilCaughtUp();\n\n    if (self._stopped)\n      return;\n\n    if (self._phase !== PHASE.QUERYING)\n      throw Error(\"Phase unexpectedly \" + self._phase);\n\n    if (self._requeryWhenDoneThisQuery) {\n      self._requeryWhenDoneThisQuery = false;\n      self._pollQuery();\n    } else if (self._needToFetch.empty()) {\n      await self._beSteady();\n    } else {\n      self._fetchModifiedDocuments();\n    }\n  },\n\n  _cursorForQuery: function (optionsOverwrite) {\n    var self = this;\n    return Meteor._noYieldsAllowed(function () {\n      // The query we run is almost the same as the cursor we are observing,\n      // with a few changes. We need to read all the fields that are relevant to\n      // the selector, not just the fields we are going to publish (that's the\n      // \"shared\" projection). And we don't want to apply any transform in the\n      // cursor, because observeChanges shouldn't use the transform.\n      var options = Object.assign({}, self._cursorDescription.options);\n\n      // Allow the caller to modify the options. Useful to specify different\n      // skip and limit values.\n      Object.assign(options, optionsOverwrite);\n\n      options.fields = self._sharedProjection;\n      delete options.transform;\n      // We are NOT deep cloning fields or selector here, which should be OK.\n      var description = new CursorDescription(\n        self._cursorDescription.collectionName,\n        self._cursorDescription.selector,\n        options);\n      return new Cursor(self._mongoHandle, description);\n    });\n  },\n\n\n  // Replace self._published with newResults (both are IdMaps), invoking observe\n  // callbacks on the multiplexer.\n  // Replace self._unpublishedBuffer with newBuffer.\n  //\n  // XXX This is very similar to LocalCollection._diffQueryUnorderedChanges. We\n  // should really: (a) Unify IdMap and OrderedDict into Unordered/OrderedDict\n  // (b) Rewrite diff.js to use these classes instead of arrays and objects.\n  _publishNewResults: function (newResults, newBuffer) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n\n      // If the query is limited and there is a buffer, shut down so it doesn't\n      // stay in a way.\n      if (self._limit) {\n        self._unpublishedBuffer.clear();\n      }\n\n      // First remove anything that's gone. Be careful not to modify\n      // self._published while iterating over it.\n      var idsToRemove = [];\n      self._published.forEach(function (doc, id) {\n        if (!newResults.has(id))\n          idsToRemove.push(id);\n      });\n      idsToRemove.forEach(function (id) {\n        self._removePublished(id);\n      });\n\n      // Now do adds and changes.\n      // If self has a buffer and limit, the new fetched result will be\n      // limited correctly as the query has sort specifier.\n      newResults.forEach(function (doc, id) {\n        self._handleDoc(id, doc);\n      });\n\n      // Sanity-check that everything we tried to put into _published ended up\n      // there.\n      // XXX if this is slow, remove it later\n      if (self._published.size() !== newResults.size()) {\n        Meteor._debug('The Mongo server and the Meteor query disagree on how ' +\n          'many documents match your query. Cursor description: ',\n          self._cursorDescription);\n      }\n      \n      self._published.forEach(function (doc, id) {\n        if (!newResults.has(id))\n          throw Error(\"_published has a doc that newResults doesn't; \" + id);\n      });\n\n      // Finally, replace the buffer\n      newBuffer.forEach(function (doc, id) {\n        self._addBuffered(id, doc);\n      });\n\n      self._safeAppendToBuffer = newBuffer.size() < self._limit;\n    });\n  },\n\n  // This stop function is invoked from the onStop of the ObserveMultiplexer, so\n  // it shouldn't actually be possible to call it until the multiplexer is\n  // ready.\n  //\n  // It's important to check self._stopped after every call in this file that\n  // can yield!\n  _stop: async function() {\n    var self = this;\n    if (self._stopped)\n      return;\n    self._stopped = true;\n\n    // Note: we *don't* use multiplexer.onFlush here because this stop\n    // callback is actually invoked by the multiplexer itself when it has\n    // determined that there are no handles left. So nothing is actually going\n    // to get flushed (and it's probably not valid to call methods on the\n    // dying multiplexer).\n    for (const w of self._writesToCommitWhenWeReachSteady) {\n      await w.committed();\n    }\n    self._writesToCommitWhenWeReachSteady = null;\n\n    // Proactively drop references to potentially big things.\n    self._published = null;\n    self._unpublishedBuffer = null;\n    self._needToFetch = null;\n    self._currentlyFetching = null;\n    self._oplogEntryHandle = null;\n    self._listenersHandle = null;\n\n    Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\n        \"mongo-livedata\", \"observe-drivers-oplog\", -1);\n\n    for await (const handle of self._stopHandles) {\n      await handle.stop();\n    }\n  },\n  stop: async function() {\n    const self = this;\n    return await self._stop();\n  },\n\n  _registerPhaseChange: function (phase) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      var now = new Date;\n\n      if (self._phase) {\n        var timeDiff = now - self._phaseStartTime;\n        Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\n          \"mongo-livedata\", \"time-spent-in-\" + self._phase + \"-phase\", timeDiff);\n      }\n\n      self._phase = phase;\n      self._phaseStartTime = now;\n    });\n  }\n});\n\n// Does our oplog tailing code support this cursor? For now, we are being very\n// conservative and allowing only simple queries with simple options.\n// (This is a \"static method\".)\nOplogObserveDriver.cursorSupported = function (cursorDescription, matcher) {\n  // First, check the options.\n  var options = cursorDescription.options;\n\n  // Did the user say no explicitly?\n  // underscored version of the option is COMPAT with 1.2\n  if (options.disableOplog || options._disableOplog)\n    return false;\n\n  // skip is not supported: to support it we would need to keep track of all\n  // \"skipped\" documents or at least their ids.\n  // limit w/o a sort specifier is not supported: current implementation needs a\n  // deterministic way to order documents.\n  if (options.skip || (options.limit && !options.sort)) return false;\n\n  // If a fields projection option is given check if it is supported by\n  // minimongo (some operators are not supported).\n  const fields = options.fields || options.projection;\n  if (fields) {\n    try {\n      LocalCollection._checkSupportedProjection(fields);\n    } catch (e) {\n      if (e.name === \"MinimongoError\") {\n        return false;\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  // We don't allow the following selectors:\n  //   - $where (not confident that we provide the same JS environment\n  //             as Mongo, and can yield!)\n  //   - $near (has \"interesting\" properties in MongoDB, like the possibility\n  //            of returning an ID multiple times, though even polling maybe\n  //            have a bug there)\n  //           XXX: once we support it, we would need to think more on how we\n  //           initialize the comparators when we create the driver.\n  return !matcher.hasWhere() && !matcher.hasGeoQuery();\n};\n\nvar modifierCanBeDirectlyApplied = function (modifier) {\n  return Object.entries(modifier).every(function ([operation, fields]) {\n    return Object.entries(fields).every(function ([field, value]) {\n      return !/EJSON\\$/.test(field);\n    });\n  });\n};\n\nMongoInternals.OplogObserveDriver = OplogObserveDriver;"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"9de1088c0d5797c562d4446802d4435c867352a8"}
