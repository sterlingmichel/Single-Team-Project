{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/smichel/Projects/Team-5-Project/database/packages/autoupdate/autoupdate_server.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"packages/autoupdate/autoupdate_server.js","filename":"/Users/smichel/Projects/Team-5-Project/database/packages/autoupdate/autoupdate_server.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/smichel/Projects/Team-5-Project/database","root":"/Users/smichel/Projects/Team-5-Project/database","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/smichel/Projects/Team-5-Project/database/packages/autoupdate/autoupdate_server.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/autoupdate/autoupdate_server.js"}},"code":"!module.wrapAsync(async function (module1, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module1.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    module1.export({\n      Autoupdate: () => Autoupdate\n    });\n    let ClientVersions;\n    module1.link(\"./client_versions.js\", {\n      ClientVersions(v) {\n        ClientVersions = v;\n      }\n    }, 0);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const Autoupdate = __meteor_runtime_config__.autoupdate = {\n      // Map from client architectures (web.browser, web.browser.legacy,\n      // web.cordova) to version fields { version, versionRefreshable,\n      // versionNonRefreshable, refreshable } that will be stored in\n      // ClientVersions documents (whose IDs are client architectures). This\n      // data gets serialized into the boilerplate because it's stored in\n      // __meteor_runtime_config__.autoupdate.versions.\n      versions: {}\n    };\n    // Stores acceptable client versions.\n    const clientVersions = new ClientVersions();\n\n    // The client hash includes __meteor_runtime_config__, so wait until\n    // all packages have loaded and have had a chance to populate the\n    // runtime config before using the client hash as our default auto\n    // update version id.\n\n    // Note: Tests allow people to override Autoupdate.autoupdateVersion before\n    // startup.\n    Autoupdate.autoupdateVersion = null;\n    Autoupdate.autoupdateVersionRefreshable = null;\n    Autoupdate.autoupdateVersionCordova = null;\n    Autoupdate.appId = __meteor_runtime_config__.appId = process.env.APP_ID;\n    var syncQueue = new Meteor._AsynchronousQueue();\n    async function updateVersions(shouldReloadClientProgram) {\n      // Step 1: load the current client program on the server\n      if (shouldReloadClientProgram) {\n        await WebAppInternals.reloadClientPrograms();\n      }\n      const {\n        // If the AUTOUPDATE_VERSION environment variable is defined, it takes\n        // precedence, but Autoupdate.autoupdateVersion is still supported as\n        // a fallback. In most cases neither of these values will be defined.\n        AUTOUPDATE_VERSION = Autoupdate.autoupdateVersion\n      } = process.env;\n\n      // Step 2: update __meteor_runtime_config__.autoupdate.versions.\n      const clientArchs = Object.keys(WebApp.clientPrograms);\n      clientArchs.forEach(arch => {\n        Autoupdate.versions[arch] = {\n          version: AUTOUPDATE_VERSION || WebApp.calculateClientHash(arch),\n          versionRefreshable: AUTOUPDATE_VERSION || WebApp.calculateClientHashRefreshable(arch),\n          versionNonRefreshable: AUTOUPDATE_VERSION || WebApp.calculateClientHashNonRefreshable(arch),\n          versionReplaceable: AUTOUPDATE_VERSION || WebApp.calculateClientHashReplaceable(arch),\n          versionHmr: WebApp.clientPrograms[arch].hmrVersion\n        };\n      });\n\n      // Step 3: form the new client boilerplate which contains the updated\n      // assets and __meteor_runtime_config__.\n      if (shouldReloadClientProgram) {\n        await WebAppInternals.generateBoilerplate();\n      }\n\n      // Step 4: update the ClientVersions collection.\n      // We use `onListening` here because we need to use\n      // `WebApp.getRefreshableAssets`, which is only set after\n      // `WebApp.generateBoilerplate` is called by `main` in webapp.\n      WebApp.onListening(() => {\n        clientArchs.forEach(arch => {\n          const payload = _objectSpread(_objectSpread({}, Autoupdate.versions[arch]), {}, {\n            assets: WebApp.getRefreshableAssets(arch)\n          });\n          clientVersions.set(arch, payload);\n        });\n      });\n    }\n    Meteor.publish(\"meteor_autoupdate_clientVersions\", function (appId) {\n      // `null` happens when a client doesn't have an appId and passes\n      // `undefined` to `Meteor.subscribe`. `undefined` is translated to\n      // `null` as JSON doesn't have `undefined.\n      check(appId, Match.OneOf(String, undefined, null));\n\n      // Don't notify clients using wrong appId such as mobile apps built with a\n      // different server but pointing at the same local url\n      if (Autoupdate.appId && appId && Autoupdate.appId !== appId) return [];\n      const stop = clientVersions.watch((version, isNew) => {\n        (isNew ? this.added : this.changed).call(this, \"meteor_autoupdate_clientVersions\", version._id, version);\n      });\n      this.onStop(() => stop());\n      this.ready();\n    }, {\n      is_auto: true\n    });\n    Meteor.startup(async function () {\n      await updateVersions(false);\n\n      // Force any connected clients that are still looking for these older\n      // document IDs to reload.\n      [\"version\", \"version-refreshable\", \"version-cordova\"].forEach(_id => {\n        clientVersions.set(_id, {\n          version: \"outdated\"\n        });\n      });\n    });\n    function enqueueVersionsRefresh() {\n      syncQueue.queueTask(async function () {\n        await updateVersions(true);\n      });\n    }\n    const setupListeners = () => {\n      let onMessage;\n      module1.link(\"meteor/inter-process-messaging\", {\n        onMessage(v) {\n          onMessage = v;\n        }\n      }, 1);\n      onMessage(\"client-refresh\", enqueueVersionsRefresh);\n\n      // Another way to tell the process to refresh: send SIGHUP signal\n      process.on('SIGHUP', Meteor.bindEnvironment(function () {\n        enqueueVersionsRefresh();\n      }, \"handling SIGHUP signal for refresh\"));\n    };\n    if (Meteor._isFibersEnabled) {\n      var Future = Npm.require(\"fibers/future\");\n      var fut = new Future();\n\n      // We only want 'refresh' to trigger 'updateVersions' AFTER onListen,\n      // so we add a queued task that waits for onListen before 'refresh' can queue\n      // tasks. Note that the `onListening` callbacks do not fire until after\n      // Meteor.startup, so there is no concern that the 'updateVersions' calls from\n      // 'refresh' will overlap with the `updateVersions` call from Meteor.startup.\n\n      syncQueue.queueTask(function () {\n        fut.wait();\n      });\n      WebApp.onListening(function () {\n        fut.return();\n      });\n      setupListeners();\n    } else {\n      WebApp.onListening(function () {\n        Promise.resolve(setupListeners());\n      });\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module1","link","default","v","export","Autoupdate","ClientVersions","__reifyWaitForDeps__","__meteor_runtime_config__","autoupdate","versions","clientVersions","autoupdateVersion","autoupdateVersionRefreshable","autoupdateVersionCordova","appId","process","env","APP_ID","syncQueue","Meteor","_AsynchronousQueue","updateVersions","shouldReloadClientProgram","WebAppInternals","reloadClientPrograms","AUTOUPDATE_VERSION","clientArchs","Object","keys","WebApp","clientPrograms","forEach","arch","version","calculateClientHash","versionRefreshable","calculateClientHashRefreshable","versionNonRefreshable","calculateClientHashNonRefreshable","versionReplaceable","calculateClientHashReplaceable","versionHmr","hmrVersion","generateBoilerplate","onListening","payload","assets","getRefreshableAssets","set","publish","check","Match","OneOf","String","undefined","stop","watch","isNew","added","changed","call","_id","onStop","ready","is_auto","startup","enqueueVersionsRefresh","queueTask","setupListeners","onMessage","on","bindEnvironment","_isFibersEnabled","Future","Npm","require","fut","wait","return","Promise","resolve","__reify_async_result__","_reifyError","self","async"],"sources":["packages/autoupdate/autoupdate_server.js"],"sourcesContent":["// Publish the current client versions for each client architecture\n// (web.browser, web.browser.legacy, web.cordova). When a client observes\n// a change in the versions associated with its client architecture,\n// it will refresh itself, either by swapping out CSS assets or by\n// reloading the page. Changes to the replaceable version are ignored\n// and handled by the hot-module-replacement package.\n//\n// There are four versions for any given client architecture: `version`,\n// `versionRefreshable`, `versionNonRefreshable`, and\n// `versionReplaceable`. The refreshable version is a hash of just the\n// client resources that are refreshable, such as CSS. The replaceable\n// version is a hash of files that can be updated with HMR. The\n// non-refreshable version is a hash of the rest of the client assets,\n// excluding the refreshable ones: HTML, JS that is not replaceable, and\n// static files in the `public` directory. The `version` version is a\n// combined hash of everything.\n//\n// If the environment variable `AUTOUPDATE_VERSION` is set, it will be\n// used in place of all client versions. You can use this variable to\n// control when the client reloads. For example, if you want to force a\n// reload only after major changes, use a custom AUTOUPDATE_VERSION and\n// change it only when something worth pushing to clients happens.\n//\n// The server publishes a `meteor_autoupdate_clientVersions` collection.\n// The ID of each document is the client architecture, and the fields of\n// the document are the versions described above.\n\nimport { ClientVersions } from \"./client_versions.js\";\n\nexport const Autoupdate = __meteor_runtime_config__.autoupdate = {\n  // Map from client architectures (web.browser, web.browser.legacy,\n  // web.cordova) to version fields { version, versionRefreshable,\n  // versionNonRefreshable, refreshable } that will be stored in\n  // ClientVersions documents (whose IDs are client architectures). This\n  // data gets serialized into the boilerplate because it's stored in\n  // __meteor_runtime_config__.autoupdate.versions.\n  versions: {}\n};\n\n// Stores acceptable client versions.\nconst clientVersions = new ClientVersions();\n\n// The client hash includes __meteor_runtime_config__, so wait until\n// all packages have loaded and have had a chance to populate the\n// runtime config before using the client hash as our default auto\n// update version id.\n\n// Note: Tests allow people to override Autoupdate.autoupdateVersion before\n// startup.\nAutoupdate.autoupdateVersion = null;\nAutoupdate.autoupdateVersionRefreshable = null;\nAutoupdate.autoupdateVersionCordova = null;\nAutoupdate.appId = __meteor_runtime_config__.appId = process.env.APP_ID;\n\nvar syncQueue = new Meteor._AsynchronousQueue();\n\nasync function updateVersions(shouldReloadClientProgram) {\n  // Step 1: load the current client program on the server\n  if (shouldReloadClientProgram) {\n    await WebAppInternals.reloadClientPrograms();\n  }\n\n  const {\n    // If the AUTOUPDATE_VERSION environment variable is defined, it takes\n    // precedence, but Autoupdate.autoupdateVersion is still supported as\n    // a fallback. In most cases neither of these values will be defined.\n    AUTOUPDATE_VERSION = Autoupdate.autoupdateVersion\n  } = process.env;\n\n  // Step 2: update __meteor_runtime_config__.autoupdate.versions.\n  const clientArchs = Object.keys(WebApp.clientPrograms);\n  clientArchs.forEach(arch => {\n    Autoupdate.versions[arch] = {\n      version: AUTOUPDATE_VERSION ||\n        WebApp.calculateClientHash(arch),\n      versionRefreshable: AUTOUPDATE_VERSION ||\n        WebApp.calculateClientHashRefreshable(arch),\n      versionNonRefreshable: AUTOUPDATE_VERSION ||\n        WebApp.calculateClientHashNonRefreshable(arch),\n      versionReplaceable: AUTOUPDATE_VERSION ||\n        WebApp.calculateClientHashReplaceable(arch),\n      versionHmr: WebApp.clientPrograms[arch].hmrVersion\n    };\n  });\n\n  // Step 3: form the new client boilerplate which contains the updated\n  // assets and __meteor_runtime_config__.\n  if (shouldReloadClientProgram) {\n    await WebAppInternals.generateBoilerplate();\n  }\n\n  // Step 4: update the ClientVersions collection.\n  // We use `onListening` here because we need to use\n  // `WebApp.getRefreshableAssets`, which is only set after\n  // `WebApp.generateBoilerplate` is called by `main` in webapp.\n  WebApp.onListening(() => {\n    clientArchs.forEach(arch => {\n      const payload = {\n        ...Autoupdate.versions[arch],\n        assets: WebApp.getRefreshableAssets(arch),\n      };\n\n      clientVersions.set(arch, payload);\n    });\n  });\n}\n\nMeteor.publish(\n  \"meteor_autoupdate_clientVersions\",\n  function (appId) {\n    // `null` happens when a client doesn't have an appId and passes\n    // `undefined` to `Meteor.subscribe`. `undefined` is translated to\n    // `null` as JSON doesn't have `undefined.\n    check(appId, Match.OneOf(String, undefined, null));\n\n    // Don't notify clients using wrong appId such as mobile apps built with a\n    // different server but pointing at the same local url\n    if (Autoupdate.appId && appId && Autoupdate.appId !== appId)\n      return [];\n\n    const stop = clientVersions.watch((version, isNew) => {\n      (isNew ? this.added : this.changed)\n        .call(this, \"meteor_autoupdate_clientVersions\", version._id, version);\n    });\n\n    this.onStop(() => stop());\n    this.ready();\n  },\n  {is_auto: true}\n);\n\nMeteor.startup(async function () {\n  await updateVersions(false);\n\n  // Force any connected clients that are still looking for these older\n  // document IDs to reload.\n  [\"version\",\n   \"version-refreshable\",\n   \"version-cordova\",\n  ].forEach(_id => {\n    clientVersions.set(_id, {\n      version: \"outdated\"\n    });\n  });\n});\n\nfunction enqueueVersionsRefresh() {\n  syncQueue.queueTask(async function () {\n    await updateVersions(true);\n  });\n}\n\nconst setupListeners = () => {\n  // Listen for messages pertaining to the client-refresh topic.\n  import { onMessage } from \"meteor/inter-process-messaging\";\n  onMessage(\"client-refresh\", enqueueVersionsRefresh);\n\n  // Another way to tell the process to refresh: send SIGHUP signal\n  process.on('SIGHUP', Meteor.bindEnvironment(function () {\n    enqueueVersionsRefresh();\n  }, \"handling SIGHUP signal for refresh\"));\n};\n\nif (Meteor._isFibersEnabled) {\n  var Future = Npm.require(\"fibers/future\");\n\n  var fut = new Future();\n\n  // We only want 'refresh' to trigger 'updateVersions' AFTER onListen,\n  // so we add a queued task that waits for onListen before 'refresh' can queue\n  // tasks. Note that the `onListening` callbacks do not fire until after\n  // Meteor.startup, so there is no concern that the 'updateVersions' calls from\n  // 'refresh' will overlap with the `updateVersions` call from Meteor.startup.\n\n  syncQueue.queueTask(function () {\n    fut.wait();\n  });\n\n  WebApp.onListening(function () {\n    fut.return();\n  });\n\n  setupListeners();\n\n} else {\n  WebApp.onListening(function () {\n    Promise.resolve(setupListeners());\n  });\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"177f507a7087c18d83c021d30ced03bada88d01c"}
