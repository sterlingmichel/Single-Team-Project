{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/smichel/Projects/Team-5-Project/database/packages/ddp-server/livedata_server.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"packages/ddp-server/livedata_server.js","filename":"/Users/smichel/Projects/Team-5-Project/database/packages/ddp-server/livedata_server.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/smichel/Projects/Team-5-Project/database","root":"/Users/smichel/Projects/Team-5-Project/database","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/smichel/Projects/Team-5-Project/database/packages/ddp-server/livedata_server.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/ddp-server/livedata_server.js"}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    DDPServer = {};\n\n    // Publication strategies define how we handle data from published cursors at the collection level\n    // This allows someone to:\n    // - Choose a trade-off between client-server bandwidth and server memory usage\n    // - Implement special (non-mongo) collections like volatile message queues\n    const publicationStrategies = {\n      // SERVER_MERGE is the default strategy.\n      // When using this strategy, the server maintains a copy of all data a connection is subscribed to.\n      // This allows us to only send deltas over multiple publications.\n      SERVER_MERGE: {\n        useDummyDocumentView: false,\n        useCollectionView: true,\n        doAccountingForCollection: true\n      },\n      // The NO_MERGE_NO_HISTORY strategy results in the server sending all publication data\n      // directly to the client. It does not remember what it has previously sent\n      // to it will not trigger removed messages when a subscription is stopped.\n      // This should only be chosen for special use cases like send-and-forget queues.\n      NO_MERGE_NO_HISTORY: {\n        useDummyDocumentView: false,\n        useCollectionView: false,\n        doAccountingForCollection: false\n      },\n      // NO_MERGE is similar to NO_MERGE_NO_HISTORY but the server will remember the IDs it has\n      // sent to the client so it can remove them when a subscription is stopped.\n      // This strategy can be used when a collection is only used in a single publication.\n      NO_MERGE: {\n        useDummyDocumentView: false,\n        useCollectionView: false,\n        doAccountingForCollection: true\n      },\n      // NO_MERGE_MULTI is similar to `NO_MERGE`, but it does track whether a document is\n      // used by multiple publications. This has some memory overhead, but it still does not do\n      // diffing so it's faster and slimmer than SERVER_MERGE.\n      NO_MERGE_MULTI: {\n        useDummyDocumentView: true,\n        useCollectionView: true,\n        doAccountingForCollection: true\n      }\n    };\n    DDPServer.publicationStrategies = publicationStrategies;\n\n    // This file contains classes:\n    // * Session - The server's connection to a single DDP client\n    // * Subscription - A single subscription for a single client\n    // * Server - An entire server that may talk to > 1 client. A DDP endpoint.\n    //\n    // Session and Subscription are file scope. For now, until we freeze\n    // the interface, Server is package scope (in the future it should be\n    // exported).\n    var DummyDocumentView = function () {\n      var self = this;\n      self.existsIn = new Set(); // set of subscriptionHandle\n      self.dataByKey = new Map(); // key-> [ {subscriptionHandle, value} by precedence]\n    };\n    Object.assign(DummyDocumentView.prototype, {\n      getFields: function () {\n        return {};\n      },\n      clearField: function (subscriptionHandle, key, changeCollector) {\n        changeCollector[key] = undefined;\n      },\n      changeField: function (subscriptionHandle, key, value, changeCollector, isAdd) {\n        changeCollector[key] = value;\n      }\n    });\n\n    // Represents a single document in a SessionCollectionView\n    var SessionDocumentView = function () {\n      var self = this;\n      self.existsIn = new Set(); // set of subscriptionHandle\n      self.dataByKey = new Map(); // key-> [ {subscriptionHandle, value} by precedence]\n    };\n    DDPServer._SessionDocumentView = SessionDocumentView;\n    DDPServer._getCurrentFence = function () {\n      let currentInvocation = this._CurrentWriteFence.get();\n      if (currentInvocation) {\n        return currentInvocation;\n      }\n      currentInvocation = DDP._CurrentMethodInvocation.get();\n      return currentInvocation ? currentInvocation.fence : undefined;\n    };\n    _.extend(SessionDocumentView.prototype, {\n      getFields: function () {\n        var self = this;\n        var ret = {};\n        self.dataByKey.forEach(function (precedenceList, key) {\n          ret[key] = precedenceList[0].value;\n        });\n        return ret;\n      },\n      clearField: function (subscriptionHandle, key, changeCollector) {\n        var self = this;\n        // Publish API ignores _id if present in fields\n        if (key === \"_id\") return;\n        var precedenceList = self.dataByKey.get(key);\n\n        // It's okay to clear fields that didn't exist. No need to throw\n        // an error.\n        if (!precedenceList) return;\n        var removedValue = undefined;\n        for (var i = 0; i < precedenceList.length; i++) {\n          var precedence = precedenceList[i];\n          if (precedence.subscriptionHandle === subscriptionHandle) {\n            // The view's value can only change if this subscription is the one that\n            // used to have precedence.\n            if (i === 0) removedValue = precedence.value;\n            precedenceList.splice(i, 1);\n            break;\n          }\n        }\n        if (precedenceList.length === 0) {\n          self.dataByKey.delete(key);\n          changeCollector[key] = undefined;\n        } else if (removedValue !== undefined && !EJSON.equals(removedValue, precedenceList[0].value)) {\n          changeCollector[key] = precedenceList[0].value;\n        }\n      },\n      changeField: function (subscriptionHandle, key, value, changeCollector, isAdd) {\n        var self = this;\n        // Publish API ignores _id if present in fields\n        if (key === \"_id\") return;\n\n        // Don't share state with the data passed in by the user.\n        value = EJSON.clone(value);\n        if (!self.dataByKey.has(key)) {\n          self.dataByKey.set(key, [{\n            subscriptionHandle: subscriptionHandle,\n            value: value\n          }]);\n          changeCollector[key] = value;\n          return;\n        }\n        var precedenceList = self.dataByKey.get(key);\n        var elt;\n        if (!isAdd) {\n          elt = precedenceList.find(function (precedence) {\n            return precedence.subscriptionHandle === subscriptionHandle;\n          });\n        }\n        if (elt) {\n          if (elt === precedenceList[0] && !EJSON.equals(value, elt.value)) {\n            // this subscription is changing the value of this field.\n            changeCollector[key] = value;\n          }\n          elt.value = value;\n        } else {\n          // this subscription is newly caring about this field\n          precedenceList.push({\n            subscriptionHandle: subscriptionHandle,\n            value: value\n          });\n        }\n      }\n    });\n\n    /**\n     * Represents a client's view of a single collection\n     * @param {String} collectionName Name of the collection it represents\n     * @param {Object.<String, Function>} sessionCallbacks The callbacks for added, changed, removed\n     * @class SessionCollectionView\n     */\n    var SessionCollectionView = function (collectionName, sessionCallbacks) {\n      var self = this;\n      self.collectionName = collectionName;\n      self.documents = new Map();\n      self.callbacks = sessionCallbacks;\n    };\n    DDPServer._SessionCollectionView = SessionCollectionView;\n    Object.assign(SessionCollectionView.prototype, {\n      isEmpty: function () {\n        var self = this;\n        return self.documents.size === 0;\n      },\n      diff: function (previous) {\n        var self = this;\n        DiffSequence.diffMaps(previous.documents, self.documents, {\n          both: _.bind(self.diffDocument, self),\n          rightOnly: function (id, nowDV) {\n            self.callbacks.added(self.collectionName, id, nowDV.getFields());\n          },\n          leftOnly: function (id, prevDV) {\n            self.callbacks.removed(self.collectionName, id);\n          }\n        });\n      },\n      diffDocument: function (id, prevDV, nowDV) {\n        var self = this;\n        var fields = {};\n        DiffSequence.diffObjects(prevDV.getFields(), nowDV.getFields(), {\n          both: function (key, prev, now) {\n            if (!EJSON.equals(prev, now)) fields[key] = now;\n          },\n          rightOnly: function (key, now) {\n            fields[key] = now;\n          },\n          leftOnly: function (key, prev) {\n            fields[key] = undefined;\n          }\n        });\n        self.callbacks.changed(self.collectionName, id, fields);\n      },\n      added: function (subscriptionHandle, id, fields) {\n        var self = this;\n        var docView = self.documents.get(id);\n        var added = false;\n        if (!docView) {\n          added = true;\n          if (Meteor.server.getPublicationStrategy(this.collectionName).useDummyDocumentView) {\n            docView = new DummyDocumentView();\n          } else {\n            docView = new SessionDocumentView();\n          }\n          self.documents.set(id, docView);\n        }\n        docView.existsIn.add(subscriptionHandle);\n        var changeCollector = {};\n        _.each(fields, function (value, key) {\n          docView.changeField(subscriptionHandle, key, value, changeCollector, true);\n        });\n        if (added) self.callbacks.added(self.collectionName, id, changeCollector);else self.callbacks.changed(self.collectionName, id, changeCollector);\n      },\n      changed: function (subscriptionHandle, id, changed) {\n        var self = this;\n        var changedResult = {};\n        var docView = self.documents.get(id);\n        if (!docView) throw new Error(\"Could not find element with id \" + id + \" to change\");\n        _.each(changed, function (value, key) {\n          if (value === undefined) docView.clearField(subscriptionHandle, key, changedResult);else docView.changeField(subscriptionHandle, key, value, changedResult);\n        });\n        self.callbacks.changed(self.collectionName, id, changedResult);\n      },\n      removed: function (subscriptionHandle, id) {\n        var self = this;\n        var docView = self.documents.get(id);\n        if (!docView) {\n          var err = new Error(\"Removed nonexistent document \" + id);\n          throw err;\n        }\n        docView.existsIn.delete(subscriptionHandle);\n        if (docView.existsIn.size === 0) {\n          // it is gone from everyone\n          self.callbacks.removed(self.collectionName, id);\n          self.documents.delete(id);\n        } else {\n          var changed = {};\n          // remove this subscription from every precedence list\n          // and record the changes\n          docView.dataByKey.forEach(function (precedenceList, key) {\n            docView.clearField(subscriptionHandle, key, changed);\n          });\n          self.callbacks.changed(self.collectionName, id, changed);\n        }\n      }\n    });\n\n    /******************************************************************************/\n    /* Session                                                                    */\n    /******************************************************************************/\n\n    var Session = function (server, version, socket, options) {\n      var self = this;\n      self.id = Random.id();\n      self.server = server;\n      self.version = version;\n      self.initialized = false;\n      self.socket = socket;\n\n      // Set to null when the session is destroyed. Multiple places below\n      // use this to determine if the session is alive or not.\n      self.inQueue = new Meteor._DoubleEndedQueue();\n      self.blocked = false;\n      self.workerRunning = false;\n      self.cachedUnblock = null;\n\n      // Sub objects for active subscriptions\n      self._namedSubs = new Map();\n      self._universalSubs = [];\n      self.userId = null;\n      self.collectionViews = new Map();\n\n      // Set this to false to not send messages when collectionViews are\n      // modified. This is done when rerunning subs in _setUserId and those messages\n      // are calculated via a diff instead.\n      self._isSending = true;\n\n      // If this is true, don't start a newly-created universal publisher on this\n      // session. The session will take care of starting it when appropriate.\n      self._dontStartNewUniversalSubs = false;\n\n      // When we are rerunning subscriptions, any ready messages\n      // we want to buffer up for when we are done rerunning subscriptions\n      self._pendingReady = [];\n\n      // List of callbacks to call when this connection is closed.\n      self._closeCallbacks = [];\n\n      // XXX HACK: If a sockjs connection, save off the URL. This is\n      // temporary and will go away in the near future.\n      self._socketUrl = socket.url;\n\n      // Allow tests to disable responding to pings.\n      self._respondToPings = options.respondToPings;\n\n      // This object is the public interface to the session. In the public\n      // API, it is called the `connection` object.  Internally we call it\n      // a `connectionHandle` to avoid ambiguity.\n      self.connectionHandle = {\n        id: self.id,\n        close: function () {\n          self.close();\n        },\n        onClose: function (fn) {\n          var cb = Meteor.bindEnvironment(fn, \"connection onClose callback\");\n          if (self.inQueue) {\n            self._closeCallbacks.push(cb);\n          } else {\n            // if we're already closed, call the callback.\n            Meteor.defer(cb);\n          }\n        },\n        clientAddress: self._clientAddress(),\n        httpHeaders: self.socket.headers\n      };\n      self.send({\n        msg: 'connected',\n        session: self.id\n      });\n\n      // On initial connect, spin up all the universal publishers.\n      self.startUniversalSubs();\n      if (version !== 'pre1' && options.heartbeatInterval !== 0) {\n        // We no longer need the low level timeout because we have heartbeats.\n        socket.setWebsocketTimeout(0);\n        self.heartbeat = new DDPCommon.Heartbeat({\n          heartbeatInterval: options.heartbeatInterval,\n          heartbeatTimeout: options.heartbeatTimeout,\n          onTimeout: function () {\n            self.close();\n          },\n          sendPing: function () {\n            self.send({\n              msg: 'ping'\n            });\n          }\n        });\n        self.heartbeat.start();\n      }\n      Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\"livedata\", \"sessions\", 1);\n    };\n    Object.assign(Session.prototype, {\n      sendReady: function (subscriptionIds) {\n        var self = this;\n        if (self._isSending) {\n          self.send({\n            msg: \"ready\",\n            subs: subscriptionIds\n          });\n        } else {\n          _.each(subscriptionIds, function (subscriptionId) {\n            self._pendingReady.push(subscriptionId);\n          });\n        }\n      },\n      _canSend(collectionName) {\n        return this._isSending || !this.server.getPublicationStrategy(collectionName).useCollectionView;\n      },\n      sendAdded(collectionName, id, fields) {\n        if (this._canSend(collectionName)) {\n          this.send({\n            msg: 'added',\n            collection: collectionName,\n            id,\n            fields\n          });\n        }\n      },\n      sendChanged(collectionName, id, fields) {\n        if (_.isEmpty(fields)) return;\n        if (this._canSend(collectionName)) {\n          this.send({\n            msg: \"changed\",\n            collection: collectionName,\n            id,\n            fields\n          });\n        }\n      },\n      sendRemoved(collectionName, id) {\n        if (this._canSend(collectionName)) {\n          this.send({\n            msg: \"removed\",\n            collection: collectionName,\n            id\n          });\n        }\n      },\n      getSendCallbacks: function () {\n        var self = this;\n        return {\n          added: _.bind(self.sendAdded, self),\n          changed: _.bind(self.sendChanged, self),\n          removed: _.bind(self.sendRemoved, self)\n        };\n      },\n      getCollectionView: function (collectionName) {\n        var self = this;\n        var ret = self.collectionViews.get(collectionName);\n        if (!ret) {\n          ret = new SessionCollectionView(collectionName, self.getSendCallbacks());\n          self.collectionViews.set(collectionName, ret);\n        }\n        return ret;\n      },\n      added(subscriptionHandle, collectionName, id, fields) {\n        if (this.server.getPublicationStrategy(collectionName).useCollectionView) {\n          const view = this.getCollectionView(collectionName);\n          view.added(subscriptionHandle, id, fields);\n        } else {\n          this.sendAdded(collectionName, id, fields);\n        }\n      },\n      removed(subscriptionHandle, collectionName, id) {\n        if (this.server.getPublicationStrategy(collectionName).useCollectionView) {\n          const view = this.getCollectionView(collectionName);\n          view.removed(subscriptionHandle, id);\n          if (view.isEmpty()) {\n            this.collectionViews.delete(collectionName);\n          }\n        } else {\n          this.sendRemoved(collectionName, id);\n        }\n      },\n      changed(subscriptionHandle, collectionName, id, fields) {\n        if (this.server.getPublicationStrategy(collectionName).useCollectionView) {\n          const view = this.getCollectionView(collectionName);\n          view.changed(subscriptionHandle, id, fields);\n        } else {\n          this.sendChanged(collectionName, id, fields);\n        }\n      },\n      startUniversalSubs: function () {\n        var self = this;\n        // Make a shallow copy of the set of universal handlers and start them. If\n        // additional universal publishers start while we're running them (due to\n        // yielding), they will run separately as part of Server.publish.\n        var handlers = _.clone(self.server.universal_publish_handlers);\n        _.each(handlers, function (handler) {\n          self._startSubscription(handler);\n        });\n      },\n      // Destroy this session and unregister it at the server.\n      close: function () {\n        var self = this;\n\n        // Destroy this session, even if it's not registered at the\n        // server. Stop all processing and tear everything down. If a socket\n        // was attached, close it.\n\n        // Already destroyed.\n        if (!self.inQueue) return;\n\n        // Drop the merge box data immediately.\n        self.inQueue = null;\n        self.collectionViews = new Map();\n        if (self.heartbeat) {\n          self.heartbeat.stop();\n          self.heartbeat = null;\n        }\n        if (self.socket) {\n          self.socket.close();\n          self.socket._meteorSession = null;\n        }\n        Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\"livedata\", \"sessions\", -1);\n        Meteor.defer(function () {\n          // Stop callbacks can yield, so we defer this on close.\n          // sub._isDeactivated() detects that we set inQueue to null and\n          // treats it as semi-deactivated (it will ignore incoming callbacks, etc).\n          self._deactivateAllSubscriptions();\n\n          // Defer calling the close callbacks, so that the caller closing\n          // the session isn't waiting for all the callbacks to complete.\n          _.each(self._closeCallbacks, function (callback) {\n            callback();\n          });\n        });\n\n        // Unregister the session.\n        self.server._removeSession(self);\n      },\n      // Send a message (doing nothing if no socket is connected right now).\n      // It should be a JSON object (it will be stringified).\n      send: function (msg) {\n        const self = this;\n        if (self.socket) {\n          if (Meteor._printSentDDP) Meteor._debug(\"Sent DDP\", DDPCommon.stringifyDDP(msg));\n          self.socket.send(DDPCommon.stringifyDDP(msg));\n        }\n      },\n      // Send a connection error.\n      sendError: function (reason, offendingMessage) {\n        var self = this;\n        var msg = {\n          msg: 'error',\n          reason: reason\n        };\n        if (offendingMessage) msg.offendingMessage = offendingMessage;\n        self.send(msg);\n      },\n      // Process 'msg' as an incoming message. As a guard against\n      // race conditions during reconnection, ignore the message if\n      // 'socket' is not the currently connected socket.\n      //\n      // We run the messages from the client one at a time, in the order\n      // given by the client. The message handler is passed an idempotent\n      // function 'unblock' which it may call to allow other messages to\n      // begin running in parallel in another fiber (for example, a method\n      // that wants to yield). Otherwise, it is automatically unblocked\n      // when it returns.\n      //\n      // Actually, we don't have to 'totally order' the messages in this\n      // way, but it's the easiest thing that's correct. (unsub needs to\n      // be ordered against sub, methods need to be ordered against each\n      // other).\n      processMessage: function (msg_in) {\n        var self = this;\n        if (!self.inQueue)\n          // we have been destroyed.\n          return;\n\n        // Respond to ping and pong messages immediately without queuing.\n        // If the negotiated DDP version is \"pre1\" which didn't support\n        // pings, preserve the \"pre1\" behavior of responding with a \"bad\n        // request\" for the unknown messages.\n        //\n        // Fibers are needed because heartbeats use Meteor.setTimeout, which\n        // needs a Fiber. We could actually use regular setTimeout and avoid\n        // these new fibers, but it is easier to just make everything use\n        // Meteor.setTimeout and not think too hard.\n        //\n        // Any message counts as receiving a pong, as it demonstrates that\n        // the client is still alive.\n        if (self.heartbeat) {\n          self.heartbeat.messageReceived();\n        }\n        ;\n        if (self.version !== 'pre1' && msg_in.msg === 'ping') {\n          if (self._respondToPings) self.send({\n            msg: \"pong\",\n            id: msg_in.id\n          });\n          return;\n        }\n        if (self.version !== 'pre1' && msg_in.msg === 'pong') {\n          // Since everything is a pong, there is nothing to do\n          return;\n        }\n        self.inQueue.push(msg_in);\n        if (self.workerRunning) return;\n        self.workerRunning = true;\n        var processNext = function () {\n          var msg = self.inQueue && self.inQueue.shift();\n          if (!msg) {\n            self.workerRunning = false;\n            return;\n          }\n          function runHandlers() {\n            var blocked = true;\n            var unblock = function () {\n              if (!blocked) return; // idempotent\n              blocked = false;\n              processNext();\n            };\n            self.server.onMessageHook.each(function (callback) {\n              callback(msg, self);\n              return true;\n            });\n            if (_.has(self.protocol_handlers, msg.msg)) {\n              const result = self.protocol_handlers[msg.msg].call(self, msg, unblock);\n              if (Meteor._isPromise(result)) {\n                result.finally(() => unblock());\n              } else {\n                unblock();\n              }\n            } else {\n              self.sendError('Bad request', msg);\n              unblock(); // in case the handler didn't already do it\n            }\n          }\n          runHandlers();\n        };\n        processNext();\n      },\n      protocol_handlers: {\n        sub: async function (msg, unblock) {\n          var self = this;\n\n          // cacheUnblock temporarly, so we can capture it later\n          // we will use unblock in current eventLoop, so this is safe\n          self.cachedUnblock = unblock;\n\n          // reject malformed messages\n          if (typeof msg.id !== \"string\" || typeof msg.name !== \"string\" || 'params' in msg && !(msg.params instanceof Array)) {\n            self.sendError(\"Malformed subscription\", msg);\n            return;\n          }\n          if (!self.server.publish_handlers[msg.name]) {\n            self.send({\n              msg: 'nosub',\n              id: msg.id,\n              error: new Meteor.Error(404, \"Subscription '\".concat(msg.name, \"' not found\"))\n            });\n            return;\n          }\n          if (self._namedSubs.has(msg.id))\n            // subs are idempotent, or rather, they are ignored if a sub\n            // with that id already exists. this is important during\n            // reconnect.\n            return;\n\n          // XXX It'd be much better if we had generic hooks where any package can\n          // hook into subscription handling, but in the mean while we special case\n          // ddp-rate-limiter package. This is also done for weak requirements to\n          // add the ddp-rate-limiter package in case we don't have Accounts. A\n          // user trying to use the ddp-rate-limiter must explicitly require it.\n          if (Package['ddp-rate-limiter']) {\n            var DDPRateLimiter = Package['ddp-rate-limiter'].DDPRateLimiter;\n            var rateLimiterInput = {\n              userId: self.userId,\n              clientAddress: self.connectionHandle.clientAddress,\n              type: \"subscription\",\n              name: msg.name,\n              connectionId: self.id\n            };\n            DDPRateLimiter._increment(rateLimiterInput);\n            var rateLimitResult = DDPRateLimiter._check(rateLimiterInput);\n            if (!rateLimitResult.allowed) {\n              self.send({\n                msg: 'nosub',\n                id: msg.id,\n                error: new Meteor.Error('too-many-requests', DDPRateLimiter.getErrorMessage(rateLimitResult), {\n                  timeToReset: rateLimitResult.timeToReset\n                })\n              });\n              return;\n            }\n          }\n          var handler = self.server.publish_handlers[msg.name];\n          await self._startSubscription(handler, msg.id, msg.params, msg.name);\n\n          // cleaning cached unblock\n          self.cachedUnblock = null;\n        },\n        unsub: function (msg) {\n          var self = this;\n          self._stopSubscription(msg.id);\n        },\n        method: async function (msg, unblock) {\n          var self = this;\n\n          // Reject malformed messages.\n          // For now, we silently ignore unknown attributes,\n          // for forwards compatibility.\n          if (typeof msg.id !== \"string\" || typeof msg.method !== \"string\" || 'params' in msg && !(msg.params instanceof Array) || 'randomSeed' in msg && typeof msg.randomSeed !== \"string\") {\n            self.sendError(\"Malformed method invocation\", msg);\n            return;\n          }\n          var randomSeed = msg.randomSeed || null;\n\n          // Set up to mark the method as satisfied once all observers\n          // (and subscriptions) have reacted to any writes that were\n          // done.\n          var fence = new DDPServer._WriteFence();\n          fence.onAllCommitted(function () {\n            // Retire the fence so that future writes are allowed.\n            // This means that callbacks like timers are free to use\n            // the fence, and if they fire before it's armed (for\n            // example, because the method waits for them) their\n            // writes will be included in the fence.\n            fence.retire();\n            self.send({\n              msg: 'updated',\n              methods: [msg.id]\n            });\n          });\n\n          // Find the handler\n          var handler = self.server.method_handlers[msg.method];\n          if (!handler) {\n            self.send({\n              msg: 'result',\n              id: msg.id,\n              error: new Meteor.Error(404, \"Method '\".concat(msg.method, \"' not found\"))\n            });\n            await fence.arm();\n            return;\n          }\n          var invocation = new DDPCommon.MethodInvocation({\n            name: msg.method,\n            isSimulation: false,\n            userId: self.userId,\n            setUserId(userId) {\n              return self._setUserId(userId);\n            },\n            unblock: unblock,\n            connection: self.connectionHandle,\n            randomSeed: randomSeed,\n            fence\n          });\n          const promise = new Promise((resolve, reject) => {\n            // XXX It'd be better if we could hook into method handlers better but\n            // for now, we need to check if the ddp-rate-limiter exists since we\n            // have a weak requirement for the ddp-rate-limiter package to be added\n            // to our application.\n            if (Package['ddp-rate-limiter']) {\n              var DDPRateLimiter = Package['ddp-rate-limiter'].DDPRateLimiter;\n              var rateLimiterInput = {\n                userId: self.userId,\n                clientAddress: self.connectionHandle.clientAddress,\n                type: \"method\",\n                name: msg.method,\n                connectionId: self.id\n              };\n              DDPRateLimiter._increment(rateLimiterInput);\n              var rateLimitResult = DDPRateLimiter._check(rateLimiterInput);\n              if (!rateLimitResult.allowed) {\n                reject(new Meteor.Error(\"too-many-requests\", DDPRateLimiter.getErrorMessage(rateLimitResult), {\n                  timeToReset: rateLimitResult.timeToReset\n                }));\n                return;\n              }\n            }\n            const getCurrentMethodInvocationResult = () => DDP._CurrentMethodInvocation.withValue(invocation, () => maybeAuditArgumentChecks(handler, invocation, msg.params, \"call to '\" + msg.method + \"'\"), {\n              name: 'getCurrentMethodInvocationResult',\n              keyName: 'getCurrentMethodInvocationResult'\n            });\n            resolve(DDPServer._CurrentWriteFence.withValue(fence, getCurrentMethodInvocationResult, {\n              name: 'DDPServer._CurrentWriteFence',\n              keyName: '_CurrentWriteFence'\n            }));\n          });\n          async function finish() {\n            await fence.arm();\n            unblock();\n          }\n          const payload = {\n            msg: \"result\",\n            id: msg.id\n          };\n          return promise.then(async result => {\n            await finish();\n            if (result !== undefined) {\n              payload.result = result;\n            }\n            self.send(payload);\n          }, async exception => {\n            await finish();\n            payload.error = wrapInternalException(exception, \"while invoking method '\".concat(msg.method, \"'\"));\n            self.send(payload);\n          });\n        }\n      },\n      _eachSub: function (f) {\n        var self = this;\n        self._namedSubs.forEach(f);\n        self._universalSubs.forEach(f);\n      },\n      _diffCollectionViews: function (beforeCVs) {\n        var self = this;\n        DiffSequence.diffMaps(beforeCVs, self.collectionViews, {\n          both: function (collectionName, leftValue, rightValue) {\n            rightValue.diff(leftValue);\n          },\n          rightOnly: function (collectionName, rightValue) {\n            rightValue.documents.forEach(function (docView, id) {\n              self.sendAdded(collectionName, id, docView.getFields());\n            });\n          },\n          leftOnly: function (collectionName, leftValue) {\n            leftValue.documents.forEach(function (doc, id) {\n              self.sendRemoved(collectionName, id);\n            });\n          }\n        });\n      },\n      // Sets the current user id in all appropriate contexts and reruns\n      // all subscriptions\n      async _setUserId(userId) {\n        var self = this;\n        if (userId !== null && typeof userId !== \"string\") throw new Error(\"setUserId must be called on string or null, not \" + typeof userId);\n\n        // Prevent newly-created universal subscriptions from being added to our\n        // session. They will be found below when we call startUniversalSubs.\n        //\n        // (We don't have to worry about named subscriptions, because we only add\n        // them when we process a 'sub' message. We are currently processing a\n        // 'method' message, and the method did not unblock, because it is illegal\n        // to call setUserId after unblock. Thus we cannot be concurrently adding a\n        // new named subscription).\n        self._dontStartNewUniversalSubs = true;\n\n        // Prevent current subs from updating our collectionViews and call their\n        // stop callbacks. This may yield.\n        self._eachSub(function (sub) {\n          sub._deactivate();\n        });\n\n        // All subs should now be deactivated. Stop sending messages to the client,\n        // save the state of the published collections, reset to an empty view, and\n        // update the userId.\n        self._isSending = false;\n        var beforeCVs = self.collectionViews;\n        self.collectionViews = new Map();\n        self.userId = userId;\n\n        // _setUserId is normally called from a Meteor method with\n        // DDP._CurrentMethodInvocation set. But DDP._CurrentMethodInvocation is not\n        // expected to be set inside a publish function, so we temporary unset it.\n        // Inside a publish function DDP._CurrentPublicationInvocation is set.\n        await DDP._CurrentMethodInvocation.withValue(undefined, async function () {\n          // Save the old named subs, and reset to having no subscriptions.\n          var oldNamedSubs = self._namedSubs;\n          self._namedSubs = new Map();\n          self._universalSubs = [];\n          await Promise.all([...oldNamedSubs].map(async _ref => {\n            let [subscriptionId, sub] = _ref;\n            const newSub = sub._recreate();\n            self._namedSubs.set(subscriptionId, newSub);\n            // nb: if the handler throws or calls this.error(), it will in fact\n            // immediately send its 'nosub'. This is OK, though.\n            await newSub._runHandler();\n          }));\n\n          // Allow newly-created universal subs to be started on our connection in\n          // parallel with the ones we're spinning up here, and spin up universal\n          // subs.\n          self._dontStartNewUniversalSubs = false;\n          self.startUniversalSubs();\n        }, {\n          name: '_setUserId'\n        });\n\n        // Start sending messages again, beginning with the diff from the previous\n        // state of the world to the current state. No yields are allowed during\n        // this diff, so that other changes cannot interleave.\n        Meteor._noYieldsAllowed(function () {\n          self._isSending = true;\n          self._diffCollectionViews(beforeCVs);\n          if (!_.isEmpty(self._pendingReady)) {\n            self.sendReady(self._pendingReady);\n            self._pendingReady = [];\n          }\n        });\n      },\n      _startSubscription: function (handler, subId, params, name) {\n        var self = this;\n        var sub = new Subscription(self, handler, subId, params, name);\n        let unblockHander = self.cachedUnblock;\n        // _startSubscription may call from a lot places\n        // so cachedUnblock might be null in somecases\n        // assign the cachedUnblock\n        sub.unblock = unblockHander || (() => {});\n        if (subId) self._namedSubs.set(subId, sub);else self._universalSubs.push(sub);\n        return sub._runHandler();\n      },\n      // Tear down specified subscription\n      _stopSubscription: function (subId, error) {\n        var self = this;\n        var subName = null;\n        if (subId) {\n          var maybeSub = self._namedSubs.get(subId);\n          if (maybeSub) {\n            subName = maybeSub._name;\n            maybeSub._removeAllDocuments();\n            maybeSub._deactivate();\n            self._namedSubs.delete(subId);\n          }\n        }\n        var response = {\n          msg: 'nosub',\n          id: subId\n        };\n        if (error) {\n          response.error = wrapInternalException(error, subName ? \"from sub \" + subName + \" id \" + subId : \"from sub id \" + subId);\n        }\n        self.send(response);\n      },\n      // Tear down all subscriptions. Note that this does NOT send removed or nosub\n      // messages, since we assume the client is gone.\n      _deactivateAllSubscriptions: function () {\n        var self = this;\n        self._namedSubs.forEach(function (sub, id) {\n          sub._deactivate();\n        });\n        self._namedSubs = new Map();\n        self._universalSubs.forEach(function (sub) {\n          sub._deactivate();\n        });\n        self._universalSubs = [];\n      },\n      // Determine the remote client's IP address, based on the\n      // HTTP_FORWARDED_COUNT environment variable representing how many\n      // proxies the server is behind.\n      _clientAddress: function () {\n        var self = this;\n\n        // For the reported client address for a connection to be correct,\n        // the developer must set the HTTP_FORWARDED_COUNT environment\n        // variable to an integer representing the number of hops they\n        // expect in the `x-forwarded-for` header. E.g., set to \"1\" if the\n        // server is behind one proxy.\n        //\n        // This could be computed once at startup instead of every time.\n        var httpForwardedCount = parseInt(process.env['HTTP_FORWARDED_COUNT']) || 0;\n        if (httpForwardedCount === 0) return self.socket.remoteAddress;\n        var forwardedFor = self.socket.headers[\"x-forwarded-for\"];\n        if (!_.isString(forwardedFor)) return null;\n        forwardedFor = forwardedFor.trim().split(/\\s*,\\s*/);\n\n        // Typically the first value in the `x-forwarded-for` header is\n        // the original IP address of the client connecting to the first\n        // proxy.  However, the end user can easily spoof the header, in\n        // which case the first value(s) will be the fake IP address from\n        // the user pretending to be a proxy reporting the original IP\n        // address value.  By counting HTTP_FORWARDED_COUNT back from the\n        // end of the list, we ensure that we get the IP address being\n        // reported by *our* first proxy.\n\n        if (httpForwardedCount < 0 || httpForwardedCount > forwardedFor.length) return null;\n        return forwardedFor[forwardedFor.length - httpForwardedCount];\n      }\n    });\n\n    /******************************************************************************/\n    /* Subscription                                                               */\n    /******************************************************************************/\n\n    // Ctor for a sub handle: the input to each publish function\n\n    // Instance name is this because it's usually referred to as this inside a\n    // publish\n    /**\n     * @summary The server's side of a subscription\n     * @class Subscription\n     * @instanceName this\n     * @showInstanceName true\n     */\n    var Subscription = function (session, handler, subscriptionId, params, name) {\n      var self = this;\n      self._session = session; // type is Session\n\n      /**\n       * @summary Access inside the publish function. The incoming [connection](#meteor_onconnection) for this subscription.\n       * @locus Server\n       * @name  connection\n       * @memberOf Subscription\n       * @instance\n       */\n      self.connection = session.connectionHandle; // public API object\n\n      self._handler = handler;\n\n      // My subscription ID (generated by client, undefined for universal subs).\n      self._subscriptionId = subscriptionId;\n      // Undefined for universal subs\n      self._name = name;\n      self._params = params || [];\n\n      // Only named subscriptions have IDs, but we need some sort of string\n      // internally to keep track of all subscriptions inside\n      // SessionDocumentViews. We use this subscriptionHandle for that.\n      if (self._subscriptionId) {\n        self._subscriptionHandle = 'N' + self._subscriptionId;\n      } else {\n        self._subscriptionHandle = 'U' + Random.id();\n      }\n\n      // Has _deactivate been called?\n      self._deactivated = false;\n\n      // Stop callbacks to g/c this sub.  called w/ zero arguments.\n      self._stopCallbacks = [];\n\n      // The set of (collection, documentid) that this subscription has\n      // an opinion about.\n      self._documents = new Map();\n\n      // Remember if we are ready.\n      self._ready = false;\n\n      // Part of the public API: the user of this sub.\n\n      /**\n       * @summary Access inside the publish function. The id of the logged-in user, or `null` if no user is logged in.\n       * @locus Server\n       * @memberOf Subscription\n       * @name  userId\n       * @instance\n       */\n      self.userId = session.userId;\n\n      // For now, the id filter is going to default to\n      // the to/from DDP methods on MongoID, to\n      // specifically deal with mongo/minimongo ObjectIds.\n\n      // Later, you will be able to make this be \"raw\"\n      // if you want to publish a collection that you know\n      // just has strings for keys and no funny business, to\n      // a DDP consumer that isn't minimongo.\n\n      self._idFilter = {\n        idStringify: MongoID.idStringify,\n        idParse: MongoID.idParse\n      };\n      Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\"livedata\", \"subscriptions\", 1);\n    };\n    Object.assign(Subscription.prototype, {\n      _runHandler: async function () {\n        // XXX should we unblock() here? Either before running the publish\n        // function, or before running _publishCursor.\n        //\n        // Right now, each publish function blocks all future publishes and\n        // methods waiting on data from Mongo (or whatever else the function\n        // blocks on). This probably slows page load in common cases.\n\n        if (!this.unblock) {\n          this.unblock = () => {};\n        }\n        const self = this;\n        let resultOrThenable = null;\n        try {\n          resultOrThenable = DDP._CurrentPublicationInvocation.withValue(self, () => maybeAuditArgumentChecks(self._handler, self, EJSON.clone(self._params),\n          // It's OK that this would look weird for universal subscriptions,\n          // because they have no arguments so there can never be an\n          // audit-argument-checks failure.\n          \"publisher '\" + self._name + \"'\"), {\n            name: self._name\n          });\n        } catch (e) {\n          self.error(e);\n          return;\n        }\n\n        // Did the handler call this.error or this.stop?\n        if (self._isDeactivated()) return;\n\n        // Both conventional and async publish handler functions are supported.\n        // If an object is returned with a then() function, it is either a promise\n        // or thenable and will be resolved asynchronously.\n        const isThenable = resultOrThenable && typeof resultOrThenable.then === 'function';\n        if (isThenable) {\n          try {\n            await self._publishHandlerResult(await resultOrThenable);\n          } catch (e) {\n            self.error(e);\n          }\n        } else {\n          await self._publishHandlerResult(resultOrThenable);\n        }\n      },\n      async _publishHandlerResult(res) {\n        // SPECIAL CASE: Instead of writing their own callbacks that invoke\n        // this.added/changed/ready/etc, the user can just return a collection\n        // cursor or array of cursors from the publish function; we call their\n        // _publishCursor method which starts observing the cursor and publishes the\n        // results. Note that _publishCursor does NOT call ready().\n        //\n        // XXX This uses an undocumented interface which only the Mongo cursor\n        // interface publishes. Should we make this interface public and encourage\n        // users to implement it themselves? Arguably, it's unnecessary; users can\n        // already write their own functions like\n        //   var publishMyReactiveThingy = function (name, handler) {\n        //     Meteor.publish(name, function () {\n        //       var reactiveThingy = handler();\n        //       reactiveThingy.publishMe();\n        //     });\n        //   };\n\n        var self = this;\n        var isCursor = function (c) {\n          return c && c._publishCursor;\n        };\n        if (isCursor(res)) {\n          try {\n            await res._publishCursor(self);\n          } catch (e) {\n            self.error(e);\n            return;\n          }\n          // _publishCursor only returns after the initial added callbacks have run.\n          // mark subscription as ready.\n          self.ready();\n        } else if (_.isArray(res)) {\n          // Check all the elements are cursors\n          if (!_.all(res, isCursor)) {\n            self.error(new Error(\"Publish function returned an array of non-Cursors\"));\n            return;\n          }\n          // Find duplicate collection names\n          // XXX we should support overlapping cursors, but that would require the\n          // merge box to allow overlap within a subscription\n          var collectionNames = {};\n          for (var i = 0; i < res.length; ++i) {\n            var collectionName = res[i]._getCollectionName();\n            if (_.has(collectionNames, collectionName)) {\n              self.error(new Error(\"Publish function returned multiple cursors for collection \" + collectionName));\n              return;\n            }\n            collectionNames[collectionName] = true;\n          }\n          try {\n            await Promise.all(res.map(cur => cur._publishCursor(self)));\n          } catch (e) {\n            self.error(e);\n            return;\n          }\n          self.ready();\n        } else if (res) {\n          // Truthy values other than cursors or arrays are probably a\n          // user mistake (possible returning a Mongo document via, say,\n          // `coll.findOne()`).\n          self.error(new Error(\"Publish function can only return a Cursor or \" + \"an array of Cursors\"));\n        }\n      },\n      // This calls all stop callbacks and prevents the handler from updating any\n      // SessionCollectionViews further. It's used when the user unsubscribes or\n      // disconnects, as well as during setUserId re-runs. It does *NOT* send\n      // removed messages for the published objects; if that is necessary, call\n      // _removeAllDocuments first.\n      _deactivate: function () {\n        var self = this;\n        if (self._deactivated) return;\n        self._deactivated = true;\n        self._callStopCallbacks();\n        Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\"livedata\", \"subscriptions\", -1);\n      },\n      _callStopCallbacks: function () {\n        var self = this;\n        // Tell listeners, so they can clean up\n        var callbacks = self._stopCallbacks;\n        self._stopCallbacks = [];\n        _.each(callbacks, function (callback) {\n          callback();\n        });\n      },\n      // Send remove messages for every document.\n      _removeAllDocuments: function () {\n        var self = this;\n        Meteor._noYieldsAllowed(function () {\n          self._documents.forEach(function (collectionDocs, collectionName) {\n            collectionDocs.forEach(function (strId) {\n              self.removed(collectionName, self._idFilter.idParse(strId));\n            });\n          });\n        });\n      },\n      // Returns a new Subscription for the same session with the same\n      // initial creation parameters. This isn't a clone: it doesn't have\n      // the same _documents cache, stopped state or callbacks; may have a\n      // different _subscriptionHandle, and gets its userId from the\n      // session, not from this object.\n      _recreate: function () {\n        var self = this;\n        return new Subscription(self._session, self._handler, self._subscriptionId, self._params, self._name);\n      },\n      /**\n       * @summary Call inside the publish function.  Stops this client's subscription, triggering a call on the client to the `onStop` callback passed to [`Meteor.subscribe`](#meteor_subscribe), if any. If `error` is not a [`Meteor.Error`](#meteor_error), it will be [sanitized](#meteor_error).\n       * @locus Server\n       * @param {Error} error The error to pass to the client.\n       * @instance\n       * @memberOf Subscription\n       */\n      error: function (error) {\n        var self = this;\n        if (self._isDeactivated()) return;\n        self._session._stopSubscription(self._subscriptionId, error);\n      },\n      // Note that while our DDP client will notice that you've called stop() on the\n      // server (and clean up its _subscriptions table) we don't actually provide a\n      // mechanism for an app to notice this (the subscribe onError callback only\n      // triggers if there is an error).\n\n      /**\n       * @summary Call inside the publish function.  Stops this client's subscription and invokes the client's `onStop` callback with no error.\n       * @locus Server\n       * @instance\n       * @memberOf Subscription\n       */\n      stop: function () {\n        var self = this;\n        if (self._isDeactivated()) return;\n        self._session._stopSubscription(self._subscriptionId);\n      },\n      /**\n       * @summary Call inside the publish function.  Registers a callback function to run when the subscription is stopped.\n       * @locus Server\n       * @memberOf Subscription\n       * @instance\n       * @param {Function} func The callback function\n       */\n      onStop: function (callback) {\n        var self = this;\n        callback = Meteor.bindEnvironment(callback, 'onStop callback', self);\n        if (self._isDeactivated()) callback();else self._stopCallbacks.push(callback);\n      },\n      // This returns true if the sub has been deactivated, *OR* if the session was\n      // destroyed but the deferred call to _deactivateAllSubscriptions hasn't\n      // happened yet.\n      _isDeactivated: function () {\n        var self = this;\n        return self._deactivated || self._session.inQueue === null;\n      },\n      /**\n       * @summary Call inside the publish function.  Informs the subscriber that a document has been added to the record set.\n       * @locus Server\n       * @memberOf Subscription\n       * @instance\n       * @param {String} collection The name of the collection that contains the new document.\n       * @param {String} id The new document's ID.\n       * @param {Object} fields The fields in the new document.  If `_id` is present it is ignored.\n       */\n      added(collectionName, id, fields) {\n        if (this._isDeactivated()) return;\n        id = this._idFilter.idStringify(id);\n        if (this._session.server.getPublicationStrategy(collectionName).doAccountingForCollection) {\n          let ids = this._documents.get(collectionName);\n          if (ids == null) {\n            ids = new Set();\n            this._documents.set(collectionName, ids);\n          }\n          ids.add(id);\n        }\n        this._session.added(this._subscriptionHandle, collectionName, id, fields);\n      },\n      /**\n       * @summary Call inside the publish function.  Informs the subscriber that a document in the record set has been modified.\n       * @locus Server\n       * @memberOf Subscription\n       * @instance\n       * @param {String} collection The name of the collection that contains the changed document.\n       * @param {String} id The changed document's ID.\n       * @param {Object} fields The fields in the document that have changed, together with their new values.  If a field is not present in `fields` it was left unchanged; if it is present in `fields` and has a value of `undefined` it was removed from the document.  If `_id` is present it is ignored.\n       */\n      changed(collectionName, id, fields) {\n        if (this._isDeactivated()) return;\n        id = this._idFilter.idStringify(id);\n        this._session.changed(this._subscriptionHandle, collectionName, id, fields);\n      },\n      /**\n       * @summary Call inside the publish function.  Informs the subscriber that a document has been removed from the record set.\n       * @locus Server\n       * @memberOf Subscription\n       * @instance\n       * @param {String} collection The name of the collection that the document has been removed from.\n       * @param {String} id The ID of the document that has been removed.\n       */\n      removed(collectionName, id) {\n        if (this._isDeactivated()) return;\n        id = this._idFilter.idStringify(id);\n        if (this._session.server.getPublicationStrategy(collectionName).doAccountingForCollection) {\n          // We don't bother to delete sets of things in a collection if the\n          // collection is empty.  It could break _removeAllDocuments.\n          this._documents.get(collectionName).delete(id);\n        }\n        this._session.removed(this._subscriptionHandle, collectionName, id);\n      },\n      /**\n       * @summary Call inside the publish function.  Informs the subscriber that an initial, complete snapshot of the record set has been sent.  This will trigger a call on the client to the `onReady` callback passed to  [`Meteor.subscribe`](#meteor_subscribe), if any.\n       * @locus Server\n       * @memberOf Subscription\n       * @instance\n       */\n      ready: function () {\n        var self = this;\n        if (self._isDeactivated()) return;\n        if (!self._subscriptionId) return; // Unnecessary but ignored for universal sub\n        if (!self._ready) {\n          self._session.sendReady([self._subscriptionId]);\n          self._ready = true;\n        }\n      }\n    });\n\n    /******************************************************************************/\n    /* Server                                                                     */\n    /******************************************************************************/\n\n    Server = function () {\n      let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var self = this;\n\n      // The default heartbeat interval is 30 seconds on the server and 35\n      // seconds on the client.  Since the client doesn't need to send a\n      // ping as long as it is receiving pings, this means that pings\n      // normally go from the server to the client.\n      //\n      // Note: Troposphere depends on the ability to mutate\n      // Meteor.server.options.heartbeatTimeout! This is a hack, but it's life.\n      self.options = _objectSpread({\n        heartbeatInterval: 15000,\n        heartbeatTimeout: 15000,\n        // For testing, allow responding to pings to be disabled.\n        respondToPings: true,\n        defaultPublicationStrategy: publicationStrategies.SERVER_MERGE\n      }, options);\n\n      // Map of callbacks to call when a new connection comes in to the\n      // server and completes DDP version negotiation. Use an object instead\n      // of an array so we can safely remove one from the list while\n      // iterating over it.\n      self.onConnectionHook = new Hook({\n        debugPrintExceptions: \"onConnection callback\"\n      });\n\n      // Map of callbacks to call when a new message comes in.\n      self.onMessageHook = new Hook({\n        debugPrintExceptions: \"onMessage callback\"\n      });\n      self.publish_handlers = {};\n      self.universal_publish_handlers = [];\n      self.method_handlers = {};\n      self._publicationStrategies = {};\n      self.sessions = new Map(); // map from id to session\n\n      self.stream_server = new StreamServer();\n      self.stream_server.register(function (socket) {\n        // socket implements the SockJSConnection interface\n        socket._meteorSession = null;\n        var sendError = function (reason, offendingMessage) {\n          var msg = {\n            msg: 'error',\n            reason: reason\n          };\n          if (offendingMessage) msg.offendingMessage = offendingMessage;\n          socket.send(DDPCommon.stringifyDDP(msg));\n        };\n        socket.on('data', function (raw_msg) {\n          if (Meteor._printReceivedDDP) {\n            Meteor._debug(\"Received DDP\", raw_msg);\n          }\n          try {\n            try {\n              var msg = DDPCommon.parseDDP(raw_msg);\n            } catch (err) {\n              sendError('Parse error');\n              return;\n            }\n            if (msg === null || !msg.msg) {\n              sendError('Bad request', msg);\n              return;\n            }\n            if (msg.msg === 'connect') {\n              if (socket._meteorSession) {\n                sendError(\"Already connected\", msg);\n                return;\n              }\n              self._handleConnect(socket, msg);\n              return;\n            }\n            if (!socket._meteorSession) {\n              sendError('Must connect first', msg);\n              return;\n            }\n            socket._meteorSession.processMessage(msg);\n          } catch (e) {\n            // XXX print stack nicely\n            Meteor._debug(\"Internal exception while processing message\", msg, e);\n          }\n        });\n        socket.on('close', function () {\n          if (socket._meteorSession) {\n            socket._meteorSession.close();\n          }\n        });\n      });\n    };\n    Object.assign(Server.prototype, {\n      /**\n       * @summary Register a callback to be called when a new DDP connection is made to the server.\n       * @locus Server\n       * @param {function} callback The function to call when a new DDP connection is established.\n       * @memberOf Meteor\n       * @importFromPackage meteor\n       */\n      onConnection: function (fn) {\n        var self = this;\n        return self.onConnectionHook.register(fn);\n      },\n      /**\n       * @summary Set publication strategy for the given collection. Publications strategies are available from `DDPServer.publicationStrategies`. You call this method from `Meteor.server`, like `Meteor.server.setPublicationStrategy()`\n       * @locus Server\n       * @alias setPublicationStrategy\n       * @param collectionName {String}\n       * @param strategy {{useCollectionView: boolean, doAccountingForCollection: boolean}}\n       * @memberOf Meteor.server\n       * @importFromPackage meteor\n       */\n      setPublicationStrategy(collectionName, strategy) {\n        if (!Object.values(publicationStrategies).includes(strategy)) {\n          throw new Error(\"Invalid merge strategy: \".concat(strategy, \" \\n        for collection \").concat(collectionName));\n        }\n        this._publicationStrategies[collectionName] = strategy;\n      },\n      /**\n       * @summary Gets the publication strategy for the requested collection. You call this method from `Meteor.server`, like `Meteor.server.getPublicationStrategy()`\n       * @locus Server\n       * @alias getPublicationStrategy\n       * @param collectionName {String}\n       * @memberOf Meteor.server\n       * @importFromPackage meteor\n       * @return {{useCollectionView: boolean, doAccountingForCollection: boolean}}\n       */\n      getPublicationStrategy(collectionName) {\n        return this._publicationStrategies[collectionName] || this.options.defaultPublicationStrategy;\n      },\n      /**\n       * @summary Register a callback to be called when a new DDP message is received.\n       * @locus Server\n       * @param {function} callback The function to call when a new DDP message is received.\n       * @memberOf Meteor\n       * @importFromPackage meteor\n       */\n      onMessage: function (fn) {\n        var self = this;\n        return self.onMessageHook.register(fn);\n      },\n      _handleConnect: function (socket, msg) {\n        var self = this;\n\n        // The connect message must specify a version and an array of supported\n        // versions, and it must claim to support what it is proposing.\n        if (!(typeof msg.version === 'string' && _.isArray(msg.support) && _.all(msg.support, _.isString) && _.contains(msg.support, msg.version))) {\n          socket.send(DDPCommon.stringifyDDP({\n            msg: 'failed',\n            version: DDPCommon.SUPPORTED_DDP_VERSIONS[0]\n          }));\n          socket.close();\n          return;\n        }\n\n        // In the future, handle session resumption: something like:\n        //  socket._meteorSession = self.sessions[msg.session]\n        var version = calculateVersion(msg.support, DDPCommon.SUPPORTED_DDP_VERSIONS);\n        if (msg.version !== version) {\n          // The best version to use (according to the client's stated preferences)\n          // is not the one the client is trying to use. Inform them about the best\n          // version to use.\n          socket.send(DDPCommon.stringifyDDP({\n            msg: 'failed',\n            version: version\n          }));\n          socket.close();\n          return;\n        }\n\n        // Yay, version matches! Create a new session.\n        // Note: Troposphere depends on the ability to mutate\n        // Meteor.server.options.heartbeatTimeout! This is a hack, but it's life.\n        socket._meteorSession = new Session(self, version, socket, self.options);\n        self.sessions.set(socket._meteorSession.id, socket._meteorSession);\n        self.onConnectionHook.each(function (callback) {\n          if (socket._meteorSession) callback(socket._meteorSession.connectionHandle);\n          return true;\n        });\n      },\n      /**\n       * Register a publish handler function.\n       *\n       * @param name {String} identifier for query\n       * @param handler {Function} publish handler\n       * @param options {Object}\n       *\n       * Server will call handler function on each new subscription,\n       * either when receiving DDP sub message for a named subscription, or on\n       * DDP connect for a universal subscription.\n       *\n       * If name is null, this will be a subscription that is\n       * automatically established and permanently on for all connected\n       * client, instead of a subscription that can be turned on and off\n       * with subscribe().\n       *\n       * options to contain:\n       *  - (mostly internal) is_auto: true if generated automatically\n       *    from an autopublish hook. this is for cosmetic purposes only\n       *    (it lets us determine whether to print a warning suggesting\n       *    that you turn off autopublish).\n       */\n\n      /**\n       * @summary Publish a record set.\n       * @memberOf Meteor\n       * @importFromPackage meteor\n       * @locus Server\n       * @param {String|Object} name If String, name of the record set.  If Object, publications Dictionary of publish functions by name.  If `null`, the set has no name, and the record set is automatically sent to all connected clients.\n       * @param {Function} func Function called on the server each time a client subscribes.  Inside the function, `this` is the publish handler object, described below.  If the client passed arguments to `subscribe`, the function is called with the same arguments.\n       */\n      publish: function (name, handler, options) {\n        var self = this;\n        if (!_.isObject(name)) {\n          options = options || {};\n          if (name && name in self.publish_handlers) {\n            Meteor._debug(\"Ignoring duplicate publish named '\" + name + \"'\");\n            return;\n          }\n          if (Package.autopublish && !options.is_auto) {\n            // They have autopublish on, yet they're trying to manually\n            // pick stuff to publish. They probably should turn off\n            // autopublish. (This check isn't perfect -- if you create a\n            // publish before you turn on autopublish, it won't catch\n            // it, but this will definitely handle the simple case where\n            // you've added the autopublish package to your app, and are\n            // calling publish from your app code).\n            if (!self.warned_about_autopublish) {\n              self.warned_about_autopublish = true;\n              Meteor._debug(\"** You've set up some data subscriptions with Meteor.publish(), but\\n\" + \"** you still have autopublish turned on. Because autopublish is still\\n\" + \"** on, your Meteor.publish() calls won't have much effect. All data\\n\" + \"** will still be sent to all clients.\\n\" + \"**\\n\" + \"** Turn off autopublish by removing the autopublish package:\\n\" + \"**\\n\" + \"**   $ meteor remove autopublish\\n\" + \"**\\n\" + \"** .. and make sure you have Meteor.publish() and Meteor.subscribe() calls\\n\" + \"** for each collection that you want clients to see.\\n\");\n            }\n          }\n          if (name) self.publish_handlers[name] = handler;else {\n            self.universal_publish_handlers.push(handler);\n            // Spin up the new publisher on any existing session too. Run each\n            // session's subscription in a new Fiber, so that there's no change for\n            // self.sessions to change while we're running this loop.\n            self.sessions.forEach(function (session) {\n              if (!session._dontStartNewUniversalSubs) {\n                session._startSubscription(handler);\n              }\n            });\n          }\n        } else {\n          _.each(name, function (value, key) {\n            self.publish(key, value, {});\n          });\n        }\n      },\n      _removeSession: function (session) {\n        var self = this;\n        self.sessions.delete(session.id);\n      },\n      /**\n       * @summary Tells if the method call came from a call or a callAsync.\n       * @locus Anywhere\n       * @memberOf Meteor\n       * @importFromPackage meteor\n       * @returns boolean\n       */\n      isAsyncCall: function () {\n        return DDP._CurrentMethodInvocation._isCallAsyncMethodRunning();\n      },\n      /**\n       * @summary Defines functions that can be invoked over the network by clients.\n       * @locus Anywhere\n       * @param {Object} methods Dictionary whose keys are method names and values are functions.\n       * @memberOf Meteor\n       * @importFromPackage meteor\n       */\n      methods: function (methods) {\n        var self = this;\n        _.each(methods, function (func, name) {\n          if (typeof func !== 'function') throw new Error(\"Method '\" + name + \"' must be a function\");\n          if (self.method_handlers[name]) throw new Error(\"A method named '\" + name + \"' is already defined\");\n          self.method_handlers[name] = func;\n        });\n      },\n      call: function (name) {\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n        if (args.length && typeof args[args.length - 1] === \"function\") {\n          // If it's a function, the last argument is the result callback, not\n          // a parameter to the remote method.\n          var callback = args.pop();\n        }\n        return this.apply(name, args, callback);\n      },\n      // A version of the call method that always returns a Promise.\n      callAsync: function (name) {\n        var _args$;\n        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n          args[_key2 - 1] = arguments[_key2];\n        }\n        const options = (_args$ = args[0]) !== null && _args$ !== void 0 && _args$.hasOwnProperty('returnStubValue') ? args.shift() : {};\n        DDP._CurrentMethodInvocation._set();\n        DDP._CurrentMethodInvocation._setCallAsyncMethodRunning(true);\n        const promise = new Promise((resolve, reject) => {\n          DDP._CurrentCallAsyncInvocation._set({\n            name,\n            hasCallAsyncParent: true\n          });\n          this.applyAsync(name, args, _objectSpread({\n            isFromCallAsync: true\n          }, options)).then(resolve).catch(reject).finally(() => {\n            DDP._CurrentCallAsyncInvocation._set();\n          });\n        });\n        return promise.finally(() => DDP._CurrentMethodInvocation._setCallAsyncMethodRunning(false));\n      },\n      apply: function (name, args, options, callback) {\n        // We were passed 3 arguments. They may be either (name, args, options)\n        // or (name, args, callback)\n        if (!callback && typeof options === 'function') {\n          callback = options;\n          options = {};\n        } else {\n          options = options || {};\n        }\n        const promise = this.applyAsync(name, args, options);\n\n        // Return the result in whichever way the caller asked for it. Note that we\n        // do NOT block on the write fence in an analogous way to how the client\n        // blocks on the relevant data being visible, so you are NOT guaranteed that\n        // cursor observe callbacks have fired when your callback is invoked. (We\n        // can change this if there's a real use case).\n        if (callback) {\n          promise.then(result => callback(undefined, result), exception => callback(exception));\n        } else {\n          return promise;\n        }\n      },\n      // @param options {Optional Object}\n      applyAsync: function (name, args, options) {\n        // Run the handler\n        var handler = this.method_handlers[name];\n        if (!handler) {\n          return Promise.reject(new Meteor.Error(404, \"Method '\".concat(name, \"' not found\")));\n        }\n        // If this is a method call from within another method or publish function,\n        // get the user state from the outer method or publish function, otherwise\n        // don't allow setUserId to be called\n        var userId = null;\n        let setUserId = () => {\n          throw new Error(\"Can't call setUserId on a server initiated method call\");\n        };\n        var connection = null;\n        var currentMethodInvocation = DDP._CurrentMethodInvocation.get();\n        var currentPublicationInvocation = DDP._CurrentPublicationInvocation.get();\n        var randomSeed = null;\n        if (currentMethodInvocation) {\n          userId = currentMethodInvocation.userId;\n          setUserId = userId => currentMethodInvocation.setUserId(userId);\n          connection = currentMethodInvocation.connection;\n          randomSeed = DDPCommon.makeRpcSeed(currentMethodInvocation, name);\n        } else if (currentPublicationInvocation) {\n          userId = currentPublicationInvocation.userId;\n          setUserId = userId => currentPublicationInvocation._session._setUserId(userId);\n          connection = currentPublicationInvocation.connection;\n        }\n        var invocation = new DDPCommon.MethodInvocation({\n          isSimulation: false,\n          userId,\n          setUserId,\n          connection,\n          randomSeed\n        });\n        return new Promise((resolve, reject) => {\n          let result;\n          try {\n            result = DDP._CurrentMethodInvocation.withValue(invocation, () => maybeAuditArgumentChecks(handler, invocation, EJSON.clone(args), \"internal call to '\" + name + \"'\"));\n          } catch (e) {\n            return reject(e);\n          }\n          if (!Meteor._isPromise(result)) {\n            return resolve(result);\n          }\n          result.then(r => resolve(r)).catch(reject);\n        }).then(EJSON.clone);\n      },\n      _urlForSession: function (sessionId) {\n        var self = this;\n        var session = self.sessions.get(sessionId);\n        if (session) return session._socketUrl;else return null;\n      }\n    });\n    var calculateVersion = function (clientSupportedVersions, serverSupportedVersions) {\n      var correctVersion = _.find(clientSupportedVersions, function (version) {\n        return _.contains(serverSupportedVersions, version);\n      });\n      if (!correctVersion) {\n        correctVersion = serverSupportedVersions[0];\n      }\n      return correctVersion;\n    };\n    DDPServer._calculateVersion = calculateVersion;\n\n    // \"blind\" exceptions other than those that were deliberately thrown to signal\n    // errors to the client\n    var wrapInternalException = function (exception, context) {\n      if (!exception) return exception;\n\n      // To allow packages to throw errors intended for the client but not have to\n      // depend on the Meteor.Error class, `isClientSafe` can be set to true on any\n      // error before it is thrown.\n      if (exception.isClientSafe) {\n        if (!(exception instanceof Meteor.Error)) {\n          const originalMessage = exception.message;\n          exception = new Meteor.Error(exception.error, exception.reason, exception.details);\n          exception.message = originalMessage;\n        }\n        return exception;\n      }\n\n      // Tests can set the '_expectedByTest' flag on an exception so it won't go to\n      // the server log.\n      if (!exception._expectedByTest) {\n        Meteor._debug(\"Exception \" + context, exception.stack);\n        if (exception.sanitizedError) {\n          Meteor._debug(\"Sanitized and reported to the client as:\", exception.sanitizedError);\n          Meteor._debug();\n        }\n      }\n\n      // Did the error contain more details that could have been useful if caught in\n      // server code (or if thrown from non-client-originated code), but also\n      // provided a \"sanitized\" version with more context than 500 Internal server\n      // error? Use that.\n      if (exception.sanitizedError) {\n        if (exception.sanitizedError.isClientSafe) return exception.sanitizedError;\n        Meteor._debug(\"Exception \" + context + \" provides a sanitizedError that \" + \"does not have isClientSafe property set; ignoring\");\n      }\n      return new Meteor.Error(500, \"Internal server error\");\n    };\n\n    // Audit argument checks, if the audit-argument-checks package exists (it is a\n    // weak dependency of this package).\n    var maybeAuditArgumentChecks = function (f, context, args, description) {\n      args = args || [];\n      if (Package['audit-argument-checks']) {\n        return Match._failIfArgumentsAreNotAllChecked(f, context, args, description);\n      }\n      return f.apply(context, args);\n    };\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","__reifyWaitForDeps__","DDPServer","publicationStrategies","SERVER_MERGE","useDummyDocumentView","useCollectionView","doAccountingForCollection","NO_MERGE_NO_HISTORY","NO_MERGE","NO_MERGE_MULTI","DummyDocumentView","self","existsIn","Set","dataByKey","Map","Object","assign","prototype","getFields","clearField","subscriptionHandle","key","changeCollector","undefined","changeField","value","isAdd","SessionDocumentView","_SessionDocumentView","_getCurrentFence","currentInvocation","_CurrentWriteFence","get","DDP","_CurrentMethodInvocation","fence","_","extend","ret","forEach","precedenceList","removedValue","i","length","precedence","splice","delete","EJSON","equals","clone","has","set","elt","find","push","SessionCollectionView","collectionName","sessionCallbacks","documents","callbacks","_SessionCollectionView","isEmpty","size","diff","previous","DiffSequence","diffMaps","both","bind","diffDocument","rightOnly","id","nowDV","added","leftOnly","prevDV","removed","fields","diffObjects","prev","now","changed","docView","Meteor","server","getPublicationStrategy","add","each","changedResult","Error","err","Session","version","socket","options","Random","initialized","inQueue","_DoubleEndedQueue","blocked","workerRunning","cachedUnblock","_namedSubs","_universalSubs","userId","collectionViews","_isSending","_dontStartNewUniversalSubs","_pendingReady","_closeCallbacks","_socketUrl","url","_respondToPings","respondToPings","connectionHandle","close","onClose","fn","cb","bindEnvironment","defer","clientAddress","_clientAddress","httpHeaders","headers","send","msg","session","startUniversalSubs","heartbeatInterval","setWebsocketTimeout","heartbeat","DDPCommon","Heartbeat","heartbeatTimeout","onTimeout","sendPing","start","Package","Facts","incrementServerFact","sendReady","subscriptionIds","subs","subscriptionId","_canSend","sendAdded","collection","sendChanged","sendRemoved","getSendCallbacks","getCollectionView","view","handlers","universal_publish_handlers","handler","_startSubscription","stop","_meteorSession","_deactivateAllSubscriptions","callback","_removeSession","_printSentDDP","_debug","stringifyDDP","sendError","reason","offendingMessage","processMessage","msg_in","messageReceived","processNext","shift","runHandlers","unblock","onMessageHook","protocol_handlers","result","call","_isPromise","finally","sub","name","params","Array","publish_handlers","error","concat","DDPRateLimiter","rateLimiterInput","type","connectionId","_increment","rateLimitResult","_check","allowed","getErrorMessage","timeToReset","unsub","_stopSubscription","method","randomSeed","_WriteFence","onAllCommitted","retire","methods","method_handlers","arm","invocation","MethodInvocation","isSimulation","setUserId","_setUserId","connection","promise","Promise","resolve","reject","getCurrentMethodInvocationResult","withValue","maybeAuditArgumentChecks","keyName","finish","payload","then","exception","wrapInternalException","_eachSub","f","_diffCollectionViews","beforeCVs","leftValue","rightValue","doc","_deactivate","oldNamedSubs","all","map","_ref","newSub","_recreate","_runHandler","_noYieldsAllowed","subId","Subscription","unblockHander","subName","maybeSub","_name","_removeAllDocuments","response","httpForwardedCount","parseInt","process","env","remoteAddress","forwardedFor","isString","trim","split","_session","_handler","_subscriptionId","_params","_subscriptionHandle","_deactivated","_stopCallbacks","_documents","_ready","_idFilter","idStringify","MongoID","idParse","resultOrThenable","_CurrentPublicationInvocation","e","_isDeactivated","isThenable","_publishHandlerResult","res","isCursor","c","_publishCursor","ready","isArray","collectionNames","_getCollectionName","cur","_callStopCallbacks","collectionDocs","strId","onStop","ids","Server","arguments","defaultPublicationStrategy","onConnectionHook","Hook","debugPrintExceptions","_publicationStrategies","sessions","stream_server","StreamServer","register","on","raw_msg","_printReceivedDDP","parseDDP","_handleConnect","onConnection","setPublicationStrategy","strategy","values","includes","onMessage","support","contains","SUPPORTED_DDP_VERSIONS","calculateVersion","publish","isObject","autopublish","is_auto","warned_about_autopublish","isAsyncCall","_isCallAsyncMethodRunning","func","_len","args","_key","pop","apply","callAsync","_args$","_len2","_key2","hasOwnProperty","_set","_setCallAsyncMethodRunning","_CurrentCallAsyncInvocation","hasCallAsyncParent","applyAsync","isFromCallAsync","catch","currentMethodInvocation","currentPublicationInvocation","makeRpcSeed","r","_urlForSession","sessionId","clientSupportedVersions","serverSupportedVersions","correctVersion","_calculateVersion","context","isClientSafe","originalMessage","message","details","_expectedByTest","stack","sanitizedError","description","Match","_failIfArgumentsAreNotAllChecked","__reify_async_result__","_reifyError","async"],"sources":["packages/ddp-server/livedata_server.js"],"sourcesContent":["DDPServer = {};\n\n// Publication strategies define how we handle data from published cursors at the collection level\n// This allows someone to:\n// - Choose a trade-off between client-server bandwidth and server memory usage\n// - Implement special (non-mongo) collections like volatile message queues\nconst publicationStrategies = {\n  // SERVER_MERGE is the default strategy.\n  // When using this strategy, the server maintains a copy of all data a connection is subscribed to.\n  // This allows us to only send deltas over multiple publications.\n  SERVER_MERGE: {\n    useDummyDocumentView: false,\n    useCollectionView: true,\n    doAccountingForCollection: true,\n  },\n  // The NO_MERGE_NO_HISTORY strategy results in the server sending all publication data\n  // directly to the client. It does not remember what it has previously sent\n  // to it will not trigger removed messages when a subscription is stopped.\n  // This should only be chosen for special use cases like send-and-forget queues.\n  NO_MERGE_NO_HISTORY: {\n    useDummyDocumentView: false,\n    useCollectionView: false,\n    doAccountingForCollection: false,\n  },\n  // NO_MERGE is similar to NO_MERGE_NO_HISTORY but the server will remember the IDs it has\n  // sent to the client so it can remove them when a subscription is stopped.\n  // This strategy can be used when a collection is only used in a single publication.\n  NO_MERGE: {\n    useDummyDocumentView: false,\n    useCollectionView: false,\n    doAccountingForCollection: true,\n  },\n  // NO_MERGE_MULTI is similar to `NO_MERGE`, but it does track whether a document is\n  // used by multiple publications. This has some memory overhead, but it still does not do\n  // diffing so it's faster and slimmer than SERVER_MERGE.\n  NO_MERGE_MULTI: {\n    useDummyDocumentView: true,\n    useCollectionView: true,\n    doAccountingForCollection: true\n  }\n};\n\nDDPServer.publicationStrategies = publicationStrategies;\n\n// This file contains classes:\n// * Session - The server's connection to a single DDP client\n// * Subscription - A single subscription for a single client\n// * Server - An entire server that may talk to > 1 client. A DDP endpoint.\n//\n// Session and Subscription are file scope. For now, until we freeze\n// the interface, Server is package scope (in the future it should be\n// exported).\nvar DummyDocumentView = function () {\n  var self = this;\n  self.existsIn = new Set(); // set of subscriptionHandle\n  self.dataByKey = new Map(); // key-> [ {subscriptionHandle, value} by precedence]\n};\n\nObject.assign(DummyDocumentView.prototype, {\n  getFields: function () {\n    return {}\n  },\n\n  clearField: function (subscriptionHandle, key, changeCollector) {\n    changeCollector[key] = undefined\n  },\n\n  changeField: function (subscriptionHandle, key, value,\n                         changeCollector, isAdd) {\n    changeCollector[key] = value\n  }\n});\n\n// Represents a single document in a SessionCollectionView\nvar SessionDocumentView = function () {\n  var self = this;\n  self.existsIn = new Set(); // set of subscriptionHandle\n  self.dataByKey = new Map(); // key-> [ {subscriptionHandle, value} by precedence]\n};\n\nDDPServer._SessionDocumentView = SessionDocumentView;\n\nDDPServer._getCurrentFence = function () {\n  let currentInvocation = this._CurrentWriteFence.get();\n  if (currentInvocation) {\n    return currentInvocation;\n  }\n  currentInvocation = DDP._CurrentMethodInvocation.get();\n  return currentInvocation ? currentInvocation.fence : undefined;\n};\n\n_.extend(SessionDocumentView.prototype, {\n\n  getFields: function () {\n    var self = this;\n    var ret = {};\n    self.dataByKey.forEach(function (precedenceList, key) {\n      ret[key] = precedenceList[0].value;\n    });\n    return ret;\n  },\n\n  clearField: function (subscriptionHandle, key, changeCollector) {\n    var self = this;\n    // Publish API ignores _id if present in fields\n    if (key === \"_id\")\n      return;\n    var precedenceList = self.dataByKey.get(key);\n\n    // It's okay to clear fields that didn't exist. No need to throw\n    // an error.\n    if (!precedenceList)\n      return;\n\n    var removedValue = undefined;\n    for (var i = 0; i < precedenceList.length; i++) {\n      var precedence = precedenceList[i];\n      if (precedence.subscriptionHandle === subscriptionHandle) {\n        // The view's value can only change if this subscription is the one that\n        // used to have precedence.\n        if (i === 0)\n          removedValue = precedence.value;\n        precedenceList.splice(i, 1);\n        break;\n      }\n    }\n    if (precedenceList.length === 0) {\n      self.dataByKey.delete(key);\n      changeCollector[key] = undefined;\n    } else if (removedValue !== undefined &&\n               !EJSON.equals(removedValue, precedenceList[0].value)) {\n      changeCollector[key] = precedenceList[0].value;\n    }\n  },\n\n  changeField: function (subscriptionHandle, key, value,\n                         changeCollector, isAdd) {\n    var self = this;\n    // Publish API ignores _id if present in fields\n    if (key === \"_id\")\n      return;\n\n    // Don't share state with the data passed in by the user.\n    value = EJSON.clone(value);\n\n    if (!self.dataByKey.has(key)) {\n      self.dataByKey.set(key, [{subscriptionHandle: subscriptionHandle,\n                                value: value}]);\n      changeCollector[key] = value;\n      return;\n    }\n    var precedenceList = self.dataByKey.get(key);\n    var elt;\n    if (!isAdd) {\n      elt = precedenceList.find(function (precedence) {\n          return precedence.subscriptionHandle === subscriptionHandle;\n      });\n    }\n\n    if (elt) {\n      if (elt === precedenceList[0] && !EJSON.equals(value, elt.value)) {\n        // this subscription is changing the value of this field.\n        changeCollector[key] = value;\n      }\n      elt.value = value;\n    } else {\n      // this subscription is newly caring about this field\n      precedenceList.push({subscriptionHandle: subscriptionHandle, value: value});\n    }\n\n  }\n});\n\n/**\n * Represents a client's view of a single collection\n * @param {String} collectionName Name of the collection it represents\n * @param {Object.<String, Function>} sessionCallbacks The callbacks for added, changed, removed\n * @class SessionCollectionView\n */\nvar SessionCollectionView = function (collectionName, sessionCallbacks) {\n  var self = this;\n  self.collectionName = collectionName;\n  self.documents = new Map();\n  self.callbacks = sessionCallbacks;\n};\n\nDDPServer._SessionCollectionView = SessionCollectionView;\n\n\nObject.assign(SessionCollectionView.prototype, {\n\n  isEmpty: function () {\n    var self = this;\n    return self.documents.size === 0;\n  },\n\n  diff: function (previous) {\n    var self = this;\n    DiffSequence.diffMaps(previous.documents, self.documents, {\n      both: _.bind(self.diffDocument, self),\n\n      rightOnly: function (id, nowDV) {\n        self.callbacks.added(self.collectionName, id, nowDV.getFields());\n      },\n\n      leftOnly: function (id, prevDV) {\n        self.callbacks.removed(self.collectionName, id);\n      }\n    });\n  },\n\n  diffDocument: function (id, prevDV, nowDV) {\n    var self = this;\n    var fields = {};\n    DiffSequence.diffObjects(prevDV.getFields(), nowDV.getFields(), {\n      both: function (key, prev, now) {\n        if (!EJSON.equals(prev, now))\n          fields[key] = now;\n      },\n      rightOnly: function (key, now) {\n        fields[key] = now;\n      },\n      leftOnly: function(key, prev) {\n        fields[key] = undefined;\n      }\n    });\n    self.callbacks.changed(self.collectionName, id, fields);\n  },\n\n  added: function (subscriptionHandle, id, fields) {\n    var self = this;\n    var docView = self.documents.get(id);\n    var added = false;\n    if (!docView) {\n      added = true;\n      if (Meteor.server.getPublicationStrategy(this.collectionName).useDummyDocumentView) {\n        docView = new DummyDocumentView();\n      } else {\n        docView = new SessionDocumentView();\n      }\n\n      self.documents.set(id, docView);\n    }\n    docView.existsIn.add(subscriptionHandle);\n    var changeCollector = {};\n    _.each(fields, function (value, key) {\n      docView.changeField(\n        subscriptionHandle, key, value, changeCollector, true);\n    });\n    if (added)\n      self.callbacks.added(self.collectionName, id, changeCollector);\n    else\n      self.callbacks.changed(self.collectionName, id, changeCollector);\n  },\n\n  changed: function (subscriptionHandle, id, changed) {\n    var self = this;\n    var changedResult = {};\n    var docView = self.documents.get(id);\n    if (!docView)\n      throw new Error(\"Could not find element with id \" + id + \" to change\");\n    _.each(changed, function (value, key) {\n      if (value === undefined)\n        docView.clearField(subscriptionHandle, key, changedResult);\n      else\n        docView.changeField(subscriptionHandle, key, value, changedResult);\n    });\n    self.callbacks.changed(self.collectionName, id, changedResult);\n  },\n\n  removed: function (subscriptionHandle, id) {\n    var self = this;\n    var docView = self.documents.get(id);\n    if (!docView) {\n      var err = new Error(\"Removed nonexistent document \" + id);\n      throw err;\n    }\n    docView.existsIn.delete(subscriptionHandle);\n    if (docView.existsIn.size === 0) {\n      // it is gone from everyone\n      self.callbacks.removed(self.collectionName, id);\n      self.documents.delete(id);\n    } else {\n      var changed = {};\n      // remove this subscription from every precedence list\n      // and record the changes\n      docView.dataByKey.forEach(function (precedenceList, key) {\n        docView.clearField(subscriptionHandle, key, changed);\n      });\n\n      self.callbacks.changed(self.collectionName, id, changed);\n    }\n  }\n});\n\n/******************************************************************************/\n/* Session                                                                    */\n/******************************************************************************/\n\nvar Session = function (server, version, socket, options) {\n  var self = this;\n  self.id = Random.id();\n\n  self.server = server;\n  self.version = version;\n\n  self.initialized = false;\n  self.socket = socket;\n\n  // Set to null when the session is destroyed. Multiple places below\n  // use this to determine if the session is alive or not.\n  self.inQueue = new Meteor._DoubleEndedQueue();\n\n  self.blocked = false;\n  self.workerRunning = false;\n\n  self.cachedUnblock = null;\n\n  // Sub objects for active subscriptions\n  self._namedSubs = new Map();\n  self._universalSubs = [];\n\n  self.userId = null;\n\n  self.collectionViews = new Map();\n\n  // Set this to false to not send messages when collectionViews are\n  // modified. This is done when rerunning subs in _setUserId and those messages\n  // are calculated via a diff instead.\n  self._isSending = true;\n\n  // If this is true, don't start a newly-created universal publisher on this\n  // session. The session will take care of starting it when appropriate.\n  self._dontStartNewUniversalSubs = false;\n\n  // When we are rerunning subscriptions, any ready messages\n  // we want to buffer up for when we are done rerunning subscriptions\n  self._pendingReady = [];\n\n  // List of callbacks to call when this connection is closed.\n  self._closeCallbacks = [];\n\n\n  // XXX HACK: If a sockjs connection, save off the URL. This is\n  // temporary and will go away in the near future.\n  self._socketUrl = socket.url;\n\n  // Allow tests to disable responding to pings.\n  self._respondToPings = options.respondToPings;\n\n  // This object is the public interface to the session. In the public\n  // API, it is called the `connection` object.  Internally we call it\n  // a `connectionHandle` to avoid ambiguity.\n  self.connectionHandle = {\n    id: self.id,\n    close: function () {\n      self.close();\n    },\n    onClose: function (fn) {\n      var cb = Meteor.bindEnvironment(fn, \"connection onClose callback\");\n      if (self.inQueue) {\n        self._closeCallbacks.push(cb);\n      } else {\n        // if we're already closed, call the callback.\n        Meteor.defer(cb);\n      }\n    },\n    clientAddress: self._clientAddress(),\n    httpHeaders: self.socket.headers\n  };\n\n  self.send({ msg: 'connected', session: self.id });\n\n  // On initial connect, spin up all the universal publishers.\n  self.startUniversalSubs();\n\n  if (version !== 'pre1' && options.heartbeatInterval !== 0) {\n    // We no longer need the low level timeout because we have heartbeats.\n    socket.setWebsocketTimeout(0);\n\n    self.heartbeat = new DDPCommon.Heartbeat({\n      heartbeatInterval: options.heartbeatInterval,\n      heartbeatTimeout: options.heartbeatTimeout,\n      onTimeout: function () {\n        self.close();\n      },\n      sendPing: function () {\n        self.send({msg: 'ping'});\n      }\n    });\n    self.heartbeat.start();\n  }\n\n  Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\n    \"livedata\", \"sessions\", 1);\n};\n\nObject.assign(Session.prototype, {\n  sendReady: function (subscriptionIds) {\n    var self = this;\n    if (self._isSending) {\n      self.send({msg: \"ready\", subs: subscriptionIds});\n    } else {\n      _.each(subscriptionIds, function (subscriptionId) {\n        self._pendingReady.push(subscriptionId);\n      });\n    }\n  },\n\n  _canSend(collectionName) {\n    return this._isSending || !this.server.getPublicationStrategy(collectionName).useCollectionView;\n  },\n\n\n  sendAdded(collectionName, id, fields) {\n    if (this._canSend(collectionName)) {\n      this.send({ msg: 'added', collection: collectionName, id, fields });\n    }\n  },\n\n  sendChanged(collectionName, id, fields) {\n    if (_.isEmpty(fields))\n      return;\n\n    if (this._canSend(collectionName)) {\n      this.send({\n        msg: \"changed\",\n        collection: collectionName,\n        id,\n        fields\n      });\n    }\n  },\n\n  sendRemoved(collectionName, id) {\n    if (this._canSend(collectionName)) {\n      this.send({msg: \"removed\", collection: collectionName, id});\n    }\n  },\n\n  getSendCallbacks: function () {\n    var self = this;\n    return {\n      added: _.bind(self.sendAdded, self),\n      changed: _.bind(self.sendChanged, self),\n      removed: _.bind(self.sendRemoved, self)\n    };\n  },\n\n  getCollectionView: function (collectionName) {\n    var self = this;\n    var ret = self.collectionViews.get(collectionName);\n    if (!ret) {\n      ret = new SessionCollectionView(collectionName,\n                                        self.getSendCallbacks());\n      self.collectionViews.set(collectionName, ret);\n    }\n    return ret;\n  },\n\n  added(subscriptionHandle, collectionName, id, fields) {\n    if (this.server.getPublicationStrategy(collectionName).useCollectionView) {\n      const view = this.getCollectionView(collectionName);\n      view.added(subscriptionHandle, id, fields);\n    } else {\n      this.sendAdded(collectionName, id, fields);\n    }\n  },\n\n  removed(subscriptionHandle, collectionName, id) {\n    if (this.server.getPublicationStrategy(collectionName).useCollectionView) {\n      const view = this.getCollectionView(collectionName);\n      view.removed(subscriptionHandle, id);\n      if (view.isEmpty()) {\n         this.collectionViews.delete(collectionName);\n      }\n    } else {\n      this.sendRemoved(collectionName, id);\n    }\n  },\n\n  changed(subscriptionHandle, collectionName, id, fields) {\n    if (this.server.getPublicationStrategy(collectionName).useCollectionView) {\n      const view = this.getCollectionView(collectionName);\n      view.changed(subscriptionHandle, id, fields);\n    } else {\n      this.sendChanged(collectionName, id, fields);\n    }\n  },\n\n  startUniversalSubs: function () {\n    var self = this;\n    // Make a shallow copy of the set of universal handlers and start them. If\n    // additional universal publishers start while we're running them (due to\n    // yielding), they will run separately as part of Server.publish.\n    var handlers = _.clone(self.server.universal_publish_handlers);\n    _.each(handlers, function (handler) {\n      self._startSubscription(handler);\n    });\n  },\n\n  // Destroy this session and unregister it at the server.\n  close: function () {\n    var self = this;\n\n    // Destroy this session, even if it's not registered at the\n    // server. Stop all processing and tear everything down. If a socket\n    // was attached, close it.\n\n    // Already destroyed.\n    if (! self.inQueue)\n      return;\n\n    // Drop the merge box data immediately.\n    self.inQueue = null;\n    self.collectionViews = new Map();\n\n    if (self.heartbeat) {\n      self.heartbeat.stop();\n      self.heartbeat = null;\n    }\n\n    if (self.socket) {\n      self.socket.close();\n      self.socket._meteorSession = null;\n    }\n\n    Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\n      \"livedata\", \"sessions\", -1);\n\n    Meteor.defer(function () {\n      // Stop callbacks can yield, so we defer this on close.\n      // sub._isDeactivated() detects that we set inQueue to null and\n      // treats it as semi-deactivated (it will ignore incoming callbacks, etc).\n      self._deactivateAllSubscriptions();\n\n      // Defer calling the close callbacks, so that the caller closing\n      // the session isn't waiting for all the callbacks to complete.\n      _.each(self._closeCallbacks, function (callback) {\n        callback();\n      });\n    });\n\n    // Unregister the session.\n    self.server._removeSession(self);\n  },\n\n  // Send a message (doing nothing if no socket is connected right now).\n  // It should be a JSON object (it will be stringified).\n  send: function (msg) {\n    const self = this;\n    if (self.socket) {\n      if (Meteor._printSentDDP)\n        Meteor._debug(\"Sent DDP\", DDPCommon.stringifyDDP(msg));\n      self.socket.send(DDPCommon.stringifyDDP(msg));\n    }\n  },\n\n  // Send a connection error.\n  sendError: function (reason, offendingMessage) {\n    var self = this;\n    var msg = {msg: 'error', reason: reason};\n    if (offendingMessage)\n      msg.offendingMessage = offendingMessage;\n    self.send(msg);\n  },\n\n  // Process 'msg' as an incoming message. As a guard against\n  // race conditions during reconnection, ignore the message if\n  // 'socket' is not the currently connected socket.\n  //\n  // We run the messages from the client one at a time, in the order\n  // given by the client. The message handler is passed an idempotent\n  // function 'unblock' which it may call to allow other messages to\n  // begin running in parallel in another fiber (for example, a method\n  // that wants to yield). Otherwise, it is automatically unblocked\n  // when it returns.\n  //\n  // Actually, we don't have to 'totally order' the messages in this\n  // way, but it's the easiest thing that's correct. (unsub needs to\n  // be ordered against sub, methods need to be ordered against each\n  // other).\n  processMessage: function (msg_in) {\n    var self = this;\n    if (!self.inQueue) // we have been destroyed.\n      return;\n\n    // Respond to ping and pong messages immediately without queuing.\n    // If the negotiated DDP version is \"pre1\" which didn't support\n    // pings, preserve the \"pre1\" behavior of responding with a \"bad\n    // request\" for the unknown messages.\n    //\n    // Fibers are needed because heartbeats use Meteor.setTimeout, which\n    // needs a Fiber. We could actually use regular setTimeout and avoid\n    // these new fibers, but it is easier to just make everything use\n    // Meteor.setTimeout and not think too hard.\n    //\n    // Any message counts as receiving a pong, as it demonstrates that\n    // the client is still alive.\n    if (self.heartbeat) {\n      self.heartbeat.messageReceived();\n    };\n\n    if (self.version !== 'pre1' && msg_in.msg === 'ping') {\n      if (self._respondToPings)\n        self.send({msg: \"pong\", id: msg_in.id});\n      return;\n    }\n    if (self.version !== 'pre1' && msg_in.msg === 'pong') {\n      // Since everything is a pong, there is nothing to do\n      return;\n    }\n\n    self.inQueue.push(msg_in);\n    if (self.workerRunning)\n      return;\n    self.workerRunning = true;\n\n    var processNext = function () {\n      var msg = self.inQueue && self.inQueue.shift();\n\n      if (!msg) {\n        self.workerRunning = false;\n        return;\n      }\n\n      function runHandlers() {\n        var blocked = true;\n\n        var unblock = function () {\n          if (!blocked)\n            return; // idempotent\n          blocked = false;\n          processNext();\n        };\n\n        self.server.onMessageHook.each(function (callback) {\n          callback(msg, self);\n          return true;\n        });\n\n        if (_.has(self.protocol_handlers, msg.msg)) {\n          const result = self.protocol_handlers[msg.msg].call(\n            self,\n            msg,\n            unblock\n          );\n\n          if (Meteor._isPromise(result)) {\n            result.finally(() => unblock());\n          } else {\n            unblock();\n          }\n        } else {\n          self.sendError('Bad request', msg);\n          unblock(); // in case the handler didn't already do it\n        }\n      }\n\n      runHandlers();\n    };\n\n    processNext();\n  },\n\n  protocol_handlers: {\n    sub: async function (msg, unblock) {\n      var self = this;\n\n      // cacheUnblock temporarly, so we can capture it later\n      // we will use unblock in current eventLoop, so this is safe\n      self.cachedUnblock = unblock;\n\n      // reject malformed messages\n      if (typeof (msg.id) !== \"string\" ||\n          typeof (msg.name) !== \"string\" ||\n          (('params' in msg) && !(msg.params instanceof Array))) {\n        self.sendError(\"Malformed subscription\", msg);\n        return;\n      }\n\n      if (!self.server.publish_handlers[msg.name]) {\n        self.send({\n          msg: 'nosub', id: msg.id,\n          error: new Meteor.Error(404, `Subscription '${msg.name}' not found`)});\n        return;\n      }\n\n      if (self._namedSubs.has(msg.id))\n        // subs are idempotent, or rather, they are ignored if a sub\n        // with that id already exists. this is important during\n        // reconnect.\n        return;\n\n      // XXX It'd be much better if we had generic hooks where any package can\n      // hook into subscription handling, but in the mean while we special case\n      // ddp-rate-limiter package. This is also done for weak requirements to\n      // add the ddp-rate-limiter package in case we don't have Accounts. A\n      // user trying to use the ddp-rate-limiter must explicitly require it.\n      if (Package['ddp-rate-limiter']) {\n        var DDPRateLimiter = Package['ddp-rate-limiter'].DDPRateLimiter;\n        var rateLimiterInput = {\n          userId: self.userId,\n          clientAddress: self.connectionHandle.clientAddress,\n          type: \"subscription\",\n          name: msg.name,\n          connectionId: self.id\n        };\n\n        DDPRateLimiter._increment(rateLimiterInput);\n        var rateLimitResult = DDPRateLimiter._check(rateLimiterInput);\n        if (!rateLimitResult.allowed) {\n          self.send({\n            msg: 'nosub', id: msg.id,\n            error: new Meteor.Error(\n              'too-many-requests',\n              DDPRateLimiter.getErrorMessage(rateLimitResult),\n              {timeToReset: rateLimitResult.timeToReset})\n          });\n          return;\n        }\n      }\n\n      var handler = self.server.publish_handlers[msg.name];\n\n      await self._startSubscription(handler, msg.id, msg.params, msg.name);\n\n      // cleaning cached unblock\n      self.cachedUnblock = null;\n    },\n\n    unsub: function (msg) {\n      var self = this;\n\n      self._stopSubscription(msg.id);\n    },\n\n    method: async function (msg, unblock) {\n      var self = this;\n\n      // Reject malformed messages.\n      // For now, we silently ignore unknown attributes,\n      // for forwards compatibility.\n      if (typeof (msg.id) !== \"string\" ||\n          typeof (msg.method) !== \"string\" ||\n          (('params' in msg) && !(msg.params instanceof Array)) ||\n          (('randomSeed' in msg) && (typeof msg.randomSeed !== \"string\"))) {\n        self.sendError(\"Malformed method invocation\", msg);\n        return;\n      }\n\n      var randomSeed = msg.randomSeed || null;\n\n      // Set up to mark the method as satisfied once all observers\n      // (and subscriptions) have reacted to any writes that were\n      // done.\n      var fence = new DDPServer._WriteFence;\n      fence.onAllCommitted(function () {\n        // Retire the fence so that future writes are allowed.\n        // This means that callbacks like timers are free to use\n        // the fence, and if they fire before it's armed (for\n        // example, because the method waits for them) their\n        // writes will be included in the fence.\n        fence.retire();\n        self.send({msg: 'updated', methods: [msg.id]});\n      });\n\n      // Find the handler\n      var handler = self.server.method_handlers[msg.method];\n      if (!handler) {\n        self.send({\n          msg: 'result', id: msg.id,\n          error: new Meteor.Error(404, `Method '${msg.method}' not found`)});\n        await fence.arm();\n        return;\n      }\n\n      var invocation = new DDPCommon.MethodInvocation({\n        name: msg.method,\n        isSimulation: false,\n        userId: self.userId,\n        setUserId(userId) {\n          return self._setUserId(userId);\n        },\n        unblock: unblock,\n        connection: self.connectionHandle,\n        randomSeed: randomSeed,\n        fence,\n      });\n\n      const promise = new Promise((resolve, reject) => {\n        // XXX It'd be better if we could hook into method handlers better but\n        // for now, we need to check if the ddp-rate-limiter exists since we\n        // have a weak requirement for the ddp-rate-limiter package to be added\n        // to our application.\n        if (Package['ddp-rate-limiter']) {\n          var DDPRateLimiter = Package['ddp-rate-limiter'].DDPRateLimiter;\n          var rateLimiterInput = {\n            userId: self.userId,\n            clientAddress: self.connectionHandle.clientAddress,\n            type: \"method\",\n            name: msg.method,\n            connectionId: self.id\n          };\n          DDPRateLimiter._increment(rateLimiterInput);\n          var rateLimitResult = DDPRateLimiter._check(rateLimiterInput)\n          if (!rateLimitResult.allowed) {\n            reject(new Meteor.Error(\n              \"too-many-requests\",\n              DDPRateLimiter.getErrorMessage(rateLimitResult),\n              {timeToReset: rateLimitResult.timeToReset}\n            ));\n            return;\n          }\n        }\n\n\n\n        const getCurrentMethodInvocationResult = () =>\n          DDP._CurrentMethodInvocation.withValue(\n            invocation,\n            () =>\n              maybeAuditArgumentChecks(\n                handler,\n                invocation,\n                msg.params,\n                \"call to '\" + msg.method + \"'\"\n              ),\n            {\n              name: 'getCurrentMethodInvocationResult',\n              keyName: 'getCurrentMethodInvocationResult',\n            }\n          );\n\n        resolve(\n          DDPServer._CurrentWriteFence.withValue(\n            fence,\n            getCurrentMethodInvocationResult,\n            {\n              name: 'DDPServer._CurrentWriteFence',\n              keyName: '_CurrentWriteFence',\n            }\n          )\n        );\n      });\n\n      async function finish() {\n        await fence.arm();\n        unblock();\n      }\n\n      const payload = {\n        msg: \"result\",\n        id: msg.id\n      };\n      return promise.then(async result => {\n        await finish();\n        if (result !== undefined) {\n          payload.result = result;\n        }\n        self.send(payload);\n      }, async (exception) => {\n        await finish();\n        payload.error = wrapInternalException(\n          exception,\n          `while invoking method '${msg.method}'`\n        );\n        self.send(payload);\n      });\n    }\n  },\n\n  _eachSub: function (f) {\n    var self = this;\n    self._namedSubs.forEach(f);\n    self._universalSubs.forEach(f);\n  },\n\n  _diffCollectionViews: function (beforeCVs) {\n    var self = this;\n    DiffSequence.diffMaps(beforeCVs, self.collectionViews, {\n      both: function (collectionName, leftValue, rightValue) {\n        rightValue.diff(leftValue);\n      },\n      rightOnly: function (collectionName, rightValue) {\n        rightValue.documents.forEach(function (docView, id) {\n          self.sendAdded(collectionName, id, docView.getFields());\n        });\n      },\n      leftOnly: function (collectionName, leftValue) {\n        leftValue.documents.forEach(function (doc, id) {\n          self.sendRemoved(collectionName, id);\n        });\n      }\n    });\n  },\n\n  // Sets the current user id in all appropriate contexts and reruns\n  // all subscriptions\n  async _setUserId(userId) {\n    var self = this;\n\n    if (userId !== null && typeof userId !== \"string\")\n      throw new Error(\"setUserId must be called on string or null, not \" +\n                      typeof userId);\n\n    // Prevent newly-created universal subscriptions from being added to our\n    // session. They will be found below when we call startUniversalSubs.\n    //\n    // (We don't have to worry about named subscriptions, because we only add\n    // them when we process a 'sub' message. We are currently processing a\n    // 'method' message, and the method did not unblock, because it is illegal\n    // to call setUserId after unblock. Thus we cannot be concurrently adding a\n    // new named subscription).\n    self._dontStartNewUniversalSubs = true;\n\n    // Prevent current subs from updating our collectionViews and call their\n    // stop callbacks. This may yield.\n    self._eachSub(function (sub) {\n      sub._deactivate();\n    });\n\n    // All subs should now be deactivated. Stop sending messages to the client,\n    // save the state of the published collections, reset to an empty view, and\n    // update the userId.\n    self._isSending = false;\n    var beforeCVs = self.collectionViews;\n    self.collectionViews = new Map();\n    self.userId = userId;\n\n    // _setUserId is normally called from a Meteor method with\n    // DDP._CurrentMethodInvocation set. But DDP._CurrentMethodInvocation is not\n    // expected to be set inside a publish function, so we temporary unset it.\n    // Inside a publish function DDP._CurrentPublicationInvocation is set.\n    await DDP._CurrentMethodInvocation.withValue(undefined, async function () {\n      // Save the old named subs, and reset to having no subscriptions.\n      var oldNamedSubs = self._namedSubs;\n      self._namedSubs = new Map();\n      self._universalSubs = [];\n\n\n\n      await Promise.all([...oldNamedSubs].map(async ([subscriptionId, sub]) => {\n        const newSub = sub._recreate();\n        self._namedSubs.set(subscriptionId, newSub);\n        // nb: if the handler throws or calls this.error(), it will in fact\n        // immediately send its 'nosub'. This is OK, though.\n        await newSub._runHandler();\n      }));\n\n      // Allow newly-created universal subs to be started on our connection in\n      // parallel with the ones we're spinning up here, and spin up universal\n      // subs.\n      self._dontStartNewUniversalSubs = false;\n      self.startUniversalSubs();\n    }, { name: '_setUserId' });\n\n    // Start sending messages again, beginning with the diff from the previous\n    // state of the world to the current state. No yields are allowed during\n    // this diff, so that other changes cannot interleave.\n    Meteor._noYieldsAllowed(function () {\n      self._isSending = true;\n      self._diffCollectionViews(beforeCVs);\n      if (!_.isEmpty(self._pendingReady)) {\n        self.sendReady(self._pendingReady);\n        self._pendingReady = [];\n      }\n    });\n  },\n\n  _startSubscription: function (handler, subId, params, name) {\n    var self = this;\n\n    var sub = new Subscription(\n      self, handler, subId, params, name);\n\n    let unblockHander = self.cachedUnblock;\n    // _startSubscription may call from a lot places\n    // so cachedUnblock might be null in somecases\n    // assign the cachedUnblock\n    sub.unblock = unblockHander || (() => {});\n\n    if (subId)\n      self._namedSubs.set(subId, sub);\n    else\n      self._universalSubs.push(sub);\n\n    return sub._runHandler();\n  },\n\n  // Tear down specified subscription\n  _stopSubscription: function (subId, error) {\n    var self = this;\n\n    var subName = null;\n    if (subId) {\n      var maybeSub = self._namedSubs.get(subId);\n      if (maybeSub) {\n        subName = maybeSub._name;\n        maybeSub._removeAllDocuments();\n        maybeSub._deactivate();\n        self._namedSubs.delete(subId);\n      }\n    }\n\n    var response = {msg: 'nosub', id: subId};\n\n    if (error) {\n      response.error = wrapInternalException(\n        error,\n        subName ? (\"from sub \" + subName + \" id \" + subId)\n          : (\"from sub id \" + subId));\n    }\n\n    self.send(response);\n  },\n\n  // Tear down all subscriptions. Note that this does NOT send removed or nosub\n  // messages, since we assume the client is gone.\n  _deactivateAllSubscriptions: function () {\n    var self = this;\n\n    self._namedSubs.forEach(function (sub, id) {\n      sub._deactivate();\n    });\n    self._namedSubs = new Map();\n\n    self._universalSubs.forEach(function (sub) {\n      sub._deactivate();\n    });\n    self._universalSubs = [];\n  },\n\n  // Determine the remote client's IP address, based on the\n  // HTTP_FORWARDED_COUNT environment variable representing how many\n  // proxies the server is behind.\n  _clientAddress: function () {\n    var self = this;\n\n    // For the reported client address for a connection to be correct,\n    // the developer must set the HTTP_FORWARDED_COUNT environment\n    // variable to an integer representing the number of hops they\n    // expect in the `x-forwarded-for` header. E.g., set to \"1\" if the\n    // server is behind one proxy.\n    //\n    // This could be computed once at startup instead of every time.\n    var httpForwardedCount = parseInt(process.env['HTTP_FORWARDED_COUNT']) || 0;\n\n    if (httpForwardedCount === 0)\n      return self.socket.remoteAddress;\n\n    var forwardedFor = self.socket.headers[\"x-forwarded-for\"];\n    if (! _.isString(forwardedFor))\n      return null;\n    forwardedFor = forwardedFor.trim().split(/\\s*,\\s*/);\n\n    // Typically the first value in the `x-forwarded-for` header is\n    // the original IP address of the client connecting to the first\n    // proxy.  However, the end user can easily spoof the header, in\n    // which case the first value(s) will be the fake IP address from\n    // the user pretending to be a proxy reporting the original IP\n    // address value.  By counting HTTP_FORWARDED_COUNT back from the\n    // end of the list, we ensure that we get the IP address being\n    // reported by *our* first proxy.\n\n    if (httpForwardedCount < 0 || httpForwardedCount > forwardedFor.length)\n      return null;\n\n    return forwardedFor[forwardedFor.length - httpForwardedCount];\n  }\n});\n\n/******************************************************************************/\n/* Subscription                                                               */\n/******************************************************************************/\n\n// Ctor for a sub handle: the input to each publish function\n\n// Instance name is this because it's usually referred to as this inside a\n// publish\n/**\n * @summary The server's side of a subscription\n * @class Subscription\n * @instanceName this\n * @showInstanceName true\n */\nvar Subscription = function (\n    session, handler, subscriptionId, params, name) {\n  var self = this;\n  self._session = session; // type is Session\n\n  /**\n   * @summary Access inside the publish function. The incoming [connection](#meteor_onconnection) for this subscription.\n   * @locus Server\n   * @name  connection\n   * @memberOf Subscription\n   * @instance\n   */\n  self.connection = session.connectionHandle; // public API object\n\n  self._handler = handler;\n\n  // My subscription ID (generated by client, undefined for universal subs).\n  self._subscriptionId = subscriptionId;\n  // Undefined for universal subs\n  self._name = name;\n\n  self._params = params || [];\n\n  // Only named subscriptions have IDs, but we need some sort of string\n  // internally to keep track of all subscriptions inside\n  // SessionDocumentViews. We use this subscriptionHandle for that.\n  if (self._subscriptionId) {\n    self._subscriptionHandle = 'N' + self._subscriptionId;\n  } else {\n    self._subscriptionHandle = 'U' + Random.id();\n  }\n\n  // Has _deactivate been called?\n  self._deactivated = false;\n\n  // Stop callbacks to g/c this sub.  called w/ zero arguments.\n  self._stopCallbacks = [];\n\n  // The set of (collection, documentid) that this subscription has\n  // an opinion about.\n  self._documents = new Map();\n\n  // Remember if we are ready.\n  self._ready = false;\n\n  // Part of the public API: the user of this sub.\n\n  /**\n   * @summary Access inside the publish function. The id of the logged-in user, or `null` if no user is logged in.\n   * @locus Server\n   * @memberOf Subscription\n   * @name  userId\n   * @instance\n   */\n  self.userId = session.userId;\n\n  // For now, the id filter is going to default to\n  // the to/from DDP methods on MongoID, to\n  // specifically deal with mongo/minimongo ObjectIds.\n\n  // Later, you will be able to make this be \"raw\"\n  // if you want to publish a collection that you know\n  // just has strings for keys and no funny business, to\n  // a DDP consumer that isn't minimongo.\n\n  self._idFilter = {\n    idStringify: MongoID.idStringify,\n    idParse: MongoID.idParse\n  };\n\n  Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\n    \"livedata\", \"subscriptions\", 1);\n};\n\nObject.assign(Subscription.prototype, {\n  _runHandler: async function() {\n    // XXX should we unblock() here? Either before running the publish\n    // function, or before running _publishCursor.\n    //\n    // Right now, each publish function blocks all future publishes and\n    // methods waiting on data from Mongo (or whatever else the function\n    // blocks on). This probably slows page load in common cases.\n\n    if (!this.unblock) {\n      this.unblock = () => {};\n    }\n\n    const self = this;\n    let resultOrThenable = null;\n    try {\n      resultOrThenable = DDP._CurrentPublicationInvocation.withValue(\n        self,\n        () =>\n          maybeAuditArgumentChecks(\n            self._handler,\n            self,\n            EJSON.clone(self._params),\n            // It's OK that this would look weird for universal subscriptions,\n            // because they have no arguments so there can never be an\n            // audit-argument-checks failure.\n            \"publisher '\" + self._name + \"'\"\n          ),\n        { name: self._name }\n      );\n    } catch (e) {\n      self.error(e);\n      return;\n    }\n\n    // Did the handler call this.error or this.stop?\n    if (self._isDeactivated()) return;\n\n    // Both conventional and async publish handler functions are supported.\n    // If an object is returned with a then() function, it is either a promise\n    // or thenable and will be resolved asynchronously.\n    const isThenable =\n      resultOrThenable && typeof resultOrThenable.then === 'function';\n    if (isThenable) {\n      try {\n        await self._publishHandlerResult(await resultOrThenable);\n      } catch(e) {\n        self.error(e)\n      }\n    } else {\n      await self._publishHandlerResult(resultOrThenable);\n    }\n  },\n\n  async _publishHandlerResult (res) {\n    // SPECIAL CASE: Instead of writing their own callbacks that invoke\n    // this.added/changed/ready/etc, the user can just return a collection\n    // cursor or array of cursors from the publish function; we call their\n    // _publishCursor method which starts observing the cursor and publishes the\n    // results. Note that _publishCursor does NOT call ready().\n    //\n    // XXX This uses an undocumented interface which only the Mongo cursor\n    // interface publishes. Should we make this interface public and encourage\n    // users to implement it themselves? Arguably, it's unnecessary; users can\n    // already write their own functions like\n    //   var publishMyReactiveThingy = function (name, handler) {\n    //     Meteor.publish(name, function () {\n    //       var reactiveThingy = handler();\n    //       reactiveThingy.publishMe();\n    //     });\n    //   };\n\n    var self = this;\n    var isCursor = function (c) {\n      return c && c._publishCursor;\n    };\n    if (isCursor(res)) {\n      try {\n        await res._publishCursor(self);\n      } catch (e) {\n        self.error(e);\n        return;\n      }\n      // _publishCursor only returns after the initial added callbacks have run.\n      // mark subscription as ready.\n      self.ready();\n    } else if (_.isArray(res)) {\n      // Check all the elements are cursors\n      if (! _.all(res, isCursor)) {\n        self.error(new Error(\"Publish function returned an array of non-Cursors\"));\n        return;\n      }\n      // Find duplicate collection names\n      // XXX we should support overlapping cursors, but that would require the\n      // merge box to allow overlap within a subscription\n      var collectionNames = {};\n\n      for (var i = 0; i < res.length; ++i) {\n        var collectionName = res[i]._getCollectionName();\n        if (_.has(collectionNames, collectionName)) {\n          self.error(new Error(\n            \"Publish function returned multiple cursors for collection \" +\n              collectionName));\n          return;\n        }\n        collectionNames[collectionName] = true;\n      }\n\n      try {\n        await Promise.all(res.map(cur => cur._publishCursor(self)));\n      } catch (e) {\n        self.error(e);\n        return;\n      }\n      self.ready();\n    } else if (res) {\n      // Truthy values other than cursors or arrays are probably a\n      // user mistake (possible returning a Mongo document via, say,\n      // `coll.findOne()`).\n      self.error(new Error(\"Publish function can only return a Cursor or \"\n                           + \"an array of Cursors\"));\n    }\n  },\n\n  // This calls all stop callbacks and prevents the handler from updating any\n  // SessionCollectionViews further. It's used when the user unsubscribes or\n  // disconnects, as well as during setUserId re-runs. It does *NOT* send\n  // removed messages for the published objects; if that is necessary, call\n  // _removeAllDocuments first.\n  _deactivate: function() {\n    var self = this;\n    if (self._deactivated)\n      return;\n    self._deactivated = true;\n    self._callStopCallbacks();\n    Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\n      \"livedata\", \"subscriptions\", -1);\n  },\n\n  _callStopCallbacks: function () {\n    var self = this;\n    // Tell listeners, so they can clean up\n    var callbacks = self._stopCallbacks;\n    self._stopCallbacks = [];\n    _.each(callbacks, function (callback) {\n      callback();\n    });\n  },\n\n  // Send remove messages for every document.\n  _removeAllDocuments: function () {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._documents.forEach(function (collectionDocs, collectionName) {\n        collectionDocs.forEach(function (strId) {\n          self.removed(collectionName, self._idFilter.idParse(strId));\n        });\n      });\n    });\n  },\n\n  // Returns a new Subscription for the same session with the same\n  // initial creation parameters. This isn't a clone: it doesn't have\n  // the same _documents cache, stopped state or callbacks; may have a\n  // different _subscriptionHandle, and gets its userId from the\n  // session, not from this object.\n  _recreate: function () {\n    var self = this;\n    return new Subscription(\n      self._session, self._handler, self._subscriptionId, self._params,\n      self._name);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Stops this client's subscription, triggering a call on the client to the `onStop` callback passed to [`Meteor.subscribe`](#meteor_subscribe), if any. If `error` is not a [`Meteor.Error`](#meteor_error), it will be [sanitized](#meteor_error).\n   * @locus Server\n   * @param {Error} error The error to pass to the client.\n   * @instance\n   * @memberOf Subscription\n   */\n  error: function (error) {\n    var self = this;\n    if (self._isDeactivated())\n      return;\n    self._session._stopSubscription(self._subscriptionId, error);\n  },\n\n  // Note that while our DDP client will notice that you've called stop() on the\n  // server (and clean up its _subscriptions table) we don't actually provide a\n  // mechanism for an app to notice this (the subscribe onError callback only\n  // triggers if there is an error).\n\n  /**\n   * @summary Call inside the publish function.  Stops this client's subscription and invokes the client's `onStop` callback with no error.\n   * @locus Server\n   * @instance\n   * @memberOf Subscription\n   */\n  stop: function () {\n    var self = this;\n    if (self._isDeactivated())\n      return;\n    self._session._stopSubscription(self._subscriptionId);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Registers a callback function to run when the subscription is stopped.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {Function} func The callback function\n   */\n  onStop: function (callback) {\n    var self = this;\n    callback = Meteor.bindEnvironment(callback, 'onStop callback', self);\n    if (self._isDeactivated())\n      callback();\n    else\n      self._stopCallbacks.push(callback);\n  },\n\n  // This returns true if the sub has been deactivated, *OR* if the session was\n  // destroyed but the deferred call to _deactivateAllSubscriptions hasn't\n  // happened yet.\n  _isDeactivated: function () {\n    var self = this;\n    return self._deactivated || self._session.inQueue === null;\n  },\n\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that a document has been added to the record set.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {String} collection The name of the collection that contains the new document.\n   * @param {String} id The new document's ID.\n   * @param {Object} fields The fields in the new document.  If `_id` is present it is ignored.\n   */\n  added (collectionName, id, fields) {\n    if (this._isDeactivated())\n      return;\n    id = this._idFilter.idStringify(id);\n\n    if (this._session.server.getPublicationStrategy(collectionName).doAccountingForCollection) {\n      let ids = this._documents.get(collectionName);\n      if (ids == null) {\n        ids = new Set();\n        this._documents.set(collectionName, ids);\n      }\n      ids.add(id);\n    }\n\n    this._session.added(this._subscriptionHandle, collectionName, id, fields);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that a document in the record set has been modified.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {String} collection The name of the collection that contains the changed document.\n   * @param {String} id The changed document's ID.\n   * @param {Object} fields The fields in the document that have changed, together with their new values.  If a field is not present in `fields` it was left unchanged; if it is present in `fields` and has a value of `undefined` it was removed from the document.  If `_id` is present it is ignored.\n   */\n  changed (collectionName, id, fields) {\n    if (this._isDeactivated())\n      return;\n    id = this._idFilter.idStringify(id);\n    this._session.changed(this._subscriptionHandle, collectionName, id, fields);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that a document has been removed from the record set.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {String} collection The name of the collection that the document has been removed from.\n   * @param {String} id The ID of the document that has been removed.\n   */\n  removed (collectionName, id) {\n    if (this._isDeactivated())\n      return;\n    id = this._idFilter.idStringify(id);\n\n    if (this._session.server.getPublicationStrategy(collectionName).doAccountingForCollection) {\n      // We don't bother to delete sets of things in a collection if the\n      // collection is empty.  It could break _removeAllDocuments.\n      this._documents.get(collectionName).delete(id);\n    }\n\n    this._session.removed(this._subscriptionHandle, collectionName, id);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that an initial, complete snapshot of the record set has been sent.  This will trigger a call on the client to the `onReady` callback passed to  [`Meteor.subscribe`](#meteor_subscribe), if any.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   */\n  ready: function () {\n    var self = this;\n    if (self._isDeactivated())\n      return;\n    if (!self._subscriptionId)\n      return;  // Unnecessary but ignored for universal sub\n    if (!self._ready) {\n      self._session.sendReady([self._subscriptionId]);\n      self._ready = true;\n    }\n  }\n});\n\n/******************************************************************************/\n/* Server                                                                     */\n/******************************************************************************/\n\nServer = function (options = {}) {\n  var self = this;\n\n  // The default heartbeat interval is 30 seconds on the server and 35\n  // seconds on the client.  Since the client doesn't need to send a\n  // ping as long as it is receiving pings, this means that pings\n  // normally go from the server to the client.\n  //\n  // Note: Troposphere depends on the ability to mutate\n  // Meteor.server.options.heartbeatTimeout! This is a hack, but it's life.\n  self.options = {\n    heartbeatInterval: 15000,\n    heartbeatTimeout: 15000,\n    // For testing, allow responding to pings to be disabled.\n    respondToPings: true,\n    defaultPublicationStrategy: publicationStrategies.SERVER_MERGE,\n    ...options,\n  };\n\n  // Map of callbacks to call when a new connection comes in to the\n  // server and completes DDP version negotiation. Use an object instead\n  // of an array so we can safely remove one from the list while\n  // iterating over it.\n  self.onConnectionHook = new Hook({\n    debugPrintExceptions: \"onConnection callback\"\n  });\n\n  // Map of callbacks to call when a new message comes in.\n  self.onMessageHook = new Hook({\n    debugPrintExceptions: \"onMessage callback\"\n  });\n\n  self.publish_handlers = {};\n  self.universal_publish_handlers = [];\n\n  self.method_handlers = {};\n\n  self._publicationStrategies = {};\n\n  self.sessions = new Map(); // map from id to session\n\n  self.stream_server = new StreamServer();\n\n  self.stream_server.register(function (socket) {\n    // socket implements the SockJSConnection interface\n    socket._meteorSession = null;\n\n    var sendError = function (reason, offendingMessage) {\n      var msg = {msg: 'error', reason: reason};\n      if (offendingMessage)\n        msg.offendingMessage = offendingMessage;\n      socket.send(DDPCommon.stringifyDDP(msg));\n    };\n\n    socket.on('data', function (raw_msg) {\n      if (Meteor._printReceivedDDP) {\n        Meteor._debug(\"Received DDP\", raw_msg);\n      }\n      try {\n        try {\n          var msg = DDPCommon.parseDDP(raw_msg);\n        } catch (err) {\n          sendError('Parse error');\n          return;\n        }\n        if (msg === null || !msg.msg) {\n          sendError('Bad request', msg);\n          return;\n        }\n\n        if (msg.msg === 'connect') {\n          if (socket._meteorSession) {\n            sendError(\"Already connected\", msg);\n            return;\n          }\n\n          self._handleConnect(socket, msg);\n\n          return;\n        }\n\n        if (!socket._meteorSession) {\n          sendError('Must connect first', msg);\n          return;\n        }\n        socket._meteorSession.processMessage(msg);\n      } catch (e) {\n        // XXX print stack nicely\n        Meteor._debug(\"Internal exception while processing message\", msg, e);\n      }\n    });\n\n    socket.on('close', function () {\n      if (socket._meteorSession) {\n        socket._meteorSession.close();\n      }\n    });\n  });\n};\n\nObject.assign(Server.prototype, {\n\n  /**\n   * @summary Register a callback to be called when a new DDP connection is made to the server.\n   * @locus Server\n   * @param {function} callback The function to call when a new DDP connection is established.\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   */\n  onConnection: function (fn) {\n    var self = this;\n    return self.onConnectionHook.register(fn);\n  },\n\n  /**\n   * @summary Set publication strategy for the given collection. Publications strategies are available from `DDPServer.publicationStrategies`. You call this method from `Meteor.server`, like `Meteor.server.setPublicationStrategy()`\n   * @locus Server\n   * @alias setPublicationStrategy\n   * @param collectionName {String}\n   * @param strategy {{useCollectionView: boolean, doAccountingForCollection: boolean}}\n   * @memberOf Meteor.server\n   * @importFromPackage meteor\n   */\n  setPublicationStrategy(collectionName, strategy) {\n    if (!Object.values(publicationStrategies).includes(strategy)) {\n      throw new Error(`Invalid merge strategy: ${strategy} \n        for collection ${collectionName}`);\n    }\n    this._publicationStrategies[collectionName] = strategy;\n  },\n\n  /**\n   * @summary Gets the publication strategy for the requested collection. You call this method from `Meteor.server`, like `Meteor.server.getPublicationStrategy()`\n   * @locus Server\n   * @alias getPublicationStrategy\n   * @param collectionName {String}\n   * @memberOf Meteor.server\n   * @importFromPackage meteor\n   * @return {{useCollectionView: boolean, doAccountingForCollection: boolean}}\n   */\n  getPublicationStrategy(collectionName) {\n    return this._publicationStrategies[collectionName]\n      || this.options.defaultPublicationStrategy;\n  },\n\n  /**\n   * @summary Register a callback to be called when a new DDP message is received.\n   * @locus Server\n   * @param {function} callback The function to call when a new DDP message is received.\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   */\n  onMessage: function (fn) {\n    var self = this;\n    return self.onMessageHook.register(fn);\n  },\n\n  _handleConnect: function (socket, msg) {\n    var self = this;\n\n    // The connect message must specify a version and an array of supported\n    // versions, and it must claim to support what it is proposing.\n    if (!(typeof (msg.version) === 'string' &&\n          _.isArray(msg.support) &&\n          _.all(msg.support, _.isString) &&\n          _.contains(msg.support, msg.version))) {\n      socket.send(DDPCommon.stringifyDDP({msg: 'failed',\n                                version: DDPCommon.SUPPORTED_DDP_VERSIONS[0]}));\n      socket.close();\n      return;\n    }\n\n    // In the future, handle session resumption: something like:\n    //  socket._meteorSession = self.sessions[msg.session]\n    var version = calculateVersion(msg.support, DDPCommon.SUPPORTED_DDP_VERSIONS);\n\n    if (msg.version !== version) {\n      // The best version to use (according to the client's stated preferences)\n      // is not the one the client is trying to use. Inform them about the best\n      // version to use.\n      socket.send(DDPCommon.stringifyDDP({msg: 'failed', version: version}));\n      socket.close();\n      return;\n    }\n\n    // Yay, version matches! Create a new session.\n    // Note: Troposphere depends on the ability to mutate\n    // Meteor.server.options.heartbeatTimeout! This is a hack, but it's life.\n    socket._meteorSession = new Session(self, version, socket, self.options);\n    self.sessions.set(socket._meteorSession.id, socket._meteorSession);\n    self.onConnectionHook.each(function (callback) {\n      if (socket._meteorSession)\n        callback(socket._meteorSession.connectionHandle);\n      return true;\n    });\n  },\n  /**\n   * Register a publish handler function.\n   *\n   * @param name {String} identifier for query\n   * @param handler {Function} publish handler\n   * @param options {Object}\n   *\n   * Server will call handler function on each new subscription,\n   * either when receiving DDP sub message for a named subscription, or on\n   * DDP connect for a universal subscription.\n   *\n   * If name is null, this will be a subscription that is\n   * automatically established and permanently on for all connected\n   * client, instead of a subscription that can be turned on and off\n   * with subscribe().\n   *\n   * options to contain:\n   *  - (mostly internal) is_auto: true if generated automatically\n   *    from an autopublish hook. this is for cosmetic purposes only\n   *    (it lets us determine whether to print a warning suggesting\n   *    that you turn off autopublish).\n   */\n\n  /**\n   * @summary Publish a record set.\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   * @locus Server\n   * @param {String|Object} name If String, name of the record set.  If Object, publications Dictionary of publish functions by name.  If `null`, the set has no name, and the record set is automatically sent to all connected clients.\n   * @param {Function} func Function called on the server each time a client subscribes.  Inside the function, `this` is the publish handler object, described below.  If the client passed arguments to `subscribe`, the function is called with the same arguments.\n   */\n  publish: function (name, handler, options) {\n    var self = this;\n\n    if (! _.isObject(name)) {\n      options = options || {};\n\n      if (name && name in self.publish_handlers) {\n        Meteor._debug(\"Ignoring duplicate publish named '\" + name + \"'\");\n        return;\n      }\n\n      if (Package.autopublish && !options.is_auto) {\n        // They have autopublish on, yet they're trying to manually\n        // pick stuff to publish. They probably should turn off\n        // autopublish. (This check isn't perfect -- if you create a\n        // publish before you turn on autopublish, it won't catch\n        // it, but this will definitely handle the simple case where\n        // you've added the autopublish package to your app, and are\n        // calling publish from your app code).\n        if (!self.warned_about_autopublish) {\n          self.warned_about_autopublish = true;\n          Meteor._debug(\n    \"** You've set up some data subscriptions with Meteor.publish(), but\\n\" +\n    \"** you still have autopublish turned on. Because autopublish is still\\n\" +\n    \"** on, your Meteor.publish() calls won't have much effect. All data\\n\" +\n    \"** will still be sent to all clients.\\n\" +\n    \"**\\n\" +\n    \"** Turn off autopublish by removing the autopublish package:\\n\" +\n    \"**\\n\" +\n    \"**   $ meteor remove autopublish\\n\" +\n    \"**\\n\" +\n    \"** .. and make sure you have Meteor.publish() and Meteor.subscribe() calls\\n\" +\n    \"** for each collection that you want clients to see.\\n\");\n        }\n      }\n\n      if (name)\n        self.publish_handlers[name] = handler;\n      else {\n        self.universal_publish_handlers.push(handler);\n        // Spin up the new publisher on any existing session too. Run each\n        // session's subscription in a new Fiber, so that there's no change for\n        // self.sessions to change while we're running this loop.\n        self.sessions.forEach(function (session) {\n          if (!session._dontStartNewUniversalSubs) {\n            session._startSubscription(handler);\n          }\n        });\n      }\n    }\n    else{\n      _.each(name, function(value, key) {\n        self.publish(key, value, {});\n      });\n    }\n  },\n\n  _removeSession: function (session) {\n    var self = this;\n    self.sessions.delete(session.id);\n  },\n\n  /**\n   * @summary Tells if the method call came from a call or a callAsync.\n   * @locus Anywhere\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   * @returns boolean\n   */\n  isAsyncCall: function(){\n    return DDP._CurrentMethodInvocation._isCallAsyncMethodRunning()\n  },\n\n  /**\n   * @summary Defines functions that can be invoked over the network by clients.\n   * @locus Anywhere\n   * @param {Object} methods Dictionary whose keys are method names and values are functions.\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   */\n  methods: function (methods) {\n    var self = this;\n    _.each(methods, function (func, name) {\n      if (typeof func !== 'function')\n        throw new Error(\"Method '\" + name + \"' must be a function\");\n      if (self.method_handlers[name])\n        throw new Error(\"A method named '\" + name + \"' is already defined\");\n      self.method_handlers[name] = func;\n    });\n  },\n\n  call: function (name, ...args) {\n    if (args.length && typeof args[args.length - 1] === \"function\") {\n      // If it's a function, the last argument is the result callback, not\n      // a parameter to the remote method.\n      var callback = args.pop();\n    }\n\n    return this.apply(name, args, callback);\n  },\n\n  // A version of the call method that always returns a Promise.\n  callAsync: function (name, ...args) {\n    const options = args[0]?.hasOwnProperty('returnStubValue')\n      ? args.shift()\n      : {};\n    DDP._CurrentMethodInvocation._set();\n    DDP._CurrentMethodInvocation._setCallAsyncMethodRunning(true);\n    const promise = new Promise((resolve, reject) => {\n      DDP._CurrentCallAsyncInvocation._set({ name, hasCallAsyncParent: true });\n      this.applyAsync(name, args, { isFromCallAsync: true, ...options })\n        .then(resolve)\n        .catch(reject)\n        .finally(() => {\n          DDP._CurrentCallAsyncInvocation._set();\n        });\n    });\n    return promise.finally(() =>\n      DDP._CurrentMethodInvocation._setCallAsyncMethodRunning(false)\n    );\n  },\n\n  apply: function (name, args, options, callback) {\n    // We were passed 3 arguments. They may be either (name, args, options)\n    // or (name, args, callback)\n    if (! callback && typeof options === 'function') {\n      callback = options;\n      options = {};\n    } else {\n      options = options || {};\n    }\n    const promise = this.applyAsync(name, args, options);\n\n    // Return the result in whichever way the caller asked for it. Note that we\n    // do NOT block on the write fence in an analogous way to how the client\n    // blocks on the relevant data being visible, so you are NOT guaranteed that\n    // cursor observe callbacks have fired when your callback is invoked. (We\n    // can change this if there's a real use case).\n    if (callback) {\n      promise.then(\n        result => callback(undefined, result),\n        exception => callback(exception)\n      );\n    } else {\n      return promise;\n    }\n  },\n\n  // @param options {Optional Object}\n  applyAsync: function (name, args, options) {\n    // Run the handler\n    var handler = this.method_handlers[name];\n\n    if (! handler) {\n      return Promise.reject(\n        new Meteor.Error(404, `Method '${name}' not found`)\n      );\n    }\n    // If this is a method call from within another method or publish function,\n    // get the user state from the outer method or publish function, otherwise\n    // don't allow setUserId to be called\n    var userId = null;\n    let setUserId = () => {\n      throw new Error(\"Can't call setUserId on a server initiated method call\");\n    };\n    var connection = null;\n    var currentMethodInvocation = DDP._CurrentMethodInvocation.get();\n    var currentPublicationInvocation = DDP._CurrentPublicationInvocation.get();\n    var randomSeed = null;\n\n    if (currentMethodInvocation) {\n      userId = currentMethodInvocation.userId;\n      setUserId = (userId) => currentMethodInvocation.setUserId(userId);\n      connection = currentMethodInvocation.connection;\n      randomSeed = DDPCommon.makeRpcSeed(currentMethodInvocation, name);\n    } else if (currentPublicationInvocation) {\n      userId = currentPublicationInvocation.userId;\n      setUserId = (userId) => currentPublicationInvocation._session._setUserId(userId);\n      connection = currentPublicationInvocation.connection;\n    }\n\n    var invocation = new DDPCommon.MethodInvocation({\n      isSimulation: false,\n      userId,\n      setUserId,\n      connection,\n      randomSeed\n    });\n\n    return new Promise((resolve, reject) => {\n      let result;\n      try {\n        result = DDP._CurrentMethodInvocation.withValue(invocation, () =>\n          maybeAuditArgumentChecks(\n            handler,\n            invocation,\n            EJSON.clone(args),\n            \"internal call to '\" + name + \"'\"\n          )\n        );\n      } catch (e) {\n        return reject(e);\n      }\n      if (!Meteor._isPromise(result)) {\n        return resolve(result);\n      }\n      result.then(r => resolve(r)).catch(reject);\n    }).then(EJSON.clone);\n  },\n\n  _urlForSession: function (sessionId) {\n    var self = this;\n    var session = self.sessions.get(sessionId);\n    if (session)\n      return session._socketUrl;\n    else\n      return null;\n  }\n});\n\nvar calculateVersion = function (clientSupportedVersions,\n                                 serverSupportedVersions) {\n  var correctVersion = _.find(clientSupportedVersions, function (version) {\n    return _.contains(serverSupportedVersions, version);\n  });\n  if (!correctVersion) {\n    correctVersion = serverSupportedVersions[0];\n  }\n  return correctVersion;\n};\n\nDDPServer._calculateVersion = calculateVersion;\n\n\n// \"blind\" exceptions other than those that were deliberately thrown to signal\n// errors to the client\nvar wrapInternalException = function (exception, context) {\n  if (!exception) return exception;\n\n  // To allow packages to throw errors intended for the client but not have to\n  // depend on the Meteor.Error class, `isClientSafe` can be set to true on any\n  // error before it is thrown.\n  if (exception.isClientSafe) {\n    if (!(exception instanceof Meteor.Error)) {\n      const originalMessage = exception.message;\n      exception = new Meteor.Error(exception.error, exception.reason, exception.details);\n      exception.message = originalMessage;\n    }\n    return exception;\n  }\n\n  // Tests can set the '_expectedByTest' flag on an exception so it won't go to\n  // the server log.\n  if (!exception._expectedByTest) {\n    Meteor._debug(\"Exception \" + context, exception.stack);\n    if (exception.sanitizedError) {\n      Meteor._debug(\"Sanitized and reported to the client as:\", exception.sanitizedError);\n      Meteor._debug();\n    }\n  }\n\n  // Did the error contain more details that could have been useful if caught in\n  // server code (or if thrown from non-client-originated code), but also\n  // provided a \"sanitized\" version with more context than 500 Internal server\n  // error? Use that.\n  if (exception.sanitizedError) {\n    if (exception.sanitizedError.isClientSafe)\n      return exception.sanitizedError;\n    Meteor._debug(\"Exception \" + context + \" provides a sanitizedError that \" +\n                  \"does not have isClientSafe property set; ignoring\");\n  }\n\n  return new Meteor.Error(500, \"Internal server error\");\n};\n\n\n// Audit argument checks, if the audit-argument-checks package exists (it is a\n// weak dependency of this package).\nvar maybeAuditArgumentChecks = function (f, context, args, description) {\n  args = args || [];\n  if (Package['audit-argument-checks']) {\n    return Match._failIfArgumentsAreNotAllChecked(\n      f, context, args, description);\n  }\n  return f.apply(context, args);\n};\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"7479e154687da968bdf27ee3b0ef1063b084fade"}
