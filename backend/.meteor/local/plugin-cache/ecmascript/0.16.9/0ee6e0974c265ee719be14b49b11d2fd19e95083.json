{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/smichel/Projects/Team-5-Project/database/packages/minimongo/local_collection.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"packages/minimongo/local_collection.js","filename":"/Users/smichel/Projects/Team-5-Project/database/packages/minimongo/local_collection.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/smichel/Projects/Team-5-Project/database","root":"/Users/smichel/Projects/Team-5-Project/database","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/smichel/Projects/Team-5-Project/database/packages/minimongo/local_collection.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/minimongo/local_collection.js"}},"code":"let _objectSpread;\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n}, 0);\nmodule.export({\n  default: () => LocalCollection\n});\nlet Cursor;\nmodule.link(\"./cursor.js\", {\n  default(v) {\n    Cursor = v;\n  }\n}, 0);\nlet ObserveHandle;\nmodule.link(\"./observe_handle.js\", {\n  default(v) {\n    ObserveHandle = v;\n  }\n}, 1);\nlet hasOwn, isIndexable, isNumericKey, isOperatorObject, populateDocumentWithQueryFields, projectionDetails;\nmodule.link(\"./common.js\", {\n  hasOwn(v) {\n    hasOwn = v;\n  },\n  isIndexable(v) {\n    isIndexable = v;\n  },\n  isNumericKey(v) {\n    isNumericKey = v;\n  },\n  isOperatorObject(v) {\n    isOperatorObject = v;\n  },\n  populateDocumentWithQueryFields(v) {\n    populateDocumentWithQueryFields = v;\n  },\n  projectionDetails(v) {\n    projectionDetails = v;\n  }\n}, 2);\nlet getAsyncMethodName;\nmodule.link(\"./constants\", {\n  getAsyncMethodName(v) {\n    getAsyncMethodName = v;\n  }\n}, 3);\nclass LocalCollection {\n  constructor(name) {\n    this.name = name;\n    // _id -> document (also containing id)\n    this._docs = new LocalCollection._IdMap();\n    this._observeQueue = Meteor.isClient ? new Meteor._SynchronousQueue() : new Meteor._AsynchronousQueue();\n    this.next_qid = 1; // live query id generator\n\n    // qid -> live query object. keys:\n    //  ordered: bool. ordered queries have addedBefore/movedBefore callbacks.\n    //  results: array (ordered) or object (unordered) of current results\n    //    (aliased with this._docs!)\n    //  resultsSnapshot: snapshot of results. null if not paused.\n    //  cursor: Cursor object for the query.\n    //  selector, sorter, (callbacks): functions\n    this.queries = Object.create(null);\n\n    // null if not saving originals; an IdMap from id to original document value\n    // if saving originals. See comments before saveOriginals().\n    this._savedOriginals = null;\n\n    // True when observers are paused and we should not send callbacks.\n    this.paused = false;\n  }\n  countDocuments(selector, options) {\n    return this.find(selector !== null && selector !== void 0 ? selector : {}, options).countAsync();\n  }\n  estimatedDocumentCount(options) {\n    return this.find({}, options).countAsync();\n  }\n\n  // options may include sort, skip, limit, reactive\n  // sort may be any of these forms:\n  //     {a: 1, b: -1}\n  //     [[\"a\", \"asc\"], [\"b\", \"desc\"]]\n  //     [\"a\", [\"b\", \"desc\"]]\n  //   (in the first form you're beholden to key enumeration order in\n  //   your javascript VM)\n  //\n  // reactive: if given, and false, don't register with Tracker (default\n  // is true)\n  //\n  // XXX possibly should support retrieving a subset of fields? and\n  // have it be a hint (ignored on the client, when not copying the\n  // doc?)\n  //\n  // XXX sort does not yet support subkeys ('a.b') .. fix that!\n  // XXX add one more sort form: \"key\"\n  // XXX tests\n  find(selector, options) {\n    // default syntax for everything is to omit the selector argument.\n    // but if selector is explicitly passed in as false or undefined, we\n    // want a selector that matches nothing.\n    if (arguments.length === 0) {\n      selector = {};\n    }\n    return new LocalCollection.Cursor(this, selector, options);\n  }\n  findOne(selector) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (arguments.length === 0) {\n      selector = {};\n    }\n\n    // NOTE: by setting limit 1 here, we end up using very inefficient\n    // code that recomputes the whole query on each update. The upside is\n    // that when you reactively depend on a findOne you only get\n    // invalidated when the found object changes, not any object in the\n    // collection. Most findOne will be by id, which has a fast path, so\n    // this might not be a big deal. In most cases, invalidation causes\n    // the called to re-query anyway, so this should be a net performance\n    // improvement.\n    options.limit = 1;\n    return this.find(selector, options).fetch()[0];\n  }\n  async findOneAsync(selector) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (arguments.length === 0) {\n      selector = {};\n    }\n    options.limit = 1;\n    return (await this.find(selector, options).fetchAsync())[0];\n  }\n  prepareInsert(doc) {\n    assertHasValidFieldNames(doc);\n\n    // if you really want to use ObjectIDs, set this global.\n    // Mongo.Collection specifies its own ids and does not use this code.\n    if (!hasOwn.call(doc, '_id')) {\n      doc._id = LocalCollection._useOID ? new MongoID.ObjectID() : Random.id();\n    }\n    const id = doc._id;\n    if (this._docs.has(id)) {\n      throw MinimongoError(\"Duplicate _id '\".concat(id, \"'\"));\n    }\n    this._saveOriginal(id, undefined);\n    this._docs.set(id, doc);\n    return id;\n  }\n\n  // XXX possibly enforce that 'undefined' does not appear (we assume\n  // this in our handling of null and $exists)\n  insert(doc, callback) {\n    doc = EJSON.clone(doc);\n    const id = this.prepareInsert(doc);\n    const queriesToRecompute = [];\n\n    // trigger live queries that match\n    for (const qid of Object.keys(this.queries)) {\n      const query = this.queries[qid];\n      if (query.dirty) {\n        continue;\n      }\n      const matchResult = query.matcher.documentMatches(doc);\n      if (matchResult.result) {\n        if (query.distances && matchResult.distance !== undefined) {\n          query.distances.set(id, matchResult.distance);\n        }\n        if (query.cursor.skip || query.cursor.limit) {\n          queriesToRecompute.push(qid);\n        } else {\n          LocalCollection._insertInResultsSync(query, doc);\n        }\n      }\n    }\n    queriesToRecompute.forEach(qid => {\n      if (this.queries[qid]) {\n        this._recomputeResults(this.queries[qid]);\n      }\n    });\n    this._observeQueue.drain();\n    if (callback) {\n      Meteor.defer(() => {\n        callback(null, id);\n      });\n    }\n    return id;\n  }\n  async insertAsync(doc, callback) {\n    doc = EJSON.clone(doc);\n    const id = this.prepareInsert(doc);\n    const queriesToRecompute = [];\n\n    // trigger live queries that match\n    for (const qid of Object.keys(this.queries)) {\n      const query = this.queries[qid];\n      if (query.dirty) {\n        continue;\n      }\n      const matchResult = query.matcher.documentMatches(doc);\n      if (matchResult.result) {\n        if (query.distances && matchResult.distance !== undefined) {\n          query.distances.set(id, matchResult.distance);\n        }\n        if (query.cursor.skip || query.cursor.limit) {\n          queriesToRecompute.push(qid);\n        } else {\n          await LocalCollection._insertInResultsAsync(query, doc);\n        }\n      }\n    }\n    queriesToRecompute.forEach(qid => {\n      if (this.queries[qid]) {\n        this._recomputeResults(this.queries[qid]);\n      }\n    });\n    await this._observeQueue.drain();\n    if (callback) {\n      Meteor.defer(() => {\n        callback(null, id);\n      });\n    }\n    return id;\n  }\n\n  // Pause the observers. No callbacks from observers will fire until\n  // 'resumeObservers' is called.\n  pauseObservers() {\n    // No-op if already paused.\n    if (this.paused) {\n      return;\n    }\n\n    // Set the 'paused' flag such that new observer messages don't fire.\n    this.paused = true;\n\n    // Take a snapshot of the query results for each query.\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n      query.resultsSnapshot = EJSON.clone(query.results);\n    });\n  }\n  clearResultQueries(callback) {\n    const result = this._docs.size();\n    this._docs.clear();\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n      if (query.ordered) {\n        query.results = [];\n      } else {\n        query.results.clear();\n      }\n    });\n    if (callback) {\n      Meteor.defer(() => {\n        callback(null, result);\n      });\n    }\n    return result;\n  }\n  prepareRemove(selector) {\n    const matcher = new Minimongo.Matcher(selector);\n    const remove = [];\n    this._eachPossiblyMatchingDocSync(selector, (doc, id) => {\n      if (matcher.documentMatches(doc).result) {\n        remove.push(id);\n      }\n    });\n    const queriesToRecompute = [];\n    const queryRemove = [];\n    for (let i = 0; i < remove.length; i++) {\n      const removeId = remove[i];\n      const removeDoc = this._docs.get(removeId);\n      Object.keys(this.queries).forEach(qid => {\n        const query = this.queries[qid];\n        if (query.dirty) {\n          return;\n        }\n        if (query.matcher.documentMatches(removeDoc).result) {\n          if (query.cursor.skip || query.cursor.limit) {\n            queriesToRecompute.push(qid);\n          } else {\n            queryRemove.push({\n              qid,\n              doc: removeDoc\n            });\n          }\n        }\n      });\n      this._saveOriginal(removeId, removeDoc);\n      this._docs.remove(removeId);\n    }\n    return {\n      queriesToRecompute,\n      queryRemove,\n      remove\n    };\n  }\n  remove(selector, callback) {\n    // Easy special case: if we're not calling observeChanges callbacks and\n    // we're not saving originals and we got asked to remove everything, then\n    // just empty everything directly.\n    if (this.paused && !this._savedOriginals && EJSON.equals(selector, {})) {\n      return this.clearResultQueries(callback);\n    }\n    const {\n      queriesToRecompute,\n      queryRemove,\n      remove\n    } = this.prepareRemove(selector);\n\n    // run live query callbacks _after_ we've removed the documents.\n    queryRemove.forEach(remove => {\n      const query = this.queries[remove.qid];\n      if (query) {\n        query.distances && query.distances.remove(remove.doc._id);\n        LocalCollection._removeFromResultsSync(query, remove.doc);\n      }\n    });\n    queriesToRecompute.forEach(qid => {\n      const query = this.queries[qid];\n      if (query) {\n        this._recomputeResults(query);\n      }\n    });\n    this._observeQueue.drain();\n    const result = remove.length;\n    if (callback) {\n      Meteor.defer(() => {\n        callback(null, result);\n      });\n    }\n    return result;\n  }\n  async removeAsync(selector, callback) {\n    // Easy special case: if we're not calling observeChanges callbacks and\n    // we're not saving originals and we got asked to remove everything, then\n    // just empty everything directly.\n    if (this.paused && !this._savedOriginals && EJSON.equals(selector, {})) {\n      return this.clearResultQueries(callback);\n    }\n    const {\n      queriesToRecompute,\n      queryRemove,\n      remove\n    } = this.prepareRemove(selector);\n\n    // run live query callbacks _after_ we've removed the documents.\n    for (const remove of queryRemove) {\n      const query = this.queries[remove.qid];\n      if (query) {\n        query.distances && query.distances.remove(remove.doc._id);\n        await LocalCollection._removeFromResultsAsync(query, remove.doc);\n      }\n    }\n    queriesToRecompute.forEach(qid => {\n      const query = this.queries[qid];\n      if (query) {\n        this._recomputeResults(query);\n      }\n    });\n    await this._observeQueue.drain();\n    const result = remove.length;\n    if (callback) {\n      Meteor.defer(() => {\n        callback(null, result);\n      });\n    }\n    return result;\n  }\n\n  // Resume the observers. Observers immediately receive change\n  // notifications to bring them to the current state of the\n  // database. Note that this is not just replaying all the changes that\n  // happened during the pause, it is a smarter 'coalesced' diff.\n  _resumeObservers() {\n    // No-op if not paused.\n    if (!this.paused) {\n      return;\n    }\n\n    // Unset the 'paused' flag. Make sure to do this first, otherwise\n    // observer methods won't actually fire when we trigger them.\n    this.paused = false;\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n      if (query.dirty) {\n        query.dirty = false;\n\n        // re-compute results will perform `LocalCollection._diffQueryChanges`\n        // automatically.\n        this._recomputeResults(query, query.resultsSnapshot);\n      } else {\n        // Diff the current results against the snapshot and send to observers.\n        // pass the query object for its observer callbacks.\n        LocalCollection._diffQueryChanges(query.ordered, query.resultsSnapshot, query.results, query, {\n          projectionFn: query.projectionFn\n        });\n      }\n      query.resultsSnapshot = null;\n    });\n  }\n  async resumeObserversServer() {\n    this._resumeObservers();\n    await this._observeQueue.drain();\n  }\n  resumeObserversClient() {\n    this._resumeObservers();\n    this._observeQueue.drain();\n  }\n  retrieveOriginals() {\n    if (!this._savedOriginals) {\n      throw new Error('Called retrieveOriginals without saveOriginals');\n    }\n    const originals = this._savedOriginals;\n    this._savedOriginals = null;\n    return originals;\n  }\n\n  // To track what documents are affected by a piece of code, call\n  // saveOriginals() before it and retrieveOriginals() after it.\n  // retrieveOriginals returns an object whose keys are the ids of the documents\n  // that were affected since the call to saveOriginals(), and the values are\n  // equal to the document's contents at the time of saveOriginals. (In the case\n  // of an inserted document, undefined is the value.) You must alternate\n  // between calls to saveOriginals() and retrieveOriginals().\n  saveOriginals() {\n    if (this._savedOriginals) {\n      throw new Error('Called saveOriginals twice without retrieveOriginals');\n    }\n    this._savedOriginals = new LocalCollection._IdMap();\n  }\n  prepareUpdate(selector) {\n    // Save the original results of any query that we might need to\n    // _recomputeResults on, because _modifyAndNotify will mutate the objects in\n    // it. (We don't need to save the original results of paused queries because\n    // they already have a resultsSnapshot and we won't be diffing in\n    // _recomputeResults.)\n    const qidToOriginalResults = {};\n\n    // We should only clone each document once, even if it appears in multiple\n    // queries\n    const docMap = new LocalCollection._IdMap();\n    const idsMatched = LocalCollection._idsMatchedBySelector(selector);\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n      if ((query.cursor.skip || query.cursor.limit) && !this.paused) {\n        // Catch the case of a reactive `count()` on a cursor with skip\n        // or limit, which registers an unordered observe. This is a\n        // pretty rare case, so we just clone the entire result set with\n        // no optimizations for documents that appear in these result\n        // sets and other queries.\n        if (query.results instanceof LocalCollection._IdMap) {\n          qidToOriginalResults[qid] = query.results.clone();\n          return;\n        }\n        if (!(query.results instanceof Array)) {\n          throw new Error('Assertion failed: query.results not an array');\n        }\n\n        // Clones a document to be stored in `qidToOriginalResults`\n        // because it may be modified before the new and old result sets\n        // are diffed. But if we know exactly which document IDs we're\n        // going to modify, then we only need to clone those.\n        const memoizedCloneIfNeeded = doc => {\n          if (docMap.has(doc._id)) {\n            return docMap.get(doc._id);\n          }\n          const docToMemoize = idsMatched && !idsMatched.some(id => EJSON.equals(id, doc._id)) ? doc : EJSON.clone(doc);\n          docMap.set(doc._id, docToMemoize);\n          return docToMemoize;\n        };\n        qidToOriginalResults[qid] = query.results.map(memoizedCloneIfNeeded);\n      }\n    });\n    return qidToOriginalResults;\n  }\n  finishUpdate(_ref) {\n    let {\n      options,\n      updateCount,\n      callback,\n      insertedId\n    } = _ref;\n    // Return the number of affected documents, or in the upsert case, an object\n    // containing the number of affected docs and the id of the doc that was\n    // inserted, if any.\n    let result;\n    if (options._returnObject) {\n      result = {\n        numberAffected: updateCount\n      };\n      if (insertedId !== undefined) {\n        result.insertedId = insertedId;\n      }\n    } else {\n      result = updateCount;\n    }\n    if (callback) {\n      Meteor.defer(() => {\n        callback(null, result);\n      });\n    }\n    return result;\n  }\n\n  // XXX atomicity: if multi is true, and one modification fails, do\n  // we rollback the whole operation, or what?\n  async updateAsync(selector, mod, options, callback) {\n    if (!callback && options instanceof Function) {\n      callback = options;\n      options = null;\n    }\n    if (!options) {\n      options = {};\n    }\n    const matcher = new Minimongo.Matcher(selector, true);\n    const qidToOriginalResults = this.prepareUpdate(selector);\n    let recomputeQids = {};\n    let updateCount = 0;\n    await this._eachPossiblyMatchingDocAsync(selector, async (doc, id) => {\n      const queryResult = matcher.documentMatches(doc);\n      if (queryResult.result) {\n        // XXX Should we save the original even if mod ends up being a no-op?\n        this._saveOriginal(id, doc);\n        recomputeQids = await this._modifyAndNotifyAsync(doc, mod, queryResult.arrayIndices);\n        ++updateCount;\n        if (!options.multi) {\n          return false; // break\n        }\n      }\n      return true;\n    });\n    Object.keys(recomputeQids).forEach(qid => {\n      const query = this.queries[qid];\n      if (query) {\n        this._recomputeResults(query, qidToOriginalResults[qid]);\n      }\n    });\n    await this._observeQueue.drain();\n\n    // If we are doing an upsert, and we didn't modify any documents yet, then\n    // it's time to do an insert. Figure out what document we are inserting, and\n    // generate an id for it.\n    let insertedId;\n    if (updateCount === 0 && options.upsert) {\n      const doc = LocalCollection._createUpsertDocument(selector, mod);\n      if (!doc._id && options.insertedId) {\n        doc._id = options.insertedId;\n      }\n      insertedId = await this.insertAsync(doc);\n      updateCount = 1;\n    }\n    return this.finishUpdate({\n      options,\n      insertedId,\n      updateCount,\n      callback\n    });\n  }\n  // XXX atomicity: if multi is true, and one modification fails, do\n  // we rollback the whole operation, or what?\n  update(selector, mod, options, callback) {\n    if (!callback && options instanceof Function) {\n      callback = options;\n      options = null;\n    }\n    if (!options) {\n      options = {};\n    }\n    const matcher = new Minimongo.Matcher(selector, true);\n    const qidToOriginalResults = this.prepareUpdate(selector);\n    let recomputeQids = {};\n    let updateCount = 0;\n    this._eachPossiblyMatchingDocSync(selector, (doc, id) => {\n      const queryResult = matcher.documentMatches(doc);\n      if (queryResult.result) {\n        // XXX Should we save the original even if mod ends up being a no-op?\n        this._saveOriginal(id, doc);\n        recomputeQids = this._modifyAndNotifySync(doc, mod, queryResult.arrayIndices);\n        ++updateCount;\n        if (!options.multi) {\n          return false; // break\n        }\n      }\n      return true;\n    });\n    Object.keys(recomputeQids).forEach(qid => {\n      const query = this.queries[qid];\n      if (query) {\n        this._recomputeResults(query, qidToOriginalResults[qid]);\n      }\n    });\n    this._observeQueue.drain();\n\n    // If we are doing an upsert, and we didn't modify any documents yet, then\n    // it's time to do an insert. Figure out what document we are inserting, and\n    // generate an id for it.\n    let insertedId;\n    if (updateCount === 0 && options.upsert) {\n      const doc = LocalCollection._createUpsertDocument(selector, mod);\n      if (!doc._id && options.insertedId) {\n        doc._id = options.insertedId;\n      }\n      insertedId = this.insert(doc);\n      updateCount = 1;\n    }\n    return this.finishUpdate({\n      options,\n      updateCount,\n      callback,\n      selector,\n      mod\n    });\n  }\n\n  // A convenience wrapper on update. LocalCollection.upsert(sel, mod) is\n  // equivalent to LocalCollection.update(sel, mod, {upsert: true,\n  // _returnObject: true}).\n  upsert(selector, mod, options, callback) {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n    return this.update(selector, mod, Object.assign({}, options, {\n      upsert: true,\n      _returnObject: true\n    }), callback);\n  }\n  upsertAsync(selector, mod, options, callback) {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n    return this.updateAsync(selector, mod, Object.assign({}, options, {\n      upsert: true,\n      _returnObject: true\n    }), callback);\n  }\n\n  // Iterates over a subset of documents that could match selector; calls\n  // fn(doc, id) on each of them.  Specifically, if selector specifies\n  // specific _id's, it only looks at those.  doc is *not* cloned: it is the\n  // same object that is in _docs.\n  async _eachPossiblyMatchingDocAsync(selector, fn) {\n    const specificIds = LocalCollection._idsMatchedBySelector(selector);\n    if (specificIds) {\n      for (const id of specificIds) {\n        const doc = this._docs.get(id);\n        if (doc && !(await fn(doc, id))) {\n          break;\n        }\n      }\n    } else {\n      await this._docs.forEachAsync(fn);\n    }\n  }\n  _eachPossiblyMatchingDocSync(selector, fn) {\n    const specificIds = LocalCollection._idsMatchedBySelector(selector);\n    if (specificIds) {\n      for (const id of specificIds) {\n        const doc = this._docs.get(id);\n        if (doc && !fn(doc, id)) {\n          break;\n        }\n      }\n    } else {\n      this._docs.forEach(fn);\n    }\n  }\n  _getMatchedDocAndModify(doc, mod, arrayIndices) {\n    const matched_before = {};\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n      if (query.dirty) {\n        return;\n      }\n      if (query.ordered) {\n        matched_before[qid] = query.matcher.documentMatches(doc).result;\n      } else {\n        // Because we don't support skip or limit (yet) in unordered queries, we\n        // can just do a direct lookup.\n        matched_before[qid] = query.results.has(doc._id);\n      }\n    });\n    return matched_before;\n  }\n  _modifyAndNotifySync(doc, mod, arrayIndices) {\n    const matched_before = this._getMatchedDocAndModify(doc, mod, arrayIndices);\n    const old_doc = EJSON.clone(doc);\n    LocalCollection._modify(doc, mod, {\n      arrayIndices\n    });\n    const recomputeQids = {};\n    for (const qid of Object.keys(this.queries)) {\n      const query = this.queries[qid];\n      if (query.dirty) {\n        continue;\n      }\n      const afterMatch = query.matcher.documentMatches(doc);\n      const after = afterMatch.result;\n      const before = matched_before[qid];\n      if (after && query.distances && afterMatch.distance !== undefined) {\n        query.distances.set(doc._id, afterMatch.distance);\n      }\n      if (query.cursor.skip || query.cursor.limit) {\n        // We need to recompute any query where the doc may have been in the\n        // cursor's window either before or after the update. (Note that if skip\n        // or limit is set, \"before\" and \"after\" being true do not necessarily\n        // mean that the document is in the cursor's output after skip/limit is\n        // applied... but if they are false, then the document definitely is NOT\n        // in the output. So it's safe to skip recompute if neither before or\n        // after are true.)\n        if (before || after) {\n          recomputeQids[qid] = true;\n        }\n      } else if (before && !after) {\n        LocalCollection._removeFromResultsSync(query, doc);\n      } else if (!before && after) {\n        LocalCollection._insertInResultsSync(query, doc);\n      } else if (before && after) {\n        LocalCollection._updateInResultsSync(query, doc, old_doc);\n      }\n    }\n    return recomputeQids;\n  }\n  async _modifyAndNotifyAsync(doc, mod, arrayIndices) {\n    const matched_before = this._getMatchedDocAndModify(doc, mod, arrayIndices);\n    const old_doc = EJSON.clone(doc);\n    LocalCollection._modify(doc, mod, {\n      arrayIndices\n    });\n    const recomputeQids = {};\n    for (const qid of Object.keys(this.queries)) {\n      const query = this.queries[qid];\n      if (query.dirty) {\n        continue;\n      }\n      const afterMatch = query.matcher.documentMatches(doc);\n      const after = afterMatch.result;\n      const before = matched_before[qid];\n      if (after && query.distances && afterMatch.distance !== undefined) {\n        query.distances.set(doc._id, afterMatch.distance);\n      }\n      if (query.cursor.skip || query.cursor.limit) {\n        // We need to recompute any query where the doc may have been in the\n        // cursor's window either before or after the update. (Note that if skip\n        // or limit is set, \"before\" and \"after\" being true do not necessarily\n        // mean that the document is in the cursor's output after skip/limit is\n        // applied... but if they are false, then the document definitely is NOT\n        // in the output. So it's safe to skip recompute if neither before or\n        // after are true.)\n        if (before || after) {\n          recomputeQids[qid] = true;\n        }\n      } else if (before && !after) {\n        await LocalCollection._removeFromResultsAsync(query, doc);\n      } else if (!before && after) {\n        await LocalCollection._insertInResultsAsync(query, doc);\n      } else if (before && after) {\n        await LocalCollection._updateInResultsAsync(query, doc, old_doc);\n      }\n    }\n    return recomputeQids;\n  }\n\n  // Recomputes the results of a query and runs observe callbacks for the\n  // difference between the previous results and the current results (unless\n  // paused). Used for skip/limit queries.\n  //\n  // When this is used by insert or remove, it can just use query.results for\n  // the old results (and there's no need to pass in oldResults), because these\n  // operations don't mutate the documents in the collection. Update needs to\n  // pass in an oldResults which was deep-copied before the modifier was\n  // applied.\n  //\n  // oldResults is guaranteed to be ignored if the query is not paused.\n  _recomputeResults(query, oldResults) {\n    if (this.paused) {\n      // There's no reason to recompute the results now as we're still paused.\n      // By flagging the query as \"dirty\", the recompute will be performed\n      // when resumeObservers is called.\n      query.dirty = true;\n      return;\n    }\n    if (!this.paused && !oldResults) {\n      oldResults = query.results;\n    }\n    if (query.distances) {\n      query.distances.clear();\n    }\n    query.results = query.cursor._getRawObjects({\n      distances: query.distances,\n      ordered: query.ordered\n    });\n    if (!this.paused) {\n      LocalCollection._diffQueryChanges(query.ordered, oldResults, query.results, query, {\n        projectionFn: query.projectionFn\n      });\n    }\n  }\n  _saveOriginal(id, doc) {\n    // Are we even trying to save originals?\n    if (!this._savedOriginals) {\n      return;\n    }\n\n    // Have we previously mutated the original (and so 'doc' is not actually\n    // original)?  (Note the 'has' check rather than truth: we store undefined\n    // here for inserted docs!)\n    if (this._savedOriginals.has(id)) {\n      return;\n    }\n    this._savedOriginals.set(id, EJSON.clone(doc));\n  }\n}\nLocalCollection.Cursor = Cursor;\nLocalCollection.ObserveHandle = ObserveHandle;\n\n// XXX maybe move these into another ObserveHelpers package or something\n\n// _CachingChangeObserver is an object which receives observeChanges callbacks\n// and keeps a cache of the current cursor state up to date in this.docs. Users\n// of this class should read the docs field but not modify it. You should pass\n// the \"applyChange\" field as the callbacks to the underlying observeChanges\n// call. Optionally, you can specify your own observeChanges callbacks which are\n// invoked immediately before the docs field is updated; this object is made\n// available as `this` to those callbacks.\nLocalCollection._CachingChangeObserver = class _CachingChangeObserver {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const orderedFromCallbacks = options.callbacks && LocalCollection._observeChangesCallbacksAreOrdered(options.callbacks);\n    if (hasOwn.call(options, 'ordered')) {\n      this.ordered = options.ordered;\n      if (options.callbacks && options.ordered !== orderedFromCallbacks) {\n        throw Error('ordered option doesn\\'t match callbacks');\n      }\n    } else if (options.callbacks) {\n      this.ordered = orderedFromCallbacks;\n    } else {\n      throw Error('must provide ordered or callbacks');\n    }\n    const callbacks = options.callbacks || {};\n    if (this.ordered) {\n      this.docs = new OrderedDict(MongoID.idStringify);\n      this.applyChange = {\n        addedBefore: (id, fields, before) => {\n          // Take a shallow copy since the top-level properties can be changed\n          const doc = _objectSpread({}, fields);\n          doc._id = id;\n          if (callbacks.addedBefore) {\n            callbacks.addedBefore.call(this, id, EJSON.clone(fields), before);\n          }\n\n          // This line triggers if we provide added with movedBefore.\n          if (callbacks.added) {\n            callbacks.added.call(this, id, EJSON.clone(fields));\n          }\n\n          // XXX could `before` be a falsy ID?  Technically\n          // idStringify seems to allow for them -- though\n          // OrderedDict won't call stringify on a falsy arg.\n          this.docs.putBefore(id, doc, before || null);\n        },\n        movedBefore: (id, before) => {\n          if (callbacks.movedBefore) {\n            callbacks.movedBefore.call(this, id, before);\n          }\n          this.docs.moveBefore(id, before || null);\n        }\n      };\n    } else {\n      this.docs = new LocalCollection._IdMap();\n      this.applyChange = {\n        added: (id, fields) => {\n          // Take a shallow copy since the top-level properties can be changed\n          const doc = _objectSpread({}, fields);\n          if (callbacks.added) {\n            callbacks.added.call(this, id, EJSON.clone(fields));\n          }\n          doc._id = id;\n          this.docs.set(id, doc);\n        }\n      };\n    }\n\n    // The methods in _IdMap and OrderedDict used by these callbacks are\n    // identical.\n    this.applyChange.changed = (id, fields) => {\n      const doc = this.docs.get(id);\n      if (!doc) {\n        throw new Error(\"Unknown id for changed: \".concat(id));\n      }\n      if (callbacks.changed) {\n        callbacks.changed.call(this, id, EJSON.clone(fields));\n      }\n      DiffSequence.applyChanges(doc, fields);\n    };\n    this.applyChange.removed = id => {\n      if (callbacks.removed) {\n        callbacks.removed.call(this, id);\n      }\n      this.docs.remove(id);\n    };\n  }\n};\nLocalCollection._IdMap = class _IdMap extends IdMap {\n  constructor() {\n    super(MongoID.idStringify, MongoID.idParse);\n  }\n};\n\n// Wrap a transform function to return objects that have the _id field\n// of the untransformed document. This ensures that subsystems such as\n// the observe-sequence package that call `observe` can keep track of\n// the documents identities.\n//\n// - Require that it returns objects\n// - If the return value has an _id field, verify that it matches the\n//   original _id field\n// - If the return value doesn't have an _id field, add it back.\nLocalCollection.wrapTransform = transform => {\n  if (!transform) {\n    return null;\n  }\n\n  // No need to doubly-wrap transforms.\n  if (transform.__wrappedTransform__) {\n    return transform;\n  }\n  const wrapped = doc => {\n    if (!hasOwn.call(doc, '_id')) {\n      // XXX do we ever have a transform on the oplog's collection? because that\n      // collection has no _id.\n      throw new Error('can only transform documents with _id');\n    }\n    const id = doc._id;\n\n    // XXX consider making tracker a weak dependency and checking\n    // Package.tracker here\n    const transformed = Tracker.nonreactive(() => transform(doc));\n    if (!LocalCollection._isPlainObject(transformed)) {\n      throw new Error('transform must return object');\n    }\n    if (hasOwn.call(transformed, '_id')) {\n      if (!EJSON.equals(transformed._id, id)) {\n        throw new Error('transformed document can\\'t have different _id');\n      }\n    } else {\n      transformed._id = id;\n    }\n    return transformed;\n  };\n  wrapped.__wrappedTransform__ = true;\n  return wrapped;\n};\n\n// XXX the sorted-query logic below is laughably inefficient. we'll\n// need to come up with a better datastructure for this.\n//\n// XXX the logic for observing with a skip or a limit is even more\n// laughably inefficient. we recompute the whole results every time!\n\n// This binary search puts a value between any equal values, and the first\n// lesser value.\nLocalCollection._binarySearch = (cmp, array, value) => {\n  let first = 0;\n  let range = array.length;\n  while (range > 0) {\n    const halfRange = Math.floor(range / 2);\n    if (cmp(value, array[first + halfRange]) >= 0) {\n      first += halfRange + 1;\n      range -= halfRange + 1;\n    } else {\n      range = halfRange;\n    }\n  }\n  return first;\n};\nLocalCollection._checkSupportedProjection = fields => {\n  if (fields !== Object(fields) || Array.isArray(fields)) {\n    throw MinimongoError('fields option must be an object');\n  }\n  Object.keys(fields).forEach(keyPath => {\n    if (keyPath.split('.').includes('$')) {\n      throw MinimongoError('Minimongo doesn\\'t support $ operator in projections yet.');\n    }\n    const value = fields[keyPath];\n    if (typeof value === 'object' && ['$elemMatch', '$meta', '$slice'].some(key => hasOwn.call(value, key))) {\n      throw MinimongoError('Minimongo doesn\\'t support operators in projections yet.');\n    }\n    if (![1, 0, true, false].includes(value)) {\n      throw MinimongoError('Projection values should be one of 1, 0, true, or false');\n    }\n  });\n};\n\n// Knows how to compile a fields projection to a predicate function.\n// @returns - Function: a closure that filters out an object according to the\n//            fields projection rules:\n//            @param obj - Object: MongoDB-styled document\n//            @returns - Object: a document with the fields filtered out\n//                       according to projection rules. Doesn't retain subfields\n//                       of passed argument.\nLocalCollection._compileProjection = fields => {\n  LocalCollection._checkSupportedProjection(fields);\n  const _idProjection = fields._id === undefined ? true : fields._id;\n  const details = projectionDetails(fields);\n\n  // returns transformed doc according to ruleTree\n  const transform = (doc, ruleTree) => {\n    // Special case for \"sets\"\n    if (Array.isArray(doc)) {\n      return doc.map(subdoc => transform(subdoc, ruleTree));\n    }\n    const result = details.including ? {} : EJSON.clone(doc);\n    Object.keys(ruleTree).forEach(key => {\n      if (doc == null || !hasOwn.call(doc, key)) {\n        return;\n      }\n      const rule = ruleTree[key];\n      if (rule === Object(rule)) {\n        // For sub-objects/subsets we branch\n        if (doc[key] === Object(doc[key])) {\n          result[key] = transform(doc[key], rule);\n        }\n      } else if (details.including) {\n        // Otherwise we don't even touch this subfield\n        result[key] = EJSON.clone(doc[key]);\n      } else {\n        delete result[key];\n      }\n    });\n    return doc != null ? result : doc;\n  };\n  return doc => {\n    const result = transform(doc, details.tree);\n    if (_idProjection && hasOwn.call(doc, '_id')) {\n      result._id = doc._id;\n    }\n    if (!_idProjection && hasOwn.call(result, '_id')) {\n      delete result._id;\n    }\n    return result;\n  };\n};\n\n// Calculates the document to insert in case we're doing an upsert and the\n// selector does not match any elements\nLocalCollection._createUpsertDocument = (selector, modifier) => {\n  const selectorDocument = populateDocumentWithQueryFields(selector);\n  const isModify = LocalCollection._isModificationMod(modifier);\n  const newDoc = {};\n  if (selectorDocument._id) {\n    newDoc._id = selectorDocument._id;\n    delete selectorDocument._id;\n  }\n\n  // This double _modify call is made to help with nested properties (see issue\n  // #8631). We do this even if it's a replacement for validation purposes (e.g.\n  // ambiguous id's)\n  LocalCollection._modify(newDoc, {\n    $set: selectorDocument\n  });\n  LocalCollection._modify(newDoc, modifier, {\n    isInsert: true\n  });\n  if (isModify) {\n    return newDoc;\n  }\n\n  // Replacement can take _id from query document\n  const replacement = Object.assign({}, modifier);\n  if (newDoc._id) {\n    replacement._id = newDoc._id;\n  }\n  return replacement;\n};\nLocalCollection._diffObjects = (left, right, callbacks) => {\n  return DiffSequence.diffObjects(left, right, callbacks);\n};\n\n// ordered: bool.\n// old_results and new_results: collections of documents.\n//    if ordered, they are arrays.\n//    if unordered, they are IdMaps\nLocalCollection._diffQueryChanges = (ordered, oldResults, newResults, observer, options) => DiffSequence.diffQueryChanges(ordered, oldResults, newResults, observer, options);\nLocalCollection._diffQueryOrderedChanges = (oldResults, newResults, observer, options) => DiffSequence.diffQueryOrderedChanges(oldResults, newResults, observer, options);\nLocalCollection._diffQueryUnorderedChanges = (oldResults, newResults, observer, options) => DiffSequence.diffQueryUnorderedChanges(oldResults, newResults, observer, options);\nLocalCollection._findInOrderedResults = (query, doc) => {\n  if (!query.ordered) {\n    throw new Error('Can\\'t call _findInOrderedResults on unordered query');\n  }\n  for (let i = 0; i < query.results.length; i++) {\n    if (query.results[i] === doc) {\n      return i;\n    }\n  }\n  throw Error('object missing from query');\n};\n\n// If this is a selector which explicitly constrains the match by ID to a finite\n// number of documents, returns a list of their IDs.  Otherwise returns\n// null. Note that the selector may have other restrictions so it may not even\n// match those document!  We care about $in and $and since those are generated\n// access-controlled update and remove.\nLocalCollection._idsMatchedBySelector = selector => {\n  // Is the selector just an ID?\n  if (LocalCollection._selectorIsId(selector)) {\n    return [selector];\n  }\n  if (!selector) {\n    return null;\n  }\n\n  // Do we have an _id clause?\n  if (hasOwn.call(selector, '_id')) {\n    // Is the _id clause just an ID?\n    if (LocalCollection._selectorIsId(selector._id)) {\n      return [selector._id];\n    }\n\n    // Is the _id clause {_id: {$in: [\"x\", \"y\", \"z\"]}}?\n    if (selector._id && Array.isArray(selector._id.$in) && selector._id.$in.length && selector._id.$in.every(LocalCollection._selectorIsId)) {\n      return selector._id.$in;\n    }\n    return null;\n  }\n\n  // If this is a top-level $and, and any of the clauses constrain their\n  // documents, then the whole selector is constrained by any one clause's\n  // constraint. (Well, by their intersection, but that seems unlikely.)\n  if (Array.isArray(selector.$and)) {\n    for (let i = 0; i < selector.$and.length; ++i) {\n      const subIds = LocalCollection._idsMatchedBySelector(selector.$and[i]);\n      if (subIds) {\n        return subIds;\n      }\n    }\n  }\n  return null;\n};\nLocalCollection._insertInResultsSync = (query, doc) => {\n  const fields = EJSON.clone(doc);\n  delete fields._id;\n  if (query.ordered) {\n    if (!query.sorter) {\n      query.addedBefore(doc._id, query.projectionFn(fields), null);\n      query.results.push(doc);\n    } else {\n      const i = LocalCollection._insertInSortedList(query.sorter.getComparator({\n        distances: query.distances\n      }), query.results, doc);\n      let next = query.results[i + 1];\n      if (next) {\n        next = next._id;\n      } else {\n        next = null;\n      }\n      query.addedBefore(doc._id, query.projectionFn(fields), next);\n    }\n    query.added(doc._id, query.projectionFn(fields));\n  } else {\n    query.added(doc._id, query.projectionFn(fields));\n    query.results.set(doc._id, doc);\n  }\n};\nLocalCollection._insertInResultsAsync = async (query, doc) => {\n  const fields = EJSON.clone(doc);\n  delete fields._id;\n  if (query.ordered) {\n    if (!query.sorter) {\n      await query.addedBefore(doc._id, query.projectionFn(fields), null);\n      query.results.push(doc);\n    } else {\n      const i = LocalCollection._insertInSortedList(query.sorter.getComparator({\n        distances: query.distances\n      }), query.results, doc);\n      let next = query.results[i + 1];\n      if (next) {\n        next = next._id;\n      } else {\n        next = null;\n      }\n      await query.addedBefore(doc._id, query.projectionFn(fields), next);\n    }\n    await query.added(doc._id, query.projectionFn(fields));\n  } else {\n    await query.added(doc._id, query.projectionFn(fields));\n    query.results.set(doc._id, doc);\n  }\n};\nLocalCollection._insertInSortedList = (cmp, array, value) => {\n  if (array.length === 0) {\n    array.push(value);\n    return 0;\n  }\n  const i = LocalCollection._binarySearch(cmp, array, value);\n  array.splice(i, 0, value);\n  return i;\n};\nLocalCollection._isModificationMod = mod => {\n  let isModify = false;\n  let isReplace = false;\n  Object.keys(mod).forEach(key => {\n    if (key.substr(0, 1) === '$') {\n      isModify = true;\n    } else {\n      isReplace = true;\n    }\n  });\n  if (isModify && isReplace) {\n    throw new Error('Update parameter cannot have both modifier and non-modifier fields.');\n  }\n  return isModify;\n};\n\n// XXX maybe this should be EJSON.isObject, though EJSON doesn't know about\n// RegExp\n// XXX note that _type(undefined) === 3!!!!\nLocalCollection._isPlainObject = x => {\n  return x && LocalCollection._f._type(x) === 3;\n};\n\n// XXX need a strategy for passing the binding of $ into this\n// function, from the compiled selector\n//\n// maybe just {key.up.to.just.before.dollarsign: array_index}\n//\n// XXX atomicity: if one modification fails, do we roll back the whole\n// change?\n//\n// options:\n//   - isInsert is set when _modify is being called to compute the document to\n//     insert as part of an upsert operation. We use this primarily to figure\n//     out when to set the fields in $setOnInsert, if present.\nLocalCollection._modify = function (doc, modifier) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  if (!LocalCollection._isPlainObject(modifier)) {\n    throw MinimongoError('Modifier must be an object');\n  }\n\n  // Make sure the caller can't mutate our data structures.\n  modifier = EJSON.clone(modifier);\n  const isModifier = isOperatorObject(modifier);\n  const newDoc = isModifier ? EJSON.clone(doc) : modifier;\n  if (isModifier) {\n    // apply modifiers to the doc.\n    Object.keys(modifier).forEach(operator => {\n      // Treat $setOnInsert as $set if this is an insert.\n      const setOnInsert = options.isInsert && operator === '$setOnInsert';\n      const modFunc = MODIFIERS[setOnInsert ? '$set' : operator];\n      const operand = modifier[operator];\n      if (!modFunc) {\n        throw MinimongoError(\"Invalid modifier specified \".concat(operator));\n      }\n      Object.keys(operand).forEach(keypath => {\n        const arg = operand[keypath];\n        if (keypath === '') {\n          throw MinimongoError('An empty update path is not valid.');\n        }\n        const keyparts = keypath.split('.');\n        if (!keyparts.every(Boolean)) {\n          throw MinimongoError(\"The update path '\".concat(keypath, \"' contains an empty field name, \") + 'which is not allowed.');\n        }\n        const target = findModTarget(newDoc, keyparts, {\n          arrayIndices: options.arrayIndices,\n          forbidArray: operator === '$rename',\n          noCreate: NO_CREATE_MODIFIERS[operator]\n        });\n        modFunc(target, keyparts.pop(), arg, keypath, newDoc);\n      });\n    });\n    if (doc._id && !EJSON.equals(doc._id, newDoc._id)) {\n      throw MinimongoError(\"After applying the update to the document {_id: \\\"\".concat(doc._id, \"\\\", ...},\") + ' the (immutable) field \\'_id\\' was found to have been altered to ' + \"_id: \\\"\".concat(newDoc._id, \"\\\"\"));\n    }\n  } else {\n    if (doc._id && modifier._id && !EJSON.equals(doc._id, modifier._id)) {\n      throw MinimongoError(\"The _id field cannot be changed from {_id: \\\"\".concat(doc._id, \"\\\"} to \") + \"{_id: \\\"\".concat(modifier._id, \"\\\"}\"));\n    }\n\n    // replace the whole document\n    assertHasValidFieldNames(modifier);\n  }\n\n  // move new document into place.\n  Object.keys(doc).forEach(key => {\n    // Note: this used to be for (var key in doc) however, this does not\n    // work right in Opera. Deleting from a doc while iterating over it\n    // would sometimes cause opera to skip some keys.\n    if (key !== '_id') {\n      delete doc[key];\n    }\n  });\n  Object.keys(newDoc).forEach(key => {\n    doc[key] = newDoc[key];\n  });\n};\nLocalCollection._observeFromObserveChanges = (cursor, observeCallbacks) => {\n  const transform = cursor.getTransform() || (doc => doc);\n  let suppressed = !!observeCallbacks._suppress_initial;\n  let observeChangesCallbacks;\n  if (LocalCollection._observeCallbacksAreOrdered(observeCallbacks)) {\n    // The \"_no_indices\" option sets all index arguments to -1 and skips the\n    // linear scans required to generate them.  This lets observers that don't\n    // need absolute indices benefit from the other features of this API --\n    // relative order, transforms, and applyChanges -- without the speed hit.\n    const indices = !observeCallbacks._no_indices;\n    observeChangesCallbacks = {\n      addedBefore(id, fields, before) {\n        const check = suppressed || !(observeCallbacks.addedAt || observeCallbacks.added);\n        if (check) {\n          return;\n        }\n        const doc = transform(Object.assign(fields, {\n          _id: id\n        }));\n        if (observeCallbacks.addedAt) {\n          observeCallbacks.addedAt(doc, indices ? before ? this.docs.indexOf(before) : this.docs.size() : -1, before);\n        } else {\n          observeCallbacks.added(doc);\n        }\n      },\n      changed(id, fields) {\n        if (!(observeCallbacks.changedAt || observeCallbacks.changed)) {\n          return;\n        }\n        let doc = EJSON.clone(this.docs.get(id));\n        if (!doc) {\n          throw new Error(\"Unknown id for changed: \".concat(id));\n        }\n        const oldDoc = transform(EJSON.clone(doc));\n        DiffSequence.applyChanges(doc, fields);\n        if (observeCallbacks.changedAt) {\n          observeCallbacks.changedAt(transform(doc), oldDoc, indices ? this.docs.indexOf(id) : -1);\n        } else {\n          observeCallbacks.changed(transform(doc), oldDoc);\n        }\n      },\n      movedBefore(id, before) {\n        if (!observeCallbacks.movedTo) {\n          return;\n        }\n        const from = indices ? this.docs.indexOf(id) : -1;\n        let to = indices ? before ? this.docs.indexOf(before) : this.docs.size() : -1;\n\n        // When not moving backwards, adjust for the fact that removing the\n        // document slides everything back one slot.\n        if (to > from) {\n          --to;\n        }\n        observeCallbacks.movedTo(transform(EJSON.clone(this.docs.get(id))), from, to, before || null);\n      },\n      removed(id) {\n        if (!(observeCallbacks.removedAt || observeCallbacks.removed)) {\n          return;\n        }\n\n        // technically maybe there should be an EJSON.clone here, but it's about\n        // to be removed from this.docs!\n        const doc = transform(this.docs.get(id));\n        if (observeCallbacks.removedAt) {\n          observeCallbacks.removedAt(doc, indices ? this.docs.indexOf(id) : -1);\n        } else {\n          observeCallbacks.removed(doc);\n        }\n      }\n    };\n  } else {\n    observeChangesCallbacks = {\n      added(id, fields) {\n        if (!suppressed && observeCallbacks.added) {\n          observeCallbacks.added(transform(Object.assign(fields, {\n            _id: id\n          })));\n        }\n      },\n      changed(id, fields) {\n        if (observeCallbacks.changed) {\n          const oldDoc = this.docs.get(id);\n          const doc = EJSON.clone(oldDoc);\n          DiffSequence.applyChanges(doc, fields);\n          observeCallbacks.changed(transform(doc), transform(EJSON.clone(oldDoc)));\n        }\n      },\n      removed(id) {\n        if (observeCallbacks.removed) {\n          observeCallbacks.removed(transform(this.docs.get(id)));\n        }\n      }\n    };\n  }\n  const changeObserver = new LocalCollection._CachingChangeObserver({\n    callbacks: observeChangesCallbacks\n  });\n\n  // CachingChangeObserver clones all received input on its callbacks\n  // So we can mark it as safe to reduce the ejson clones.\n  // This is tested by the `mongo-livedata - (extended) scribbling` tests\n  changeObserver.applyChange._fromObserve = true;\n  const handle = cursor.observeChanges(changeObserver.applyChange, {\n    nonMutatingCallbacks: true\n  });\n\n  // If needed, re-enable callbacks as soon as the initial batch is ready.\n  const setSuppressed = h => {\n    var _h$isReadyPromise;\n    if (h.isReady) suppressed = false;else (_h$isReadyPromise = h.isReadyPromise) === null || _h$isReadyPromise === void 0 ? void 0 : _h$isReadyPromise.then(() => suppressed = false);\n  };\n  // When we call cursor.observeChanges() it can be the on from\n  // the mongo package (instead of the minimongo one) and it doesn't have isReady and isReadyPromise\n  if (Meteor._isPromise(handle)) {\n    handle.then(setSuppressed);\n  } else {\n    setSuppressed(handle);\n  }\n  return handle;\n};\nLocalCollection._observeCallbacksAreOrdered = callbacks => {\n  if (callbacks.added && callbacks.addedAt) {\n    throw new Error('Please specify only one of added() and addedAt()');\n  }\n  if (callbacks.changed && callbacks.changedAt) {\n    throw new Error('Please specify only one of changed() and changedAt()');\n  }\n  if (callbacks.removed && callbacks.removedAt) {\n    throw new Error('Please specify only one of removed() and removedAt()');\n  }\n  return !!(callbacks.addedAt || callbacks.changedAt || callbacks.movedTo || callbacks.removedAt);\n};\nLocalCollection._observeChangesCallbacksAreOrdered = callbacks => {\n  if (callbacks.added && callbacks.addedBefore) {\n    throw new Error('Please specify only one of added() and addedBefore()');\n  }\n  return !!(callbacks.addedBefore || callbacks.movedBefore);\n};\nLocalCollection._removeFromResultsSync = (query, doc) => {\n  if (query.ordered) {\n    const i = LocalCollection._findInOrderedResults(query, doc);\n    query.removed(doc._id);\n    query.results.splice(i, 1);\n  } else {\n    const id = doc._id; // in case callback mutates doc\n\n    query.removed(doc._id);\n    query.results.remove(id);\n  }\n};\nLocalCollection._removeFromResultsAsync = async (query, doc) => {\n  if (query.ordered) {\n    const i = LocalCollection._findInOrderedResults(query, doc);\n    await query.removed(doc._id);\n    query.results.splice(i, 1);\n  } else {\n    const id = doc._id; // in case callback mutates doc\n\n    await query.removed(doc._id);\n    query.results.remove(id);\n  }\n};\n\n// Is this selector just shorthand for lookup by _id?\nLocalCollection._selectorIsId = selector => typeof selector === 'number' || typeof selector === 'string' || selector instanceof MongoID.ObjectID;\n\n// Is the selector just lookup by _id (shorthand or not)?\nLocalCollection._selectorIsIdPerhapsAsObject = selector => LocalCollection._selectorIsId(selector) || LocalCollection._selectorIsId(selector && selector._id) && Object.keys(selector).length === 1;\nLocalCollection._updateInResultsSync = (query, doc, old_doc) => {\n  if (!EJSON.equals(doc._id, old_doc._id)) {\n    throw new Error('Can\\'t change a doc\\'s _id while updating');\n  }\n  const projectionFn = query.projectionFn;\n  const changedFields = DiffSequence.makeChangedFields(projectionFn(doc), projectionFn(old_doc));\n  if (!query.ordered) {\n    if (Object.keys(changedFields).length) {\n      query.changed(doc._id, changedFields);\n      query.results.set(doc._id, doc);\n    }\n    return;\n  }\n  const old_idx = LocalCollection._findInOrderedResults(query, doc);\n  if (Object.keys(changedFields).length) {\n    query.changed(doc._id, changedFields);\n  }\n  if (!query.sorter) {\n    return;\n  }\n\n  // just take it out and put it back in again, and see if the index changes\n  query.results.splice(old_idx, 1);\n  const new_idx = LocalCollection._insertInSortedList(query.sorter.getComparator({\n    distances: query.distances\n  }), query.results, doc);\n  if (old_idx !== new_idx) {\n    let next = query.results[new_idx + 1];\n    if (next) {\n      next = next._id;\n    } else {\n      next = null;\n    }\n    query.movedBefore && query.movedBefore(doc._id, next);\n  }\n};\nLocalCollection._updateInResultsAsync = async (query, doc, old_doc) => {\n  if (!EJSON.equals(doc._id, old_doc._id)) {\n    throw new Error('Can\\'t change a doc\\'s _id while updating');\n  }\n  const projectionFn = query.projectionFn;\n  const changedFields = DiffSequence.makeChangedFields(projectionFn(doc), projectionFn(old_doc));\n  if (!query.ordered) {\n    if (Object.keys(changedFields).length) {\n      await query.changed(doc._id, changedFields);\n      query.results.set(doc._id, doc);\n    }\n    return;\n  }\n  const old_idx = LocalCollection._findInOrderedResults(query, doc);\n  if (Object.keys(changedFields).length) {\n    await query.changed(doc._id, changedFields);\n  }\n  if (!query.sorter) {\n    return;\n  }\n\n  // just take it out and put it back in again, and see if the index changes\n  query.results.splice(old_idx, 1);\n  const new_idx = LocalCollection._insertInSortedList(query.sorter.getComparator({\n    distances: query.distances\n  }), query.results, doc);\n  if (old_idx !== new_idx) {\n    let next = query.results[new_idx + 1];\n    if (next) {\n      next = next._id;\n    } else {\n      next = null;\n    }\n    query.movedBefore && (await query.movedBefore(doc._id, next));\n  }\n};\nconst MODIFIERS = {\n  $currentDate(target, field, arg) {\n    if (typeof arg === 'object' && hasOwn.call(arg, '$type')) {\n      if (arg.$type !== 'date') {\n        throw MinimongoError('Minimongo does currently only support the date type in ' + '$currentDate modifiers', {\n          field\n        });\n      }\n    } else if (arg !== true) {\n      throw MinimongoError('Invalid $currentDate modifier', {\n        field\n      });\n    }\n    target[field] = new Date();\n  },\n  $inc(target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $inc allowed for numbers only', {\n        field\n      });\n    }\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError('Cannot apply $inc modifier to non-number', {\n          field\n        });\n      }\n      target[field] += arg;\n    } else {\n      target[field] = arg;\n    }\n  },\n  $min(target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $min allowed for numbers only', {\n        field\n      });\n    }\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError('Cannot apply $min modifier to non-number', {\n          field\n        });\n      }\n      if (target[field] > arg) {\n        target[field] = arg;\n      }\n    } else {\n      target[field] = arg;\n    }\n  },\n  $max(target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $max allowed for numbers only', {\n        field\n      });\n    }\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError('Cannot apply $max modifier to non-number', {\n          field\n        });\n      }\n      if (target[field] < arg) {\n        target[field] = arg;\n      }\n    } else {\n      target[field] = arg;\n    }\n  },\n  $mul(target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $mul allowed for numbers only', {\n        field\n      });\n    }\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError('Cannot apply $mul modifier to non-number', {\n          field\n        });\n      }\n      target[field] *= arg;\n    } else {\n      target[field] = 0;\n    }\n  },\n  $rename(target, field, arg, keypath, doc) {\n    // no idea why mongo has this restriction..\n    if (keypath === arg) {\n      throw MinimongoError('$rename source must differ from target', {\n        field\n      });\n    }\n    if (target === null) {\n      throw MinimongoError('$rename source field invalid', {\n        field\n      });\n    }\n    if (typeof arg !== 'string') {\n      throw MinimongoError('$rename target must be a string', {\n        field\n      });\n    }\n    if (arg.includes('\\0')) {\n      // Null bytes are not allowed in Mongo field names\n      // https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names\n      throw MinimongoError('The \\'to\\' field for $rename cannot contain an embedded null byte', {\n        field\n      });\n    }\n    if (target === undefined) {\n      return;\n    }\n    const object = target[field];\n    delete target[field];\n    const keyparts = arg.split('.');\n    const target2 = findModTarget(doc, keyparts, {\n      forbidArray: true\n    });\n    if (target2 === null) {\n      throw MinimongoError('$rename target field invalid', {\n        field\n      });\n    }\n    target2[keyparts.pop()] = object;\n  },\n  $set(target, field, arg) {\n    if (target !== Object(target)) {\n      // not an array or an object\n      const error = MinimongoError('Cannot set property on non-object field', {\n        field\n      });\n      error.setPropertyError = true;\n      throw error;\n    }\n    if (target === null) {\n      const error = MinimongoError('Cannot set property on null', {\n        field\n      });\n      error.setPropertyError = true;\n      throw error;\n    }\n    assertHasValidFieldNames(arg);\n    target[field] = arg;\n  },\n  $setOnInsert(target, field, arg) {\n    // converted to `$set` in `_modify`\n  },\n  $unset(target, field, arg) {\n    if (target !== undefined) {\n      if (target instanceof Array) {\n        if (field in target) {\n          target[field] = null;\n        }\n      } else {\n        delete target[field];\n      }\n    }\n  },\n  $push(target, field, arg) {\n    if (target[field] === undefined) {\n      target[field] = [];\n    }\n    if (!(target[field] instanceof Array)) {\n      throw MinimongoError('Cannot apply $push modifier to non-array', {\n        field\n      });\n    }\n    if (!(arg && arg.$each)) {\n      // Simple mode: not $each\n      assertHasValidFieldNames(arg);\n      target[field].push(arg);\n      return;\n    }\n\n    // Fancy mode: $each (and maybe $slice and $sort and $position)\n    const toPush = arg.$each;\n    if (!(toPush instanceof Array)) {\n      throw MinimongoError('$each must be an array', {\n        field\n      });\n    }\n    assertHasValidFieldNames(toPush);\n\n    // Parse $position\n    let position = undefined;\n    if ('$position' in arg) {\n      if (typeof arg.$position !== 'number') {\n        throw MinimongoError('$position must be a numeric value', {\n          field\n        });\n      }\n\n      // XXX should check to make sure integer\n      if (arg.$position < 0) {\n        throw MinimongoError('$position in $push must be zero or positive', {\n          field\n        });\n      }\n      position = arg.$position;\n    }\n\n    // Parse $slice.\n    let slice = undefined;\n    if ('$slice' in arg) {\n      if (typeof arg.$slice !== 'number') {\n        throw MinimongoError('$slice must be a numeric value', {\n          field\n        });\n      }\n\n      // XXX should check to make sure integer\n      slice = arg.$slice;\n    }\n\n    // Parse $sort.\n    let sortFunction = undefined;\n    if (arg.$sort) {\n      if (slice === undefined) {\n        throw MinimongoError('$sort requires $slice to be present', {\n          field\n        });\n      }\n\n      // XXX this allows us to use a $sort whose value is an array, but that's\n      // actually an extension of the Node driver, so it won't work\n      // server-side. Could be confusing!\n      // XXX is it correct that we don't do geo-stuff here?\n      sortFunction = new Minimongo.Sorter(arg.$sort).getComparator();\n      toPush.forEach(element => {\n        if (LocalCollection._f._type(element) !== 3) {\n          throw MinimongoError('$push like modifiers using $sort require all elements to be ' + 'objects', {\n            field\n          });\n        }\n      });\n    }\n\n    // Actually push.\n    if (position === undefined) {\n      toPush.forEach(element => {\n        target[field].push(element);\n      });\n    } else {\n      const spliceArguments = [position, 0];\n      toPush.forEach(element => {\n        spliceArguments.push(element);\n      });\n      target[field].splice(...spliceArguments);\n    }\n\n    // Actually sort.\n    if (sortFunction) {\n      target[field].sort(sortFunction);\n    }\n\n    // Actually slice.\n    if (slice !== undefined) {\n      if (slice === 0) {\n        target[field] = []; // differs from Array.slice!\n      } else if (slice < 0) {\n        target[field] = target[field].slice(slice);\n      } else {\n        target[field] = target[field].slice(0, slice);\n      }\n    }\n  },\n  $pushAll(target, field, arg) {\n    if (!(typeof arg === 'object' && arg instanceof Array)) {\n      throw MinimongoError('Modifier $pushAll/pullAll allowed for arrays only');\n    }\n    assertHasValidFieldNames(arg);\n    const toPush = target[field];\n    if (toPush === undefined) {\n      target[field] = arg;\n    } else if (!(toPush instanceof Array)) {\n      throw MinimongoError('Cannot apply $pushAll modifier to non-array', {\n        field\n      });\n    } else {\n      toPush.push(...arg);\n    }\n  },\n  $addToSet(target, field, arg) {\n    let isEach = false;\n    if (typeof arg === 'object') {\n      // check if first key is '$each'\n      const keys = Object.keys(arg);\n      if (keys[0] === '$each') {\n        isEach = true;\n      }\n    }\n    const values = isEach ? arg.$each : [arg];\n    assertHasValidFieldNames(values);\n    const toAdd = target[field];\n    if (toAdd === undefined) {\n      target[field] = values;\n    } else if (!(toAdd instanceof Array)) {\n      throw MinimongoError('Cannot apply $addToSet modifier to non-array', {\n        field\n      });\n    } else {\n      values.forEach(value => {\n        if (toAdd.some(element => LocalCollection._f._equal(value, element))) {\n          return;\n        }\n        toAdd.push(value);\n      });\n    }\n  },\n  $pop(target, field, arg) {\n    if (target === undefined) {\n      return;\n    }\n    const toPop = target[field];\n    if (toPop === undefined) {\n      return;\n    }\n    if (!(toPop instanceof Array)) {\n      throw MinimongoError('Cannot apply $pop modifier to non-array', {\n        field\n      });\n    }\n    if (typeof arg === 'number' && arg < 0) {\n      toPop.splice(0, 1);\n    } else {\n      toPop.pop();\n    }\n  },\n  $pull(target, field, arg) {\n    if (target === undefined) {\n      return;\n    }\n    const toPull = target[field];\n    if (toPull === undefined) {\n      return;\n    }\n    if (!(toPull instanceof Array)) {\n      throw MinimongoError('Cannot apply $pull/pullAll modifier to non-array', {\n        field\n      });\n    }\n    let out;\n    if (arg != null && typeof arg === 'object' && !(arg instanceof Array)) {\n      // XXX would be much nicer to compile this once, rather than\n      // for each document we modify.. but usually we're not\n      // modifying that many documents, so we'll let it slide for\n      // now\n\n      // XXX Minimongo.Matcher isn't up for the job, because we need\n      // to permit stuff like {$pull: {a: {$gt: 4}}}.. something\n      // like {$gt: 4} is not normally a complete selector.\n      // same issue as $elemMatch possibly?\n      const matcher = new Minimongo.Matcher(arg);\n      out = toPull.filter(element => !matcher.documentMatches(element).result);\n    } else {\n      out = toPull.filter(element => !LocalCollection._f._equal(element, arg));\n    }\n    target[field] = out;\n  },\n  $pullAll(target, field, arg) {\n    if (!(typeof arg === 'object' && arg instanceof Array)) {\n      throw MinimongoError('Modifier $pushAll/pullAll allowed for arrays only', {\n        field\n      });\n    }\n    if (target === undefined) {\n      return;\n    }\n    const toPull = target[field];\n    if (toPull === undefined) {\n      return;\n    }\n    if (!(toPull instanceof Array)) {\n      throw MinimongoError('Cannot apply $pull/pullAll modifier to non-array', {\n        field\n      });\n    }\n    target[field] = toPull.filter(object => !arg.some(element => LocalCollection._f._equal(object, element)));\n  },\n  $bit(target, field, arg) {\n    // XXX mongo only supports $bit on integers, and we only support\n    // native javascript numbers (doubles) so far, so we can't support $bit\n    throw MinimongoError('$bit is not supported', {\n      field\n    });\n  },\n  $v() {\n    // As discussed in https://github.com/meteor/meteor/issues/9623,\n    // the `$v` operator is not needed by Meteor, but problems can occur if\n    // it's not at least callable (as of Mongo >= 3.6). It's defined here as\n    // a no-op to work around these problems.\n  }\n};\nconst NO_CREATE_MODIFIERS = {\n  $pop: true,\n  $pull: true,\n  $pullAll: true,\n  $rename: true,\n  $unset: true\n};\n\n// Make sure field names do not contain Mongo restricted\n// characters ('.', '$', '\\0').\n// https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names\nconst invalidCharMsg = {\n  $: 'start with \\'$\\'',\n  '.': 'contain \\'.\\'',\n  '\\0': 'contain null bytes'\n};\n\n// checks if all field names in an object are valid\nfunction assertHasValidFieldNames(doc) {\n  if (doc && typeof doc === 'object') {\n    JSON.stringify(doc, (key, value) => {\n      assertIsValidFieldName(key);\n      return value;\n    });\n  }\n}\nfunction assertIsValidFieldName(key) {\n  let match;\n  if (typeof key === 'string' && (match = key.match(/^\\$|\\.|\\0/))) {\n    throw MinimongoError(\"Key \".concat(key, \" must not \").concat(invalidCharMsg[match[0]]));\n  }\n}\n\n// for a.b.c.2.d.e, keyparts should be ['a', 'b', 'c', '2', 'd', 'e'],\n// and then you would operate on the 'e' property of the returned\n// object.\n//\n// if options.noCreate is falsey, creates intermediate levels of\n// structure as necessary, like mkdir -p (and raises an exception if\n// that would mean giving a non-numeric property to an array.) if\n// options.noCreate is true, return undefined instead.\n//\n// may modify the last element of keyparts to signal to the caller that it needs\n// to use a different value to index into the returned object (for example,\n// ['a', '01'] -> ['a', 1]).\n//\n// if forbidArray is true, return null if the keypath goes through an array.\n//\n// if options.arrayIndices is set, use its first element for the (first) '$' in\n// the path.\nfunction findModTarget(doc, keyparts) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let usedArrayIndex = false;\n  for (let i = 0; i < keyparts.length; i++) {\n    const last = i === keyparts.length - 1;\n    let keypart = keyparts[i];\n    if (!isIndexable(doc)) {\n      if (options.noCreate) {\n        return undefined;\n      }\n      const error = MinimongoError(\"cannot use the part '\".concat(keypart, \"' to traverse \").concat(doc));\n      error.setPropertyError = true;\n      throw error;\n    }\n    if (doc instanceof Array) {\n      if (options.forbidArray) {\n        return null;\n      }\n      if (keypart === '$') {\n        if (usedArrayIndex) {\n          throw MinimongoError('Too many positional (i.e. \\'$\\') elements');\n        }\n        if (!options.arrayIndices || !options.arrayIndices.length) {\n          throw MinimongoError('The positional operator did not find the match needed from the ' + 'query');\n        }\n        keypart = options.arrayIndices[0];\n        usedArrayIndex = true;\n      } else if (isNumericKey(keypart)) {\n        keypart = parseInt(keypart);\n      } else {\n        if (options.noCreate) {\n          return undefined;\n        }\n        throw MinimongoError(\"can't append to array using string field name [\".concat(keypart, \"]\"));\n      }\n      if (last) {\n        keyparts[i] = keypart; // handle 'a.01'\n      }\n      if (options.noCreate && keypart >= doc.length) {\n        return undefined;\n      }\n      while (doc.length < keypart) {\n        doc.push(null);\n      }\n      if (!last) {\n        if (doc.length === keypart) {\n          doc.push({});\n        } else if (typeof doc[keypart] !== 'object') {\n          throw MinimongoError(\"can't modify field '\".concat(keyparts[i + 1], \"' of list value \") + JSON.stringify(doc[keypart]));\n        }\n      }\n    } else {\n      assertIsValidFieldName(keypart);\n      if (!(keypart in doc)) {\n        if (options.noCreate) {\n          return undefined;\n        }\n        if (!last) {\n          doc[keypart] = {};\n        }\n      }\n    }\n    if (last) {\n      return doc;\n    }\n    doc = doc[keypart];\n  }\n\n  // notreached\n}","map":{"version":3,"names":["_objectSpread","module","link","default","v","export","LocalCollection","Cursor","ObserveHandle","hasOwn","isIndexable","isNumericKey","isOperatorObject","populateDocumentWithQueryFields","projectionDetails","getAsyncMethodName","constructor","name","_docs","_IdMap","_observeQueue","Meteor","isClient","_SynchronousQueue","_AsynchronousQueue","next_qid","queries","Object","create","_savedOriginals","paused","countDocuments","selector","options","find","countAsync","estimatedDocumentCount","arguments","length","findOne","undefined","limit","fetch","findOneAsync","fetchAsync","prepareInsert","doc","assertHasValidFieldNames","call","_id","_useOID","MongoID","ObjectID","Random","id","has","MinimongoError","concat","_saveOriginal","set","insert","callback","EJSON","clone","queriesToRecompute","qid","keys","query","dirty","matchResult","matcher","documentMatches","result","distances","distance","cursor","skip","push","_insertInResultsSync","forEach","_recomputeResults","drain","defer","insertAsync","_insertInResultsAsync","pauseObservers","resultsSnapshot","results","clearResultQueries","size","clear","ordered","prepareRemove","Minimongo","Matcher","remove","_eachPossiblyMatchingDocSync","queryRemove","i","removeId","removeDoc","get","equals","_removeFromResultsSync","removeAsync","_removeFromResultsAsync","_resumeObservers","_diffQueryChanges","projectionFn","resumeObserversServer","resumeObserversClient","retrieveOriginals","Error","originals","saveOriginals","prepareUpdate","qidToOriginalResults","docMap","idsMatched","_idsMatchedBySelector","Array","memoizedCloneIfNeeded","docToMemoize","some","map","finishUpdate","_ref","updateCount","insertedId","_returnObject","numberAffected","updateAsync","mod","Function","recomputeQids","_eachPossiblyMatchingDocAsync","queryResult","_modifyAndNotifyAsync","arrayIndices","multi","upsert","_createUpsertDocument","update","_modifyAndNotifySync","assign","upsertAsync","fn","specificIds","forEachAsync","_getMatchedDocAndModify","matched_before","old_doc","_modify","afterMatch","after","before","_updateInResultsSync","_updateInResultsAsync","oldResults","_getRawObjects","_CachingChangeObserver","orderedFromCallbacks","callbacks","_observeChangesCallbacksAreOrdered","docs","OrderedDict","idStringify","applyChange","addedBefore","fields","added","putBefore","movedBefore","moveBefore","changed","DiffSequence","applyChanges","removed","IdMap","idParse","wrapTransform","transform","__wrappedTransform__","wrapped","transformed","Tracker","nonreactive","_isPlainObject","_binarySearch","cmp","array","value","first","range","halfRange","Math","floor","_checkSupportedProjection","isArray","keyPath","split","includes","key","_compileProjection","_idProjection","details","ruleTree","subdoc","including","rule","tree","modifier","selectorDocument","isModify","_isModificationMod","newDoc","$set","isInsert","replacement","_diffObjects","left","right","diffObjects","newResults","observer","diffQueryChanges","_diffQueryOrderedChanges","diffQueryOrderedChanges","_diffQueryUnorderedChanges","diffQueryUnorderedChanges","_findInOrderedResults","_selectorIsId","$in","every","$and","subIds","sorter","_insertInSortedList","getComparator","next","splice","isReplace","substr","x","_f","_type","isModifier","operator","setOnInsert","modFunc","MODIFIERS","operand","keypath","arg","keyparts","Boolean","target","findModTarget","forbidArray","noCreate","NO_CREATE_MODIFIERS","pop","_observeFromObserveChanges","observeCallbacks","getTransform","suppressed","_suppress_initial","observeChangesCallbacks","_observeCallbacksAreOrdered","indices","_no_indices","check","addedAt","indexOf","changedAt","oldDoc","movedTo","from","to","removedAt","changeObserver","_fromObserve","handle","observeChanges","nonMutatingCallbacks","setSuppressed","h","_h$isReadyPromise","isReady","isReadyPromise","then","_isPromise","_selectorIsIdPerhapsAsObject","changedFields","makeChangedFields","old_idx","new_idx","$currentDate","field","$type","Date","$inc","$min","$max","$mul","$rename","object","target2","error","setPropertyError","$setOnInsert","$unset","$push","$each","toPush","position","$position","slice","$slice","sortFunction","$sort","Sorter","element","spliceArguments","sort","$pushAll","$addToSet","isEach","values","toAdd","_equal","$pop","toPop","$pull","toPull","out","filter","$pullAll","$bit","$v","invalidCharMsg","$","JSON","stringify","assertIsValidFieldName","match","usedArrayIndex","last","keypart","parseInt"],"sources":["packages/minimongo/local_collection.js"],"sourcesContent":["import Cursor from './cursor.js';\nimport ObserveHandle from './observe_handle.js';\nimport {\n  hasOwn,\n  isIndexable,\n  isNumericKey,\n  isOperatorObject,\n  populateDocumentWithQueryFields,\n  projectionDetails,\n} from './common.js';\n\nimport { getAsyncMethodName } from './constants';\n\n// XXX type checking on selectors (graceful error if malformed)\n\n// LocalCollection: a set of documents that supports queries and modifiers.\nexport default class LocalCollection {\n  constructor(name) {\n    this.name = name;\n    // _id -> document (also containing id)\n    this._docs = new LocalCollection._IdMap;\n\n    this._observeQueue = Meteor.isClient\n      ? new Meteor._SynchronousQueue()\n      : new Meteor._AsynchronousQueue();\n\n    this.next_qid = 1; // live query id generator\n\n    // qid -> live query object. keys:\n    //  ordered: bool. ordered queries have addedBefore/movedBefore callbacks.\n    //  results: array (ordered) or object (unordered) of current results\n    //    (aliased with this._docs!)\n    //  resultsSnapshot: snapshot of results. null if not paused.\n    //  cursor: Cursor object for the query.\n    //  selector, sorter, (callbacks): functions\n    this.queries = Object.create(null);\n\n    // null if not saving originals; an IdMap from id to original document value\n    // if saving originals. See comments before saveOriginals().\n    this._savedOriginals = null;\n\n    // True when observers are paused and we should not send callbacks.\n    this.paused = false;\n  }\n\n  countDocuments(selector, options) {\n    return this.find(selector ?? {}, options).countAsync();\n  }\n\n  estimatedDocumentCount(options) {\n    return this.find({}, options).countAsync();\n  }\n\n  // options may include sort, skip, limit, reactive\n  // sort may be any of these forms:\n  //     {a: 1, b: -1}\n  //     [[\"a\", \"asc\"], [\"b\", \"desc\"]]\n  //     [\"a\", [\"b\", \"desc\"]]\n  //   (in the first form you're beholden to key enumeration order in\n  //   your javascript VM)\n  //\n  // reactive: if given, and false, don't register with Tracker (default\n  // is true)\n  //\n  // XXX possibly should support retrieving a subset of fields? and\n  // have it be a hint (ignored on the client, when not copying the\n  // doc?)\n  //\n  // XXX sort does not yet support subkeys ('a.b') .. fix that!\n  // XXX add one more sort form: \"key\"\n  // XXX tests\n  find(selector, options) {\n    // default syntax for everything is to omit the selector argument.\n    // but if selector is explicitly passed in as false or undefined, we\n    // want a selector that matches nothing.\n    if (arguments.length === 0) {\n      selector = {};\n    }\n\n    return new LocalCollection.Cursor(this, selector, options);\n  }\n\n  findOne(selector, options = {}) {\n    if (arguments.length === 0) {\n      selector = {};\n    }\n\n    // NOTE: by setting limit 1 here, we end up using very inefficient\n    // code that recomputes the whole query on each update. The upside is\n    // that when you reactively depend on a findOne you only get\n    // invalidated when the found object changes, not any object in the\n    // collection. Most findOne will be by id, which has a fast path, so\n    // this might not be a big deal. In most cases, invalidation causes\n    // the called to re-query anyway, so this should be a net performance\n    // improvement.\n    options.limit = 1;\n\n    return this.find(selector, options).fetch()[0];\n  }\n  async findOneAsync(selector, options = {}) {\n    if (arguments.length === 0) {\n      selector = {};\n    }\n    options.limit = 1;\n    return (await this.find(selector, options).fetchAsync())[0];\n  }\n  prepareInsert(doc) {\n    assertHasValidFieldNames(doc);\n\n    // if you really want to use ObjectIDs, set this global.\n    // Mongo.Collection specifies its own ids and does not use this code.\n    if (!hasOwn.call(doc, '_id')) {\n      doc._id = LocalCollection._useOID ? new MongoID.ObjectID() : Random.id();\n    }\n\n    const id = doc._id;\n\n    if (this._docs.has(id)) {\n      throw MinimongoError(`Duplicate _id '${id}'`);\n    }\n\n    this._saveOriginal(id, undefined);\n    this._docs.set(id, doc);\n\n    return id;\n  }\n\n  // XXX possibly enforce that 'undefined' does not appear (we assume\n  // this in our handling of null and $exists)\n  insert(doc, callback) {\n    doc = EJSON.clone(doc);\n    const id = this.prepareInsert(doc);\n    const queriesToRecompute = [];\n\n    // trigger live queries that match\n    for (const qid of Object.keys(this.queries)) {\n      const query = this.queries[qid];\n\n      if (query.dirty) {\n        continue;\n      }\n\n      const matchResult = query.matcher.documentMatches(doc);\n\n      if (matchResult.result) {\n        if (query.distances && matchResult.distance !== undefined) {\n          query.distances.set(id, matchResult.distance);\n        }\n\n        if (query.cursor.skip || query.cursor.limit) {\n          queriesToRecompute.push(qid);\n        } else {\n          LocalCollection._insertInResultsSync(query, doc);\n        }\n      }\n    }\n\n    queriesToRecompute.forEach(qid => {\n      if (this.queries[qid]) {\n        this._recomputeResults(this.queries[qid]);\n      }\n    });\n\n    this._observeQueue.drain();\n    if (callback) {\n      Meteor.defer(() => {\n        callback(null, id);\n      });\n    }\n\n    return id;\n  }\n  async insertAsync(doc, callback) {\n    doc = EJSON.clone(doc);\n    const id = this.prepareInsert(doc);\n    const queriesToRecompute = [];\n\n    // trigger live queries that match\n    for (const qid of Object.keys(this.queries)) {\n      const query = this.queries[qid];\n\n      if (query.dirty) {\n        continue;\n      }\n\n      const matchResult = query.matcher.documentMatches(doc);\n\n      if (matchResult.result) {\n        if (query.distances && matchResult.distance !== undefined) {\n          query.distances.set(id, matchResult.distance);\n        }\n\n        if (query.cursor.skip || query.cursor.limit) {\n          queriesToRecompute.push(qid);\n        } else {\n          await LocalCollection._insertInResultsAsync(query, doc);\n        }\n      }\n    }\n\n    queriesToRecompute.forEach(qid => {\n      if (this.queries[qid]) {\n        this._recomputeResults(this.queries[qid]);\n      }\n    });\n\n    await this._observeQueue.drain();\n    if (callback) {\n      Meteor.defer(() => {\n        callback(null, id);\n      });\n    }\n\n    return id;\n  }\n\n  // Pause the observers. No callbacks from observers will fire until\n  // 'resumeObservers' is called.\n  pauseObservers() {\n    // No-op if already paused.\n    if (this.paused) {\n      return;\n    }\n\n    // Set the 'paused' flag such that new observer messages don't fire.\n    this.paused = true;\n\n    // Take a snapshot of the query results for each query.\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n      query.resultsSnapshot = EJSON.clone(query.results);\n    });\n  }\n\n  clearResultQueries(callback) {\n    const result = this._docs.size();\n\n    this._docs.clear();\n\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query.ordered) {\n        query.results = [];\n      } else {\n        query.results.clear();\n      }\n    });\n\n    if (callback) {\n      Meteor.defer(() => {\n        callback(null, result);\n      });\n    }\n\n    return result;\n  }\n\n\n  prepareRemove(selector) {\n    const matcher = new Minimongo.Matcher(selector);\n    const remove = [];\n\n    this._eachPossiblyMatchingDocSync(selector, (doc, id) => {\n      if (matcher.documentMatches(doc).result) {\n        remove.push(id);\n      }\n    });\n\n    const queriesToRecompute = [];\n    const queryRemove = [];\n\n    for (let i = 0; i < remove.length; i++) {\n      const removeId = remove[i];\n      const removeDoc = this._docs.get(removeId);\n\n      Object.keys(this.queries).forEach(qid => {\n        const query = this.queries[qid];\n\n        if (query.dirty) {\n          return;\n        }\n\n        if (query.matcher.documentMatches(removeDoc).result) {\n          if (query.cursor.skip || query.cursor.limit) {\n            queriesToRecompute.push(qid);\n          } else {\n            queryRemove.push({qid, doc: removeDoc});\n          }\n        }\n      });\n\n      this._saveOriginal(removeId, removeDoc);\n      this._docs.remove(removeId);\n    }\n\n    return { queriesToRecompute, queryRemove, remove };\n  }\n\n  remove(selector, callback) {\n    // Easy special case: if we're not calling observeChanges callbacks and\n    // we're not saving originals and we got asked to remove everything, then\n    // just empty everything directly.\n    if (this.paused && !this._savedOriginals && EJSON.equals(selector, {})) {\n      return this.clearResultQueries(callback);\n    }\n\n    const { queriesToRecompute, queryRemove, remove } = this.prepareRemove(selector);\n\n    // run live query callbacks _after_ we've removed the documents.\n    queryRemove.forEach(remove => {\n      const query = this.queries[remove.qid];\n\n      if (query) {\n        query.distances && query.distances.remove(remove.doc._id);\n        LocalCollection._removeFromResultsSync(query, remove.doc);\n      }\n    });\n\n    queriesToRecompute.forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query) {\n        this._recomputeResults(query);\n      }\n    });\n\n    this._observeQueue.drain();\n\n    const result = remove.length;\n\n    if (callback) {\n      Meteor.defer(() => {\n        callback(null, result);\n      });\n    }\n\n    return result;\n  }\n\n  async removeAsync(selector, callback) {\n    // Easy special case: if we're not calling observeChanges callbacks and\n    // we're not saving originals and we got asked to remove everything, then\n    // just empty everything directly.\n    if (this.paused && !this._savedOriginals && EJSON.equals(selector, {})) {\n      return this.clearResultQueries(callback);\n    }\n\n    const { queriesToRecompute, queryRemove, remove } = this.prepareRemove(selector);\n\n    // run live query callbacks _after_ we've removed the documents.\n    for (const remove of queryRemove) {\n      const query = this.queries[remove.qid];\n\n      if (query) {\n        query.distances && query.distances.remove(remove.doc._id);\n        await LocalCollection._removeFromResultsAsync(query, remove.doc);\n      }\n    }\n    queriesToRecompute.forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query) {\n        this._recomputeResults(query);\n      }\n    });\n\n    await this._observeQueue.drain();\n\n    const result = remove.length;\n\n    if (callback) {\n      Meteor.defer(() => {\n        callback(null, result);\n      });\n    }\n\n    return result;\n  }\n\n  // Resume the observers. Observers immediately receive change\n  // notifications to bring them to the current state of the\n  // database. Note that this is not just replaying all the changes that\n  // happened during the pause, it is a smarter 'coalesced' diff.\n  _resumeObservers() {\n    // No-op if not paused.\n    if (!this.paused) {\n      return;\n    }\n\n    // Unset the 'paused' flag. Make sure to do this first, otherwise\n    // observer methods won't actually fire when we trigger them.\n    this.paused = false;\n\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query.dirty) {\n        query.dirty = false;\n\n        // re-compute results will perform `LocalCollection._diffQueryChanges`\n        // automatically.\n        this._recomputeResults(query, query.resultsSnapshot);\n      } else {\n        // Diff the current results against the snapshot and send to observers.\n        // pass the query object for its observer callbacks.\n        LocalCollection._diffQueryChanges(\n          query.ordered,\n          query.resultsSnapshot,\n          query.results,\n          query,\n          {projectionFn: query.projectionFn}\n        );\n      }\n\n      query.resultsSnapshot = null;\n    });\n  }\n\n  async resumeObserversServer() {\n    this._resumeObservers();\n    await this._observeQueue.drain();\n  }\n  resumeObserversClient() {\n    this._resumeObservers();\n    this._observeQueue.drain();\n  }\n\n  retrieveOriginals() {\n    if (!this._savedOriginals) {\n      throw new Error('Called retrieveOriginals without saveOriginals');\n    }\n\n    const originals = this._savedOriginals;\n\n    this._savedOriginals = null;\n\n    return originals;\n  }\n\n  // To track what documents are affected by a piece of code, call\n  // saveOriginals() before it and retrieveOriginals() after it.\n  // retrieveOriginals returns an object whose keys are the ids of the documents\n  // that were affected since the call to saveOriginals(), and the values are\n  // equal to the document's contents at the time of saveOriginals. (In the case\n  // of an inserted document, undefined is the value.) You must alternate\n  // between calls to saveOriginals() and retrieveOriginals().\n  saveOriginals() {\n    if (this._savedOriginals) {\n      throw new Error('Called saveOriginals twice without retrieveOriginals');\n    }\n\n    this._savedOriginals = new LocalCollection._IdMap;\n  }\n\n  prepareUpdate(selector) {\n    // Save the original results of any query that we might need to\n    // _recomputeResults on, because _modifyAndNotify will mutate the objects in\n    // it. (We don't need to save the original results of paused queries because\n    // they already have a resultsSnapshot and we won't be diffing in\n    // _recomputeResults.)\n    const qidToOriginalResults = {};\n\n    // We should only clone each document once, even if it appears in multiple\n    // queries\n    const docMap = new LocalCollection._IdMap;\n    const idsMatched = LocalCollection._idsMatchedBySelector(selector);\n\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if ((query.cursor.skip || query.cursor.limit) && ! this.paused) {\n        // Catch the case of a reactive `count()` on a cursor with skip\n        // or limit, which registers an unordered observe. This is a\n        // pretty rare case, so we just clone the entire result set with\n        // no optimizations for documents that appear in these result\n        // sets and other queries.\n        if (query.results instanceof LocalCollection._IdMap) {\n          qidToOriginalResults[qid] = query.results.clone();\n          return;\n        }\n\n        if (!(query.results instanceof Array)) {\n          throw new Error('Assertion failed: query.results not an array');\n        }\n\n        // Clones a document to be stored in `qidToOriginalResults`\n        // because it may be modified before the new and old result sets\n        // are diffed. But if we know exactly which document IDs we're\n        // going to modify, then we only need to clone those.\n        const memoizedCloneIfNeeded = doc => {\n          if (docMap.has(doc._id)) {\n            return docMap.get(doc._id);\n          }\n\n          const docToMemoize = (\n            idsMatched &&\n            !idsMatched.some(id => EJSON.equals(id, doc._id))\n          ) ? doc : EJSON.clone(doc);\n\n          docMap.set(doc._id, docToMemoize);\n\n          return docToMemoize;\n        };\n\n        qidToOriginalResults[qid] = query.results.map(memoizedCloneIfNeeded);\n      }\n    });\n\n    return qidToOriginalResults;\n  }\n\n  finishUpdate({ options, updateCount, callback, insertedId }) {\n\n\n    // Return the number of affected documents, or in the upsert case, an object\n    // containing the number of affected docs and the id of the doc that was\n    // inserted, if any.\n    let result;\n    if (options._returnObject) {\n      result = { numberAffected: updateCount };\n\n      if (insertedId !== undefined) {\n        result.insertedId = insertedId;\n      }\n    } else {\n      result = updateCount;\n    }\n\n    if (callback) {\n      Meteor.defer(() => {\n        callback(null, result);\n      });\n    }\n\n    return result;\n  }\n\n  // XXX atomicity: if multi is true, and one modification fails, do\n  // we rollback the whole operation, or what?\n  async updateAsync(selector, mod, options, callback) {\n    if (! callback && options instanceof Function) {\n      callback = options;\n      options = null;\n    }\n\n    if (!options) {\n      options = {};\n    }\n\n    const matcher = new Minimongo.Matcher(selector, true);\n\n    const qidToOriginalResults = this.prepareUpdate(selector);\n\n    let recomputeQids = {};\n\n    let updateCount = 0;\n\n    await this._eachPossiblyMatchingDocAsync(selector, async (doc, id) => {\n      const queryResult = matcher.documentMatches(doc);\n\n      if (queryResult.result) {\n        // XXX Should we save the original even if mod ends up being a no-op?\n        this._saveOriginal(id, doc);\n        recomputeQids = await this._modifyAndNotifyAsync(\n          doc,\n          mod,\n          queryResult.arrayIndices\n        );\n\n        ++updateCount;\n\n        if (!options.multi) {\n          return false; // break\n        }\n      }\n\n      return true;\n    });\n\n    Object.keys(recomputeQids).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query) {\n        this._recomputeResults(query, qidToOriginalResults[qid]);\n      }\n    });\n\n    await this._observeQueue.drain();\n\n    // If we are doing an upsert, and we didn't modify any documents yet, then\n    // it's time to do an insert. Figure out what document we are inserting, and\n    // generate an id for it.\n    let insertedId;\n    if (updateCount === 0 && options.upsert) {\n      const doc = LocalCollection._createUpsertDocument(selector, mod);\n      if (!doc._id && options.insertedId) {\n        doc._id = options.insertedId;\n      }\n\n      insertedId = await this.insertAsync(doc);\n      updateCount = 1;\n    }\n\n    return this.finishUpdate({\n      options,\n      insertedId,\n      updateCount,\n      callback,\n    });\n  }\n  // XXX atomicity: if multi is true, and one modification fails, do\n  // we rollback the whole operation, or what?\n  update(selector, mod, options, callback) {\n    if (! callback && options instanceof Function) {\n      callback = options;\n      options = null;\n    }\n\n    if (!options) {\n      options = {};\n    }\n\n    const matcher = new Minimongo.Matcher(selector, true);\n\n    const qidToOriginalResults = this.prepareUpdate(selector);\n\n    let recomputeQids = {};\n\n    let updateCount = 0;\n\n    this._eachPossiblyMatchingDocSync(selector, (doc, id) => {\n      const queryResult = matcher.documentMatches(doc);\n\n      if (queryResult.result) {\n        // XXX Should we save the original even if mod ends up being a no-op?\n        this._saveOriginal(id, doc);\n        recomputeQids = this._modifyAndNotifySync(\n          doc,\n          mod,\n          queryResult.arrayIndices\n        );\n\n        ++updateCount;\n\n        if (!options.multi) {\n          return false; // break\n        }\n      }\n\n      return true;\n    });\n\n    Object.keys(recomputeQids).forEach(qid => {\n      const query = this.queries[qid];\n      if (query) {\n        this._recomputeResults(query, qidToOriginalResults[qid]);\n      }\n    });\n\n    this._observeQueue.drain();\n\n\n    // If we are doing an upsert, and we didn't modify any documents yet, then\n    // it's time to do an insert. Figure out what document we are inserting, and\n    // generate an id for it.\n    let insertedId;\n    if (updateCount === 0 && options.upsert) {\n      const doc = LocalCollection._createUpsertDocument(selector, mod);\n      if (!doc._id && options.insertedId) {\n        doc._id = options.insertedId;\n      }\n\n      insertedId = this.insert(doc);\n      updateCount = 1;\n    }\n\n\n    return this.finishUpdate({\n      options,\n      updateCount,\n      callback,\n      selector,\n      mod,\n    });\n  }\n\n  // A convenience wrapper on update. LocalCollection.upsert(sel, mod) is\n  // equivalent to LocalCollection.update(sel, mod, {upsert: true,\n  // _returnObject: true}).\n  upsert(selector, mod, options, callback) {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    return this.update(\n      selector,\n      mod,\n      Object.assign({}, options, {upsert: true, _returnObject: true}),\n      callback\n    );\n  }\n\n  upsertAsync(selector, mod, options, callback) {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    return this.updateAsync(\n      selector,\n      mod,\n      Object.assign({}, options, {upsert: true, _returnObject: true}),\n      callback\n    );\n  }\n\n  // Iterates over a subset of documents that could match selector; calls\n  // fn(doc, id) on each of them.  Specifically, if selector specifies\n  // specific _id's, it only looks at those.  doc is *not* cloned: it is the\n  // same object that is in _docs.\n  async _eachPossiblyMatchingDocAsync(selector, fn) {\n    const specificIds = LocalCollection._idsMatchedBySelector(selector);\n\n    if (specificIds) {\n      for (const id of specificIds) {\n        const doc = this._docs.get(id);\n\n        if (doc && ! (await fn(doc, id))) {\n          break\n        }\n      }\n    } else {\n      await this._docs.forEachAsync(fn);\n    }\n  }\n  _eachPossiblyMatchingDocSync(selector, fn) {\n    const specificIds = LocalCollection._idsMatchedBySelector(selector);\n\n    if (specificIds) {\n      for (const id of specificIds) {\n        const doc = this._docs.get(id);\n\n        if (doc && !fn(doc, id)) {\n          break\n        }\n      }\n    } else {\n      this._docs.forEach(fn);\n    }\n  }\n\n  _getMatchedDocAndModify(doc, mod, arrayIndices) {\n    const matched_before = {};\n\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query.dirty) {\n        return;\n      }\n\n      if (query.ordered) {\n        matched_before[qid] = query.matcher.documentMatches(doc).result;\n      } else {\n        // Because we don't support skip or limit (yet) in unordered queries, we\n        // can just do a direct lookup.\n        matched_before[qid] = query.results.has(doc._id);\n      }\n    });\n\n    return matched_before;\n  }\n\n  _modifyAndNotifySync(doc, mod, arrayIndices) {\n\n    const matched_before = this._getMatchedDocAndModify(doc, mod, arrayIndices);\n\n    const old_doc = EJSON.clone(doc);\n    LocalCollection._modify(doc, mod, {arrayIndices});\n\n    const recomputeQids = {};\n\n    for (const qid of Object.keys(this.queries)) {\n      const query = this.queries[qid];\n\n      if (query.dirty) {\n        continue;\n      }\n\n      const afterMatch = query.matcher.documentMatches(doc);\n      const after = afterMatch.result;\n      const before = matched_before[qid];\n\n      if (after && query.distances && afterMatch.distance !== undefined) {\n        query.distances.set(doc._id, afterMatch.distance);\n      }\n\n      if (query.cursor.skip || query.cursor.limit) {\n        // We need to recompute any query where the doc may have been in the\n        // cursor's window either before or after the update. (Note that if skip\n        // or limit is set, \"before\" and \"after\" being true do not necessarily\n        // mean that the document is in the cursor's output after skip/limit is\n        // applied... but if they are false, then the document definitely is NOT\n        // in the output. So it's safe to skip recompute if neither before or\n        // after are true.)\n        if (before || after) {\n          recomputeQids[qid] = true;\n        }\n      } else if (before && !after) {\n        LocalCollection._removeFromResultsSync(query, doc);\n      } else if (!before && after) {\n        LocalCollection._insertInResultsSync(query, doc);\n      } else if (before && after) {\n        LocalCollection._updateInResultsSync(query, doc, old_doc);\n      }\n    }\n    return recomputeQids;\n  }\n\n  async _modifyAndNotifyAsync(doc, mod, arrayIndices) {\n\n    const matched_before = this._getMatchedDocAndModify(doc, mod, arrayIndices);\n\n    const old_doc = EJSON.clone(doc);\n    LocalCollection._modify(doc, mod, {arrayIndices});\n\n    const recomputeQids = {};\n    for (const qid of Object.keys(this.queries)) {\n      const query = this.queries[qid];\n\n      if (query.dirty) {\n        continue;\n      }\n\n      const afterMatch = query.matcher.documentMatches(doc);\n      const after = afterMatch.result;\n      const before = matched_before[qid];\n\n      if (after && query.distances && afterMatch.distance !== undefined) {\n        query.distances.set(doc._id, afterMatch.distance);\n      }\n\n      if (query.cursor.skip || query.cursor.limit) {\n        // We need to recompute any query where the doc may have been in the\n        // cursor's window either before or after the update. (Note that if skip\n        // or limit is set, \"before\" and \"after\" being true do not necessarily\n        // mean that the document is in the cursor's output after skip/limit is\n        // applied... but if they are false, then the document definitely is NOT\n        // in the output. So it's safe to skip recompute if neither before or\n        // after are true.)\n        if (before || after) {\n          recomputeQids[qid] = true;\n        }\n      } else if (before && !after) {\n        await LocalCollection._removeFromResultsAsync(query, doc);\n      } else if (!before && after) {\n        await LocalCollection._insertInResultsAsync(query, doc);\n      } else if (before && after) {\n        await LocalCollection._updateInResultsAsync(query, doc, old_doc);\n      }\n    }\n    return recomputeQids;\n  }\n\n  // Recomputes the results of a query and runs observe callbacks for the\n  // difference between the previous results and the current results (unless\n  // paused). Used for skip/limit queries.\n  //\n  // When this is used by insert or remove, it can just use query.results for\n  // the old results (and there's no need to pass in oldResults), because these\n  // operations don't mutate the documents in the collection. Update needs to\n  // pass in an oldResults which was deep-copied before the modifier was\n  // applied.\n  //\n  // oldResults is guaranteed to be ignored if the query is not paused.\n  _recomputeResults(query, oldResults) {\n    if (this.paused) {\n      // There's no reason to recompute the results now as we're still paused.\n      // By flagging the query as \"dirty\", the recompute will be performed\n      // when resumeObservers is called.\n      query.dirty = true;\n      return;\n    }\n\n    if (!this.paused && !oldResults) {\n      oldResults = query.results;\n    }\n\n    if (query.distances) {\n      query.distances.clear();\n    }\n\n    query.results = query.cursor._getRawObjects({\n      distances: query.distances,\n      ordered: query.ordered\n    });\n\n    if (!this.paused) {\n      LocalCollection._diffQueryChanges(\n        query.ordered,\n        oldResults,\n        query.results,\n        query,\n        {projectionFn: query.projectionFn}\n      );\n    }\n  }\n\n  _saveOriginal(id, doc) {\n    // Are we even trying to save originals?\n    if (!this._savedOriginals) {\n      return;\n    }\n\n    // Have we previously mutated the original (and so 'doc' is not actually\n    // original)?  (Note the 'has' check rather than truth: we store undefined\n    // here for inserted docs!)\n    if (this._savedOriginals.has(id)) {\n      return;\n    }\n\n    this._savedOriginals.set(id, EJSON.clone(doc));\n  }\n}\n\nLocalCollection.Cursor = Cursor;\n\nLocalCollection.ObserveHandle = ObserveHandle;\n\n// XXX maybe move these into another ObserveHelpers package or something\n\n// _CachingChangeObserver is an object which receives observeChanges callbacks\n// and keeps a cache of the current cursor state up to date in this.docs. Users\n// of this class should read the docs field but not modify it. You should pass\n// the \"applyChange\" field as the callbacks to the underlying observeChanges\n// call. Optionally, you can specify your own observeChanges callbacks which are\n// invoked immediately before the docs field is updated; this object is made\n// available as `this` to those callbacks.\nLocalCollection._CachingChangeObserver = class _CachingChangeObserver {\n  constructor(options = {}) {\n    const orderedFromCallbacks = (\n      options.callbacks &&\n      LocalCollection._observeChangesCallbacksAreOrdered(options.callbacks)\n    );\n\n    if (hasOwn.call(options, 'ordered')) {\n      this.ordered = options.ordered;\n\n      if (options.callbacks && options.ordered !== orderedFromCallbacks) {\n        throw Error('ordered option doesn\\'t match callbacks');\n      }\n    } else if (options.callbacks) {\n      this.ordered = orderedFromCallbacks;\n    } else {\n      throw Error('must provide ordered or callbacks');\n    }\n\n    const callbacks = options.callbacks || {};\n\n    if (this.ordered) {\n      this.docs = new OrderedDict(MongoID.idStringify);\n      this.applyChange = {\n        addedBefore: (id, fields, before) => {\n          // Take a shallow copy since the top-level properties can be changed\n          const doc = { ...fields };\n\n          doc._id = id;\n\n          if (callbacks.addedBefore) {\n            callbacks.addedBefore.call(this, id, EJSON.clone(fields), before);\n          }\n\n          // This line triggers if we provide added with movedBefore.\n          if (callbacks.added) {\n            callbacks.added.call(this, id, EJSON.clone(fields));\n          }\n\n          // XXX could `before` be a falsy ID?  Technically\n          // idStringify seems to allow for them -- though\n          // OrderedDict won't call stringify on a falsy arg.\n          this.docs.putBefore(id, doc, before || null);\n        },\n        movedBefore: (id, before) => {\n          if (callbacks.movedBefore) {\n            callbacks.movedBefore.call(this, id, before);\n          }\n\n          this.docs.moveBefore(id, before || null);\n        },\n      };\n    } else {\n      this.docs = new LocalCollection._IdMap;\n      this.applyChange = {\n        added: (id, fields) => {\n          // Take a shallow copy since the top-level properties can be changed\n          const doc = { ...fields };\n\n          if (callbacks.added) {\n            callbacks.added.call(this, id, EJSON.clone(fields));\n          }\n\n          doc._id = id;\n\n          this.docs.set(id,  doc);\n        },\n      };\n    }\n\n    // The methods in _IdMap and OrderedDict used by these callbacks are\n    // identical.\n    this.applyChange.changed = (id, fields) => {\n      const doc = this.docs.get(id);\n\n      if (!doc) {\n        throw new Error(`Unknown id for changed: ${id}`);\n      }\n\n      if (callbacks.changed) {\n        callbacks.changed.call(this, id, EJSON.clone(fields));\n      }\n\n      DiffSequence.applyChanges(doc, fields);\n    };\n\n    this.applyChange.removed = id => {\n      if (callbacks.removed) {\n        callbacks.removed.call(this, id);\n      }\n\n      this.docs.remove(id);\n    };\n  }\n};\n\nLocalCollection._IdMap = class _IdMap extends IdMap {\n  constructor() {\n    super(MongoID.idStringify, MongoID.idParse);\n  }\n};\n\n// Wrap a transform function to return objects that have the _id field\n// of the untransformed document. This ensures that subsystems such as\n// the observe-sequence package that call `observe` can keep track of\n// the documents identities.\n//\n// - Require that it returns objects\n// - If the return value has an _id field, verify that it matches the\n//   original _id field\n// - If the return value doesn't have an _id field, add it back.\nLocalCollection.wrapTransform = transform => {\n  if (!transform) {\n    return null;\n  }\n\n  // No need to doubly-wrap transforms.\n  if (transform.__wrappedTransform__) {\n    return transform;\n  }\n\n  const wrapped = doc => {\n    if (!hasOwn.call(doc, '_id')) {\n      // XXX do we ever have a transform on the oplog's collection? because that\n      // collection has no _id.\n      throw new Error('can only transform documents with _id');\n    }\n\n    const id = doc._id;\n\n    // XXX consider making tracker a weak dependency and checking\n    // Package.tracker here\n    const transformed = Tracker.nonreactive(() => transform(doc));\n\n    if (!LocalCollection._isPlainObject(transformed)) {\n      throw new Error('transform must return object');\n    }\n\n    if (hasOwn.call(transformed, '_id')) {\n      if (!EJSON.equals(transformed._id, id)) {\n        throw new Error('transformed document can\\'t have different _id');\n      }\n    } else {\n      transformed._id = id;\n    }\n\n    return transformed;\n  };\n\n  wrapped.__wrappedTransform__ = true;\n\n  return wrapped;\n};\n\n// XXX the sorted-query logic below is laughably inefficient. we'll\n// need to come up with a better datastructure for this.\n//\n// XXX the logic for observing with a skip or a limit is even more\n// laughably inefficient. we recompute the whole results every time!\n\n// This binary search puts a value between any equal values, and the first\n// lesser value.\nLocalCollection._binarySearch = (cmp, array, value) => {\n  let first = 0;\n  let range = array.length;\n\n  while (range > 0) {\n    const halfRange = Math.floor(range / 2);\n\n    if (cmp(value, array[first + halfRange]) >= 0) {\n      first += halfRange + 1;\n      range -= halfRange + 1;\n    } else {\n      range = halfRange;\n    }\n  }\n\n  return first;\n};\n\nLocalCollection._checkSupportedProjection = fields => {\n  if (fields !== Object(fields) || Array.isArray(fields)) {\n    throw MinimongoError('fields option must be an object');\n  }\n\n  Object.keys(fields).forEach(keyPath => {\n    if (keyPath.split('.').includes('$')) {\n      throw MinimongoError(\n        'Minimongo doesn\\'t support $ operator in projections yet.'\n      );\n    }\n\n    const value = fields[keyPath];\n\n    if (typeof value === 'object' &&\n        ['$elemMatch', '$meta', '$slice'].some(key =>\n          hasOwn.call(value, key)\n        )) {\n      throw MinimongoError(\n        'Minimongo doesn\\'t support operators in projections yet.'\n      );\n    }\n\n    if (![1, 0, true, false].includes(value)) {\n      throw MinimongoError(\n        'Projection values should be one of 1, 0, true, or false'\n      );\n    }\n  });\n};\n\n// Knows how to compile a fields projection to a predicate function.\n// @returns - Function: a closure that filters out an object according to the\n//            fields projection rules:\n//            @param obj - Object: MongoDB-styled document\n//            @returns - Object: a document with the fields filtered out\n//                       according to projection rules. Doesn't retain subfields\n//                       of passed argument.\nLocalCollection._compileProjection = fields => {\n  LocalCollection._checkSupportedProjection(fields);\n\n  const _idProjection = fields._id === undefined ? true : fields._id;\n  const details = projectionDetails(fields);\n\n  // returns transformed doc according to ruleTree\n  const transform = (doc, ruleTree) => {\n    // Special case for \"sets\"\n    if (Array.isArray(doc)) {\n      return doc.map(subdoc => transform(subdoc, ruleTree));\n    }\n\n    const result = details.including ? {} : EJSON.clone(doc);\n\n    Object.keys(ruleTree).forEach(key => {\n      if (doc == null || !hasOwn.call(doc, key)) {\n        return;\n      }\n\n      const rule = ruleTree[key];\n\n      if (rule === Object(rule)) {\n        // For sub-objects/subsets we branch\n        if (doc[key] === Object(doc[key])) {\n          result[key] = transform(doc[key], rule);\n        }\n      } else if (details.including) {\n        // Otherwise we don't even touch this subfield\n        result[key] = EJSON.clone(doc[key]);\n      } else {\n        delete result[key];\n      }\n    });\n\n    return doc != null ? result : doc;\n  };\n\n  return doc => {\n    const result = transform(doc, details.tree);\n\n    if (_idProjection && hasOwn.call(doc, '_id')) {\n      result._id = doc._id;\n    }\n\n    if (!_idProjection && hasOwn.call(result, '_id')) {\n      delete result._id;\n    }\n\n    return result;\n  };\n};\n\n// Calculates the document to insert in case we're doing an upsert and the\n// selector does not match any elements\nLocalCollection._createUpsertDocument = (selector, modifier) => {\n  const selectorDocument = populateDocumentWithQueryFields(selector);\n  const isModify = LocalCollection._isModificationMod(modifier);\n\n  const newDoc = {};\n\n  if (selectorDocument._id) {\n    newDoc._id = selectorDocument._id;\n    delete selectorDocument._id;\n  }\n\n  // This double _modify call is made to help with nested properties (see issue\n  // #8631). We do this even if it's a replacement for validation purposes (e.g.\n  // ambiguous id's)\n  LocalCollection._modify(newDoc, {$set: selectorDocument});\n  LocalCollection._modify(newDoc, modifier, {isInsert: true});\n\n  if (isModify) {\n    return newDoc;\n  }\n\n  // Replacement can take _id from query document\n  const replacement = Object.assign({}, modifier);\n  if (newDoc._id) {\n    replacement._id = newDoc._id;\n  }\n\n  return replacement;\n};\n\nLocalCollection._diffObjects = (left, right, callbacks) => {\n  return DiffSequence.diffObjects(left, right, callbacks);\n};\n\n// ordered: bool.\n// old_results and new_results: collections of documents.\n//    if ordered, they are arrays.\n//    if unordered, they are IdMaps\nLocalCollection._diffQueryChanges = (ordered, oldResults, newResults, observer, options) =>\n  DiffSequence.diffQueryChanges(ordered, oldResults, newResults, observer, options)\n;\n\nLocalCollection._diffQueryOrderedChanges = (oldResults, newResults, observer, options) =>\n  DiffSequence.diffQueryOrderedChanges(oldResults, newResults, observer, options)\n;\n\nLocalCollection._diffQueryUnorderedChanges = (oldResults, newResults, observer, options) =>\n  DiffSequence.diffQueryUnorderedChanges(oldResults, newResults, observer, options)\n;\n\nLocalCollection._findInOrderedResults = (query, doc) => {\n  if (!query.ordered) {\n    throw new Error('Can\\'t call _findInOrderedResults on unordered query');\n  }\n\n  for (let i = 0; i < query.results.length; i++) {\n    if (query.results[i] === doc) {\n      return i;\n    }\n  }\n\n  throw Error('object missing from query');\n};\n\n// If this is a selector which explicitly constrains the match by ID to a finite\n// number of documents, returns a list of their IDs.  Otherwise returns\n// null. Note that the selector may have other restrictions so it may not even\n// match those document!  We care about $in and $and since those are generated\n// access-controlled update and remove.\nLocalCollection._idsMatchedBySelector = selector => {\n  // Is the selector just an ID?\n  if (LocalCollection._selectorIsId(selector)) {\n    return [selector];\n  }\n\n  if (!selector) {\n    return null;\n  }\n\n  // Do we have an _id clause?\n  if (hasOwn.call(selector, '_id')) {\n    // Is the _id clause just an ID?\n    if (LocalCollection._selectorIsId(selector._id)) {\n      return [selector._id];\n    }\n\n    // Is the _id clause {_id: {$in: [\"x\", \"y\", \"z\"]}}?\n    if (selector._id\n        && Array.isArray(selector._id.$in)\n        && selector._id.$in.length\n        && selector._id.$in.every(LocalCollection._selectorIsId)) {\n      return selector._id.$in;\n    }\n\n    return null;\n  }\n\n  // If this is a top-level $and, and any of the clauses constrain their\n  // documents, then the whole selector is constrained by any one clause's\n  // constraint. (Well, by their intersection, but that seems unlikely.)\n  if (Array.isArray(selector.$and)) {\n    for (let i = 0; i < selector.$and.length; ++i) {\n      const subIds = LocalCollection._idsMatchedBySelector(selector.$and[i]);\n\n      if (subIds) {\n        return subIds;\n      }\n    }\n  }\n\n  return null;\n};\n\nLocalCollection._insertInResultsSync = (query, doc) => {\n  const fields = EJSON.clone(doc);\n\n  delete fields._id;\n\n  if (query.ordered) {\n    if (!query.sorter) {\n      query.addedBefore(doc._id, query.projectionFn(fields), null);\n      query.results.push(doc);\n    } else {\n      const i = LocalCollection._insertInSortedList(\n        query.sorter.getComparator({distances: query.distances}),\n        query.results,\n        doc\n      );\n\n      let next = query.results[i + 1];\n      if (next) {\n        next = next._id;\n      } else {\n        next = null;\n      }\n\n      query.addedBefore(doc._id, query.projectionFn(fields), next);\n    }\n\n    query.added(doc._id, query.projectionFn(fields));\n  } else {\n    query.added(doc._id, query.projectionFn(fields));\n    query.results.set(doc._id, doc);\n  }\n};\n\nLocalCollection._insertInResultsAsync = async (query, doc) => {\n  const fields = EJSON.clone(doc);\n\n  delete fields._id;\n\n  if (query.ordered) {\n    if (!query.sorter) {\n      await query.addedBefore(doc._id, query.projectionFn(fields), null);\n      query.results.push(doc);\n    } else {\n      const i = LocalCollection._insertInSortedList(\n        query.sorter.getComparator({distances: query.distances}),\n        query.results,\n        doc\n      );\n\n      let next = query.results[i + 1];\n      if (next) {\n        next = next._id;\n      } else {\n        next = null;\n      }\n\n      await query.addedBefore(doc._id, query.projectionFn(fields), next);\n    }\n\n    await query.added(doc._id, query.projectionFn(fields));\n  } else {\n    await query.added(doc._id, query.projectionFn(fields));\n    query.results.set(doc._id, doc);\n  }\n};\n\nLocalCollection._insertInSortedList = (cmp, array, value) => {\n  if (array.length === 0) {\n    array.push(value);\n    return 0;\n  }\n\n  const i = LocalCollection._binarySearch(cmp, array, value);\n\n  array.splice(i, 0, value);\n\n  return i;\n};\n\nLocalCollection._isModificationMod = mod => {\n  let isModify = false;\n  let isReplace = false;\n\n  Object.keys(mod).forEach(key => {\n    if (key.substr(0, 1) === '$') {\n      isModify = true;\n    } else {\n      isReplace = true;\n    }\n  });\n\n  if (isModify && isReplace) {\n    throw new Error(\n      'Update parameter cannot have both modifier and non-modifier fields.'\n    );\n  }\n\n  return isModify;\n};\n\n// XXX maybe this should be EJSON.isObject, though EJSON doesn't know about\n// RegExp\n// XXX note that _type(undefined) === 3!!!!\nLocalCollection._isPlainObject = x => {\n  return x && LocalCollection._f._type(x) === 3;\n};\n\n// XXX need a strategy for passing the binding of $ into this\n// function, from the compiled selector\n//\n// maybe just {key.up.to.just.before.dollarsign: array_index}\n//\n// XXX atomicity: if one modification fails, do we roll back the whole\n// change?\n//\n// options:\n//   - isInsert is set when _modify is being called to compute the document to\n//     insert as part of an upsert operation. We use this primarily to figure\n//     out when to set the fields in $setOnInsert, if present.\nLocalCollection._modify = (doc, modifier, options = {}) => {\n  if (!LocalCollection._isPlainObject(modifier)) {\n    throw MinimongoError('Modifier must be an object');\n  }\n\n  // Make sure the caller can't mutate our data structures.\n  modifier = EJSON.clone(modifier);\n\n  const isModifier = isOperatorObject(modifier);\n  const newDoc = isModifier ? EJSON.clone(doc) : modifier;\n\n  if (isModifier) {\n    // apply modifiers to the doc.\n    Object.keys(modifier).forEach(operator => {\n      // Treat $setOnInsert as $set if this is an insert.\n      const setOnInsert = options.isInsert && operator === '$setOnInsert';\n      const modFunc = MODIFIERS[setOnInsert ? '$set' : operator];\n      const operand = modifier[operator];\n\n      if (!modFunc) {\n        throw MinimongoError(`Invalid modifier specified ${operator}`);\n      }\n\n      Object.keys(operand).forEach(keypath => {\n        const arg = operand[keypath];\n\n        if (keypath === '') {\n          throw MinimongoError('An empty update path is not valid.');\n        }\n\n        const keyparts = keypath.split('.');\n\n        if (!keyparts.every(Boolean)) {\n          throw MinimongoError(\n            `The update path '${keypath}' contains an empty field name, ` +\n            'which is not allowed.'\n          );\n        }\n\n        const target = findModTarget(newDoc, keyparts, {\n          arrayIndices: options.arrayIndices,\n          forbidArray: operator === '$rename',\n          noCreate: NO_CREATE_MODIFIERS[operator]\n        });\n\n        modFunc(target, keyparts.pop(), arg, keypath, newDoc);\n      });\n    });\n\n    if (doc._id && !EJSON.equals(doc._id, newDoc._id)) {\n      throw MinimongoError(\n        `After applying the update to the document {_id: \"${doc._id}\", ...},` +\n        ' the (immutable) field \\'_id\\' was found to have been altered to ' +\n        `_id: \"${newDoc._id}\"`\n      );\n    }\n  } else {\n    if (doc._id && modifier._id && !EJSON.equals(doc._id, modifier._id)) {\n      throw MinimongoError(\n        `The _id field cannot be changed from {_id: \"${doc._id}\"} to ` +\n        `{_id: \"${modifier._id}\"}`\n      );\n    }\n\n    // replace the whole document\n    assertHasValidFieldNames(modifier);\n  }\n\n  // move new document into place.\n  Object.keys(doc).forEach(key => {\n    // Note: this used to be for (var key in doc) however, this does not\n    // work right in Opera. Deleting from a doc while iterating over it\n    // would sometimes cause opera to skip some keys.\n    if (key !== '_id') {\n      delete doc[key];\n    }\n  });\n\n  Object.keys(newDoc).forEach(key => {\n    doc[key] = newDoc[key];\n  });\n};\n\nLocalCollection._observeFromObserveChanges = (cursor, observeCallbacks) => {\n  const transform = cursor.getTransform() || (doc => doc);\n  let suppressed = !!observeCallbacks._suppress_initial;\n\n  let observeChangesCallbacks;\n  if (LocalCollection._observeCallbacksAreOrdered(observeCallbacks)) {\n    // The \"_no_indices\" option sets all index arguments to -1 and skips the\n    // linear scans required to generate them.  This lets observers that don't\n    // need absolute indices benefit from the other features of this API --\n    // relative order, transforms, and applyChanges -- without the speed hit.\n    const indices = !observeCallbacks._no_indices;\n\n    observeChangesCallbacks = {\n      addedBefore(id, fields, before) {\n        const check = suppressed || !(observeCallbacks.addedAt || observeCallbacks.added)\n        if (check) {\n          return;\n        }\n\n        const doc = transform(Object.assign(fields, {_id: id}));\n\n        if (observeCallbacks.addedAt) {\n          observeCallbacks.addedAt(\n              doc,\n              indices\n                  ? before\n                      ? this.docs.indexOf(before)\n                      : this.docs.size()\n                  : -1,\n              before\n          );\n        } else {\n          observeCallbacks.added(doc);\n        }\n      },\n      changed(id, fields) {\n\n        if (!(observeCallbacks.changedAt || observeCallbacks.changed)) {\n          return;\n        }\n\n        let doc = EJSON.clone(this.docs.get(id));\n        if (!doc) {\n          throw new Error(`Unknown id for changed: ${id}`);\n        }\n\n        const oldDoc = transform(EJSON.clone(doc));\n\n        DiffSequence.applyChanges(doc, fields);\n\n        if (observeCallbacks.changedAt) {\n          observeCallbacks.changedAt(\n              transform(doc),\n              oldDoc,\n              indices ? this.docs.indexOf(id) : -1\n          );\n        } else {\n          observeCallbacks.changed(transform(doc), oldDoc);\n        }\n      },\n      movedBefore(id, before) {\n        if (!observeCallbacks.movedTo) {\n          return;\n        }\n\n        const from = indices ? this.docs.indexOf(id) : -1;\n        let to = indices\n            ? before\n                ? this.docs.indexOf(before)\n                : this.docs.size()\n            : -1;\n\n        // When not moving backwards, adjust for the fact that removing the\n        // document slides everything back one slot.\n        if (to > from) {\n          --to;\n        }\n\n        observeCallbacks.movedTo(\n            transform(EJSON.clone(this.docs.get(id))),\n            from,\n            to,\n            before || null\n        );\n      },\n      removed(id) {\n        if (!(observeCallbacks.removedAt || observeCallbacks.removed)) {\n          return;\n        }\n\n        // technically maybe there should be an EJSON.clone here, but it's about\n        // to be removed from this.docs!\n        const doc = transform(this.docs.get(id));\n\n        if (observeCallbacks.removedAt) {\n          observeCallbacks.removedAt(doc, indices ? this.docs.indexOf(id) : -1);\n        } else {\n          observeCallbacks.removed(doc);\n        }\n      },\n    };\n  } else {\n    observeChangesCallbacks = {\n      added(id, fields) {\n        if (!suppressed && observeCallbacks.added) {\n          observeCallbacks.added(transform(Object.assign(fields, {_id: id})));\n        }\n      },\n      changed(id, fields) {\n        if (observeCallbacks.changed) {\n          const oldDoc = this.docs.get(id);\n          const doc = EJSON.clone(oldDoc);\n\n          DiffSequence.applyChanges(doc, fields);\n\n          observeCallbacks.changed(\n              transform(doc),\n              transform(EJSON.clone(oldDoc))\n          );\n        }\n      },\n      removed(id) {\n        if (observeCallbacks.removed) {\n          observeCallbacks.removed(transform(this.docs.get(id)));\n        }\n      },\n    };\n  }\n\n  const changeObserver = new LocalCollection._CachingChangeObserver({\n    callbacks: observeChangesCallbacks\n  });\n\n  // CachingChangeObserver clones all received input on its callbacks\n  // So we can mark it as safe to reduce the ejson clones.\n  // This is tested by the `mongo-livedata - (extended) scribbling` tests\n  changeObserver.applyChange._fromObserve = true;\n  const handle = cursor.observeChanges(changeObserver.applyChange,\n      { nonMutatingCallbacks: true });\n\n  // If needed, re-enable callbacks as soon as the initial batch is ready.\n  const setSuppressed = (h) => {\n    if (h.isReady) suppressed = false;\n    else h.isReadyPromise?.then(() => (suppressed = false));\n  };\n  // When we call cursor.observeChanges() it can be the on from\n  // the mongo package (instead of the minimongo one) and it doesn't have isReady and isReadyPromise\n  if (Meteor._isPromise(handle)) {\n    handle.then(setSuppressed);\n  } else {\n    setSuppressed(handle);\n  }\n  return handle;\n};\n\nLocalCollection._observeCallbacksAreOrdered = callbacks => {\n  if (callbacks.added && callbacks.addedAt) {\n    throw new Error('Please specify only one of added() and addedAt()');\n  }\n\n  if (callbacks.changed && callbacks.changedAt) {\n    throw new Error('Please specify only one of changed() and changedAt()');\n  }\n\n  if (callbacks.removed && callbacks.removedAt) {\n    throw new Error('Please specify only one of removed() and removedAt()');\n  }\n\n  return !!(\n    callbacks.addedAt ||\n    callbacks.changedAt ||\n    callbacks.movedTo ||\n    callbacks.removedAt\n  );\n};\n\nLocalCollection._observeChangesCallbacksAreOrdered = callbacks => {\n  if (callbacks.added && callbacks.addedBefore) {\n    throw new Error('Please specify only one of added() and addedBefore()');\n  }\n\n  return !!(callbacks.addedBefore || callbacks.movedBefore);\n};\n\nLocalCollection._removeFromResultsSync = (query, doc) => {\n  if (query.ordered) {\n    const i = LocalCollection._findInOrderedResults(query, doc);\n\n    query.removed(doc._id);\n    query.results.splice(i, 1);\n  } else {\n    const id = doc._id;  // in case callback mutates doc\n\n    query.removed(doc._id);\n    query.results.remove(id);\n  }\n};\n\nLocalCollection._removeFromResultsAsync = async (query, doc) => {\n  if (query.ordered) {\n    const i = LocalCollection._findInOrderedResults(query, doc);\n\n    await query.removed(doc._id);\n    query.results.splice(i, 1);\n  } else {\n    const id = doc._id;  // in case callback mutates doc\n\n    await query.removed(doc._id);\n    query.results.remove(id);\n  }\n};\n\n// Is this selector just shorthand for lookup by _id?\nLocalCollection._selectorIsId = selector =>\n  typeof selector === 'number' ||\n  typeof selector === 'string' ||\n  selector instanceof MongoID.ObjectID\n;\n\n// Is the selector just lookup by _id (shorthand or not)?\nLocalCollection._selectorIsIdPerhapsAsObject = selector =>\n  LocalCollection._selectorIsId(selector) ||\n  LocalCollection._selectorIsId(selector && selector._id) &&\n  Object.keys(selector).length === 1\n;\n\nLocalCollection._updateInResultsSync = (query, doc, old_doc) => {\n  if (!EJSON.equals(doc._id, old_doc._id)) {\n    throw new Error('Can\\'t change a doc\\'s _id while updating');\n  }\n\n  const projectionFn = query.projectionFn;\n  const changedFields = DiffSequence.makeChangedFields(\n    projectionFn(doc),\n    projectionFn(old_doc)\n  );\n\n  if (!query.ordered) {\n    if (Object.keys(changedFields).length) {\n      query.changed(doc._id, changedFields);\n      query.results.set(doc._id, doc);\n    }\n\n    return;\n  }\n\n  const old_idx = LocalCollection._findInOrderedResults(query, doc);\n\n  if (Object.keys(changedFields).length) {\n    query.changed(doc._id, changedFields);\n  }\n\n  if (!query.sorter) {\n    return;\n  }\n\n  // just take it out and put it back in again, and see if the index changes\n  query.results.splice(old_idx, 1);\n\n  const new_idx = LocalCollection._insertInSortedList(\n    query.sorter.getComparator({distances: query.distances}),\n    query.results,\n    doc\n  );\n\n  if (old_idx !== new_idx) {\n    let next = query.results[new_idx + 1];\n    if (next) {\n      next = next._id;\n    } else {\n      next = null;\n    }\n\n    query.movedBefore && query.movedBefore(doc._id, next);\n  }\n};\n\nLocalCollection._updateInResultsAsync = async (query, doc, old_doc) => {\n  if (!EJSON.equals(doc._id, old_doc._id)) {\n    throw new Error('Can\\'t change a doc\\'s _id while updating');\n  }\n\n  const projectionFn = query.projectionFn;\n  const changedFields = DiffSequence.makeChangedFields(\n    projectionFn(doc),\n    projectionFn(old_doc)\n  );\n\n  if (!query.ordered) {\n    if (Object.keys(changedFields).length) {\n      await query.changed(doc._id, changedFields);\n      query.results.set(doc._id, doc);\n    }\n\n    return;\n  }\n\n  const old_idx = LocalCollection._findInOrderedResults(query, doc);\n\n  if (Object.keys(changedFields).length) {\n    await query.changed(doc._id, changedFields);\n  }\n\n  if (!query.sorter) {\n    return;\n  }\n\n  // just take it out and put it back in again, and see if the index changes\n  query.results.splice(old_idx, 1);\n\n  const new_idx = LocalCollection._insertInSortedList(\n    query.sorter.getComparator({distances: query.distances}),\n    query.results,\n    doc\n  );\n\n  if (old_idx !== new_idx) {\n    let next = query.results[new_idx + 1];\n    if (next) {\n      next = next._id;\n    } else {\n      next = null;\n    }\n\n    query.movedBefore && await query.movedBefore(doc._id, next);\n  }\n};\n\nconst MODIFIERS = {\n  $currentDate(target, field, arg) {\n    if (typeof arg === 'object' && hasOwn.call(arg, '$type')) {\n      if (arg.$type !== 'date') {\n        throw MinimongoError(\n          'Minimongo does currently only support the date type in ' +\n          '$currentDate modifiers',\n          {field}\n        );\n      }\n    } else if (arg !== true) {\n      throw MinimongoError('Invalid $currentDate modifier', {field});\n    }\n\n    target[field] = new Date();\n  },\n  $inc(target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $inc allowed for numbers only', {field});\n    }\n\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError(\n          'Cannot apply $inc modifier to non-number',\n          {field}\n        );\n      }\n\n      target[field] += arg;\n    } else {\n      target[field] = arg;\n    }\n  },\n  $min(target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $min allowed for numbers only', {field});\n    }\n\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError(\n          'Cannot apply $min modifier to non-number',\n          {field}\n        );\n      }\n\n      if (target[field] > arg) {\n        target[field] = arg;\n      }\n    } else {\n      target[field] = arg;\n    }\n  },\n  $max(target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $max allowed for numbers only', {field});\n    }\n\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError(\n          'Cannot apply $max modifier to non-number',\n          {field}\n        );\n      }\n\n      if (target[field] < arg) {\n        target[field] = arg;\n      }\n    } else {\n      target[field] = arg;\n    }\n  },\n  $mul(target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $mul allowed for numbers only', {field});\n    }\n\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError(\n          'Cannot apply $mul modifier to non-number',\n          {field}\n        );\n      }\n\n      target[field] *= arg;\n    } else {\n      target[field] = 0;\n    }\n  },\n  $rename(target, field, arg, keypath, doc) {\n    // no idea why mongo has this restriction..\n    if (keypath === arg) {\n      throw MinimongoError('$rename source must differ from target', {field});\n    }\n\n    if (target === null) {\n      throw MinimongoError('$rename source field invalid', {field});\n    }\n\n    if (typeof arg !== 'string') {\n      throw MinimongoError('$rename target must be a string', {field});\n    }\n\n    if (arg.includes('\\0')) {\n      // Null bytes are not allowed in Mongo field names\n      // https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names\n      throw MinimongoError(\n        'The \\'to\\' field for $rename cannot contain an embedded null byte',\n        {field}\n      );\n    }\n\n    if (target === undefined) {\n      return;\n    }\n\n    const object = target[field];\n\n    delete target[field];\n\n    const keyparts = arg.split('.');\n    const target2 = findModTarget(doc, keyparts, {forbidArray: true});\n\n    if (target2 === null) {\n      throw MinimongoError('$rename target field invalid', {field});\n    }\n\n    target2[keyparts.pop()] = object;\n  },\n  $set(target, field, arg) {\n    if (target !== Object(target)) { // not an array or an object\n      const error = MinimongoError(\n        'Cannot set property on non-object field',\n        {field}\n      );\n      error.setPropertyError = true;\n      throw error;\n    }\n\n    if (target === null) {\n      const error = MinimongoError('Cannot set property on null', {field});\n      error.setPropertyError = true;\n      throw error;\n    }\n\n    assertHasValidFieldNames(arg);\n\n    target[field] = arg;\n  },\n  $setOnInsert(target, field, arg) {\n    // converted to `$set` in `_modify`\n  },\n  $unset(target, field, arg) {\n    if (target !== undefined) {\n      if (target instanceof Array) {\n        if (field in target) {\n          target[field] = null;\n        }\n      } else {\n        delete target[field];\n      }\n    }\n  },\n  $push(target, field, arg) {\n    if (target[field] === undefined) {\n      target[field] = [];\n    }\n\n    if (!(target[field] instanceof Array)) {\n      throw MinimongoError('Cannot apply $push modifier to non-array', {field});\n    }\n\n    if (!(arg && arg.$each)) {\n      // Simple mode: not $each\n      assertHasValidFieldNames(arg);\n\n      target[field].push(arg);\n\n      return;\n    }\n\n    // Fancy mode: $each (and maybe $slice and $sort and $position)\n    const toPush = arg.$each;\n    if (!(toPush instanceof Array)) {\n      throw MinimongoError('$each must be an array', {field});\n    }\n\n    assertHasValidFieldNames(toPush);\n\n    // Parse $position\n    let position = undefined;\n    if ('$position' in arg) {\n      if (typeof arg.$position !== 'number') {\n        throw MinimongoError('$position must be a numeric value', {field});\n      }\n\n      // XXX should check to make sure integer\n      if (arg.$position < 0) {\n        throw MinimongoError(\n          '$position in $push must be zero or positive',\n          {field}\n        );\n      }\n\n      position = arg.$position;\n    }\n\n    // Parse $slice.\n    let slice = undefined;\n    if ('$slice' in arg) {\n      if (typeof arg.$slice !== 'number') {\n        throw MinimongoError('$slice must be a numeric value', {field});\n      }\n\n      // XXX should check to make sure integer\n      slice = arg.$slice;\n    }\n\n    // Parse $sort.\n    let sortFunction = undefined;\n    if (arg.$sort) {\n      if (slice === undefined) {\n        throw MinimongoError('$sort requires $slice to be present', {field});\n      }\n\n      // XXX this allows us to use a $sort whose value is an array, but that's\n      // actually an extension of the Node driver, so it won't work\n      // server-side. Could be confusing!\n      // XXX is it correct that we don't do geo-stuff here?\n      sortFunction = new Minimongo.Sorter(arg.$sort).getComparator();\n\n      toPush.forEach(element => {\n        if (LocalCollection._f._type(element) !== 3) {\n          throw MinimongoError(\n            '$push like modifiers using $sort require all elements to be ' +\n            'objects',\n            {field}\n          );\n        }\n      });\n    }\n\n    // Actually push.\n    if (position === undefined) {\n      toPush.forEach(element => {\n        target[field].push(element);\n      });\n    } else {\n      const spliceArguments = [position, 0];\n\n      toPush.forEach(element => {\n        spliceArguments.push(element);\n      });\n\n      target[field].splice(...spliceArguments);\n    }\n\n    // Actually sort.\n    if (sortFunction) {\n      target[field].sort(sortFunction);\n    }\n\n    // Actually slice.\n    if (slice !== undefined) {\n      if (slice === 0) {\n        target[field] = []; // differs from Array.slice!\n      } else if (slice < 0) {\n        target[field] = target[field].slice(slice);\n      } else {\n        target[field] = target[field].slice(0, slice);\n      }\n    }\n  },\n  $pushAll(target, field, arg) {\n    if (!(typeof arg === 'object' && arg instanceof Array)) {\n      throw MinimongoError('Modifier $pushAll/pullAll allowed for arrays only');\n    }\n\n    assertHasValidFieldNames(arg);\n\n    const toPush = target[field];\n\n    if (toPush === undefined) {\n      target[field] = arg;\n    } else if (!(toPush instanceof Array)) {\n      throw MinimongoError(\n        'Cannot apply $pushAll modifier to non-array',\n        {field}\n      );\n    } else {\n      toPush.push(...arg);\n    }\n  },\n  $addToSet(target, field, arg) {\n    let isEach = false;\n\n    if (typeof arg === 'object') {\n      // check if first key is '$each'\n      const keys = Object.keys(arg);\n      if (keys[0] === '$each') {\n        isEach = true;\n      }\n    }\n\n    const values = isEach ? arg.$each : [arg];\n\n    assertHasValidFieldNames(values);\n\n    const toAdd = target[field];\n    if (toAdd === undefined) {\n      target[field] = values;\n    } else if (!(toAdd instanceof Array)) {\n      throw MinimongoError(\n        'Cannot apply $addToSet modifier to non-array',\n        {field}\n      );\n    } else {\n      values.forEach(value => {\n        if (toAdd.some(element => LocalCollection._f._equal(value, element))) {\n          return;\n        }\n\n        toAdd.push(value);\n      });\n    }\n  },\n  $pop(target, field, arg) {\n    if (target === undefined) {\n      return;\n    }\n\n    const toPop = target[field];\n\n    if (toPop === undefined) {\n      return;\n    }\n\n    if (!(toPop instanceof Array)) {\n      throw MinimongoError('Cannot apply $pop modifier to non-array', {field});\n    }\n\n    if (typeof arg === 'number' && arg < 0) {\n      toPop.splice(0, 1);\n    } else {\n      toPop.pop();\n    }\n  },\n  $pull(target, field, arg) {\n    if (target === undefined) {\n      return;\n    }\n\n    const toPull = target[field];\n    if (toPull === undefined) {\n      return;\n    }\n\n    if (!(toPull instanceof Array)) {\n      throw MinimongoError(\n        'Cannot apply $pull/pullAll modifier to non-array',\n        {field}\n      );\n    }\n\n    let out;\n    if (arg != null && typeof arg === 'object' && !(arg instanceof Array)) {\n      // XXX would be much nicer to compile this once, rather than\n      // for each document we modify.. but usually we're not\n      // modifying that many documents, so we'll let it slide for\n      // now\n\n      // XXX Minimongo.Matcher isn't up for the job, because we need\n      // to permit stuff like {$pull: {a: {$gt: 4}}}.. something\n      // like {$gt: 4} is not normally a complete selector.\n      // same issue as $elemMatch possibly?\n      const matcher = new Minimongo.Matcher(arg);\n\n      out = toPull.filter(element => !matcher.documentMatches(element).result);\n    } else {\n      out = toPull.filter(element => !LocalCollection._f._equal(element, arg));\n    }\n\n    target[field] = out;\n  },\n  $pullAll(target, field, arg) {\n    if (!(typeof arg === 'object' && arg instanceof Array)) {\n      throw MinimongoError(\n        'Modifier $pushAll/pullAll allowed for arrays only',\n        {field}\n      );\n    }\n\n    if (target === undefined) {\n      return;\n    }\n\n    const toPull = target[field];\n\n    if (toPull === undefined) {\n      return;\n    }\n\n    if (!(toPull instanceof Array)) {\n      throw MinimongoError(\n        'Cannot apply $pull/pullAll modifier to non-array',\n        {field}\n      );\n    }\n\n    target[field] = toPull.filter(object =>\n      !arg.some(element => LocalCollection._f._equal(object, element))\n    );\n  },\n  $bit(target, field, arg) {\n    // XXX mongo only supports $bit on integers, and we only support\n    // native javascript numbers (doubles) so far, so we can't support $bit\n    throw MinimongoError('$bit is not supported', {field});\n  },\n  $v() {\n    // As discussed in https://github.com/meteor/meteor/issues/9623,\n    // the `$v` operator is not needed by Meteor, but problems can occur if\n    // it's not at least callable (as of Mongo >= 3.6). It's defined here as\n    // a no-op to work around these problems.\n  }\n};\n\nconst NO_CREATE_MODIFIERS = {\n  $pop: true,\n  $pull: true,\n  $pullAll: true,\n  $rename: true,\n  $unset: true\n};\n\n// Make sure field names do not contain Mongo restricted\n// characters ('.', '$', '\\0').\n// https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names\nconst invalidCharMsg = {\n  $: 'start with \\'$\\'',\n  '.': 'contain \\'.\\'',\n  '\\0': 'contain null bytes'\n};\n\n// checks if all field names in an object are valid\nfunction assertHasValidFieldNames(doc) {\n  if (doc && typeof doc === 'object') {\n    JSON.stringify(doc, (key, value) => {\n      assertIsValidFieldName(key);\n      return value;\n    });\n  }\n}\n\nfunction assertIsValidFieldName(key) {\n  let match;\n  if (typeof key === 'string' && (match = key.match(/^\\$|\\.|\\0/))) {\n    throw MinimongoError(`Key ${key} must not ${invalidCharMsg[match[0]]}`);\n  }\n}\n\n// for a.b.c.2.d.e, keyparts should be ['a', 'b', 'c', '2', 'd', 'e'],\n// and then you would operate on the 'e' property of the returned\n// object.\n//\n// if options.noCreate is falsey, creates intermediate levels of\n// structure as necessary, like mkdir -p (and raises an exception if\n// that would mean giving a non-numeric property to an array.) if\n// options.noCreate is true, return undefined instead.\n//\n// may modify the last element of keyparts to signal to the caller that it needs\n// to use a different value to index into the returned object (for example,\n// ['a', '01'] -> ['a', 1]).\n//\n// if forbidArray is true, return null if the keypath goes through an array.\n//\n// if options.arrayIndices is set, use its first element for the (first) '$' in\n// the path.\nfunction findModTarget(doc, keyparts, options = {}) {\n  let usedArrayIndex = false;\n\n  for (let i = 0; i < keyparts.length; i++) {\n    const last = i === keyparts.length - 1;\n    let keypart = keyparts[i];\n\n    if (!isIndexable(doc)) {\n      if (options.noCreate) {\n        return undefined;\n      }\n\n      const error = MinimongoError(\n        `cannot use the part '${keypart}' to traverse ${doc}`\n      );\n      error.setPropertyError = true;\n      throw error;\n    }\n\n    if (doc instanceof Array) {\n      if (options.forbidArray) {\n        return null;\n      }\n\n      if (keypart === '$') {\n        if (usedArrayIndex) {\n          throw MinimongoError('Too many positional (i.e. \\'$\\') elements');\n        }\n\n        if (!options.arrayIndices || !options.arrayIndices.length) {\n          throw MinimongoError(\n            'The positional operator did not find the match needed from the ' +\n            'query'\n          );\n        }\n\n        keypart = options.arrayIndices[0];\n        usedArrayIndex = true;\n      } else if (isNumericKey(keypart)) {\n        keypart = parseInt(keypart);\n      } else {\n        if (options.noCreate) {\n          return undefined;\n        }\n\n        throw MinimongoError(\n          `can't append to array using string field name [${keypart}]`\n        );\n      }\n\n      if (last) {\n        keyparts[i] = keypart; // handle 'a.01'\n      }\n\n      if (options.noCreate && keypart >= doc.length) {\n        return undefined;\n      }\n\n      while (doc.length < keypart) {\n        doc.push(null);\n      }\n\n      if (!last) {\n        if (doc.length === keypart) {\n          doc.push({});\n        } else if (typeof doc[keypart] !== 'object') {\n          throw MinimongoError(\n            `can't modify field '${keyparts[i + 1]}' of list value ` +\n            JSON.stringify(doc[keypart])\n          );\n        }\n      }\n    } else {\n      assertIsValidFieldName(keypart);\n\n      if (!(keypart in doc)) {\n        if (options.noCreate) {\n          return undefined;\n        }\n\n        if (!last) {\n          doc[keypart] = {};\n        }\n      }\n    }\n\n    if (last) {\n      return doc;\n    }\n\n    doc = doc[keypart];\n  }\n\n  // notreached\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"0ee6e0974c265ee719be14b49b11d2fd19e95083"}
