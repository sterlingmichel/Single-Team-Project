{"version":3,"sources":["meteor://ðŸ’»app/packages/minifier-css/minifier.js"],"names":["module1","export","CssTools","path","link","default","v","url","postcss","cssnano","__reifyWaitForDeps__","parseCss","cssText","options","arguments","length","undefined","source","from","parse","stringifyCss","cssAst","sourcemap","map","inline","annotation","sourcesContent","transformResult","toResult","code","css","toJSON","minifyCss","minifyCssAsync","safe","process","then","result","mergeCssAsts","cssAsts","warnCb","rulesPredicate","rules","exclude","Array","isArray","node","nodeMatchesRule","includes","name","type","newAst","root","forEach","ast","nodes","charsetRules","filter","some","rule","test","params","filename","importCount","i","rewriteCssUrls","imports","splice","push","mergedCssPath","rewriteRules","Profile","funcName","concat","hasOwn","Object","prototype","hasOwnProperty","call","appDir","cwd","sourceFile","input","file","sourceFileFromAppRoot","replace","basePath","pathJoin","pathDirname","match","value","cssUrlRegex","parts","exec","oldCssUrl","quote","resource","protocol","href","startsWith","absolutePath","isRelative","hash","relativeToMergedCss","pathRelative","newCssUrl","charAt","toOSPath","p","platform","toStandardPath","a","b","join","dirname","p1","p2","relative","__reify_async_result__","_reifyError","self","async"],"mappings":"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","file":"/packages/minifier-css.js","sourcesContent":["import path from 'path';\nimport url from 'url';\nimport postcss from 'postcss';\nimport cssnano from 'cssnano';\n\nconst CssTools = {\n  /**\n   * Parse the incoming CSS string; return a CSS AST.\n   *\n   * @param {string} cssText The CSS string to be parsed.\n   * @param {Object} options Options to pass to the PostCSS parser.\n   * @return {postcss#Root} PostCSS Root AST.\n   */\n  parseCss(cssText, options = {}) {\n    // This function previously used the `css-parse` npm package, which\n    // set the name of the css file being parsed using  { source: 'filename' }.\n    // If included, we'll convert this to the `postcss` equivalent, to maintain\n    // backwards compatibility.\n    if (options.source) {\n      options.from = options.source;\n      delete options.source;\n    }\n    return postcss.parse(cssText, options);\n  },\n\n  /**\n   * Using the incoming CSS AST, create and return a new object with the\n   * generated CSS string, and optional sourcemap details.\n   *\n   * @param {postcss#Root} cssAst PostCSS Root AST.\n   * @param {Object} options Options to pass to the PostCSS parser.\n   * @return {Object} Format: { code: 'css string', map: 'sourcemap deatils' }.\n   */\n  stringifyCss(cssAst, options = {}) {\n    // This function previously used the `css-stringify` npm package, which\n    // controlled sourcemap generation by passing in { sourcemap: true }.\n    // If included, we'll convert this to the `postcss` equivalent, to maintain\n    // backwards compatibility.\n    if (options.sourcemap) {\n      options.map = {\n        inline: false,\n        annotation: false,\n        sourcesContent: false,\n      };\n      delete options.sourcemap;\n    }\n    // explicitly set from to undefined to prevent postcss warnings\n    if (!options.from){\n      options.from = void 0;\n    }\n\n    transformResult = cssAst.toResult(options);\n\n    return {\n      code: transformResult.css,\n      map: transformResult.map ? transformResult.map.toJSON() : null,\n    };\n  },\n\n  /**\n   * Minify the passed in CSS string.\n   *\n   * @param {string} cssText CSS string to minify.\n   * @return {Promise<String[]>} Array containing the minified CSS.\n   */\n  minifyCss(cssText) {\n    return CssTools.minifyCssAsync(cssText);\n  },\n\n  /**\n   * Minify the passed in CSS string.\n   *\n   * @param {string} cssText CSS string to minify.\n   * @return {Promise<String[]>} Array containing the minified CSS.\n   */\n  async minifyCssAsync(cssText) {\n    return await postcss([cssnano({ safe: true })])\n      .process(cssText, {\n        from: void 0,\n      })\n      .then((result) => [result.css]);\n  },\n\n  /**\n   * Merge multiple CSS AST's into one.\n   *\n   * @param {postcss#Root[]} cssAsts Array of PostCSS Root objects.\n   * @callback warnCb Callback used to handle warning messages.\n   * @return {postcss#Root} PostCSS Root object.\n   */\n  mergeCssAsts(cssAsts, warnCb) {\n    const rulesPredicate = (rules, exclude = false) => {\n      if (! Array.isArray(rules)) {\n        rules = [rules];\n      }\n      return node => {\n        // PostCSS AtRule nodes have `type: 'atrule'` and a descriptive name,\n        // e.g. 'import' or 'charset', while Comment nodes have type only.\n        const nodeMatchesRule = rules.includes(node.name || node.type);\n\n        return exclude ? !nodeMatchesRule : nodeMatchesRule;\n      }\n    };\n\n    // Simple concatenation of CSS files would break @import rules\n    // located in the beginning of a file. Before concatenation, pull\n    // @import rules to the beginning of a new syntax tree so they always\n    // precede other rules.\n    const newAst = postcss.root();\n\n    cssAsts.forEach((ast) => {\n      if (ast.nodes) {\n        // Pick only the imports from the beginning of file ignoring @charset\n        // rules as every file is assumed to be in UTF-8.\n        const charsetRules = ast.nodes.filter(rulesPredicate('charset'));\n\n        if (charsetRules.some((rule) => {\n          // According to MDN, only 'UTF-8' and \"UTF-8\" are the correct\n          // encoding directives representing UTF-8.\n          return ! /^(['\"])UTF-8\\1$/.test(rule.params);\n        })) {\n          warnCb(\n            ast.filename,\n            '@charset rules in this file will be ignored as UTF-8 is the ' +\n            'only encoding supported'\n          );\n        }\n\n        ast.nodes = ast.nodes.filter(rulesPredicate('charset', true));\n        let importCount = 0;\n        for (let i = 0; i < ast.nodes.length; i++) {\n          if (! rulesPredicate(['import', 'comment'])(ast.nodes[i])) {\n            importCount = i;\n            break;\n          }\n        }\n\n        CssTools.rewriteCssUrls(ast);\n\n        const imports = ast.nodes.splice(0, importCount);\n        newAst.nodes.push(...imports);\n\n        // If there are imports left in the middle of a file, warn users as it\n        // might be a potential bug (imports are only valid at the beginning of\n        // a file).\n        if (ast.nodes.some(rulesPredicate('import'))) {\n          warnCb(\n            ast.filename,\n            'There are some @import rules in the middle of a file. This ' +\n            'might be a bug, as imports are only valid at the beginning of ' +\n            'a file.'\n          );\n        }\n      }\n    });\n\n    // Now we can put the rest of CSS rules into new AST.\n    cssAsts.forEach((ast) => {\n      if (ast.nodes) {\n        newAst.nodes.push(...ast.nodes);\n      }\n    });\n\n    return newAst;\n  },\n\n  /**\n   * We are looking for all relative urls defined with the `url()` functional\n   * notation and rewriting them to the equivalent absolute url using the\n   * `source` path provided by postcss. For performance reasons this function\n   * acts by side effect by modifying the given AST without doing a deep copy.\n   *\n   * @param {postcss#Root} ast PostCSS Root object.\n   * @return Modifies the ast param in place.\n   */\n  rewriteCssUrls(ast) {\n    const mergedCssPath = '/';\n    rewriteRules(ast.nodes, mergedCssPath);\n  }\n};\n\nif (typeof Profile !== 'undefined') {\n  [\n    'parseCss',\n    'stringifyCss',\n    'minifyCss',\n    'minifyCssAsync',\n    'mergeCssAsts',\n    'rewriteCssUrls',\n  ].forEach(funcName => {\n    CssTools[funcName] = Profile(`CssTools.${funcName}`, CssTools[funcName]);\n  });\n}\n\nexport { CssTools };\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nconst rewriteRules = (rules, mergedCssPath) => {\n  rules.forEach((rule) => {\n    // Recurse if there are sub-rules. An example:\n    //     @media (...) {\n    //         .rule { url(...); }\n    //     }\n    if (hasOwn.call(rule, 'nodes')) {\n      rewriteRules(rule.nodes, mergedCssPath);\n    }\n\n    const appDir = process.cwd();\n    const sourceFile = rule.source.input.file;\n    const sourceFileFromAppRoot =\n      sourceFile ? sourceFile.replace(appDir, '') : '';\n    let basePath = pathJoin('/', pathDirname(sourceFileFromAppRoot));\n\n    // Set the correct basePath based on how the linked asset will be served.\n    // XXX This is wrong. We are coupling the information about how files will\n    // be served by the web server to the information how they were stored\n    // originally on the filesystem in the project structure. Ideally, there\n    // should be some module that tells us precisely how each asset will be\n    // served but for now we are just assuming that everything that comes from\n    // a folder starting with \"/packages/\" is served on the same path as\n    // it was on the filesystem and everything else is served on root \"/\".\n    if (! basePath.match(/^\\/?packages\\//i)) {\n      basePath = \"/\";\n    }\n\n    let value = rule.value;\n\n    // Match css values containing some functional calls to `url(URI)` where\n    // URI is optionally quoted.\n    // Note that a css value can contains other elements, for instance:\n    //   background: top center url(\"background.png\") black;\n    // or even multiple url(), for instance for multiple backgrounds.\n    var cssUrlRegex = /url\\s*\\(\\s*(['\"]?)(.+?)\\1\\s*\\)/gi;\n    let parts;\n    while (parts = cssUrlRegex.exec(value)) {\n      const oldCssUrl = parts[0];\n      const quote = parts[1];\n      const resource = url.parse(parts[2]);\n\n      // We don't rewrite URLs starting with a protocol definition such as\n      // http, https, or data, or those with network-path references\n      // i.e. //img.domain.com/cat.gif\n      if (resource.protocol !== null ||\n          resource.href.startsWith('//') ||\n          resource.href.startsWith('#')) {\n        continue;\n      }\n\n      // Rewrite relative paths (that refers to the internal application tree)\n      // to absolute paths (addressable from the public build).\n      let absolutePath = isRelative(resource.path)\n        ? pathJoin(basePath, resource.path)\n        : resource.path;\n\n      if (resource.hash) {\n        absolutePath += resource.hash;\n      }\n\n      // We used to finish the rewriting process at the absolute path step\n      // above. But it didn't work in case the Meteor application was deployed\n      // under a sub-path (eg `ROOT_URL=http://localhost:3000/myapp meteor`)\n      // in which case the resources linked in the merged CSS file would miss\n      // the `myapp/` prefix. Since this path prefix is only known at launch\n      // time (rather than build time) we can't use absolute paths to link\n      // resources in the generated CSS.\n      //\n      // Instead we transform absolute paths to make them relative to the\n      // merged CSS, leaving to the browser the responsibility to calculate\n      // the final resource links (by adding the application deployment\n      // prefix, here `myapp/`, if applicable).\n      const relativeToMergedCss = pathRelative(mergedCssPath, absolutePath);\n      const newCssUrl = `url(${quote}${relativeToMergedCss}${quote})`;\n      value = value.replace(oldCssUrl, newCssUrl);\n    }\n\n    rule.value = value;\n  });\n};\n\nconst isRelative = path => path && path.charAt(0) !== '/';\n\n// These are duplicates of functions in tools/files.js, because we don't have\n// a good way of exporting them into packages.\n// XXX deduplicate files.js into a package at some point so that we can use it\n// in core\nconst toOSPath =\n  p => process.platform === 'win32' ? p.replace(/\\//g, '\\\\') : p;\nconst toStandardPath =\n  p => process.platform === 'win32' ? p.replace(/\\\\/g, '/') : p;\nconst pathJoin =\n  (a, b) => toStandardPath(path.join(toOSPath(a), toOSPath(b)));\nconst pathDirname =\n  p => toStandardPath(path.dirname(toOSPath(p)));\nconst pathRelative =\n  (p1, p2) => toStandardPath(path.relative(toOSPath(p1), toOSPath(p2)));\n"]}